After Depth Instrumentation: 
object PropositionalLogic {
  sealed abstract class Formula

  case class Literal(id: Int) extends Formula

  case class Or(lhs: Formula, rhs: Formula) extends Formula

  case class Implies(lhs: Formula, rhs: Formula) extends Formula

  case class Not(f: Formula) extends Formula

  case class And(lhs: Formula, rhs: Formula) extends Formula

  def isNNF(f : Formula) : Boolean = {(f match {
    case And(lhs, rhs) =>
      (isNNF(lhs) && isNNF(rhs))
    case Or(lhs, rhs) =>
      (isNNF(lhs) && isNNF(rhs))
    case Implies(lhs, rhs) =>
      (isNNF(lhs) && isNNF(rhs))
    case Not(Literal(_)) =>
      true
    case Not(_) =>
      false
    case Literal(_) =>
      true
    case _ =>
      false
  })} ensuring(res => true)

  def nnf(formula : Formula) : Formula = {(formula match {
    case And(lhs, rhs) =>
      And(nnf(lhs), nnf(rhs))
    case Or(lhs, rhs) =>
      Or(nnf(lhs), nnf(rhs))
    case Implies(lhs, rhs) =>
      Implies(nnf(lhs), nnf(rhs))
    case Not(And(lhs, rhs)) =>
      Or(nnf(Not(lhs)), nnf(Not(rhs)))
    case Not(Or(lhs, rhs)) =>
      And(nnf(Not(lhs)), nnf(Not(rhs)))
    case Not(Implies(lhs, rhs)) =>
      And(nnf(lhs), nnf(Not(rhs)))
    case Not(Not(f)) =>
      nnf(f)
    case Not(Literal(_)) =>
      formula
    case Literal(_) =>
      formula
    case _ =>
      formula
  })} ensuring(res => true)

  def simplify(f : Formula) : Formula = {(f match {
    case And(lhs, rhs) =>
      And(simplify(lhs), simplify(rhs))
    case Or(lhs, rhs) =>
      Or(simplify(lhs), simplify(rhs))
    case Implies(lhs, rhs) =>
      Or(Not(simplify(lhs)), simplify(rhs))
    case Not(f) =>
      Not(simplify(f))
    case Literal(_) =>
      f
  })} ensuring(res => true)

  def size(f : Formula) : Int = {(f match {
    case And(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Or(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Implies(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Not(f) =>
      (size(f) + 1)
    case Literal(_) =>
      1
  })}

  def isSimplified(f : Formula) : Boolean = {(f match {
    case And(lhs, rhs) =>
      (isSimplified(lhs) && isSimplified(rhs))
    case Or(lhs, rhs) =>
      (isSimplified(lhs) && isSimplified(rhs))
    case Implies(_, _) =>
      false
    case Not(f) =>
      isSimplified(f)
    case Literal(_) =>
      true
  })} ensuring(res => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: isNNF
Defined fun: nnf
Defined fun: simplify
Defined fun: size
Defined fun: isSimplified
Defined fun: max
FunMap: Map(isSimplified -> isSimplified, isNNF -> isNNF, size -> size, max -> max, simplify -> simplify, nnf -> nnf)
After Time Instrumentation: 
object PropositionalLogic {
  sealed abstract class Formula

  case class Literal(id: Int) extends Formula

  case class Or(lhs: Formula, rhs: Formula) extends Formula

  case class Implies(lhs: Formula, rhs: Formula) extends Formula

  case class Not(f: Formula) extends Formula

  case class And(lhs: Formula, rhs: Formula) extends Formula

  def isNNF(f : Formula) : (Boolean, Int) = {locally {
    val t35 = 1
    if (f.isInstanceOf[And]) {
      locally {
        val (e36: Boolean, t36: Int) = locally {
          val (e37: Boolean, t37: Int) = locally {
            val (e43: Boolean, t43: Int) = isNNF(f.lhs)
            (e43, (1 + (1 + t43)))
          }
          
          locally {
            val (e38: Boolean, t38: Int) = locally {
              val (e40: Boolean, t40: Int) = isNNF(f.rhs)
              (e40, (1 + (1 + t40)))
            }
            
            ((e37 && e38), (t38 + (t37 + 1)))
          }
          
        }
        
        (e36, (t35 + t36))
      }
      
    } else {
      locally {
        val (e45: Boolean, t45: Int) = locally {
          val t46 = 1
          if (f.isInstanceOf[Or]) {
            locally {
              val (e47: Boolean, t47: Int) = locally {
                val (e48: Boolean, t48: Int) = locally {
                  val (e54: Boolean, t54: Int) = isNNF(f.lhs)
                  (e54, (1 + (1 + t54)))
                }
                
                locally {
                  val (e49: Boolean, t49: Int) = locally {
                    val (e51: Boolean, t51: Int) = isNNF(f.rhs)
                    (e51, (1 + (1 + t51)))
                  }
                  
                  ((e48 && e49), (t49 + (t48 + 1)))
                }
                
              }
              
              (e47, (t46 + t47))
            }
            
          } else {
            locally {
              val (e56: Boolean, t56: Int) = locally {
                val t57 = 1
                if (f.isInstanceOf[Implies]) {
                  locally {
                    val (e58: Boolean, t58: Int) = locally {
                      val (e59: Boolean, t59: Int) = locally {
                        val (e65: Boolean, t65: Int) = isNNF(f.lhs)
                        (e65, (1 + (1 + t65)))
                      }
                      
                      locally {
                        val (e60: Boolean, t60: Int) = locally {
                          val (e62: Boolean, t62: Int) = isNNF(f.rhs)
                          (e62, (1 + (1 + t62)))
                        }
                        
                        ((e59 && e60), (t60 + (t59 + 1)))
                      }
                      
                    }
                    
                    (e58, (t57 + t58))
                  }
                  
                } else {
                  locally {
                    val (e67: Boolean, t67: Int) = locally {
                      val t68 = 4
                      if ((f.isInstanceOf[Not] && f.f.isInstanceOf[Literal])) {
                        (true, t68)
                      } else {
                        locally {
                          val (e70: Boolean, t70: Int) = locally {
                            val t71 = 1
                            if (f.isInstanceOf[Not]) {
                              (false, t71)
                            } else {
                              locally {
                                val (e73: Boolean, t73: Int) = locally {
                                  val t74 = 1
                                  if (f.isInstanceOf[Literal]) {
                                    (true, t74)
                                  } else {
                                    (false, t74)
                                  }
                                }
                                
                                (e73, (t71 + t73))
                              }
                              
                            }
                          }
                          
                          (e70, (t68 + t70))
                        }
                        
                      }
                    }
                    
                    (e67, (t57 + t67))
                  }
                  
                }
              }
              
              (e56, (t46 + t56))
            }
            
          }
        }
        
        (e45, (t35 + t45))
      }
      
    }
  }
  } ensuring(res10 => true)

  def nnf(formula : Formula) : (Formula, Int) = {locally {
    val t132 = 1
    if (formula.isInstanceOf[And]) {
      locally {
        val (e133: And, t133: Int) = locally {
          val (e134: Formula, t134: Int) = locally {
            val (e140: Formula, t140: Int) = nnf(formula.lhs)
            (e140, (1 + (1 + t140)))
          }
          
          locally {
            val (e135: Formula, t135: Int) = locally {
              val (e137: Formula, t137: Int) = nnf(formula.rhs)
              (e137, (1 + (1 + t137)))
            }
            
            (And(e134, e135), (t135 + (t134 + 1)))
          }
          
        }
        
        (e133, (t132 + t133))
      }
      
    } else {
      locally {
        val (e142: Formula, t142: Int) = locally {
          val t143 = 1
          if (formula.isInstanceOf[Or]) {
            locally {
              val (e144: Or, t144: Int) = locally {
                val (e145: Formula, t145: Int) = locally {
                  val (e151: Formula, t151: Int) = nnf(formula.lhs)
                  (e151, (1 + (1 + t151)))
                }
                
                locally {
                  val (e146: Formula, t146: Int) = locally {
                    val (e148: Formula, t148: Int) = nnf(formula.rhs)
                    (e148, (1 + (1 + t148)))
                  }
                  
                  (Or(e145, e146), (t146 + (t145 + 1)))
                }
                
              }
              
              (e144, (t143 + t144))
            }
            
          } else {
            locally {
              val (e153: Formula, t153: Int) = locally {
                val t154 = 1
                if (formula.isInstanceOf[Implies]) {
                  locally {
                    val (e155: Implies, t155: Int) = locally {
                      val (e156: Formula, t156: Int) = locally {
                        val (e162: Formula, t162: Int) = nnf(formula.lhs)
                        (e162, (1 + (1 + t162)))
                      }
                      
                      locally {
                        val (e157: Formula, t157: Int) = locally {
                          val (e159: Formula, t159: Int) = nnf(formula.rhs)
                          (e159, (1 + (1 + t159)))
                        }
                        
                        (Implies(e156, e157), (t157 + (t156 + 1)))
                      }
                      
                    }
                    
                    (e155, (t154 + t155))
                  }
                  
                } else {
                  locally {
                    val (e164: Formula, t164: Int) = locally {
                      val t165 = 4
                      if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[And])) {
                        locally {
                          val (e166: Or, t166: Int) = locally {
                            val (e167: Formula, t167: Int) = locally {
                              val (e175: Formula, t175: Int) = nnf(Not(formula.f.lhs))
                              (e175, (3 + (1 + t175)))
                            }
                            
                            locally {
                              val (e168: Formula, t168: Int) = locally {
                                val (e170: Formula, t170: Int) = nnf(Not(formula.f.rhs))
                                (e170, (3 + (1 + t170)))
                              }
                              
                              (Or(e167, e168), (t168 + (t167 + 1)))
                            }
                            
                          }
                          
                          (e166, (t165 + t166))
                        }
                        
                      } else {
                        locally {
                          val (e179: Formula, t179: Int) = locally {
                            val t180 = 4
                            if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Or])) {
                              locally {
                                val (e181: And, t181: Int) = locally {
                                  val (e182: Formula, t182: Int) = locally {
                                    val (e190: Formula, t190: Int) = nnf(Not(formula.f.lhs))
                                    (e190, (3 + (1 + t190)))
                                  }
                                  
                                  locally {
                                    val (e183: Formula, t183: Int) = locally {
                                      val (e185: Formula, t185: Int) = nnf(Not(formula.f.rhs))
                                      (e185, (3 + (1 + t185)))
                                    }
                                    
                                    (And(e182, e183), (t183 + (t182 + 1)))
                                  }
                                  
                                }
                                
                                (e181, (t180 + t181))
                              }
                              
                            } else {
                              locally {
                                val (e194: Formula, t194: Int) = locally {
                                  val t195 = 4
                                  if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Implies])) {
                                    locally {
                                      val (e196: And, t196: Int) = locally {
                                        val (e197: Formula, t197: Int) = locally {
                                          val (e205: Formula, t205: Int) = nnf(formula.f.lhs)
                                          (e205, (2 + (1 + t205)))
                                        }
                                        
                                        locally {
                                          val (e198: Formula, t198: Int) = locally {
                                            val (e200: Formula, t200: Int) = nnf(Not(formula.f.rhs))
                                            (e200, (3 + (1 + t200)))
                                          }
                                          
                                          (And(e197, e198), (t198 + (t197 + 1)))
                                        }
                                        
                                      }
                                      
                                      (e196, (t195 + t196))
                                    }
                                    
                                  } else {
                                    locally {
                                      val (e208: Formula, t208: Int) = locally {
                                        val t209 = 4
                                        if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Not])) {
                                          locally {
                                            val (e210: Formula, t210: Int) = locally {
                                              val (e212: Formula, t212: Int) = nnf(formula.f.f)
                                              (e212, (2 + (1 + t212)))
                                            }
                                            
                                            (e210, (t209 + t210))
                                          }
                                          
                                        } else {
                                          locally {
                                            val (e215: Formula, t215: Int) = locally {
                                              val t216 = 4
                                              if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Literal])) {
                                                (formula, t216)
                                              } else {
                                                locally {
                                                  val (e218: Formula, t218: Int) = locally {
                                                    val t219 = 1
                                                    if (formula.isInstanceOf[Literal]) {
                                                      (formula, t219)
                                                    } else {
                                                      (formula, t219)
                                                    }
                                                  }
                                                  
                                                  (e218, (t216 + t218))
                                                }
                                                
                                              }
                                            }
                                            
                                            (e215, (t209 + t215))
                                          }
                                          
                                        }
                                      }
                                      
                                      (e208, (t195 + t208))
                                    }
                                    
                                  }
                                }
                                
                                (e194, (t180 + t194))
                              }
                              
                            }
                          }
                          
                          (e179, (t165 + t179))
                        }
                        
                      }
                    }
                    
                    (e164, (t154 + t164))
                  }
                  
                }
              }
              
              (e153, (t143 + t153))
            }
            
          }
        }
        
        (e142, (t132 + t142))
      }
      
    }
  }
  } ensuring(res12 => true)

  def simplify(f : Formula) : (Formula, Int) = {locally {
    val t87 = 1
    if (f.isInstanceOf[And]) {
      locally {
        val (e88: And, t88: Int) = locally {
          val (e89: Formula, t89: Int) = locally {
            val (e95: Formula, t95: Int) = simplify(f.lhs)
            (e95, (1 + (1 + t95)))
          }
          
          locally {
            val (e90: Formula, t90: Int) = locally {
              val (e92: Formula, t92: Int) = simplify(f.rhs)
              (e92, (1 + (1 + t92)))
            }
            
            (And(e89, e90), (t90 + (t89 + 1)))
          }
          
        }
        
        (e88, (t87 + t88))
      }
      
    } else {
      locally {
        val (e97: Formula, t97: Int) = locally {
          val t98 = 1
          if (f.isInstanceOf[Or]) {
            locally {
              val (e99: Or, t99: Int) = locally {
                val (e100: Formula, t100: Int) = locally {
                  val (e106: Formula, t106: Int) = simplify(f.lhs)
                  (e106, (1 + (1 + t106)))
                }
                
                locally {
                  val (e101: Formula, t101: Int) = locally {
                    val (e103: Formula, t103: Int) = simplify(f.rhs)
                    (e103, (1 + (1 + t103)))
                  }
                  
                  (Or(e100, e101), (t101 + (t100 + 1)))
                }
                
              }
              
              (e99, (t98 + t99))
            }
            
          } else {
            locally {
              val (e108: Formula, t108: Int) = locally {
                val t109 = 1
                if (f.isInstanceOf[Implies]) {
                  locally {
                    val (e110: Or, t110: Int) = locally {
                      val (e111: Not, t111: Int) = locally {
                        val (e116: Formula, t116: Int) = locally {
                          val (e118: Formula, t118: Int) = simplify(f.lhs)
                          (e118, (1 + (1 + t118)))
                        }
                        
                        (Not(e116), (t116 + 1))
                      }
                      
                      locally {
                        val (e112: Formula, t112: Int) = locally {
                          val (e114: Formula, t114: Int) = simplify(f.rhs)
                          (e114, (1 + (1 + t114)))
                        }
                        
                        (Or(e111, e112), (t112 + (t111 + 1)))
                      }
                      
                    }
                    
                    (e110, (t109 + t110))
                  }
                  
                } else {
                  locally {
                    val (e120: Formula, t120: Int) = locally {
                      val t121 = 1
                      if (f.isInstanceOf[Not]) {
                        locally {
                          val (e122: Not, t122: Int) = locally {
                            val (e123: Formula, t123: Int) = locally {
                              val (e125: Formula, t125: Int) = simplify(f.f)
                              (e125, (1 + (1 + t125)))
                            }
                            
                            (Not(e123), (t123 + 1))
                          }
                          
                          (e122, (t121 + t122))
                        }
                        
                      } else {
                        (f, t121)
                      }
                    }
                    
                    (e120, (t109 + t120))
                  }
                  
                }
              }
              
              (e108, (t98 + t108))
            }
            
          }
        }
        
        (e97, (t87 + t97))
      }
      
    }
  }
  } ensuring(res11 => true)

  def size(f : Formula) : Int = {(f match {
    case And(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Or(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Implies(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Not(f) =>
      (size(f) + 1)
    case Literal(_) =>
      1
  })}

  def isSimplified(f : Formula) : (Boolean, Int) = {locally {
    val t = 1
    if (f.isInstanceOf[And]) {
      locally {
        val (e1: Boolean, t1: Int) = locally {
          val (e2: Boolean, t2: Int) = locally {
            val (e8: Boolean, t8: Int) = isSimplified(f.lhs)
            (e8, (1 + (1 + t8)))
          }
          
          locally {
            val (e3: Boolean, t3: Int) = locally {
              val (e5: Boolean, t5: Int) = isSimplified(f.rhs)
              (e5, (1 + (1 + t5)))
            }
            
            ((e2 && e3), (t3 + (t2 + 1)))
          }
          
        }
        
        (e1, (t + t1))
      }
      
    } else {
      locally {
        val (e10: Boolean, t10: Int) = locally {
          val t11 = 1
          if (f.isInstanceOf[Or]) {
            locally {
              val (e12: Boolean, t12: Int) = locally {
                val (e13: Boolean, t13: Int) = locally {
                  val (e19: Boolean, t19: Int) = isSimplified(f.lhs)
                  (e19, (1 + (1 + t19)))
                }
                
                locally {
                  val (e14: Boolean, t14: Int) = locally {
                    val (e16: Boolean, t16: Int) = isSimplified(f.rhs)
                    (e16, (1 + (1 + t16)))
                  }
                  
                  ((e13 && e14), (t14 + (t13 + 1)))
                }
                
              }
              
              (e12, (t11 + t12))
            }
            
          } else {
            locally {
              val (e21: Boolean, t21: Int) = locally {
                val t22 = 1
                if (f.isInstanceOf[Implies]) {
                  (false, t22)
                } else {
                  locally {
                    val (e24: Boolean, t24: Int) = locally {
                      val t25 = 1
                      if (f.isInstanceOf[Not]) {
                        locally {
                          val (e26: Boolean, t26: Int) = locally {
                            val (e28: Boolean, t28: Int) = isSimplified(f.f)
                            (e28, (1 + (1 + t28)))
                          }
                          
                          (e26, (t25 + t26))
                        }
                        
                      } else {
                        (true, t25)
                      }
                    }
                    
                    (e24, (t22 + t24))
                  }
                  
                }
              }
              
              (e21, (t11 + t21))
            }
            
          }
        }
        
        (e10, (t + t10))
      }
      
    }
  }
  } ensuring(res9 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object PropositionalLogic {
  sealed abstract class Formula

  case class Literal(id: Int) extends Formula

  case class Or(lhs: Formula, rhs: Formula) extends Formula

  case class Implies(lhs: Formula, rhs: Formula) extends Formula

  case class Not(f: Formula) extends Formula

  case class And(lhs: Formula, rhs: Formula) extends Formula

  def isNNF(f : Formula) : (Boolean, Int) = {if (f.isInstanceOf[And]) {
    locally {
      val (e36: Boolean, t36: Int) = locally {
        val (e37: Boolean, t37: Int) = locally {
          val (e43: Boolean, t43: Int) = isNNF(f.lhs)
          (e43, (1 + (1 + t43)))
        }
        
        locally {
          val (e38: Boolean, t38: Int) = locally {
            val (e40: Boolean, t40: Int) = isNNF(f.rhs)
            (e40, (1 + (1 + t40)))
          }
          
          ((e37 && e38), (t38 + (t37 + 1)))
        }
        
      }
      
      (e36, (1 + t36))
    }
    
  } else {
    locally {
      val (e45: Boolean, t45: Int) = if (f.isInstanceOf[Or]) {
        locally {
          val (e47: Boolean, t47: Int) = locally {
            val (e48: Boolean, t48: Int) = locally {
              val (e54: Boolean, t54: Int) = isNNF(f.lhs)
              (e54, (1 + (1 + t54)))
            }
            
            locally {
              val (e49: Boolean, t49: Int) = locally {
                val (e51: Boolean, t51: Int) = isNNF(f.rhs)
                (e51, (1 + (1 + t51)))
              }
              
              ((e48 && e49), (t49 + (t48 + 1)))
            }
            
          }
          
          (e47, (1 + t47))
        }
        
      } else {
        locally {
          val (e56: Boolean, t56: Int) = if (f.isInstanceOf[Implies]) {
            locally {
              val (e58: Boolean, t58: Int) = locally {
                val (e59: Boolean, t59: Int) = locally {
                  val (e65: Boolean, t65: Int) = isNNF(f.lhs)
                  (e65, (1 + (1 + t65)))
                }
                
                locally {
                  val (e60: Boolean, t60: Int) = locally {
                    val (e62: Boolean, t62: Int) = isNNF(f.rhs)
                    (e62, (1 + (1 + t62)))
                  }
                  
                  ((e59 && e60), (t60 + (t59 + 1)))
                }
                
              }
              
              (e58, (1 + t58))
            }
            
          } else {
            locally {
              val (e67: Boolean, t67: Int) = if ((f.isInstanceOf[Not] && f.f.isInstanceOf[Literal])) {
                (true, 4)
              } else {
                locally {
                  val (e70: Boolean, t70: Int) = if (f.isInstanceOf[Not]) {
                    (false, 1)
                  } else {
                    locally {
                      val (e73: Boolean, t73: Int) = if (f.isInstanceOf[Literal]) {
                        (true, 1)
                      } else {
                        (false, 1)
                      }
                      (e73, (1 + t73))
                    }
                    
                  }
                  (e70, (4 + t70))
                }
                
              }
              (e67, (1 + t67))
            }
            
          }
          (e56, (1 + t56))
        }
        
      }
      (e45, (1 + t45))
    }
    
  }} ensuring(res10 => true)

  def nnf(formula : Formula) : (Formula, Int) = {if (formula.isInstanceOf[And]) {
    locally {
      val (e133: And, t133: Int) = locally {
        val (e134: Formula, t134: Int) = locally {
          val (e140: Formula, t140: Int) = nnf(formula.lhs)
          (e140, (1 + (1 + t140)))
        }
        
        locally {
          val (e135: Formula, t135: Int) = locally {
            val (e137: Formula, t137: Int) = nnf(formula.rhs)
            (e137, (1 + (1 + t137)))
          }
          
          (And(e134, e135), (t135 + (t134 + 1)))
        }
        
      }
      
      (e133, (1 + t133))
    }
    
  } else {
    locally {
      val (e142: Formula, t142: Int) = if (formula.isInstanceOf[Or]) {
        locally {
          val (e144: Or, t144: Int) = locally {
            val (e145: Formula, t145: Int) = locally {
              val (e151: Formula, t151: Int) = nnf(formula.lhs)
              (e151, (1 + (1 + t151)))
            }
            
            locally {
              val (e146: Formula, t146: Int) = locally {
                val (e148: Formula, t148: Int) = nnf(formula.rhs)
                (e148, (1 + (1 + t148)))
              }
              
              (Or(e145, e146), (t146 + (t145 + 1)))
            }
            
          }
          
          (e144, (1 + t144))
        }
        
      } else {
        locally {
          val (e153: Formula, t153: Int) = if (formula.isInstanceOf[Implies]) {
            locally {
              val (e155: Implies, t155: Int) = locally {
                val (e156: Formula, t156: Int) = locally {
                  val (e162: Formula, t162: Int) = nnf(formula.lhs)
                  (e162, (1 + (1 + t162)))
                }
                
                locally {
                  val (e157: Formula, t157: Int) = locally {
                    val (e159: Formula, t159: Int) = nnf(formula.rhs)
                    (e159, (1 + (1 + t159)))
                  }
                  
                  (Implies(e156, e157), (t157 + (t156 + 1)))
                }
                
              }
              
              (e155, (1 + t155))
            }
            
          } else {
            locally {
              val (e164: Formula, t164: Int) = if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[And])) {
                locally {
                  val (e166: Or, t166: Int) = locally {
                    val (e167: Formula, t167: Int) = locally {
                      val (e175: Formula, t175: Int) = nnf(Not(formula.f.lhs))
                      (e175, (3 + (1 + t175)))
                    }
                    
                    locally {
                      val (e168: Formula, t168: Int) = locally {
                        val (e170: Formula, t170: Int) = nnf(Not(formula.f.rhs))
                        (e170, (3 + (1 + t170)))
                      }
                      
                      (Or(e167, e168), (t168 + (t167 + 1)))
                    }
                    
                  }
                  
                  (e166, (4 + t166))
                }
                
              } else {
                locally {
                  val (e179: Formula, t179: Int) = if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Or])) {
                    locally {
                      val (e181: And, t181: Int) = locally {
                        val (e182: Formula, t182: Int) = locally {
                          val (e190: Formula, t190: Int) = nnf(Not(formula.f.lhs))
                          (e190, (3 + (1 + t190)))
                        }
                        
                        locally {
                          val (e183: Formula, t183: Int) = locally {
                            val (e185: Formula, t185: Int) = nnf(Not(formula.f.rhs))
                            (e185, (3 + (1 + t185)))
                          }
                          
                          (And(e182, e183), (t183 + (t182 + 1)))
                        }
                        
                      }
                      
                      (e181, (4 + t181))
                    }
                    
                  } else {
                    locally {
                      val (e194: Formula, t194: Int) = if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Implies])) {
                        locally {
                          val (e196: And, t196: Int) = locally {
                            val (e197: Formula, t197: Int) = locally {
                              val (e205: Formula, t205: Int) = nnf(formula.f.lhs)
                              (e205, (2 + (1 + t205)))
                            }
                            
                            locally {
                              val (e198: Formula, t198: Int) = locally {
                                val (e200: Formula, t200: Int) = nnf(Not(formula.f.rhs))
                                (e200, (3 + (1 + t200)))
                              }
                              
                              (And(e197, e198), (t198 + (t197 + 1)))
                            }
                            
                          }
                          
                          (e196, (4 + t196))
                        }
                        
                      } else {
                        locally {
                          val (e208: Formula, t208: Int) = if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Not])) {
                            locally {
                              val (e210: Formula, t210: Int) = locally {
                                val (e212: Formula, t212: Int) = nnf(formula.f.f)
                                (e212, (2 + (1 + t212)))
                              }
                              
                              (e210, (4 + t210))
                            }
                            
                          } else {
                            locally {
                              val (e215: Formula, t215: Int) = if ((formula.isInstanceOf[Not] && formula.f.isInstanceOf[Literal])) {
                                (formula, 4)
                              } else {
                                locally {
                                  val (e218: Formula, t218: Int) = if (formula.isInstanceOf[Literal]) {
                                    (formula, 1)
                                  } else {
                                    (formula, 1)
                                  }
                                  (e218, (4 + t218))
                                }
                                
                              }
                              (e215, (4 + t215))
                            }
                            
                          }
                          (e208, (4 + t208))
                        }
                        
                      }
                      (e194, (4 + t194))
                    }
                    
                  }
                  (e179, (4 + t179))
                }
                
              }
              (e164, (1 + t164))
            }
            
          }
          (e153, (1 + t153))
        }
        
      }
      (e142, (1 + t142))
    }
    
  }} ensuring(res12 => true)

  def simplify(f : Formula) : (Formula, Int) = {if (f.isInstanceOf[And]) {
    locally {
      val (e88: And, t88: Int) = locally {
        val (e89: Formula, t89: Int) = locally {
          val (e95: Formula, t95: Int) = simplify(f.lhs)
          (e95, (1 + (1 + t95)))
        }
        
        locally {
          val (e90: Formula, t90: Int) = locally {
            val (e92: Formula, t92: Int) = simplify(f.rhs)
            (e92, (1 + (1 + t92)))
          }
          
          (And(e89, e90), (t90 + (t89 + 1)))
        }
        
      }
      
      (e88, (1 + t88))
    }
    
  } else {
    locally {
      val (e97: Formula, t97: Int) = if (f.isInstanceOf[Or]) {
        locally {
          val (e99: Or, t99: Int) = locally {
            val (e100: Formula, t100: Int) = locally {
              val (e106: Formula, t106: Int) = simplify(f.lhs)
              (e106, (1 + (1 + t106)))
            }
            
            locally {
              val (e101: Formula, t101: Int) = locally {
                val (e103: Formula, t103: Int) = simplify(f.rhs)
                (e103, (1 + (1 + t103)))
              }
              
              (Or(e100, e101), (t101 + (t100 + 1)))
            }
            
          }
          
          (e99, (1 + t99))
        }
        
      } else {
        locally {
          val (e108: Formula, t108: Int) = if (f.isInstanceOf[Implies]) {
            locally {
              val (e110: Or, t110: Int) = locally {
                val (e111: Not, t111: Int) = locally {
                  val (e116: Formula, t116: Int) = locally {
                    val (e118: Formula, t118: Int) = simplify(f.lhs)
                    (e118, (1 + (1 + t118)))
                  }
                  
                  (Not(e116), (t116 + 1))
                }
                
                locally {
                  val (e112: Formula, t112: Int) = locally {
                    val (e114: Formula, t114: Int) = simplify(f.rhs)
                    (e114, (1 + (1 + t114)))
                  }
                  
                  (Or(e111, e112), (t112 + (t111 + 1)))
                }
                
              }
              
              (e110, (1 + t110))
            }
            
          } else {
            locally {
              val (e120: Formula, t120: Int) = if (f.isInstanceOf[Not]) {
                locally {
                  val (e122: Not, t122: Int) = locally {
                    val (e123: Formula, t123: Int) = locally {
                      val (e125: Formula, t125: Int) = simplify(f.f)
                      (e125, (1 + (1 + t125)))
                    }
                    
                    (Not(e123), (t123 + 1))
                  }
                  
                  (e122, (1 + t122))
                }
                
              } else {
                (f, 1)
              }
              (e120, (1 + t120))
            }
            
          }
          (e108, (1 + t108))
        }
        
      }
      (e97, (1 + t97))
    }
    
  }} ensuring(res11 => true)

  def size(f : Formula) : Int = {(f match {
    case And(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Or(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Implies(lhs, rhs) =>
      ((size(lhs) + size(rhs)) + 1)
    case Not(f) =>
      (size(f) + 1)
    case Literal(_) =>
      1
  })}

  def isSimplified(f : Formula) : (Boolean, Int) = {if (f.isInstanceOf[And]) {
    locally {
      val (e1: Boolean, t1: Int) = locally {
        val (e2: Boolean, t2: Int) = locally {
          val (e8: Boolean, t8: Int) = isSimplified(f.lhs)
          (e8, (1 + (1 + t8)))
        }
        
        locally {
          val (e3: Boolean, t3: Int) = locally {
            val (e5: Boolean, t5: Int) = isSimplified(f.rhs)
            (e5, (1 + (1 + t5)))
          }
          
          ((e2 && e3), (t3 + (t2 + 1)))
        }
        
      }
      
      (e1, (1 + t1))
    }
    
  } else {
    locally {
      val (e10: Boolean, t10: Int) = if (f.isInstanceOf[Or]) {
        locally {
          val (e12: Boolean, t12: Int) = locally {
            val (e13: Boolean, t13: Int) = locally {
              val (e19: Boolean, t19: Int) = isSimplified(f.lhs)
              (e19, (1 + (1 + t19)))
            }
            
            locally {
              val (e14: Boolean, t14: Int) = locally {
                val (e16: Boolean, t16: Int) = isSimplified(f.rhs)
                (e16, (1 + (1 + t16)))
              }
              
              ((e13 && e14), (t14 + (t13 + 1)))
            }
            
          }
          
          (e12, (1 + t12))
        }
        
      } else {
        locally {
          val (e21: Boolean, t21: Int) = if (f.isInstanceOf[Implies]) {
            (false, 1)
          } else {
            locally {
              val (e24: Boolean, t24: Int) = if (f.isInstanceOf[Not]) {
                locally {
                  val (e26: Boolean, t26: Int) = locally {
                    val (e28: Boolean, t28: Int) = isSimplified(f.f)
                    (e28, (1 + (1 + t28)))
                  }
                  
                  (e26, (1 + t26))
                }
                
              } else {
                (true, 1)
              }
              (e24, (1 + t24))
            }
            
          }
          (e21, (1 + t21))
        }
        
      }
      (e10, (1 + t10))
    }
    
  }} ensuring(res9 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: isNNF template --> (res10._2 ≤ ((a?3 * size(f)) + b?3))
Function: nnf template --> (res12._2 ≤ ((a?2 * size(formula)) + b?2))
Function: simplify template --> (res11._2 ≤ ((a? * size(f)) + b?))
Function: isSimplified template --> (res9._2 ≤ ((a?1 * size(f)) + b?1))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(size, isSimplified, nnf, simplify, isNNF)
[[34m Info  [0m] - considering function isSimplified...
[[34m Info  [0m] Body: if (f.isInstanceOf[And])
            (let (e1,t1 := (let (e2,t2 := (let (e8,t8 := isSimplified(f.lhs)) in
              (e8, (1 + (1 + t8))))) in
              (let (e3,t3 := (let (e5,t5 := isSimplified(f.rhs)) in
                (e5, (1 + (1 + t5))))) in
                ((e2 ∧ e3), (t3 + (t2 + 1)))))) in
              (e1, (1 + t1)))
          else
            (let (e10,t10 := if (f.isInstanceOf[Or])
              (let (e12,t12 := (let (e13,t13 := (let (e19,t19 := isSimplified(f.lhs)) in
                (e19, (1 + (1 + t19))))) in
                (let (e14,t14 := (let (e16,t16 := isSimplified(f.rhs)) in
                  (e16, (1 + (1 + t16))))) in
                  ((e13 ∧ e14), (t14 + (t13 + 1)))))) in
                (e12, (1 + t12)))
            else
              (let (e21,t21 := if (f.isInstanceOf[Implies])
                (false, 1)
              else
                (let (e24,t24 := if (f.isInstanceOf[Not])
                  (let (e26,t26 := (let (e28,t28 := isSimplified(f.f)) in
                    (e28, (1 + (1 + t28))))) in
                    (e26, (1 + t26)))
                else
                  (true, 1)) in
                  (e24, (1 + t24)))) in
                (e21, (1 + t21)))) in
              (e10, (1 + t10)))
[[34m Info  [0m] Post: true
falttened Body: ((res9 == ifres) && ((ci && (ci == f.isInstanceOf[And]) && (ifres == tp) && (arg == (1 + t1)) && (tp == (e1, arg)) && (!(e8) || (ts && (ts == tres1._1))) && ((!(ts1) && (ts1 == tres1._1)) || e8) && (t3 == (1 + (1 + t5))) && (t1 == (t3 + (t2 + 1))) && (!(e1) || (e2 && e3)) && (!(e2) || !(e3) || e1) && (!(e3) || e5) && (!(e5) || e3) && (!(e5) || (ts2 && (ts2 == tres._1))) && ((!(ts3) && (ts3 == tres._1)) || e5) && (tres == r1) && (cs == f.rhs) && (r1 == isSimplified(cs)) && (t2 == (1 + (1 + t8))) && (tres1 == r2) && (cs1 == f.lhs) && (r2 == isSimplified(cs1)) && (!(e2) || e8) && (!(e8) || e2) && (t8 == ts4) && (ts4 == tres1._2) && (t5 == ts5) && (ts5 == tres._2)) || (!(ci1) && (ci1 == f.isInstanceOf[And]) && (ifres == tp1) && (arg1 == (1 + t10)) && (tp1 == (e10, arg1)) && ((ci2 && (ci2 == f.isInstanceOf[Or]) && (ifres1 == tp2) && (arg2 == (1 + t12)) && (tp2 == (e12, arg2)) && (tres2 == r3) && (cs2 == f.rhs) && (r3 == isSimplified(cs2)) && (!(e12) || (e13 && e14)) && (!(e13) || !(e14) || e12) && (!(e16) || (ts6 && (ts6 == tres2._1))) && ((!(ts7) && (ts7 == tres2._1)) || e16) && (t14 == (1 + (1 + t16))) && (t12 == (t14 + (t13 + 1))) && (t19 == ts8) && (ts8 == tres3._2) && (tres3 == r4) && (cs3 == f.lhs) && (r4 == isSimplified(cs3)) && (!(e19) || (ts9 && (ts9 == tres3._1))) && ((!(ts10) && (ts10 == tres3._1)) || e19) && (!(e13) || e19) && (!(e19) || e13) && (!(e14) || e16) && (!(e16) || e14) && (t16 == ts11) && (ts11 == tres2._2) && (t13 == (1 + (1 + t19)))) || (!(ci3) && (ci3 == f.isInstanceOf[Or]) && (ifres1 == tp3) && (arg3 == (1 + t21)) && (tp3 == (e21, arg3)) && ((ci4 && (ci4 == f.isInstanceOf[Implies]) && (ifres2 == tp4) && !(arg4) && (arg5 == 1) && (tp4 == (arg4, arg5))) || (!(ci5) && (ci5 == f.isInstanceOf[Implies]) && (ifres2 == tp5) && (arg6 == (1 + t24)) && (tp5 == (e24, arg6)) && ((ci6 && (ci6 == f.isInstanceOf[Not]) && (ifres3 == tp6) && (arg7 == (1 + t26)) && (tp6 == (e26, arg7)) && (tres4 == r5) && (cs4 == f.f) && (r5 == isSimplified(cs4)) && (!(e26) || e28) && (!(e28) || e26) && (!(e28) || (ts12 && (ts12 == tres4._1))) && ((!(ts13) && (ts13 == tres4._1)) || e28) && (t28 == ts14) && (ts14 == tres4._2) && (t26 == (1 + (1 + t28)))) || (!(ci7) && (ci7 == f.isInstanceOf[Not]) && (ifres3 == tp7) && arg8 && (arg9 == 1) && (tp7 == (arg8, arg9)))) && (!(e24) || (ts15 && (ts15 == ifres3._1))) && ((!(ts16) && (ts16 == ifres3._1)) || e24) && (t24 == ts17) && (ts17 == ifres3._2))) && (!(e21) || (ts18 && (ts18 == ifres2._1))) && ((!(ts19) && (ts19 == ifres2._1)) || e21) && (t21 == ts20) && (ts20 == ifres2._2))) && (!(e10) || (ts21 && (ts21 == ifres1._1))) && ((!(ts22) && (ts22 == ifres1._1)) || e10) && (t10 == ts23) && (ts23 == ifres1._2))))
Flattened Post: ((ts24 > ((a?1 * r6) + b?1)) && (ts24 == res9._2) && (r6 == size(f)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isSimplified-->((((0 * size(f)) + (1 * res9._2)) + 0) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 11 + 0
solving...
solved... in 0.009s
candidate Invariants
isSimplified-->((((1 * res9._2) + (0 * size(f))) + -6) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 38
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 15 + 11
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/6
Unrolled calls: Set((r6 == size(f)))
Creating VC for size
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function size : (((a?5 * #res) + a?4) ≤ 0)
Unrolling (r6 == size(f))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isSimplified-->((((0 * size(f)) + (1 * res9._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 21 + 0
solving...
solved... in 0.01s
candidate Invariants
isSimplified-->((((0 * size(f)) + (2 * res9._2)) + -1) ≤ 0)
size-->(((0 * #res) + 31) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 21
solving...
solved... in 0.009s
candidate Invariants
isSimplified-->((((0 * size(f)) + (2 * res9._2)) + 15) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 13 + 29
solving...
solved... in 0.015s
candidate Invariants
isSimplified-->((((1 * res9._2) + (-7 * size(f))) + 2) ≤ 0)
size-->(((-16 * #res) + 1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 42
solving...
solved... in 0.012s
candidate Invariants
isSimplified-->((((-7 * size(f)) + (1 * res9._2)) + 2) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 32
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 12 + 50
solving...
solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/24
Unrolled calls: Set((r27 == size(cs3)), (r26 == size(cs2)))
Unrolling (r27 == size(cs3))
Unrolling (r26 == size(cs2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isSimplified-->((((0 * size(f)) + (1 * res9._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 45
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 23 + 0
solving...
solved... in 0.007s
candidate Invariants
isSimplified-->((((0 * size(f)) + (2 * res9._2)) + 1) ≤ 0)
size-->(((0 * #res) + 7) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 23
solving...
solved... in 0.009s
candidate Invariants
isSimplified-->((((16 * size(f)) + (2 * res9._2)) + 67) ≤ 0)
size-->(((-1 * #res) + -2) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 7
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 25 + 31
solving...
solved... in 0.014s
candidate Invariants
isSimplified-->((((2 * res9._2) + (-12 * size(f))) + 3) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Nesting level: a?1-->1
Nesting level: b?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimizing variable: b?1 Initial upperbound: -1
Found new lower bound: -2
Minimization complete...
candidate Invariants
isSimplified-->((((1 * res9._2) + (-5 * size(f))) + 1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Function: isSimplified--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 22 + 56
solving...
solved... in 0.021s
candidate Invariants
isSimplified-->((((-6 * size(f)) + (1 * res9._2)) + 1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Nesting level: a?1-->1
Nesting level: b?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new lower bound: 5
Minimizing variable: b?1 Initial upperbound: -1
Found new upper bound: -2
Found new lower bound: -4
Found new lower bound: -3
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: isSimplified --> ((((-6 * size(f)) + (1 * res9._2)) + 2) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * #res) + 0) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function nnf...
[[34m Info  [0m] Body: if (formula.isInstanceOf[And])
            (let (e133,t133 := (let (e134,t134 := (let (e140,t140 := nnf(formula.lhs)) in
              (e140, (1 + (1 + t140))))) in
              (let (e135,t135 := (let (e137,t137 := nnf(formula.rhs)) in
                (e137, (1 + (1 + t137))))) in
                (And(e134, e135), (t135 + (t134 + 1)))))) in
              (e133, (1 + t133)))
          else
            (let (e142,t142 := if (formula.isInstanceOf[Or])
              (let (e144,t144 := (let (e145,t145 := (let (e151,t151 := nnf(formula.lhs)) in
                (e151, (1 + (1 + t151))))) in
                (let (e146,t146 := (let (e148,t148 := nnf(formula.rhs)) in
                  (e148, (1 + (1 + t148))))) in
                  (Or(e145, e146), (t146 + (t145 + 1)))))) in
                (e144, (1 + t144)))
            else
              (let (e153,t153 := if (formula.isInstanceOf[Implies])
                (let (e155,t155 := (let (e156,t156 := (let (e162,t162 := nnf(formula.lhs)) in
                  (e162, (1 + (1 + t162))))) in
                  (let (e157,t157 := (let (e159,t159 := nnf(formula.rhs)) in
                    (e159, (1 + (1 + t159))))) in
                    (Implies(e156, e157), (t157 + (t156 + 1)))))) in
                  (e155, (1 + t155)))
              else
                (let (e164,t164 := if ((formula.isInstanceOf[Not] ∧ formula.f.isInstanceOf[And]))
                  (let (e166,t166 := (let (e167,t167 := (let (e175,t175 := nnf(Not(formula.f.lhs))) in
                    (e175, (3 + (1 + t175))))) in
                    (let (e168,t168 := (let (e170,t170 := nnf(Not(formula.f.rhs))) in
                      (e170, (3 + (1 + t170))))) in
                      (Or(e167, e168), (t168 + (t167 + 1)))))) in
                    (e166, (4 + t166)))
                else
                  (let (e179,t179 := if ((formula.isInstanceOf[Not] ∧ formula.f.isInstanceOf[Or]))
                    (let (e181,t181 := (let (e182,t182 := (let (e190,t190 := nnf(Not(formula.f.lhs))) in
                      (e190, (3 + (1 + t190))))) in
                      (let (e183,t183 := (let (e185,t185 := nnf(Not(formula.f.rhs))) in
                        (e185, (3 + (1 + t185))))) in
                        (And(e182, e183), (t183 + (t182 + 1)))))) in
                      (e181, (4 + t181)))
                  else
                    (let (e194,t194 := if ((formula.isInstanceOf[Not] ∧ formula.f.isInstanceOf[Implies]))
                      (let (e196,t196 := (let (e197,t197 := (let (e205,t205 := nnf(formula.f.lhs)) in
                        (e205, (2 + (1 + t205))))) in
                        (let (e198,t198 := (let (e200,t200 := nnf(Not(formula.f.rhs))) in
                          (e200, (3 + (1 + t200))))) in
                          (And(e197, e198), (t198 + (t197 + 1)))))) in
                        (e196, (4 + t196)))
                    else
                      (let (e208,t208 := if ((formula.isInstanceOf[Not] ∧ formula.f.isInstanceOf[Not]))
                        (let (e210,t210 := (let (e212,t212 := nnf(formula.f.f)) in
                          (e212, (2 + (1 + t212))))) in
                          (e210, (4 + t210)))
                      else
                        (let (e215,t215 := if ((formula.isInstanceOf[Not] ∧ formula.f.isInstanceOf[Literal]))
                          (formula, 4)
                        else
                          (let (e218,t218 := if (formula.isInstanceOf[Literal])
                            (formula, 1)
                          else
                            (formula, 1)) in
                            (e218, (4 + t218)))) in
                          (e215, (4 + t215)))) in
                        (e208, (4 + t208)))) in
                      (e194, (4 + t194)))) in
                    (e179, (4 + t179)))) in
                  (e164, (1 + t164)))) in
                (e153, (1 + t153)))) in
              (e142, (1 + t142)))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres20) && ((ci40 && (ci40 == formula.isInstanceOf[And]) && (ifres20 == tp8) && (arg10 == (1 + t133)) && (tp8 == (e133, arg10)) && (e135 == e137) && (e140 == ts44) && (ts44 == tres6._1) && (e137 == ts45) && (ts45 == tres5._1) && (t137 == ts46) && (ts46 == tres5._2) && (t133 == (t135 + (t134 + 1))) && (e133 == cc) && (cc == And(e134, e135)) && (tres5 == r54) && (cs33 == formula.rhs) && (r54 == nnf(cs33)) && (e134 == e140) && (t140 == ts47) && (ts47 == tres6._2) && (t135 == (1 + (1 + t137))) && (tres6 == r55) && (cs34 == formula.lhs) && (r55 == nnf(cs34)) && (t134 == (1 + (1 + t140)))) || (!(ci41) && (ci41 == formula.isInstanceOf[And]) && (ifres20 == tp9) && (arg11 == (1 + t142)) && (tp9 == (e142, arg11)) && ((ci42 && (ci42 == formula.isInstanceOf[Or]) && (ifres21 == tp10) && (arg12 == (1 + t144)) && (tp10 == (e144, arg12)) && (t148 == ts48) && (ts48 == tres7._2) && (t151 == ts49) && (ts49 == tres8._2) && (t144 == (t146 + (t145 + 1))) && (t146 == (1 + (1 + t148))) && (t145 == (1 + (1 + t151))) && (e146 == e148) && (e148 == ts50) && (ts50 == tres7._1) && (e144 == cc1) && (cc1 == Or(e145, e146)) && (tres8 == r56) && (cs35 == formula.lhs) && (r56 == nnf(cs35)) && (e145 == e151) && (e151 == ts51) && (ts51 == tres8._1) && (tres7 == r57) && (cs36 == formula.rhs) && (r57 == nnf(cs36))) || (!(ci43) && (ci43 == formula.isInstanceOf[Or]) && (ifres21 == tp11) && (arg13 == (1 + t153)) && (tp11 == (e153, arg13)) && ((ci44 && (ci44 == formula.isInstanceOf[Implies]) && (ifres22 == tp12) && (arg14 == (1 + t155)) && (tp12 == (e155, arg14)) && (t157 == (1 + (1 + t159))) && (e156 == e162) && (e155 == cc2) && (cc2 == Implies(e156, e157)) && (e159 == ts52) && (ts52 == tres9._1) && (t159 == ts53) && (ts53 == tres9._2) && (e162 == ts54) && (ts54 == tres10._1) && (t155 == (t157 + (t156 + 1))) && (tres9 == r58) && (cs37 == formula.rhs) && (r58 == nnf(cs37)) && (tres10 == r59) && (cs38 == formula.lhs) && (r59 == nnf(cs38)) && (e157 == e159) && (t156 == (1 + (1 + t162))) && (t162 == ts55) && (ts55 == tres10._2)) || (!(ci45) && (ci45 == formula.isInstanceOf[Implies]) && (ifres22 == tp13) && (arg15 == (1 + t164)) && (tp13 == (e164, arg15)) && ((ci46 && (ci46 == formula.isInstanceOf[Not]) && ci47 && (cs39 == formula.f) && (ci47 == cs39.isInstanceOf[And]) && (ifres23 == tp14) && (arg16 == (4 + t166)) && (tp14 == (e166, arg16)) && (t170 == ts56) && (ts56 == tres11._2) && (t168 == (3 + (1 + t170))) && (t167 == (3 + (1 + t175))) && (e167 == e175) && (e175 == ts57) && (ts57 == tres12._1) && (t175 == ts58) && (ts58 == tres12._2) && (e170 == ts59) && (ts59 == tres11._1) && (e168 == e170) && (tres12 == r60) && (cs40 == formula.f) && (cs41 == cs40.lhs) && (cc3 == Not(cs41)) && (r60 == nnf(cc3)) && (tres11 == r61) && (cs42 == formula.f) && (cs43 == cs42.rhs) && (cc4 == Not(cs43)) && (r61 == nnf(cc4)) && (t166 == (t168 + (t167 + 1))) && (e166 == cc5) && (cc5 == Or(e167, e168))) || (((!(ci48) && (ci48 == formula.isInstanceOf[Not])) || (!(ci49) && (cs44 == formula.f) && (ci49 == cs44.isInstanceOf[And]))) && (ifres23 == tp15) && (arg17 == (4 + t179)) && (tp15 == (e179, arg17)) && ((ci50 && (ci50 == formula.isInstanceOf[Not]) && ci51 && (cs45 == formula.f) && (ci51 == cs45.isInstanceOf[Or]) && (ifres24 == tp16) && (arg18 == (4 + t181)) && (tp16 == (e181, arg18)) && (t182 == (3 + (1 + t190))) && (e190 == ts60) && (ts60 == tres14._1) && (e181 == cc6) && (cc6 == And(e182, e183)) && (t185 == ts61) && (ts61 == tres13._2) && (e183 == e185) && (e182 == e190) && (t181 == (t183 + (t182 + 1))) && (tres13 == r62) && (cs46 == formula.f) && (cs47 == cs46.rhs) && (cc7 == Not(cs47)) && (r62 == nnf(cc7)) && (tres14 == r63) && (cs48 == formula.f) && (cs49 == cs48.lhs) && (cc8 == Not(cs49)) && (r63 == nnf(cc8)) && (t183 == (3 + (1 + t185))) && (t190 == ts62) && (ts62 == tres14._2) && (e185 == ts63) && (ts63 == tres13._1)) || (((!(ci52) && (ci52 == formula.isInstanceOf[Not])) || (!(ci53) && (cs50 == formula.f) && (ci53 == cs50.isInstanceOf[Or]))) && (ifres24 == tp17) && (arg19 == (4 + t194)) && (tp17 == (e194, arg19)) && ((ci54 && (ci54 == formula.isInstanceOf[Not]) && ci55 && (cs51 == formula.f) && (ci55 == cs51.isInstanceOf[Implies]) && (ifres25 == tp18) && (arg20 == (4 + t196)) && (tp18 == (e196, arg20)) && (t198 == (3 + (1 + t200))) && (e196 == cc9) && (cc9 == And(e197, e198)) && (t200 == ts64) && (ts64 == tres15._2) && (e198 == e200) && (tres16 == r64) && (cs52 == formula.f) && (cs53 == cs52.lhs) && (r64 == nnf(cs53)) && (t196 == (t198 + (t197 + 1))) && (e200 == ts65) && (ts65 == tres15._1) && (tres15 == r65) && (cs54 == formula.f) && (cs55 == cs54.rhs) && (cc10 == Not(cs55)) && (r65 == nnf(cc10)) && (t197 == (2 + (1 + t205))) && (t205 == ts66) && (ts66 == tres16._2) && (e205 == ts67) && (ts67 == tres16._1) && (e197 == e205)) || (((!(ci56) && (ci56 == formula.isInstanceOf[Not])) || (!(ci57) && (cs56 == formula.f) && (ci57 == cs56.isInstanceOf[Implies]))) && (ifres25 == tp19) && (arg21 == (4 + t208)) && (tp19 == (e208, arg21)) && ((ci58 && (ci58 == formula.isInstanceOf[Not]) && ci59 && (cs57 == formula.f) && (ci59 == cs57.isInstanceOf[Not]) && (ifres26 == tp20) && (arg22 == (4 + t210)) && (tp20 == (e210, arg22)) && (t210 == (2 + (1 + t212))) && (e212 == ts68) && (ts68 == tres17._1) && (tres17 == r66) && (cs58 == formula.f) && (cs59 == cs58.f) && (r66 == nnf(cs59)) && (t212 == ts69) && (ts69 == tres17._2) && (e210 == e212)) || (((!(ci60) && (ci60 == formula.isInstanceOf[Not])) || (!(ci61) && (cs60 == formula.f) && (ci61 == cs60.isInstanceOf[Not]))) && (ifres26 == tp21) && (arg23 == (4 + t215)) && (tp21 == (e215, arg23)) && ((ci62 && (ci62 == formula.isInstanceOf[Not]) && ci63 && (cs61 == formula.f) && (ci63 == cs61.isInstanceOf[Literal]) && (ifres27 == tp22) && (arg24 == 4) && (tp22 == (formula, arg24))) || (((!(ci64) && (ci64 == formula.isInstanceOf[Not])) || (!(ci65) && (cs62 == formula.f) && (ci65 == cs62.isInstanceOf[Literal]))) && (ifres27 == tp23) && (arg25 == (4 + t218)) && (tp23 == (e218, arg25)) && ((ci66 && (ci66 == formula.isInstanceOf[Literal]) && (ifres28 == tp24) && (arg26 == 1) && (tp24 == (formula, arg26))) || (!(ci67) && (ci67 == formula.isInstanceOf[Literal]) && (ifres28 == tp25) && (arg27 == 1) && (tp25 == (formula, arg27)))) && (e218 == ts70) && (ts70 == ifres28._1) && (t218 == ts71) && (ts71 == ifres28._2))) && (e215 == ts72) && (ts72 == ifres27._1) && (t215 == ts73) && (ts73 == ifres27._2))) && (e208 == ts74) && (ts74 == ifres26._1) && (t208 == ts75) && (ts75 == ifres26._2))) && (e194 == ts76) && (ts76 == ifres25._1) && (t194 == ts77) && (ts77 == ifres25._2))) && (e179 == ts78) && (ts78 == ifres24._1) && (t179 == ts79) && (ts79 == ifres24._2))) && (e164 == ts80) && (ts80 == ifres23._1) && (t164 == ts81) && (ts81 == ifres23._2))) && (e153 == ts82) && (ts82 == ifres22._1) && (t153 == ts83) && (ts83 == ifres22._2))) && (e142 == ts84) && (ts84 == ifres21._1) && (t142 == ts85) && (ts85 == ifres21._2))))
Flattened Post: ((ts86 > ((a?2 * r67) + b?2)) && (ts86 == res12._2) && (r67 == size(formula)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((1 * res12._2) + (0 * size(formula))) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 117
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/14
Unrolled calls: Set((r67 == size(formula)))
Creating VC for size
Unrolling (r67 == size(formula))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((1 * res12._2) + (0 * size(formula))) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
nnf-->((((-2 * size(formula)) + (16 * res12._2)) + 8) ≤ 0)
size-->(((8 * #res) + 414) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 277
[[34m Info  [0m] Number of equal calls: 20
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 21 + 10
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/40
Unrolled calls: Set((r87 == size(cs59)))
Unrolling (r87 == size(cs59))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((0 * size(formula)) + (1 * res12._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 76
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 20 + 0
solving...
solved... in 0.006s
candidate Invariants
nnf-->((((-2 * size(formula)) + (16 * res12._2)) + -8) ≤ 0)
size-->(((0 * #res) + 25) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 20
solving...
solved... in 0.006s
candidate Invariants
nnf-->((((2 * res12._2) + (1 * size(formula))) + 19) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 20 + 28
solving...
solved... in 0.01s
candidate Invariants
nnf-->((((1 * res12._2) + (-17 * size(formula))) + -8) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 159
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 18 + 48
solving...
solved... in 0.013s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/46
Unrolled calls: Set((r92 == size(cs35)), (r86 == size(cs36)), (r95 == size(cc4)), (r90 == size(cc3)))
Unrolling (r92 == size(cs35))
Unrolling (r86 == size(cs36))
Unrolling (r95 == size(cc4))
Unrolling (r90 == size(cc3))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((0 * size(formula)) + (1 * res12._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
nnf-->((((16 * res12._2) + (-2 * size(formula))) + 8) ≤ 0)
size-->(((8 * #res) + 414) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 108
[[34m Info  [0m] Number of equal calls: 14
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 30 + 10
solving...
solved... in 0.009s
candidate Invariants
nnf-->((((-17 * size(formula)) + (1 * res12._2)) + -8) ≤ 0)
size-->(((1 * #res) + -16) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 181
[[34m Info  [0m] Number of equal calls: 17
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 30 + 40
solving...
solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 14/70
Unrolled calls: Set((r61 == nnf(cc4)), (r75 == size(cs69)), (r110 == size(cs85)), (r57 == nnf(cs36)), (r82 == size(cs76)), (r116 == size(cs91)), (r109 == size(cs84)), (r60 == nnf(cc3)), (r78 == size(cs72)), (r79 == size(cs73)), (r56 == nnf(cs35)), (r129 == size(cs104)), (r117 == size(cs92)), (r136 == size(cs111)))
Unrolling (r129 == size(cs104))
Unrolling (r82 == size(cs76))
Unrolling (r57 == nnf(cs36))
Unrolling (r116 == size(cs91))
Unrolling (r79 == size(cs73))
Unrolling (r136 == size(cs111))
Unrolling (r60 == nnf(cc3))
Unrolling (r56 == nnf(cs35))
Unrolling (r110 == size(cs85))
Unrolling (r75 == size(cs69))
Unrolling (r109 == size(cs84))
Unrolling (r78 == size(cs72))
Unrolling (r117 == size(cs92))
Unrolling (r61 == nnf(cc4))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((0 * size(formula)) + (1 * res12._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
nnf-->((((-2 * size(formula)) + (16 * res12._2)) + 8) ≤ 0)
size-->(((8 * #res) + 414) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 299
[[34m Info  [0m] Number of equal calls: 22
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 26 + 10
solving...
solved... in 0.008s
candidate Invariants
nnf-->((((-96 * size(formula)) + (8 * res12._2)) + -127) ≤ 0)
size-->(((1 * #res) + -16) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 596
[[34m Info  [0m] Number of equal calls: 35
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 42 + 36
solving...
solved... in 0.014s
candidate Invariants
nnf-->((((1 * res12._2) + (-17 * size(formula))) + -8) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1949
[[34m Info  [0m] Number of equal calls: 62
# of atomic predicates: 24 + 78
solving...
solved... in 0.017s
candidate Invariants
nnf-->((((-21 * size(formula)) + (1 * res12._2)) + -4) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1910
[[34m Info  [0m] Number of equal calls: 63
# of atomic predicates: 24 + 102
solving...
solved... in 0.021s
candidate Invariants
nnf-->((((2 * res12._2) + (-82 * size(formula))) + 33) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 233
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 20 + 126
solving...
solved... in 0.026s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/178
Unrolled calls: Set((r91 == size(cc7)), (r83 == size(cc8)))
Unrolling (r91 == size(cc7))
Unrolling (r83 == size(cc8))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((1 * res12._2) + (0 * size(formula))) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
nnf-->((((16 * res12._2) + (-2 * size(formula))) + 8) ≤ 0)
size-->(((8 * #res) + 414) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 299
[[34m Info  [0m] Number of equal calls: 22
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 32 + 10
solving...
solved... in 0.008s
candidate Invariants
nnf-->((((2 * res12._2) + (-24 * size(formula))) + -31) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 112
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 22 + 42
solving...
solved... in 0.011s
candidate Invariants
nnf-->((((-17 * size(formula)) + (1 * res12._2)) + -8) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2198
[[34m Info  [0m] Number of equal calls: 69
# of atomic predicates: 48 + 64
solving...
solved... in 0.019s
candidate Invariants
nnf-->((((1 * res12._2) + (-12 * size(formula))) + 17) ≤ 0)
size-->(((-1 * #res) + 2) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 296
[[34m Info  [0m] Number of equal calls: 24
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 32 + 112
solving...
solved... in 0.036s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/242
Unrolled calls: Set((r93 == size(cs37)), (r301 == size(cc32)), (r323 == size(cc54)), (r305 == size(cs197)), (r289 == size(cs294)), (r84 == size(cs38)), (r89 == size(cs53)), (r85 == size(cc10)))
Unrolling (r323 == size(cc54))
Unrolling (r305 == size(cs197))
Unrolling (r93 == size(cs37))
Unrolling (r89 == size(cs53))
Unrolling (r301 == size(cc32))
Unrolling (r289 == size(cs294))
Unrolling (r85 == size(cc10))
Unrolling (r84 == size(cs38))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
nnf-->((((0 * size(formula)) + (1 * res12._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
nnf-->((((16 * res12._2) + (-2 * size(formula))) + 8) ≤ 0)
size-->(((8 * #res) + 414) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 299
[[34m Info  [0m] Number of equal calls: 22
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 32 + 10
solving...
solved... in 0.009s
candidate Invariants
nnf-->((((-24 * size(formula)) + (2 * res12._2)) + -31) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 124
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 22 + 42
solving...
solved... in 0.011s
candidate Invariants
nnf-->((((1 * res12._2) + (-17 * size(formula))) + -8) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2153
[[34m Info  [0m] Number of equal calls: 67
# of atomic predicates: 38 + 64
solving...
solved... in 0.017s
candidate Invariants
nnf-->((((-21 * size(formula)) + (1 * res12._2)) + -4) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1906
[[34m Info  [0m] Number of equal calls: 64
# of atomic predicates: 48 + 102
solving...
solved... in 0.026s
candidate Invariants
nnf-->((((1 * res12._2) + (-12 * size(formula))) + 15) ≤ 0)
size-->(((-1 * #res) + 2) ≤ 0)
Function: nnf--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 261
[[34m Info  [0m] Number of equal calls: 24
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 36 + 150
solving...
solved... in 0.033s
candidate Invariants
nnf-->((((-90 * size(formula)) + (2 * res12._2)) + 41) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 45
Found new lower bound: 22
Found new lower bound: 33
Found new lower bound: 39
Found new lower bound: 42
Found new lower bound: 43
Found new upper bound: 44
Minimizing variable: b?2 Initial upperbound: -20
Found new lower bound: -40
Found new lower bound: -30
Found new lower bound: -25
Found new lower bound: -23
Found new lower bound: -22
Found new lower bound: -21
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: nnf --> ((((1 * res12._2) + (-44 * size(formula))) + 20) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function simplify...
[[34m Info  [0m] Body: if (f.isInstanceOf[And])
            (let (e88,t88 := (let (e89,t89 := (let (e95,t95 := simplify(f.lhs)) in
              (e95, (1 + (1 + t95))))) in
              (let (e90,t90 := (let (e92,t92 := simplify(f.rhs)) in
                (e92, (1 + (1 + t92))))) in
                (And(e89, e90), (t90 + (t89 + 1)))))) in
              (e88, (1 + t88)))
          else
            (let (e97,t97 := if (f.isInstanceOf[Or])
              (let (e99,t99 := (let (e100,t100 := (let (e106,t106 := simplify(f.lhs)) in
                (e106, (1 + (1 + t106))))) in
                (let (e101,t101 := (let (e103,t103 := simplify(f.rhs)) in
                  (e103, (1 + (1 + t103))))) in
                  (Or(e100, e101), (t101 + (t100 + 1)))))) in
                (e99, (1 + t99)))
            else
              (let (e108,t108 := if (f.isInstanceOf[Implies])
                (let (e110,t110 := (let (e111,t111 := (let (e116,t116 := (let (e118,t118 := simplify(f.lhs)) in
                  (e118, (1 + (1 + t118))))) in
                  (Not(e116), (t116 + 1)))) in
                  (let (e112,t112 := (let (e114,t114 := simplify(f.rhs)) in
                    (e114, (1 + (1 + t114))))) in
                    (Or(e111, e112), (t112 + (t111 + 1)))))) in
                  (e110, (1 + t110)))
              else
                (let (e120,t120 := if (f.isInstanceOf[Not])
                  (let (e122,t122 := (let (e123,t123 := (let (e125,t125 := simplify(f.f)) in
                    (e125, (1 + (1 + t125))))) in
                    (Not(e123), (t123 + 1)))) in
                    (e122, (1 + t122)))
                else
                  (f, 1)) in
                  (e120, (1 + t120)))) in
                (e108, (1 + t108)))) in
              (e97, (1 + t97)))
[[34m Info  [0m] Post: true
falttened Body: ((res11 == ifres173) && ((ci396 && (ci396 == f.isInstanceOf[And]) && (ifres173 == tp98) && (arg100 == (1 + t88)) && (tp98 == (e88, arg100)) && (t95 == ts349) && (ts349 == tres71._2) && (t90 == (1 + (1 + t92))) && (tres70 == r403) && (cs372 == f.rhs) && (r403 == simplify(cs372)) && (e88 == cc55) && (cc55 == And(e89, e90)) && (e92 == ts350) && (ts350 == tres70._1) && (t88 == (t90 + (t89 + 1))) && (e90 == e92) && (tres71 == r404) && (cs373 == f.lhs) && (r404 == simplify(cs373)) && (e95 == ts351) && (ts351 == tres71._1) && (t89 == (1 + (1 + t95))) && (e89 == e95) && (t92 == ts352) && (ts352 == tres70._2)) || (!(ci397) && (ci397 == f.isInstanceOf[And]) && (ifres173 == tp99) && (arg101 == (1 + t97)) && (tp99 == (e97, arg101)) && ((ci398 && (ci398 == f.isInstanceOf[Or]) && (ifres174 == tp100) && (arg102 == (1 + t99)) && (tp100 == (e99, arg102)) && (e103 == ts353) && (ts353 == tres72._1) && (t100 == (1 + (1 + t106))) && (e106 == ts354) && (ts354 == tres73._1) && (e99 == cc56) && (cc56 == Or(e100, e101)) && (t101 == (1 + (1 + t103))) && (e100 == e106) && (t106 == ts355) && (ts355 == tres73._2) && (e101 == e103) && (t103 == ts356) && (ts356 == tres72._2) && (t99 == (t101 + (t100 + 1))) && (tres72 == r405) && (cs374 == f.rhs) && (r405 == simplify(cs374)) && (tres73 == r406) && (cs375 == f.lhs) && (r406 == simplify(cs375))) || (!(ci399) && (ci399 == f.isInstanceOf[Or]) && (ifres174 == tp101) && (arg103 == (1 + t108)) && (tp101 == (e108, arg103)) && ((ci400 && (ci400 == f.isInstanceOf[Implies]) && (ifres175 == tp102) && (arg104 == (1 + t110)) && (tp102 == (e110, arg104)) && (t118 == ts357) && (ts357 == tres75._2) && (e114 == ts358) && (ts358 == tres74._1) && (e112 == e114) && (t112 == (1 + (1 + t114))) && (tres74 == r407) && (cs376 == f.rhs) && (r407 == simplify(cs376)) && (e118 == ts359) && (ts359 == tres75._1) && (e110 == cc57) && (cc57 == Or(e111, e112)) && (e111 == cc58) && (cc58 == Not(e116)) && (t114 == ts360) && (ts360 == tres74._2) && (t116 == (1 + (1 + t118))) && (t110 == (t112 + (t111 + 1))) && (t111 == (t116 + 1)) && (e116 == e118) && (tres75 == r408) && (cs377 == f.lhs) && (r408 == simplify(cs377))) || (!(ci401) && (ci401 == f.isInstanceOf[Implies]) && (ifres175 == tp103) && (arg105 == (1 + t120)) && (tp103 == (e120, arg105)) && ((ci402 && (ci402 == f.isInstanceOf[Not]) && (ifres176 == tp104) && (arg106 == (1 + t122)) && (tp104 == (e122, arg106)) && (t122 == (t123 + 1)) && (t123 == (1 + (1 + t125))) && (e123 == e125) && (e122 == cc59) && (cc59 == Not(e123)) && (t125 == ts361) && (ts361 == tres76._2) && (e125 == ts362) && (ts362 == tres76._1) && (tres76 == r409) && (cs378 == f.f) && (r409 == simplify(cs378))) || (!(ci403) && (ci403 == f.isInstanceOf[Not]) && (ifres176 == tp105) && (arg107 == 1) && (tp105 == (f, arg107)))) && (e120 == ts363) && (ts363 == ifres176._1) && (t120 == ts364) && (ts364 == ifres176._2))) && (e108 == ts365) && (ts365 == ifres175._1) && (t108 == ts366) && (ts366 == ifres175._2))) && (e97 == ts367) && (ts367 == ifres174._1) && (t97 == ts368) && (ts368 == ifres174._2))))
Flattened Post: ((ts369 > ((a? * r410) + b?)) && (ts369 == res11._2) && (r410 == size(f)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
simplify-->((((0 * size(f)) + (1 * res11._2)) + 0) ≤ 0)
Function: simplify--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
candidate Invariants
simplify-->((((0 * size(f)) + (1 * res11._2)) + -6) ≤ 0)
Function: simplify--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 79
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 9 + 9
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/8
Unrolled calls: Set((r410 == size(f)))
Creating VC for size
Unrolling (r410 == size(f))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
simplify-->((((0 * size(f)) + (1 * res11._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: simplify--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
simplify-->((((16 * res11._2) + (-2 * size(f))) + 8) ≤ 0)
size-->(((8 * #res) + 94) ≤ 0)
Function: simplify--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 97
[[34m Info  [0m] Number of equal calls: 11
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 21 + 10
solving...
solved... in 0.006s
candidate Invariants
simplify-->((((-64 * size(f)) + (8 * res11._2)) + 1) ≤ 0)
size-->(((1 * #res) + -16) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 31
solving...
solved... in 0.008s
candidate Invariants
simplify-->((((-8 * size(f)) + (1 * res11._2)) + 1) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: b?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b? Initial upperbound: 0
Found new upper bound: -2
Found new lower bound: -4
Found new upper bound: -3
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: simplify --> ((((-7 * size(f)) + (1 * res11._2)) + 3) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((0 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function isNNF...
[[34m Info  [0m] Body: if (f.isInstanceOf[And])
            (let (e36,t36 := (let (e37,t37 := (let (e43,t43 := isNNF(f.lhs)) in
              (e43, (1 + (1 + t43))))) in
              (let (e38,t38 := (let (e40,t40 := isNNF(f.rhs)) in
                (e40, (1 + (1 + t40))))) in
                ((e37 ∧ e38), (t38 + (t37 + 1)))))) in
              (e36, (1 + t36)))
          else
            (let (e45,t45 := if (f.isInstanceOf[Or])
              (let (e47,t47 := (let (e48,t48 := (let (e54,t54 := isNNF(f.lhs)) in
                (e54, (1 + (1 + t54))))) in
                (let (e49,t49 := (let (e51,t51 := isNNF(f.rhs)) in
                  (e51, (1 + (1 + t51))))) in
                  ((e48 ∧ e49), (t49 + (t48 + 1)))))) in
                (e47, (1 + t47)))
            else
              (let (e56,t56 := if (f.isInstanceOf[Implies])
                (let (e58,t58 := (let (e59,t59 := (let (e65,t65 := isNNF(f.lhs)) in
                  (e65, (1 + (1 + t65))))) in
                  (let (e60,t60 := (let (e62,t62 := isNNF(f.rhs)) in
                    (e62, (1 + (1 + t62))))) in
                    ((e59 ∧ e60), (t60 + (t59 + 1)))))) in
                  (e58, (1 + t58)))
              else
                (let (e67,t67 := if ((f.isInstanceOf[Not] ∧ f.f.isInstanceOf[Literal]))
                  (true, 4)
                else
                  (let (e70,t70 := if (f.isInstanceOf[Not])
                    (false, 1)
                  else
                    (let (e73,t73 := if (f.isInstanceOf[Literal])
                      (true, 1)
                    else
                      (false, 1)) in
                      (e73, (1 + t73)))) in
                    (e70, (4 + t70)))) in
                  (e67, (1 + t67)))) in
                (e56, (1 + t56)))) in
              (e45, (1 + t45)))
[[34m Info  [0m] Post: true
falttened Body: ((res10 == ifres185) && ((ci420 && (ci420 == f.isInstanceOf[And]) && (ifres185 == tp106) && (arg108 == (1 + t36)) && (tp106 == (e36, arg108)) && (t40 == ts384) && (ts384 == tres77._2) && (tres78 == r439) && (cs393 == f.lhs) && (r439 == isNNF(cs393)) && (tres77 == r440) && (cs394 == f.rhs) && (r440 == isNNF(cs394)) && (t43 == ts385) && (ts385 == tres78._2) && (!(e38) || e40) && (!(e40) || e38) && (t37 == (1 + (1 + t43))) && (!(e37) || e43) && (!(e43) || e37) && (t38 == (1 + (1 + t40))) && (!(e40) || (ts386 && (ts386 == tres77._1))) && ((!(ts387) && (ts387 == tres77._1)) || e40) && (!(e43) || (ts388 && (ts388 == tres78._1))) && ((!(ts389) && (ts389 == tres78._1)) || e43) && (!(e36) || (e37 && e38)) && (!(e37) || !(e38) || e36) && (t36 == (t38 + (t37 + 1)))) || (!(ci421) && (ci421 == f.isInstanceOf[And]) && (ifres185 == tp107) && (arg109 == (1 + t45)) && (tp107 == (e45, arg109)) && ((ci422 && (ci422 == f.isInstanceOf[Or]) && (ifres186 == tp108) && (arg110 == (1 + t47)) && (tp108 == (e47, arg110)) && (!(e48) || e54) && (!(e54) || e48) && (t48 == (1 + (1 + t54))) && (t49 == (1 + (1 + t51))) && (!(e47) || (e48 && e49)) && (!(e48) || !(e49) || e47) && (t51 == ts390) && (ts390 == tres79._2) && (!(e49) || e51) && (!(e51) || e49) && (!(e51) || (ts391 && (ts391 == tres79._1))) && ((!(ts392) && (ts392 == tres79._1)) || e51) && (!(e54) || (ts393 && (ts393 == tres80._1))) && ((!(ts394) && (ts394 == tres80._1)) || e54) && (tres79 == r441) && (cs395 == f.rhs) && (r441 == isNNF(cs395)) && (t54 == ts395) && (ts395 == tres80._2) && (t47 == (t49 + (t48 + 1))) && (tres80 == r442) && (cs396 == f.lhs) && (r442 == isNNF(cs396))) || (!(ci423) && (ci423 == f.isInstanceOf[Or]) && (ifres186 == tp109) && (arg111 == (1 + t56)) && (tp109 == (e56, arg111)) && ((ci424 && (ci424 == f.isInstanceOf[Implies]) && (ifres187 == tp110) && (arg112 == (1 + t58)) && (tp110 == (e58, arg112)) && (t62 == ts396) && (ts396 == tres81._2) && (tres82 == r443) && (cs397 == f.lhs) && (r443 == isNNF(cs397)) && (!(e60) || e62) && (!(e62) || e60) && (!(e62) || (ts397 && (ts397 == tres81._1))) && ((!(ts398) && (ts398 == tres81._1)) || e62) && (tres81 == r444) && (cs398 == f.rhs) && (r444 == isNNF(cs398)) && (t65 == ts399) && (ts399 == tres82._2) && (t60 == (1 + (1 + t62))) && (!(e58) || (e59 && e60)) && (!(e59) || !(e60) || e58) && (!(e59) || e65) && (!(e65) || e59) && (t58 == (t60 + (t59 + 1))) && (!(e65) || (ts400 && (ts400 == tres82._1))) && ((!(ts401) && (ts401 == tres82._1)) || e65) && (t59 == (1 + (1 + t65)))) || (!(ci425) && (ci425 == f.isInstanceOf[Implies]) && (ifres187 == tp111) && (arg113 == (1 + t67)) && (tp111 == (e67, arg113)) && ((ci426 && (ci426 == f.isInstanceOf[Not]) && ci427 && (cs399 == f.f) && (ci427 == cs399.isInstanceOf[Literal]) && (ifres188 == tp112) && arg114 && (arg115 == 4) && (tp112 == (arg114, arg115))) || (((!(ci428) && (ci428 == f.isInstanceOf[Not])) || (!(ci429) && (cs400 == f.f) && (ci429 == cs400.isInstanceOf[Literal]))) && (ifres188 == tp113) && (arg116 == (4 + t70)) && (tp113 == (e70, arg116)) && ((ci430 && (ci430 == f.isInstanceOf[Not]) && (ifres189 == tp114) && !(arg117) && (arg118 == 1) && (tp114 == (arg117, arg118))) || (!(ci431) && (ci431 == f.isInstanceOf[Not]) && (ifres189 == tp115) && (arg119 == (1 + t73)) && (tp115 == (e73, arg119)) && ((ci432 && (ci432 == f.isInstanceOf[Literal]) && (ifres190 == tp116) && arg120 && (arg121 == 1) && (tp116 == (arg120, arg121))) || (!(ci433) && (ci433 == f.isInstanceOf[Literal]) && (ifres190 == tp117) && !(arg122) && (arg123 == 1) && (tp117 == (arg122, arg123)))) && (!(e73) || (ts402 && (ts402 == ifres190._1))) && ((!(ts403) && (ts403 == ifres190._1)) || e73) && (t73 == ts404) && (ts404 == ifres190._2))) && (!(e70) || (ts405 && (ts405 == ifres189._1))) && ((!(ts406) && (ts406 == ifres189._1)) || e70) && (t70 == ts407) && (ts407 == ifres189._2))) && (!(e67) || (ts408 && (ts408 == ifres188._1))) && ((!(ts409) && (ts409 == ifres188._1)) || e67) && (t67 == ts410) && (ts410 == ifres188._2))) && (!(e56) || (ts411 && (ts411 == ifres187._1))) && ((!(ts412) && (ts412 == ifres187._1)) || e56) && (t56 == ts413) && (ts413 == ifres187._2))) && (!(e45) || (ts414 && (ts414 == ifres186._1))) && ((!(ts415) && (ts415 == ifres186._1)) || e45) && (t45 == ts416) && (ts416 == ifres186._2))))
Flattened Post: ((ts417 > ((a?3 * r445) + b?3)) && (ts417 == res10._2) && (r445 == size(f)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isNNF-->((((0 * size(f)) + (1 * res10._2)) + 0) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 91
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 14 + 0
solving...
solved... in 0.01s
candidate Invariants
isNNF-->((((1 * res10._2) + (0 * size(f))) + -24) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 68
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 17 + 14
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/7
Unrolled calls: Set((r445 == size(f)))
Creating VC for size
Unrolling (r445 == size(f))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isNNF-->((((1 * res10._2) + (0 * size(f))) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 21 + 0
solving...
solved... in 0.007s
candidate Invariants
isNNF-->((((2 * res10._2) + (1 * size(f))) + 1) ≤ 0)
size-->(((0 * #res) + 9) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 21
solving...
solved... in 0.008s
candidate Invariants
isNNF-->((((2 * size(f)) + (2 * res10._2)) + 21) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 15 + 29
solving...
solved... in 0.021s
candidate Invariants
isNNF-->((((-10 * size(f)) + (1 * res10._2)) + 0) ≤ 0)
size-->(((-16 * #res) + 1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 44
solving...
solved... in 0.012s
candidate Invariants
isNNF-->((((1 * res10._2) + (-10 * size(f))) + 0) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 57
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 13 + 52
solving...
solved... in 0.019s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/26
Unrolled calls: Set((r464 == size(cs395)), (r465 == size(cs396)))
Unrolling (r464 == size(cs395))
Unrolling (r465 == size(cs396))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isNNF-->((((0 * size(f)) + (1 * res10._2)) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 15 + 0
solving...
solved... in 0.008s
candidate Invariants
isNNF-->((((-2 * size(f)) + (16 * res10._2)) + 8) ≤ 0)
size-->(((8 * #res) + 430) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 10
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 25 + 15
solving...
solved... in 0.011s
candidate Invariants
isNNF-->((((1 * size(f)) + (1 * res10._2)) + -25) ≤ 0)
size-->(((1 * #res) + -16) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 84
[[34m Info  [0m] Number of equal calls: 13
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 35 + 40
solving...
solved... in 0.019s
candidate Invariants
isNNF-->((((-28 * size(f)) + (2 * res10._2)) + 9) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Nesting level: a?3-->1
Nesting level: b?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 14
Found new lower bound: 7
Found new upper bound: 8
Minimizing variable: b?3 Initial upperbound: 1
Found new lower bound: 0
Minimization complete...
candidate Invariants
isNNF-->((((1 * res10._2) + (-8 * size(f))) + -1) ≤ 0)
size-->(((-1 * #res) + 1) ≤ 0)
Function: isNNF--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 108
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 27 + 75
solving...
solved... in 0.024s
candidate Invariants
isNNF-->((((-14 * size(f)) + (1 * res10._2)) + 5) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
Nesting level: a?3-->1
Nesting level: b?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 14
Found new lower bound: 7
Found new upper bound: 9
Found new lower bound: 8
Minimizing variable: b?3 Initial upperbound: 1/2
Found new upper bound: 0
Found new lower bound: -1
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: isNNF --> ((((1 * res10._2) + (-9 * size(f))) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-16 * #res) + 15) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
