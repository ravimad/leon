After Depth Instrumentation: 
object BinaryTrie {
  case class Node(nvalue: Int, left: Tree, right: Tree) extends Tree

  sealed abstract class IList

  case class Leaf() extends Tree

  case class Cons(head: Int, tail: IList) extends IList

  sealed abstract class Tree

  case class Nil() extends IList

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(x, l, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def insert(inp : IList, t : Tree) : Tree = {(t match {
    case Leaf() =>
      (inp match {
        case Nil() =>
          t
        case Cons(x, xs) =>
          locally {
            val newch = insert(xs, Leaf())
            (newch match {
              case Leaf() =>
                Node(x, Leaf(), Leaf())
              case Node(y, _, _) =>
                if ((y > 0)) {
                  Node(x, newch, Leaf())
                } else {
                  Node(y, Leaf(), newch)
                }
            })
          }
          
      })
    case Node(v, l, r) =>
      (inp match {
        case Nil() =>
          t
        case Cons(x, Nil()) =>
          t
        case Cons(x, xs @ Cons(y, _)) =>
          locally {
            val ch = if ((y > 0)) {
              l
            } else {
              r
            }
            if ((y > 0)) {
              Node(v, insert(xs, ch), r)
            } else {
              Node(v, l, insert(xs, ch))
            }
          }
          
        case _ =>
          t
      })
  })} ensuring(res => true)

  def create(inp : IList) : Tree = {insert(inp, Leaf())} ensuring(res => true)

  def find(inp : IList, t : Tree) : Tree = {(inp match {
    case Nil() =>
      t
    case Cons(x, Nil()) =>
      t
    case Cons(x, xs @ Cons(y, _)) =>
      (t match {
        case Leaf() =>
          t
        case Node(v, l, r) =>
          if ((y > 0)) {
            find(xs, l)
          } else {
            find(xs, r)
          }
      })
    case _ =>
      t
  })} ensuring(res => true)

  def delete(inp : IList, t : Tree) : Tree = {(t match {
    case Leaf() =>
      (inp match {
        case Nil() =>
          Leaf()
        case Cons(x, xs) =>
          Leaf()
      })
    case Node(v, l, r) =>
      (inp match {
        case Nil() =>
          t
        case Cons(x, Nil()) =>
          if (((l == Leaf()) && (r == Leaf()))) {
            Leaf()
          } else {
            t
          }
        case Cons(x, xs @ Cons(y, _)) =>
          locally {
            val ch = if ((y > 0)) {
              l
            } else {
              r
            }
            locally {
              val newch = delete(xs, ch)
              if (((newch == Leaf()) && (((y > 0) && (r == Leaf())) || ((y <= 0) && (l == Leaf()))))) {
                Leaf()
              } else {
                if ((y > 0)) {
                  Node(v, newch, r)
                } else {
                  Node(v, l, newch)
                }
              }
            }
            
          }
          
        case _ =>
          t
      })
  })} ensuring(res => true)

  def listSize(l : IList) : Int = {(l match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + listSize(xs))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: height
Defined fun: insert
Defined fun: create
Defined fun: find
Defined fun: delete
Defined fun: listSize
Defined fun: max
FunMap: Map(find -> find, create -> create, max -> max, insert -> insert, listSize -> listSize, delete -> delete, height -> height)
After Time Instrumentation: 
object BinaryTrie {
  case class Node(nvalue: Int, left: Tree, right: Tree) extends Tree

  sealed abstract class IList

  case class Leaf() extends Tree

  case class Cons(head: Int, tail: IList) extends IList

  sealed abstract class Tree

  case class Nil() extends IList

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(x, l, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def insert(inp : IList, t : Tree) : (Tree, Int) = {locally {
    val t48 = 1
    if (t.isInstanceOf[Leaf]) {
      locally {
        val (e45: Tree, t49: Int) = locally {
          val t50 = 1
          if (inp.isInstanceOf[Nil]) {
            (t, t50)
          } else {
            locally {
              val (e48: Node, t52: Int) = locally {
                val (ir: Tree, it: Int) = locally {
                  val (e51: Tree, t56: Int) = insert(inp.tail, Leaf())
                  (e51, (1 + (1 + (1 + t56))))
                }
                
                locally {
                  val (r5: Node, t53: Int) = locally {
                    val t58 = 1
                    if (ir.isInstanceOf[Leaf]) {
                      (Node(inp.head, Leaf(), Leaf()), (t58 + 4))
                    } else {
                      locally {
                        val (e59: Node, t64: Int) = locally {
                          val t65 = 2
                          if ((ir.nvalue > 0)) {
                            (Node(inp.head, ir, Leaf()), (t65 + 3))
                          } else {
                            (Node(ir.nvalue, Leaf(), ir), (t65 + 3))
                          }
                        }
                        
                        (e59, (t58 + t64))
                      }
                      
                    }
                  }
                  
                  (r5, (t53 + (it + 1)))
                }
                
              }
              
              (e48, (t50 + t52))
            }
            
          }
        }
        
        (e45, (t48 + t49))
      }
      
    } else {
      locally {
        val (e76: Tree, t81: Int) = locally {
          val t82 = 1
          if (inp.isInstanceOf[Nil]) {
            (t, t82)
          } else {
            locally {
              val (e79: Tree, t84: Int) = locally {
                val t85 = 4
                if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
                  (t, t85)
                } else {
                  locally {
                    val (e82: Tree, t87: Int) = locally {
                      val t88 = 4
                      if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
                        locally {
                          val (e84: Node, t89: Int) = locally {
                            val (ir1: Tree, it1: Int) = locally {
                              val t91 = 3
                              if ((inp.tail.head > 0)) {
                                (t.left, (t91 + 1))
                              } else {
                                (t.right, (t91 + 1))
                              }
                            }
                            
                            locally {
                              val (r6: Node, t90: Int) = locally {
                                val t100 = 3
                                if ((inp.tail.head > 0)) {
                                  locally {
                                    val (e95: Node, t101: Int) = locally {
                                      val (e97: Tree, t103: Int) = locally {
                                        val (e102: Tree, t108: Int) = insert(inp.tail, ir1)
                                        (e102, (1 + (1 + t108)))
                                      }
                                      
                                      (Node(t.nvalue, e97, t.right), (1 + (t103 + 2)))
                                    }
                                    
                                    (e95, (t100 + t101))
                                  }
                                  
                                } else {
                                  locally {
                                    val (e105: Node, t111: Int) = locally {
                                      val (e108: Tree, t114: Int) = locally {
                                        val (e111: Tree, t117: Int) = insert(inp.tail, ir1)
                                        (e111, (1 + (1 + t117)))
                                      }
                                      
                                      (Node(t.nvalue, t.left, e108), (t114 + 3))
                                    }
                                    
                                    (e105, (t100 + t111))
                                  }
                                  
                                }
                              }
                              
                              (r6, (t90 + (it1 + 1)))
                            }
                            
                          }
                          
                          (e84, (t88 + t89))
                        }
                        
                      } else {
                        (t, t88)
                      }
                    }
                    
                    (e82, (t85 + t87))
                  }
                  
                }
              }
              
              (e79, (t82 + t84))
            }
            
          }
        }
        
        (e76, (t48 + t81))
      }
      
    }
  }
  } ensuring(res11 => true)

  def create(inp : IList) : (Tree, Int) = {locally {
    val (e43: Tree, t47: Int) = insert(inp, Leaf())
    (e43, (1 + (1 + t47)))
  }
  } ensuring(res10 => true)

  def find(inp : IList, t : Tree) : (Tree, Int) = {locally {
    val t4 = 1
    if (inp.isInstanceOf[Nil]) {
      (t, t4)
    } else {
      locally {
        val (e2: Tree, t6: Int) = locally {
          val t7 = 4
          if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
            (t, t7)
          } else {
            locally {
              val (e5: Tree, t9: Int) = locally {
                val t10 = 4
                if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
                  locally {
                    val (e7: Tree, t11: Int) = locally {
                      val t12 = 1
                      if (t.isInstanceOf[Leaf]) {
                        (t, t12)
                      } else {
                        locally {
                          val (e10: Tree, t14: Int) = locally {
                            val t15 = 3
                            if ((inp.tail.head > 0)) {
                              locally {
                                val (e12: Tree, t16: Int) = locally {
                                  val (e15: Tree, t19: Int) = find(inp.tail, t.left)
                                  (e15, (1 + (1 + (1 + t19))))
                                }
                                
                                (e12, (t15 + t16))
                              }
                              
                            } else {
                              locally {
                                val (e18: Tree, t22: Int) = locally {
                                  val (e21: Tree, t25: Int) = find(inp.tail, t.right)
                                  (e21, (1 + (1 + (1 + t25))))
                                }
                                
                                (e18, (t15 + t22))
                              }
                              
                            }
                          }
                          
                          (e10, (t12 + t14))
                        }
                        
                      }
                    }
                    
                    (e7, (t10 + t11))
                  }
                  
                } else {
                  (t, t10)
                }
              }
              
              (e5, (t7 + t9))
            }
            
          }
        }
        
        (e2, (t4 + t6))
      }
      
    }
  }
  } ensuring(res9 => true)

  def delete(inp : IList, t : Tree) : (Tree, Int) = {locally {
    val t138 = 1
    if (t.isInstanceOf[Leaf]) {
      locally {
        val (e133: Leaf, t139: Int) = locally {
          val t140 = 1
          if (inp.isInstanceOf[Nil]) {
            (Leaf(), (t140 + 1))
          } else {
            (Leaf(), (t140 + 1))
          }
        }
        
        (e133, (t138 + t139))
      }
      
    } else {
      locally {
        val (e138: Tree, t144: Int) = locally {
          val t145 = 1
          if (inp.isInstanceOf[Nil]) {
            (t, t145)
          } else {
            locally {
              val (e141: Tree, t147: Int) = locally {
                val t148 = 4
                if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
                  locally {
                    val (e143: Tree, t149: Int) = locally {
                      val t150 = 7
                      if (((t.left == Leaf()) && (t.right == Leaf()))) {
                        (Leaf(), (t150 + 1))
                      } else {
                        (t, t150)
                      }
                    }
                    
                    (e143, (t148 + t149))
                  }
                  
                } else {
                  locally {
                    val (e155: Tree, t161: Int) = locally {
                      val t162 = 4
                      if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
                        locally {
                          val (e157: Tree, t163: Int) = locally {
                            val (ir2: Tree, it2: Int) = locally {
                              val t165 = 3
                              if ((inp.tail.head > 0)) {
                                (t.left, (t165 + 1))
                              } else {
                                (t.right, (t165 + 1))
                              }
                            }
                            
                            locally {
                              val (r7: Tree, t164: Int) = locally {
                                val (ir3: Tree, it3: Int) = locally {
                                  val (e169: Tree, t177: Int) = delete(inp.tail, ir2)
                                  (e169, (1 + (1 + t177)))
                                }
                                
                                locally {
                                  val (r8: Tree, t174: Int) = locally {
                                    val t179 = 18
                                    if (((ir3 == Leaf()) && (((inp.tail.head > 0) && (t.right == Leaf())) || ((inp.tail.head <= 0) && (t.left == Leaf()))))) {
                                      (Leaf(), (t179 + 1))
                                    } else {
                                      locally {
                                        val (e173: Node, t181: Int) = locally {
                                          val t182 = 3
                                          if ((inp.tail.head > 0)) {
                                            (Node(t.nvalue, ir3, t.right), (t182 + 3))
                                          } else {
                                            (Node(t.nvalue, t.left, ir3), (t182 + 3))
                                          }
                                        }
                                        
                                        (e173, (t179 + t181))
                                      }
                                      
                                    }
                                  }
                                  
                                  (r8, (t174 + (it3 + 1)))
                                }
                                
                              }
                              
                              (r7, (t164 + (it2 + 1)))
                            }
                            
                          }
                          
                          (e157, (t162 + t163))
                        }
                        
                      } else {
                        (t, t162)
                      }
                    }
                    
                    (e155, (t148 + t161))
                  }
                  
                }
              }
              
              (e141, (t145 + t147))
            }
            
          }
        }
        
        (e138, (t138 + t144))
      }
      
    }
  }
  } ensuring(res12 => true)

  def listSize(l : IList) : Int = {(l match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + listSize(xs))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object BinaryTrie {
  case class Node(nvalue: Int, left: Tree, right: Tree) extends Tree

  sealed abstract class IList

  case class Leaf() extends Tree

  case class Cons(head: Int, tail: IList) extends IList

  sealed abstract class Tree

  case class Nil() extends IList

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(x, l, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def insert(inp : IList, t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    locally {
      val (e45: Tree, t49: Int) = if (inp.isInstanceOf[Nil]) {
        (t, 1)
      } else {
        locally {
          val (e48: Node, t52: Int) = locally {
            val (ir: Tree, it: Int) = locally {
              val (e51: Tree, t56: Int) = insert(inp.tail, Leaf())
              (e51, (1 + (1 + (1 + t56))))
            }
            
            locally {
              val (r5: Node, t53: Int) = if (ir.isInstanceOf[Leaf]) {
                (Node(inp.head, Leaf(), Leaf()), (1 + 4))
              } else {
                locally {
                  val (e59: Node, t64: Int) = if ((ir.nvalue > 0)) {
                    (Node(inp.head, ir, Leaf()), (2 + 3))
                  } else {
                    (Node(ir.nvalue, Leaf(), ir), (2 + 3))
                  }
                  (e59, (1 + t64))
                }
                
              }
              (r5, (t53 + (it + 1)))
            }
            
          }
          
          (e48, (1 + t52))
        }
        
      }
      (e45, (1 + t49))
    }
    
  } else {
    locally {
      val (e76: Tree, t81: Int) = if (inp.isInstanceOf[Nil]) {
        (t, 1)
      } else {
        locally {
          val (e79: Tree, t84: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
            (t, 4)
          } else {
            locally {
              val (e82: Tree, t87: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
                locally {
                  val (e84: Node, t89: Int) = locally {
                    val (ir1: Tree, it1: Int) = if ((inp.tail.head > 0)) {
                      (t.left, (3 + 1))
                    } else {
                      (t.right, (3 + 1))
                    }
                    locally {
                      val (r6: Node, t90: Int) = if ((inp.tail.head > 0)) {
                        locally {
                          val (e95: Node, t101: Int) = locally {
                            val (e97: Tree, t103: Int) = locally {
                              val (e102: Tree, t108: Int) = insert(inp.tail, ir1)
                              (e102, (1 + (1 + t108)))
                            }
                            
                            (Node(t.nvalue, e97, t.right), (1 + (t103 + 2)))
                          }
                          
                          (e95, (3 + t101))
                        }
                        
                      } else {
                        locally {
                          val (e105: Node, t111: Int) = locally {
                            val (e108: Tree, t114: Int) = locally {
                              val (e111: Tree, t117: Int) = insert(inp.tail, ir1)
                              (e111, (1 + (1 + t117)))
                            }
                            
                            (Node(t.nvalue, t.left, e108), (t114 + 3))
                          }
                          
                          (e105, (3 + t111))
                        }
                        
                      }
                      (r6, (t90 + (it1 + 1)))
                    }
                    
                  }
                  
                  (e84, (4 + t89))
                }
                
              } else {
                (t, 4)
              }
              (e82, (4 + t87))
            }
            
          }
          (e79, (1 + t84))
        }
        
      }
      (e76, (1 + t81))
    }
    
  }} ensuring(res11 => true)

  def create(inp : IList) : (Tree, Int) = {locally {
    val (e43: Tree, t47: Int) = insert(inp, Leaf())
    (e43, (1 + (1 + t47)))
  }
  } ensuring(res10 => true)

  def find(inp : IList, t : Tree) : (Tree, Int) = {if (inp.isInstanceOf[Nil]) {
    (t, 1)
  } else {
    locally {
      val (e2: Tree, t6: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
        (t, 4)
      } else {
        locally {
          val (e5: Tree, t9: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
            locally {
              val (e7: Tree, t11: Int) = if (t.isInstanceOf[Leaf]) {
                (t, 1)
              } else {
                locally {
                  val (e10: Tree, t14: Int) = if ((inp.tail.head > 0)) {
                    locally {
                      val (e12: Tree, t16: Int) = locally {
                        val (e15: Tree, t19: Int) = find(inp.tail, t.left)
                        (e15, (1 + (1 + (1 + t19))))
                      }
                      
                      (e12, (3 + t16))
                    }
                    
                  } else {
                    locally {
                      val (e18: Tree, t22: Int) = locally {
                        val (e21: Tree, t25: Int) = find(inp.tail, t.right)
                        (e21, (1 + (1 + (1 + t25))))
                      }
                      
                      (e18, (3 + t22))
                    }
                    
                  }
                  (e10, (1 + t14))
                }
                
              }
              (e7, (4 + t11))
            }
            
          } else {
            (t, 4)
          }
          (e5, (4 + t9))
        }
        
      }
      (e2, (1 + t6))
    }
    
  }} ensuring(res9 => true)

  def delete(inp : IList, t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    locally {
      val (e133: Leaf, t139: Int) = if (inp.isInstanceOf[Nil]) {
        (Leaf(), (1 + 1))
      } else {
        (Leaf(), (1 + 1))
      }
      (e133, (1 + t139))
    }
    
  } else {
    locally {
      val (e138: Tree, t144: Int) = if (inp.isInstanceOf[Nil]) {
        (t, 1)
      } else {
        locally {
          val (e141: Tree, t147: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Nil])) {
            locally {
              val (e143: Tree, t149: Int) = if (((t.left == Leaf()) && (t.right == Leaf()))) {
                (Leaf(), (7 + 1))
              } else {
                (t, 7)
              }
              (e143, (4 + t149))
            }
            
          } else {
            locally {
              val (e155: Tree, t161: Int) = if ((inp.isInstanceOf[Cons] && inp.tail.isInstanceOf[Cons])) {
                locally {
                  val (e157: Tree, t163: Int) = locally {
                    val (ir2: Tree, it2: Int) = if ((inp.tail.head > 0)) {
                      (t.left, (3 + 1))
                    } else {
                      (t.right, (3 + 1))
                    }
                    locally {
                      val (r7: Tree, t164: Int) = locally {
                        val (ir3: Tree, it3: Int) = locally {
                          val (e169: Tree, t177: Int) = delete(inp.tail, ir2)
                          (e169, (1 + (1 + t177)))
                        }
                        
                        locally {
                          val (r8: Tree, t174: Int) = if (((ir3 == Leaf()) && (((inp.tail.head > 0) && (t.right == Leaf())) || ((inp.tail.head <= 0) && (t.left == Leaf()))))) {
                            (Leaf(), (18 + 1))
                          } else {
                            locally {
                              val (e173: Node, t181: Int) = if ((inp.tail.head > 0)) {
                                (Node(t.nvalue, ir3, t.right), (3 + 3))
                              } else {
                                (Node(t.nvalue, t.left, ir3), (3 + 3))
                              }
                              (e173, (18 + t181))
                            }
                            
                          }
                          (r8, (t174 + (it3 + 1)))
                        }
                        
                      }
                      
                      (r7, (t164 + (it2 + 1)))
                    }
                    
                  }
                  
                  (e157, (4 + t163))
                }
                
              } else {
                (t, 4)
              }
              (e155, (4 + t161))
            }
            
          }
          (e141, (1 + t147))
        }
        
      }
      (e138, (1 + t144))
    }
    
  }} ensuring(res12 => true)

  def listSize(l : IList) : Int = {(l match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + listSize(xs))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: insert template --> (res11._2 ≤ ((a?1 * listSize(inp)) + c?1))
Function: create template --> (res10._2 ≤ ((a?2 * listSize(inp)) + c?2))
Function: find template --> (res9._2 ≤ ((a? * listSize(inp)) + c?))
Function: delete template --> (res12._2 ≤ ((a?3 * listSize(inp)) + c?3))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(height, listSize, insert, delete, create, find)
[[34m Info  [0m] - considering function insert...
[[34m Info  [0m] Body: if (t.isInstanceOf[Leaf])
            (let (e45,t49 := if (inp.isInstanceOf[Nil])
              (t, 1)
            else
              (let (e48,t52 := (let (ir,it := (let (e51,t56 := insert(inp.tail, Leaf())) in
                (e51, (1 + (1 + (1 + t56)))))) in
                (let (r5,t53 := if (ir.isInstanceOf[Leaf])
                  (Node(inp.head, Leaf(), Leaf()), (1 + 4))
                else
                  (let (e59,t64 := if ((ir.nvalue > 0))
                    (Node(inp.head, ir, Leaf()), (2 + 3))
                  else
                    (Node(ir.nvalue, Leaf(), ir), (2 + 3))) in
                    (e59, (1 + t64)))) in
                  (r5, (t53 + (it + 1)))))) in
                (e48, (1 + t52)))) in
              (e45, (1 + t49)))
          else
            (let (e76,t81 := if (inp.isInstanceOf[Nil])
              (t, 1)
            else
              (let (e79,t84 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Nil]))
                (t, 4)
              else
                (let (e82,t87 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Cons]))
                  (let (e84,t89 := (let (ir1,it1 := if ((inp.tail.head > 0))
                    (t.left, (3 + 1))
                  else
                    (t.right, (3 + 1))) in
                    (let (r6,t90 := if ((inp.tail.head > 0))
                      (let (e95,t101 := (let (e97,t103 := (let (e102,t108 := insert(inp.tail, ir1)) in
                        (e102, (1 + (1 + t108))))) in
                        (Node(t.nvalue, e97, t.right), (1 + (t103 + 2))))) in
                        (e95, (3 + t101)))
                    else
                      (let (e105,t111 := (let (e108,t114 := (let (e111,t117 := insert(inp.tail, ir1)) in
                        (e111, (1 + (1 + t117))))) in
                        (Node(t.nvalue, t.left, e108), (t114 + 3)))) in
                        (e105, (3 + t111)))) in
                      (r6, (t90 + (it1 + 1)))))) in
                    (e84, (4 + t89)))
                else
                  (t, 4)) in
                  (e82, (4 + t87)))) in
                (e79, (1 + t84)))) in
              (e76, (1 + t81)))
[[34m Info  [0m] Post: true
falttened Body: ((res11 == ifres) && ((ci && (ci == t.isInstanceOf[Leaf]) && (ifres == tp) && (arg == (1 + t49)) && (tp == (e45, arg)) && ((ci1 && (ci1 == inp.isInstanceOf[Nil]) && (ifres1 == tp1) && (arg1 == 1) && (tp1 == (t, arg1))) || (!(ci2) && (ci2 == inp.isInstanceOf[Nil]) && (ifres1 == tp2) && (arg2 == (1 + t52)) && (tp2 == (e48, arg2)) && (tres == r9) && (cs == inp.tail) && (cc == Leaf()) && (r9 == insert(cs, cc)) && ((ci3 && (ci3 == ir.isInstanceOf[Leaf]) && (ifres2 == tp3) && (cc3 == Node(cs1, cc1, cc2)) && (cc1 == Leaf()) && (arg3 == (1 + 4)) && (cc2 == Leaf()) && (cs1 == inp.head) && (tp3 == (cc3, arg3))) || (!(ci4) && (ci4 == ir.isInstanceOf[Leaf]) && (ifres2 == tp4) && (arg4 == (1 + t64)) && (tp4 == (e59, arg4)) && (((cs2 > 0) && (cs2 == ir.nvalue) && (ifres3 == tp5) && (cc4 == Leaf()) && (cs3 == inp.head) && (arg5 == (2 + 3)) && (tp5 == (cc5, arg5)) && (cc5 == Node(cs3, ir, cc4))) || ((cs4 <= 0) && (cs4 == ir.nvalue) && (ifres3 == tp6) && (arg6 == (2 + 3)) && (tp6 == (cc7, arg6)) && (cc7 == Node(cs5, cc6, ir)) && (cc6 == Leaf()) && (cs5 == ir.nvalue))) && (e59 == ts) && (ts == ifres3._1) && (t64 == ts1) && (ts1 == ifres3._2))) && (e51 == ts2) && (ts2 == tres._1) && (it == (1 + (1 + (1 + t56)))) && (t53 == ts3) && (ts3 == ifres2._2) && (ir == e51) && (t56 == ts4) && (ts4 == tres._2) && (r5 == ts5) && (ts5 == ifres2._1) && (e48 == r5) && (t52 == (t53 + (it + 1))))) && (e45 == ts6) && (ts6 == ifres1._1) && (t49 == ts7) && (ts7 == ifres1._2)) || (!(ci5) && (ci5 == t.isInstanceOf[Leaf]) && (ifres == tp7) && (arg7 == (1 + t81)) && (tp7 == (e76, arg7)) && ((ci6 && (ci6 == inp.isInstanceOf[Nil]) && (ifres4 == tp8) && (arg8 == 1) && (tp8 == (t, arg8))) || (!(ci7) && (ci7 == inp.isInstanceOf[Nil]) && (ifres4 == tp9) && (arg9 == (1 + t84)) && (tp9 == (e79, arg9)) && ((ci8 && (ci8 == inp.isInstanceOf[Cons]) && ci9 && (cs6 == inp.tail) && (ci9 == cs6.isInstanceOf[Nil]) && (ifres5 == tp10) && (arg10 == 4) && (tp10 == (t, arg10))) || (((!(ci10) && (ci10 == inp.isInstanceOf[Cons])) || (!(ci11) && (cs7 == inp.tail) && (ci11 == cs7.isInstanceOf[Nil]))) && (ifres5 == tp11) && (arg11 == (4 + t87)) && (tp11 == (e82, arg11)) && ((ci12 && (ci12 == inp.isInstanceOf[Cons]) && ci13 && (cs8 == inp.tail) && (ci13 == cs8.isInstanceOf[Cons]) && (ifres6 == tp12) && (arg12 == (4 + t89)) && (tp12 == (e84, arg12)) && (it1 == ts8) && (ts8 == ifres8._2) && (((cs10 > 0) && (cs9 == inp.tail) && (cs10 == cs9.head) && (ifres7 == tp13) && (arg13 == (3 + t101)) && (tp13 == (e95, arg13)) && (e102 == ts9) && (ts9 == tres1._1) && (e97 == e102) && (t108 == ts10) && (ts10 == tres1._2) && (tres1 == r10) && (cs11 == inp.tail) && (r10 == insert(cs11, ir1)) && (t101 == (1 + (t103 + 2))) && (t103 == (1 + (1 + t108))) && (e95 == cc8) && (cs12 == t.nvalue) && (cs13 == t.right) && (cc8 == Node(cs12, e97, cs13))) || ((cs15 <= 0) && (cs14 == inp.tail) && (cs15 == cs14.head) && (ifres7 == tp14) && (arg14 == (3 + t111)) && (tp14 == (e105, arg14)) && (t111 == (t114 + 3)) && (t117 == ts11) && (ts11 == tres2._2) && (t114 == (1 + (1 + t117))) && (e111 == ts12) && (ts12 == tres2._1) && (e108 == e111) && (e105 == cc9) && (cs16 == t.nvalue) && (cs17 == t.left) && (cc9 == Node(cs16, cs17, e108)) && (tres2 == r11) && (cs18 == inp.tail) && (r11 == insert(cs18, ir1)))) && (t89 == (t90 + (it1 + 1))) && (t90 == ts13) && (ts13 == ifres7._2) && (ir1 == ts14) && (ts14 == ifres8._1) && (e84 == r6) && (((cs20 > 0) && (cs19 == inp.tail) && (cs20 == cs19.head) && (ifres8 == tp15) && (cs21 == t.left) && (arg15 == (3 + 1)) && (tp15 == (cs21, arg15))) || ((cs23 <= 0) && (cs22 == inp.tail) && (cs23 == cs22.head) && (ifres8 == tp16) && (cs24 == t.right) && (arg16 == (3 + 1)) && (tp16 == (cs24, arg16)))) && (r6 == ts15) && (ts15 == ifres7._1)) || (((!(ci14) && (ci14 == inp.isInstanceOf[Cons])) || (!(ci15) && (cs25 == inp.tail) && (ci15 == cs25.isInstanceOf[Cons]))) && (ifres6 == tp17) && (arg17 == 4) && (tp17 == (t, arg17)))) && (e82 == ts16) && (ts16 == ifres6._1) && (t87 == ts17) && (ts17 == ifres6._2))) && (e79 == ts18) && (ts18 == ifres5._1) && (t84 == ts19) && (ts19 == ifres5._2))) && (e76 == ts20) && (ts20 == ifres4._1) && (t81 == ts21) && (ts21 == ifres4._2))))
Flattened Post: ((ts22 > ((a?1 * r12) + c?1)) && (ts22 == res11._2) && (r12 == listSize(inp)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((0 * listSize(inp)) + (1 * res11._2)) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 9 + 0
solving...
solved... in 0.009s
candidate Invariants
insert-->((((0 * listSize(inp)) + (1 * res11._2)) + -8) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 49
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 9 + 9
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/4
Unrolled calls: Set((r12 == listSize(inp)))
Creating VC for listSize
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function listSize : (((a?5 * #res) + a?4) ≤ 0)
Unrolling (r12 == listSize(inp))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((1 * res11._2) + (0 * listSize(inp))) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 13 + 0
solving...
solved... in 0.007s
candidate Invariants
insert-->((((8 * res11._2) + (-1 * listSize(inp))) + 0) ≤ 0)
listSize-->(((0 * #res) + 103) ≤ 0)
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 13
solving...
solved... in 0.007s
candidate Invariants
insert-->((((-14 * listSize(inp)) + (1 * res11._2)) + 0) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 21
solving...
solved... in 0.009s
candidate Invariants
insert-->((((1 * res11._2) + (-14 * listSize(inp))) + -5) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 30
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 10 + 31
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/8
Unrolled calls: Set((r17 == listSize(cs)))
Unrolling (r17 == listSize(cs))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((0 * listSize(inp)) + (1 * res11._2)) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
insert-->((((0 * listSize(inp)) + (8 * res11._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 31) ≤ 0)
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.007s
candidate Invariants
insert-->((((0 * listSize(inp)) + (1 * res11._2)) + -5) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 70
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 15 + 18
solving...
solved... in 0.007s
candidate Invariants
insert-->((((-15 * listSize(inp)) + (1 * res11._2)) + -5) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 30
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 12 + 33
solving...
solved... in 0.011s
candidate Invariants
insert-->((((1 * res11._2) + (-12 * listSize(inp))) + -7) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 227
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 15 + 45
solving...
solved... in 0.012s
candidate Invariants
insert-->((((1 * res11._2) + (-24 * listSize(inp))) + -7) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?1-->1
Nesting level: c?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 24
Found new lower bound: 12
Found new lower bound: 18
Found new lower bound: 21
Found new lower bound: 22
Found new upper bound: 23
Minimizing variable: c?1 Initial upperbound: 7
Found new upper bound: 5/2
Found new lower bound: 1
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: insert --> ((((2 * res11._2) + (-46 * listSize(inp))) + -5) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-3 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function delete...
[[34m Info  [0m] Body: if (t.isInstanceOf[Leaf])
            (let (e133,t139 := if (inp.isInstanceOf[Nil])
              (Leaf(), (1 + 1))
            else
              (Leaf(), (1 + 1))) in
              (e133, (1 + t139)))
          else
            (let (e138,t144 := if (inp.isInstanceOf[Nil])
              (t, 1)
            else
              (let (e141,t147 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Nil]))
                (let (e143,t149 := if (((t.left == Leaf()) ∧ (t.right == Leaf())))
                  (Leaf(), (7 + 1))
                else
                  (t, 7)) in
                  (e143, (4 + t149)))
              else
                (let (e155,t161 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Cons]))
                  (let (e157,t163 := (let (ir2,it2 := if ((inp.tail.head > 0))
                    (t.left, (3 + 1))
                  else
                    (t.right, (3 + 1))) in
                    (let (r7,t164 := (let (ir3,it3 := (let (e169,t177 := delete(inp.tail, ir2)) in
                      (e169, (1 + (1 + t177))))) in
                      (let (r8,t174 := if (((ir3 == Leaf()) ∧ (((inp.tail.head > 0) ∧ (t.right == Leaf())) ∨ ((inp.tail.head ≤ 0) ∧ (t.left == Leaf())))))
                        (Leaf(), (18 + 1))
                      else
                        (let (e173,t181 := if ((inp.tail.head > 0))
                          (Node(t.nvalue, ir3, t.right), (3 + 3))
                        else
                          (Node(t.nvalue, t.left, ir3), (3 + 3))) in
                          (e173, (18 + t181)))) in
                        (r8, (t174 + (it3 + 1)))))) in
                      (r7, (t164 + (it2 + 1)))))) in
                    (e157, (4 + t163)))
                else
                  (t, 4)) in
                  (e155, (4 + t161)))) in
                (e141, (1 + t147)))) in
              (e138, (1 + t144)))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres12) && ((ci22 && (ci22 == t.isInstanceOf[Leaf]) && (ifres12 == tp18) && (arg18 == (1 + t139)) && (tp18 == (e133, arg18)) && ((ci23 && (ci23 == inp.isInstanceOf[Nil]) && (ifres13 == tp19) && (cc10 == Leaf()) && (arg19 == (1 + 1)) && (tp19 == (cc10, arg19))) || (!(ci24) && (ci24 == inp.isInstanceOf[Nil]) && (ifres13 == tp20) && (cc11 == Leaf()) && (arg20 == (1 + 1)) && (tp20 == (cc11, arg20)))) && (e133 == ts39) && (ts39 == ifres13._1) && (t139 == ts40) && (ts40 == ifres13._2)) || (!(ci25) && (ci25 == t.isInstanceOf[Leaf]) && (ifres12 == tp21) && (arg21 == (1 + t144)) && (tp21 == (e138, arg21)) && ((ci26 && (ci26 == inp.isInstanceOf[Nil]) && (ifres14 == tp22) && (arg22 == 1) && (tp22 == (t, arg22))) || (!(ci27) && (ci27 == inp.isInstanceOf[Nil]) && (ifres14 == tp23) && (arg23 == (1 + t147)) && (tp23 == (e141, arg23)) && ((ci28 && (ci28 == inp.isInstanceOf[Cons]) && ci29 && (cs29 == inp.tail) && (ci29 == cs29.isInstanceOf[Nil]) && (ifres15 == tp24) && (arg24 == (4 + t149)) && (tp24 == (e143, arg24)) && (((cs30 == cc12) && (cs30 == t.left) && (cc12 == Leaf()) && (cs31 == cc13) && (cs31 == t.right) && (cc13 == Leaf()) && (ifres16 == tp25) && (cc14 == Leaf()) && (arg25 == (7 + 1)) && (tp25 == (cc14, arg25))) || ((((cs32 != cc15) && (cs32 == t.left) && (cc15 == Leaf())) || ((cs33 != cc16) && (cs33 == t.right) && (cc16 == Leaf()))) && (ifres16 == tp26) && (arg26 == 7) && (tp26 == (t, arg26)))) && (e143 == ts41) && (ts41 == ifres16._1) && (t149 == ts42) && (ts42 == ifres16._2)) || (((!(ci30) && (ci30 == inp.isInstanceOf[Cons])) || (!(ci31) && (cs34 == inp.tail) && (ci31 == cs34.isInstanceOf[Nil]))) && (ifres15 == tp27) && (arg27 == (4 + t161)) && (tp27 == (e155, arg27)) && ((ci32 && (ci32 == inp.isInstanceOf[Cons]) && ci33 && (cs35 == inp.tail) && (ci33 == cs35.isInstanceOf[Cons]) && (ifres17 == tp28) && (arg28 == (4 + t163)) && (tp28 == (e157, arg28)) && (t174 == ts43) && (ts43 == ifres18._2) && (ir3 == e169) && (((ir3 == cc17) && (cc17 == Leaf()) && (((cs37 > 0) && (cs36 == inp.tail) && (cs37 == cs36.head) && (cs38 == cc18) && (cs38 == t.right) && (cc18 == Leaf())) || ((cs40 <= 0) && (cs39 == inp.tail) && (cs40 == cs39.head) && (cs41 == cc19) && (cs41 == t.left) && (cc19 == Leaf()))) && (ifres18 == tp29) && (cc20 == Leaf()) && (arg29 == (18 + 1)) && (tp29 == (cc20, arg29))) || ((((ir3 != cc21) && (cc21 == Leaf())) || ((((cs43 <= 0) && (cs42 == inp.tail) && (cs43 == cs42.head)) || ((cs44 != cc22) && (cs44 == t.right) && (cc22 == Leaf()))) && (((cs46 > 0) && (cs45 == inp.tail) && (cs46 == cs45.head)) || ((cs47 != cc23) && (cs47 == t.left) && (cc23 == Leaf()))))) && (ifres18 == tp30) && (arg30 == (18 + t181)) && (tp30 == (e173, arg30)) && (((cs49 > 0) && (cs48 == inp.tail) && (cs49 == cs48.head) && (ifres19 == tp31) && (arg31 == (3 + 3)) && (cs51 == t.right) && (cs50 == t.nvalue) && (tp31 == (cc24, arg31)) && (cc24 == Node(cs50, ir3, cs51))) || ((cs53 <= 0) && (cs52 == inp.tail) && (cs53 == cs52.head) && (ifres19 == tp32) && (arg32 == (3 + 3)) && (tp32 == (cc25, arg32)) && (cc25 == Node(cs54, cs55, ir3)) && (cs55 == t.left) && (cs54 == t.nvalue))) && (e173 == ts44) && (ts44 == ifres19._1) && (t181 == ts45) && (ts45 == ifres19._2))) && (r7 == r8) && (e157 == r7) && (t163 == (t164 + (it2 + 1))) && (ir2 == ts46) && (ts46 == ifres20._1) && (it3 == (1 + (1 + t177))) && (r8 == ts47) && (ts47 == ifres18._1) && (e169 == ts48) && (ts48 == tres3._1) && (t164 == (t174 + (it3 + 1))) && (tres3 == r32) && (cs56 == inp.tail) && (r32 == delete(cs56, ir2)) && (((cs58 > 0) && (cs57 == inp.tail) && (cs58 == cs57.head) && (ifres20 == tp33) && (cs59 == t.left) && (arg33 == (3 + 1)) && (tp33 == (cs59, arg33))) || ((cs61 <= 0) && (cs60 == inp.tail) && (cs61 == cs60.head) && (ifres20 == tp34) && (cs62 == t.right) && (arg34 == (3 + 1)) && (tp34 == (cs62, arg34)))) && (t177 == ts49) && (ts49 == tres3._2) && (it2 == ts50) && (ts50 == ifres20._2)) || (((!(ci34) && (ci34 == inp.isInstanceOf[Cons])) || (!(ci35) && (cs63 == inp.tail) && (ci35 == cs63.isInstanceOf[Cons]))) && (ifres17 == tp35) && (arg35 == 4) && (tp35 == (t, arg35)))) && (e155 == ts51) && (ts51 == ifres17._1) && (t161 == ts52) && (ts52 == ifres17._2))) && (e141 == ts53) && (ts53 == ifres15._1) && (t147 == ts54) && (ts54 == ifres15._2))) && (e138 == ts55) && (ts55 == ifres14._1) && (t144 == ts56) && (ts56 == ifres14._2))))
Flattened Post: ((ts57 > ((a?3 * r33) + c?3)) && (ts57 == res12._2) && (r33 == listSize(inp)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
delete-->((((1 * res12._2) + (0 * listSize(inp))) + 0) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
candidate Invariants
delete-->((((1 * res12._2) + (0 * listSize(inp))) + -15) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 258
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 9 + 9
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/2
Unrolled calls: Set((r33 == listSize(inp)))
Creating VC for listSize
Unrolling (r33 == listSize(inp))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
delete-->((((1 * res12._2) + (0 * listSize(inp))) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 11
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
delete-->((((-8 * listSize(inp)) + (16 * res12._2)) + -2) ≤ 0)
listSize-->(((-8 * #res) + 78) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 57
[[34m Info  [0m] Number of equal calls: 8
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 18 + 10
solving...
solved... in 0.007s
candidate Invariants
delete-->((((0 * listSize(inp)) + (1 * res12._2)) + -14) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 225
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 13 + 28
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/4
Unrolled calls: Set((r38 == listSize(cs56)))
Unrolling (r38 == listSize(cs56))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
delete-->((((0 * listSize(inp)) + (1 * res12._2)) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 301
[[34m Info  [0m] Number of equal calls: 25
# of atomic predicates: 15 + 0
solving...
solved... in 0.006s
candidate Invariants
delete-->((((-1 * listSize(inp)) + (8 * res12._2)) + 0) ≤ 0)
listSize-->(((0 * #res) + 351) ≤ 0)
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 15
solving...
solved... in 0.007s
candidate Invariants
delete-->((((-46 * listSize(inp)) + (1 * res12._2)) + 0) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 61
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 12 + 23
solving...
solved... in 0.008s
candidate Invariants
delete-->((((2 * res12._2) + (-86 * listSize(inp))) + -119) ≤ 0)
listSize-->(((-1 * #res) + -2) ≤ 0)
Nesting level: a?3-->1
Nesting level: c?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 43
Found new lower bound: 21
Found new lower bound: 32
Found new lower bound: 37
Found new lower bound: 40
Found new lower bound: 41
Found new upper bound: 42
Minimizing variable: c?3 Initial upperbound: 117/2
Found new upper bound: 231/8
Found new upper bound: 14
Found new upper bound: 28/5
Found new upper bound: 77/40
Found new upper bound: -7/6
Found new upper bound: -56/17
Found new upper bound: -161/20
Found new upper bound: -1463/86
Found new lower bound: -35
Found new upper bound: -1729/64
Found new lower bound: -32
Found new lower bound: -30
Found new lower bound: -29
Minimization complete...
candidate Invariants
delete-->((((64 * res12._2) + (-2688 * listSize(inp))) + 1729) ≤ 0)
listSize-->(((-64 * #res) + -1) ≤ 0)
Function: delete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 35
solving...
solved... in 0.009s
candidate Invariants
delete-->((((-43 * listSize(inp)) + (1 * res12._2)) + -16) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?3-->1
Nesting level: c?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 43
Found new lower bound: 21
Found new lower bound: 32
Found new lower bound: 37
Found new lower bound: 40
Found new lower bound: 41
Found new upper bound: 42
Minimizing variable: c?3 Initial upperbound: 57
Found new upper bound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: delete --> ((((1 * res12._2) + (-42 * listSize(inp))) + -3) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-3 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function create...
[[34m Info  [0m] Body: (let (e43,t47 := insert(inp, Leaf())) in
            (e43, (1 + (1 + t47))))
[[34m Info  [0m] Post: true
falttened Body: ((res10 == tp36) && (arg36 == (1 + (1 + t47))) && (tp36 == (e43, arg36)) && (tres4 == r50) && (cc26 == Leaf()) && (r50 == insert(inp, cc26)) && (e43 == ts71) && (ts71 == tres4._1) && (t47 == ts72) && (ts72 == tres4._2))
Flattened Post: ((ts73 > ((a?2 * r51) + c?2)) && (ts73 == res10._2) && (r51 == listSize(inp)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
create-->((((0 * listSize(inp)) + (1 * res10._2)) + 0) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 9 + 0
solving...
solved... in 0.004s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/2
Unrolled calls: Set((r50 == insert(inp, cc26)), (r51 == listSize(inp)))
Creating VC for insert
Unrolling (r50 == insert(inp, cc26))
Creating VC for listSize
Unrolling (r51 == listSize(inp))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
create-->((((1 * res10._2) + (0 * listSize(inp))) + 0) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 147
[[34m Info  [0m] Number of equal calls: 16
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 12 + 0
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/10
Unrolled calls: Set((r66 == listSize(inp)), (r58 == listSize(inp)))
Unrolling (r66 == listSize(inp))
Unrolling (r58 == listSize(inp))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
create-->((((1 * res10._2) + (0 * listSize(inp))) + 0) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 173
[[34m Info  [0m] Number of equal calls: 20
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 30
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 19 + 0
solving...
solved... in 0.007s
candidate Invariants
create-->((((-25 * listSize(inp)) + (1 * res10._2)) + 4) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((-1 * #res) + 2) ≤ 0)
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 19
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/16
Unrolled calls: Set((r73 == listSize(cs93)))
Unrolling (r73 == listSize(cs93))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
create-->((((0 * listSize(inp)) + (1 * res10._2)) + 0) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 173
[[34m Info  [0m] Number of equal calls: 20
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 30
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 25 + 0
solving...
solved... in 0.008s
candidate Invariants
create-->((((-184 * listSize(inp)) + (46 * res10._2)) + -597) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((-1 * #res) + 1) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 181
[[34m Info  [0m] Number of equal calls: 20
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 26 + 25
solving...
solved... in 0.011s
candidate Invariants
create-->((((1 * res10._2) + (-25 * listSize(inp))) + 4) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
Function: create--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 13 + 51
solving...
solved... in 0.014s
candidate Invariants
create-->((((1 * res10._2) + (-25 * listSize(inp))) + -5) ≤ 0)
insert-->((((2 * res11._2) + (-46 * listSize(inp))) + -5) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: c?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 25
Found new lower bound: 12
Found new lower bound: 18
Found new lower bound: 21
Found new upper bound: 23
Found new lower bound: 22
Minimizing variable: c?2 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: create --> ((((1 * res10._2) + (-23 * listSize(inp))) + -4) <= 0)
[[34m Info  [0m] - Found inductive invariant: insert --> ((((2 * res11._2) + (-46 * listSize(inp))) + -5) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function find...
[[34m Info  [0m] Body: if (inp.isInstanceOf[Nil])
            (t, 1)
          else
            (let (e2,t6 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Nil]))
              (t, 4)
            else
              (let (e5,t9 := if ((inp.isInstanceOf[Cons] ∧ inp.tail.isInstanceOf[Cons]))
                (let (e7,t11 := if (t.isInstanceOf[Leaf])
                  (t, 1)
                else
                  (let (e10,t14 := if ((inp.tail.head > 0))
                    (let (e12,t16 := (let (e15,t19 := find(inp.tail, t.left)) in
                      (e15, (1 + (1 + (1 + t19)))))) in
                      (e12, (3 + t16)))
                  else
                    (let (e18,t22 := (let (e21,t25 := find(inp.tail, t.right)) in
                      (e21, (1 + (1 + (1 + t25)))))) in
                      (e18, (3 + t22)))) in
                    (e10, (1 + t14)))) in
                  (e7, (4 + t11)))
              else
                (t, 4)) in
                (e5, (4 + t9)))) in
              (e2, (1 + t6)))
[[34m Info  [0m] Post: true
falttened Body: ((res9 == ifres47) && ((ci84 && (ci84 == inp.isInstanceOf[Nil]) && (ifres47 == tp73) && (arg73 == 1) && (tp73 == (t, arg73))) || (!(ci85) && (ci85 == inp.isInstanceOf[Nil]) && (ifres47 == tp74) && (arg74 == (1 + t6)) && (tp74 == (e2, arg74)) && ((ci86 && (ci86 == inp.isInstanceOf[Cons]) && ci87 && (cs124 == inp.tail) && (ci87 == cs124.isInstanceOf[Nil]) && (ifres48 == tp75) && (arg75 == 4) && (tp75 == (t, arg75))) || (((!(ci88) && (ci88 == inp.isInstanceOf[Cons])) || (!(ci89) && (cs125 == inp.tail) && (ci89 == cs125.isInstanceOf[Nil]))) && (ifres48 == tp76) && (arg76 == (4 + t9)) && (tp76 == (e5, arg76)) && ((ci90 && (ci90 == inp.isInstanceOf[Cons]) && ci91 && (cs126 == inp.tail) && (ci91 == cs126.isInstanceOf[Cons]) && (ifres49 == tp77) && (arg77 == (4 + t11)) && (tp77 == (e7, arg77)) && ((ci92 && (ci92 == t.isInstanceOf[Leaf]) && (ifres50 == tp78) && (arg78 == 1) && (tp78 == (t, arg78))) || (!(ci93) && (ci93 == t.isInstanceOf[Leaf]) && (ifres50 == tp79) && (arg79 == (1 + t14)) && (tp79 == (e10, arg79)) && (((cs128 > 0) && (cs127 == inp.tail) && (cs128 == cs127.head) && (ifres51 == tp80) && (arg80 == (3 + t16)) && (tp80 == (e12, arg80)) && (e12 == e15) && (tres11 == r92) && (cs129 == inp.tail) && (cs130 == t.left) && (r92 == find(cs129, cs130)) && (e15 == ts143) && (ts143 == tres11._1) && (t19 == ts144) && (ts144 == tres11._2) && (t16 == (1 + (1 + (1 + t19))))) || ((cs132 <= 0) && (cs131 == inp.tail) && (cs132 == cs131.head) && (ifres51 == tp81) && (arg81 == (3 + t22)) && (tp81 == (e18, arg81)) && (t25 == ts145) && (ts145 == tres12._2) && (t22 == (1 + (1 + (1 + t25)))) && (e18 == e21) && (e21 == ts146) && (ts146 == tres12._1) && (tres12 == r93) && (cs133 == inp.tail) && (cs134 == t.right) && (r93 == find(cs133, cs134)))) && (e10 == ts147) && (ts147 == ifres51._1) && (t14 == ts148) && (ts148 == ifres51._2))) && (e7 == ts149) && (ts149 == ifres50._1) && (t11 == ts150) && (ts150 == ifres50._2)) || (((!(ci94) && (ci94 == inp.isInstanceOf[Cons])) || (!(ci95) && (cs135 == inp.tail) && (ci95 == cs135.isInstanceOf[Cons]))) && (ifres49 == tp82) && (arg82 == 4) && (tp82 == (t, arg82)))) && (e5 == ts151) && (ts151 == ifres49._1) && (t9 == ts152) && (ts152 == ifres49._2))) && (e2 == ts153) && (ts153 == ifres48._1) && (t6 == ts154) && (ts154 == ifres48._2))))
Flattened Post: ((ts155 > ((a? * r94) + c?)) && (ts155 == res9._2) && (r94 == listSize(inp)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
find-->((((0 * listSize(inp)) + (1 * res9._2)) + 0) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
candidate Invariants
find-->((((1 * res9._2) + (0 * listSize(inp))) + -7) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 130
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 9 + 9
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/3
Unrolled calls: Set((r94 == listSize(inp)))
Creating VC for listSize
Unrolling (r94 == listSize(inp))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
find-->((((1 * res9._2) + (0 * listSize(inp))) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
find-->((((-8 * listSize(inp)) + (16 * res9._2)) + -2) ≤ 0)
listSize-->(((-8 * #res) + 110) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 9
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 18 + 10
solving...
solved... in 0.007s
candidate Invariants
find-->((((0 * listSize(inp)) + (1 * res9._2)) + -11) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 154
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 13 + 28
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/6
Unrolled calls: Set((r100 == listSize(cs133)))
Unrolling (r100 == listSize(cs133))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
find-->((((1 * res9._2) + (0 * listSize(inp))) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 12 + 0
solving...
solved... in 0.005s
candidate Invariants
find-->((((16 * res9._2) + (-2 * listSize(inp))) + -8) ≤ 0)
listSize-->(((-32 * #res) + 1648) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 163
[[34m Info  [0m] Number of equal calls: 17
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 23 + 12
solving...
solved... in 0.007s
candidate Invariants
find-->((((-34 * listSize(inp)) + (2 * res9._2)) + -49) ≤ 0)
listSize-->(((-1 * #res) + -2) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 12 + 35
solving...
solved... in 0.01s
candidate Invariants
find-->((((1 * res9._2) + (-17 * listSize(inp))) + -11) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 17
Found new lower bound: 8
Found new lower bound: 12
Found new lower bound: 14
Found new lower bound: 15
Found new upper bound: 16
Minimizing variable: c? Initial upperbound: 11
Found new upper bound: 4
Found new upper bound: 2
Found new upper bound: -1
Found new upper bound: -3
Found new upper bound: -6
Found new lower bound: -12
Found new lower bound: -9
Found new lower bound: -8
Found new lower bound: -7
Minimization complete...
candidate Invariants
find-->((((-16 * listSize(inp)) + (1 * res9._2)) + 6) ≤ 0)
listSize-->(((-1 * #res) + 0) ≤ 0)
Function: find--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 47
solving...
solved... in 0.011s
candidate Invariants
find-->((((-17 * listSize(inp)) + (1 * res9._2)) + -11) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 17
Found new lower bound: 8
Found new lower bound: 12
Found new lower bound: 14
Found new lower bound: 15
Found new upper bound: 16
Minimizing variable: c? Initial upperbound: 11
Found new upper bound: 3
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: find --> ((((-16 * listSize(inp)) + (1 * res9._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-3 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
