After Depth Instrumentation: 
object AVLTree {
  sealed abstract class Tree

  case class None() extends OptionInt

  case class Some(i: Int) extends OptionInt

  sealed abstract class OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Leaf() extends Tree

  def balanceFactor(t : Tree) : (Int, Int) = {locally {
    val dcond6 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Int, delse6: Int) = locally {
          val (r136: Int, d148: Int) = locally {
            val (e27: Int, d154: Int) = rank(t.left)
            (e27, (2 + d154))
          }
          
          locally {
            val (r137: Int, d149: Int) = locally {
              val (e26: Int, d151: Int) = rank(t.right)
              (e26, (2 + d151))
            }
            
            ((r136 - r137), (1 + if ((d148 >= d149)) {
              d148
            } else {
              d149
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  }

  def rotateRight(t : Tree) : (Tree, Int) = {locally {
    val dcond3 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
      locally {
        val (rthen3: Node, dthen3: Int) = locally {
          val (vr3: Int, vd2: Int) = locally {
            val (r58: Int, d56: Int) = locally {
              val (r60: Int, d58: Int) = locally {
                val (e14: Int, d65: Int) = rank(t.left.right)
                (e14, (3 + d65))
              }
              
              locally {
                val (r61: Int, d59: Int) = locally {
                  val (e13: Int, d62: Int) = rank(t.right)
                  (e13, (2 + d62))
                }
                
                locally {
                  val (e12: Int, d60: Int) = max(r60, r61)
                  (e12, ((1 + d60) + if ((d58 >= d59)) {
                    d58
                  } else {
                    d59
                  }))
                }
                
              }
              
            }
            
            ((r58 + 1), (1 + if ((d56 >= 0)) {
              d56
            } else {
              0
            }))
          }
          
          locally {
            val (br2: Node, bd2: Int) = locally {
              val (r70: Int, d71: Int) = locally {
                val (r71: Int, d72: Int) = locally {
                  val (r73: Int, d74: Int) = locally {
                    val (e16: Int, d78: Int) = rank(t.left.left)
                    (e16, (3 + d78))
                  }
                  
                  locally {
                    val (e15: Int, d76: Int) = max(r73, vr3)
                    (e15, ((1 + d76) + if ((d74 >= vd2)) {
                      d74
                    } else {
                      vd2
                    }))
                  }
                  
                }
                
                ((r71 + 1), (1 + if ((d72 >= 0)) {
                  d72
                } else {
                  0
                }))
              }
              
              (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              } >= d71)) {
                if ((2 >= (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                }))) {
                  2
                } else {
                  (1 + if ((2 >= vd2)) {
                    2
                  } else {
                    vd2
                  })
                }
              } else {
                d71
              }))
            }
            
            (br2, (bd2 + 1))
          }
          
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      (t, if ((dcond3 >= 0)) {
        dcond3
      } else {
        0
      })
    }
  }
  }

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res => true)

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {locally {
    val dcond19 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
      ((Leaf(), Some(t.value)), if ((dcond19 >= 3)) {
        dcond19
      } else {
        3
      })
    } else {
      locally {
        val (relse19: (Tree, OptionInt), delse19: Int) = locally {
          val dcond20 = 3
          if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
            locally {
              val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
                val (vr14: (Tree, OptionInt), vd13: Int) = locally {
                  val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                    val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                    (e53, (2 + d318))
                  }
                  
                  ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                    (1 + vd14)
                  } else {
                    (1 + vd14)
                  }))
                }
                
                locally {
                  val (br13: (Tree, OptionInt), bd13: Int) = locally {
                    val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                    locally {
                      val (br15: (Tree, OptionInt), bd15: Int) = locally {
                        val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                        locally {
                          val (br16: (Tree, OptionInt), bd16: Int) = locally {
                            val dcond21 = (1 + vd16)
                            if (vr17.isInstanceOf[None]) {
                              ((t, None()), if ((dcond21 >= 2)) {
                                dcond21
                              } else {
                                2
                              })
                            } else {
                              locally {
                                val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                                  val (vr18: Tree, vd17: Int) = locally {
                                    val (r289: Node, d329: Int) = locally {
                                      val (r293: Int, d334: Int) = locally {
                                        val (r294: Int, d335: Int) = locally {
                                          val (e55: Int, d338: Int) = rank(vr16)
                                          (e55, ((1 + d338) + vd15))
                                        }
                                        
                                        ((r294 + 1), (1 + if ((d335 >= 0)) {
                                          d335
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      } >= 1)) {
                                        if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        }
                                      } else {
                                        1
                                      } >= d334)) {
                                        if ((if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        } >= 1)) {
                                          if ((vd15 >= (1 + vd16))) {
                                            vd15
                                          } else {
                                            (1 + vd16)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d334
                                      }))
                                    }
                                    
                                    locally {
                                      val (e54: Tree, d330: Int) = balance(r289)
                                      (e54, ((1 + d330) + d329))
                                    }
                                    
                                  }
                                  
                                  ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                    vd17
                                  } else {
                                    2
                                  }))
                                }
                                
                                (relse20, if ((dcond21 >= delse20)) {
                                  dcond21
                                } else {
                                  delse20
                                })
                              }
                              
                            }
                          }
                          
                          (br16, (bd16 + 1))
                        }
                        
                      }
                      
                      (br15, (bd15 + 1))
                    }
                    
                  }
                  
                  (br13, (bd13 + 1))
                }
                
              }
              
              (rthen20, if ((dcond20 >= dthen20)) {
                dcond20
              } else {
                dthen20
              })
            }
            
          } else {
            locally {
              val (relse21: (Tree, OptionInt), delse21: Int) = locally {
                val dcond22 = 1
                if (t.isInstanceOf[Node]) {
                  locally {
                    val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                      val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                      (e56, (2 + d346))
                    }
                    
                    (rthen22, if ((dcond22 >= dthen22)) {
                      dcond22
                    } else {
                      dthen22
                    })
                  }
                  
                } else {
                  ((t, None()), if ((dcond22 >= 2)) {
                    dcond22
                  } else {
                    2
                  })
                }
              }
              
              (relse21, if ((dcond20 >= delse21)) {
                dcond20
              } else {
                delse21
              })
            }
            
          }
        }
        
        (relse19, if ((dcond19 >= delse19)) {
          dcond19
        } else {
          delse19
        })
      }
      
    }
  }
  } ensuring(res => true)

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), e, Leaf(), 1), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((e == t.value)) {
            (t, if ((dcond1 >= 0)) {
              dcond1
            } else {
              0
            })
          } else {
            locally {
              val (relse1: Node, delse1: Int) = locally {
                val dcond2 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (vr1: Tree, vd: Int) = locally {
                        val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                        (e4, (2 + d13))
                      }
                      
                      locally {
                        val (br: Node, bd: Int) = locally {
                          val (r27: Int, d18: Int) = locally {
                            val (r28: Int, d19: Int) = locally {
                              val (r30: Int, d21: Int) = locally {
                                val (e7: Int, d28: Int) = rank(vr1)
                                (e7, ((1 + d28) + vd))
                              }
                              
                              locally {
                                val (r31: Int, d22: Int) = locally {
                                  val (e6: Int, d25: Int) = rank(t.right)
                                  (e6, (2 + d25))
                                }
                                
                                locally {
                                  val (e5: Int, d23: Int) = max(r30, r31)
                                  (e5, ((1 + d23) + if ((d21 >= d22)) {
                                    d21
                                  } else {
                                    d22
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r28 + 1), (1 + if ((d19 >= 0)) {
                              d19
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                            vd
                          } else {
                            1
                          } >= 1)) {
                            if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d18)) {
                            if ((if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            } >= 1)) {
                              if ((vd >= 1)) {
                                vd
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d18
                          }))
                        }
                        
                        (br, (bd + 1))
                      }
                      
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Node, delse2: Int) = locally {
                      val (vr2: Tree, vd1: Int) = locally {
                        val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                        (e8, (2 + d33))
                      }
                      
                      locally {
                        val (br1: Node, bd1: Int) = locally {
                          val (r43: Int, d38: Int) = locally {
                            val (r44: Int, d39: Int) = locally {
                              val (r46: Int, d41: Int) = locally {
                                val (e11: Int, d47: Int) = rank(t.left)
                                (e11, (2 + d47))
                              }
                              
                              locally {
                                val (r47: Int, d42: Int) = locally {
                                  val (e10: Int, d45: Int) = rank(vr2)
                                  (e10, ((1 + d45) + vd1))
                                }
                                
                                locally {
                                  val (e9: Int, d43: Int) = max(r46, r47)
                                  (e9, ((1 + d43) + if ((d41 >= d42)) {
                                    d41
                                  } else {
                                    d42
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r44 + 1), (1 + if ((d39 >= 0)) {
                              d39
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                            1
                          } else {
                            vd1
                          } >= d38)) {
                            if ((1 >= vd1)) {
                              1
                            } else {
                              vd1
                            }
                          } else {
                            d38
                          }))
                        }
                        
                        (br1, (bd1 + 1))
                      }
                      
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  }

  def balance(t : Tree) : (Tree, Int) = {locally {
    val dcond14 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond14 >= 1)) {
        dcond14
      } else {
        1
      })
    } else {
      locally {
        val (relse14: Tree, delse14: Int) = locally {
          val (vr11: Int, vd10: Int) = locally {
            val (e40: Int, d241: Int) = balanceFactor(t)
            (e40, (1 + d241))
          }
          
          locally {
            val (br10: Tree, bd10: Int) = locally {
              val dcond15 = (1 + if ((vd10 >= 0)) {
                vd10
              } else {
                0
              })
              if ((vr11 > 1)) {
                locally {
                  val (rthen15: Tree, dthen15: Int) = locally {
                    val (vr12: Tree, vd11: Int) = locally {
                      val (rcond16: Boolean, dcond16: Int) = locally {
                        val (r217: Int, d244: Int) = locally {
                          val (e41: Int, d247: Int) = balanceFactor(t.left)
                          (e41, (2 + d247))
                        }
                        
                        ((r217 < 0), (1 + if ((d244 >= 0)) {
                          d244
                        } else {
                          0
                        }))
                      }
                      
                      if (rcond16) {
                        locally {
                          val (rthen16: Tree, dthen16: Int) = locally {
                            val (e42: Tree, d250: Int) = rotateLeft(t.left)
                            (e42, (2 + d250))
                          }
                          
                          (rthen16, if ((dcond16 >= dthen16)) {
                            dcond16
                          } else {
                            dthen16
                          })
                        }
                        
                      } else {
                        (t.left, if ((dcond16 >= 1)) {
                          dcond16
                        } else {
                          1
                        })
                      }
                    }
                    
                    locally {
                      val (br11: Tree, bd11: Int) = locally {
                        val (r224: Node, d253: Int) = locally {
                          val (r228: Int, d258: Int) = locally {
                            val (r229: Int, d259: Int) = locally {
                              val (r231: Int, d261: Int) = locally {
                                val (e46: Int, d268: Int) = rank(vr12)
                                (e46, ((1 + d268) + vd11))
                              }
                              
                              locally {
                                val (r232: Int, d262: Int) = locally {
                                  val (e45: Int, d265: Int) = rank(t.right)
                                  (e45, (2 + d265))
                                }
                                
                                locally {
                                  val (e44: Int, d263: Int) = max(r231, r232)
                                  (e44, ((1 + d263) + if ((d261 >= d262)) {
                                    d261
                                  } else {
                                    d262
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r229 + 1), (1 + if ((d259 >= 0)) {
                              d259
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d258)) {
                            if ((if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            } >= 1)) {
                              if ((vd11 >= 1)) {
                                vd11
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d258
                          }))
                        }
                        
                        locally {
                          val (e43: Tree, d254: Int) = rotateRight(r224)
                          (e43, ((1 + d254) + d253))
                        }
                        
                      }
                      
                      (br11, (bd11 + 1))
                    }
                    
                  }
                  
                  (rthen15, if ((dcond15 >= dthen15)) {
                    dcond15
                  } else {
                    dthen15
                  })
                }
                
              } else {
                locally {
                  val (relse16: Tree, delse16: Int) = locally {
                    val dcond17 = (1 + if ((vd10 >= 0)) {
                      vd10
                    } else {
                      0
                    })
                    if ((vr11 < -1)) {
                      locally {
                        val (rthen17: Tree, dthen17: Int) = locally {
                          val (vr13: Tree, vd12: Int) = locally {
                            val (rcond18: Boolean, dcond18: Int) = locally {
                              val (r240: Int, d273: Int) = locally {
                                val (e47: Int, d276: Int) = balanceFactor(t.right)
                                (e47, (2 + d276))
                              }
                              
                              ((r240 > 0), (1 + if ((d273 >= 0)) {
                                d273
                              } else {
                                0
                              }))
                            }
                            
                            if (rcond18) {
                              locally {
                                val (rthen18: Tree, dthen18: Int) = locally {
                                  val (e48: Tree, d279: Int) = rotateRight(t.right)
                                  (e48, (2 + d279))
                                }
                                
                                (rthen18, if ((dcond18 >= dthen18)) {
                                  dcond18
                                } else {
                                  dthen18
                                })
                              }
                              
                            } else {
                              (t.right, if ((dcond18 >= 1)) {
                                dcond18
                              } else {
                                1
                              })
                            }
                          }
                          
                          locally {
                            val (br12: Tree, bd12: Int) = locally {
                              val (r247: Node, d282: Int) = locally {
                                val (r251: Int, d287: Int) = locally {
                                  val (r252: Int, d288: Int) = locally {
                                    val (r254: Int, d290: Int) = locally {
                                      val (e52: Int, d297: Int) = rank(vr13)
                                      (e52, ((1 + d297) + vd12))
                                    }
                                    
                                    locally {
                                      val (r255: Int, d291: Int) = locally {
                                        val (e51: Int, d294: Int) = rank(t.left)
                                        (e51, (2 + d294))
                                      }
                                      
                                      locally {
                                        val (e50: Int, d292: Int) = max(r254, r255)
                                        (e50, ((1 + d292) + if ((d290 >= d291)) {
                                          d290
                                        } else {
                                          d291
                                        }))
                                      }
                                      
                                    }
                                    
                                  }
                                  
                                  ((r252 + 1), (1 + if ((d288 >= 0)) {
                                    d288
                                  } else {
                                    0
                                  }))
                                }
                                
                                (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                } >= d287)) {
                                  if ((1 >= vd12)) {
                                    1
                                  } else {
                                    vd12
                                  }
                                } else {
                                  d287
                                }))
                              }
                              
                              locally {
                                val (e49: Tree, d283: Int) = rotateLeft(r247)
                                (e49, ((1 + d283) + d282))
                              }
                              
                            }
                            
                            (br12, (bd12 + 1))
                          }
                          
                        }
                        
                        (rthen17, if ((dcond17 >= dthen17)) {
                          dcond17
                        } else {
                          dthen17
                        })
                      }
                      
                    } else {
                      (t, if ((dcond17 >= 0)) {
                        dcond17
                      } else {
                        0
                      })
                    }
                  }
                  
                  (relse16, if ((dcond15 >= delse16)) {
                    dcond15
                  } else {
                    delse16
                  })
                }
                
              }
            }
            
            (br10, (bd10 + 1))
          }
          
        }
        
        (relse14, if ((dcond14 >= delse14)) {
          dcond14
        } else {
          delse14
        })
      }
      
    }
  }
  }

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res => true)

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr)._1 + 1)
        }
        
      }
      
  })}

  def rank(t : Tree) : (Int, Int) = {locally {
    val dcond13 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      (t.rank, if ((dcond13 >= 1)) {
        dcond13
      } else {
        1
      })
    }
  }
  }

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {locally {
    val dcond4 = 1
    if ((i1 >= i2)) {
      (i1, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      (i2, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    }
  }
  }

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond7 >= 1)) {
        dcond7
      } else {
        1
      })
    } else {
      locally {
        val (relse7: Tree, delse7: Int) = locally {
          val dcond8 = 2
          if ((e == t.value)) {
            locally {
              val (rthen8: Tree, dthen8: Int) = locally {
                val dcond9 = 2
                if ((t.left == Leaf())) {
                  (t.right, if ((dcond9 >= 1)) {
                    dcond9
                  } else {
                    1
                  })
                } else {
                  locally {
                    val (relse8: Tree, delse8: Int) = locally {
                      val dcond10 = 2
                      if ((t.right == Leaf())) {
                        (t.left, if ((dcond10 >= 1)) {
                          dcond10
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse9: Tree, delse9: Int) = locally {
                            val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                              val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                                val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                                (e28, (2 + d169))
                              }
                              
                              ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                                (1 + vd5)
                              } else {
                                (1 + vd5)
                              }))
                            }
                            
                            locally {
                              val (br4: Tree, bd4: Int) = locally {
                                val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                                locally {
                                  val (br6: Tree, bd6: Int) = locally {
                                    val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                                    locally {
                                      val (br7: Tree, bd7: Int) = locally {
                                        val dcond11 = (1 + vd7)
                                        if (vr8.isInstanceOf[None]) {
                                          (t, if ((dcond11 >= 0)) {
                                            dcond11
                                          } else {
                                            0
                                          })
                                        } else {
                                          locally {
                                            val (relse10: Node, delse10: Int) = locally {
                                              val (r166: Int, d181: Int) = locally {
                                                val (r167: Int, d182: Int) = locally {
                                                  val (r169: Int, d184: Int) = locally {
                                                    val (e31: Int, d191: Int) = rank(vr7)
                                                    (e31, ((1 + d191) + vd6))
                                                  }
                                                  
                                                  locally {
                                                    val (r170: Int, d185: Int) = locally {
                                                      val (e30: Int, d188: Int) = rank(t.right)
                                                      (e30, (2 + d188))
                                                    }
                                                    
                                                    locally {
                                                      val (e29: Int, d186: Int) = max(r169, r170)
                                                      (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                        d184
                                                      } else {
                                                        d185
                                                      }))
                                                    }
                                                    
                                                  }
                                                  
                                                }
                                                
                                                ((r167 + 1), (1 + if ((d182 >= 0)) {
                                                  d182
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                                vd6
                                              } else {
                                                (1 + vd7)
                                              } >= 1)) {
                                                if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                }
                                              } else {
                                                1
                                              } >= d181)) {
                                                if ((if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                } >= 1)) {
                                                  if ((vd6 >= (1 + vd7))) {
                                                    vd6
                                                  } else {
                                                    (1 + vd7)
                                                  }
                                                } else {
                                                  1
                                                }
                                              } else {
                                                d181
                                              }))
                                            }
                                            
                                            (relse10, if ((dcond11 >= delse10)) {
                                              dcond11
                                            } else {
                                              delse10
                                            })
                                          }
                                          
                                        }
                                      }
                                      
                                      (br7, (bd7 + 1))
                                    }
                                    
                                  }
                                  
                                  (br6, (bd6 + 1))
                                }
                                
                              }
                              
                              (br4, (bd4 + 1))
                            }
                            
                          }
                          
                          (relse9, if ((dcond10 >= delse9)) {
                            dcond10
                          } else {
                            delse9
                          })
                        }
                        
                      }
                    }
                    
                    (relse8, if ((dcond9 >= delse8)) {
                      dcond9
                    } else {
                      delse8
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse11: Node, delse11: Int) = locally {
                val dcond12 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen12: Node, dthen12: Int) = locally {
                      val (vr9: Tree, vd8: Int) = locally {
                        val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                        (e32, (2 + d199))
                      }
                      
                      locally {
                        val (br8: Node, bd8: Int) = locally {
                          val (r185: Int, d204: Int) = locally {
                            val (r186: Int, d205: Int) = locally {
                              val (r188: Int, d207: Int) = locally {
                                val (e35: Int, d214: Int) = rank(vr9)
                                (e35, ((1 + d214) + vd8))
                              }
                              
                              locally {
                                val (r189: Int, d208: Int) = locally {
                                  val (e34: Int, d211: Int) = rank(t.right)
                                  (e34, (2 + d211))
                                }
                                
                                locally {
                                  val (e33: Int, d209: Int) = max(r188, r189)
                                  (e33, ((1 + d209) + if ((d207 >= d208)) {
                                    d207
                                  } else {
                                    d208
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r186 + 1), (1 + if ((d205 >= 0)) {
                              d205
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                            vd8
                          } else {
                            1
                          } >= 1)) {
                            if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d204)) {
                            if ((if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            } >= 1)) {
                              if ((vd8 >= 1)) {
                                vd8
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d204
                          }))
                        }
                        
                        (br8, (bd8 + 1))
                      }
                      
                    }
                    
                    (rthen12, if ((dcond12 >= dthen12)) {
                      dcond12
                    } else {
                      dthen12
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: Node, delse12: Int) = locally {
                      val (vr10: Tree, vd9: Int) = locally {
                        val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                        (e36, (2 + d219))
                      }
                      
                      locally {
                        val (br9: Node, bd9: Int) = locally {
                          val (r201: Int, d224: Int) = locally {
                            val (r202: Int, d225: Int) = locally {
                              val (r204: Int, d227: Int) = locally {
                                val (e39: Int, d233: Int) = rank(t.left)
                                (e39, (2 + d233))
                              }
                              
                              locally {
                                val (r205: Int, d228: Int) = locally {
                                  val (e38: Int, d231: Int) = rank(vr10)
                                  (e38, ((1 + d231) + vd9))
                                }
                                
                                locally {
                                  val (e37: Int, d229: Int) = max(r204, r205)
                                  (e37, ((1 + d229) + if ((d227 >= d228)) {
                                    d227
                                  } else {
                                    d228
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r202 + 1), (1 + if ((d225 >= 0)) {
                              d225
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                            1
                          } else {
                            vd9
                          } >= d224)) {
                            if ((1 >= vd9)) {
                              1
                            } else {
                              vd9
                            }
                          } else {
                            d224
                          }))
                        }
                        
                        (br9, (bd9 + 1))
                      }
                      
                    }
                    
                    (relse12, if ((dcond12 >= delse12)) {
                      dcond12
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (relse11, if ((dcond8 >= delse11)) {
                dcond8
              } else {
                delse11
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  }

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def rotateLeft(t : Tree) : (Tree, Int) = {locally {
    val dcond5 = 3
    if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
      locally {
        val (rthen5: Node, dthen5: Int) = locally {
          val (vr4: Int, vd3: Int) = locally {
            val (r103: Int, d110: Int) = locally {
              val (r105: Int, d112: Int) = locally {
                val (e23: Int, d120: Int) = rank(t.left)
                (e23, (2 + d120))
              }
              
              locally {
                val (r106: Int, d113: Int) = locally {
                  val (e22: Int, d116: Int) = rank(t.right.left)
                  (e22, (3 + d116))
                }
                
                locally {
                  val (e21: Int, d114: Int) = max(r105, r106)
                  (e21, ((1 + d114) + if ((d112 >= d113)) {
                    d112
                  } else {
                    d113
                  }))
                }
                
              }
              
            }
            
            ((r103 + 1), (1 + if ((d110 >= 0)) {
              d110
            } else {
              0
            }))
          }
          
          locally {
            val (br3: Node, bd3: Int) = locally {
              val (r115: Int, d125: Int) = locally {
                val (r116: Int, d126: Int) = locally {
                  val (r119: Int, d129: Int) = locally {
                    val (e25: Int, d132: Int) = rank(t.right.right)
                    (e25, (3 + d132))
                  }
                  
                  locally {
                    val (e24: Int, d130: Int) = max(vr4, r119)
                    (e24, ((1 + d130) + if ((vd3 >= d129)) {
                      vd3
                    } else {
                      d129
                    }))
                  }
                  
                }
                
                ((r116 + 1), (1 + if ((d126 >= 0)) {
                  d126
                } else {
                  0
                }))
              }
              
              (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              } >= d125)) {
                if ((if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                } >= 2)) {
                  if (((1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  }) >= 2)) {
                    (1 + if ((2 >= vd3)) {
                      2
                    } else {
                      vd3
                    })
                  } else {
                    2
                  }
                } else {
                  2
                }
              } else {
                d125
              }))
            }
            
            (br3, (bd3 + 1))
          }
          
        }
        
        (rthen5, if ((dcond5 >= dthen5)) {
          dcond5
        } else {
          dthen5
        })
      }
      
    } else {
      (t, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: balanceFactor
Defined fun: rotateRight
Defined fun: avlInsert
Defined fun: size
Defined fun: deleteMax
Defined fun: unbalancedInsert
Defined fun: balance
Defined fun: avlDelete
Defined fun: height
Defined fun: rank
Defined fun: min
Defined fun: max
Defined fun: unbalancedDelete
Defined fun: rankHeight
Defined fun: rotateLeft
Defined fun: max
FunMap: Map(size -> size, avlDelete -> avlDelete, unbalancedDelete -> unbalancedDelete, avlInsert -> avlInsert, balance -> balance, max -> max, rankHeight -> rankHeight, rotateLeft -> rotateLeft, rank -> rank, unbalancedInsert -> unbalancedInsert, balanceFactor -> balanceFactor, min -> min, height -> height, deleteMax -> deleteMax, max -> max, rotateRight -> rotateRight)
After Time Instrumentation: 
object AVLTree {
  sealed abstract class Tree

  case class None() extends OptionInt

  case class Some(i: Int) extends OptionInt

  sealed abstract class OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Leaf() extends Tree

  def balanceFactor(t : Tree) : (Int, Int) = {locally {
    val dcond6 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Int, delse6: Int) = locally {
          val (r136: Int, d148: Int) = locally {
            val (e27: Int, d154: Int) = rank(t.left)
            (e27, (2 + d154))
          }
          
          locally {
            val (r137: Int, d149: Int) = locally {
              val (e26: Int, d151: Int) = rank(t.right)
              (e26, (2 + d151))
            }
            
            ((r136 - r137), (1 + if ((d148 >= d149)) {
              d148
            } else {
              d149
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  }

  def rotateRight(t : Tree) : (Tree, Int) = {locally {
    val dcond3 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
      locally {
        val (rthen3: Node, dthen3: Int) = locally {
          val (vr3: Int, vd2: Int) = locally {
            val (r58: Int, d56: Int) = locally {
              val (r60: Int, d58: Int) = locally {
                val (e14: Int, d65: Int) = rank(t.left.right)
                (e14, (3 + d65))
              }
              
              locally {
                val (r61: Int, d59: Int) = locally {
                  val (e13: Int, d62: Int) = rank(t.right)
                  (e13, (2 + d62))
                }
                
                locally {
                  val (e12: Int, d60: Int) = max(r60, r61)
                  (e12, ((1 + d60) + if ((d58 >= d59)) {
                    d58
                  } else {
                    d59
                  }))
                }
                
              }
              
            }
            
            ((r58 + 1), (1 + if ((d56 >= 0)) {
              d56
            } else {
              0
            }))
          }
          
          locally {
            val (br2: Node, bd2: Int) = locally {
              val (r70: Int, d71: Int) = locally {
                val (r71: Int, d72: Int) = locally {
                  val (r73: Int, d74: Int) = locally {
                    val (e16: Int, d78: Int) = rank(t.left.left)
                    (e16, (3 + d78))
                  }
                  
                  locally {
                    val (e15: Int, d76: Int) = max(r73, vr3)
                    (e15, ((1 + d76) + if ((d74 >= vd2)) {
                      d74
                    } else {
                      vd2
                    }))
                  }
                  
                }
                
                ((r71 + 1), (1 + if ((d72 >= 0)) {
                  d72
                } else {
                  0
                }))
              }
              
              (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              } >= d71)) {
                if ((2 >= (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                }))) {
                  2
                } else {
                  (1 + if ((2 >= vd2)) {
                    2
                  } else {
                    vd2
                  })
                }
              } else {
                d71
              }))
            }
            
            (br2, (bd2 + 1))
          }
          
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      (t, if ((dcond3 >= 0)) {
        dcond3
      } else {
        0
      })
    }
  }
  }

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res11 => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res9 => true)

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {locally {
    val dcond19 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
      ((Leaf(), Some(t.value)), if ((dcond19 >= 3)) {
        dcond19
      } else {
        3
      })
    } else {
      locally {
        val (relse19: (Tree, OptionInt), delse19: Int) = locally {
          val dcond20 = 3
          if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
            locally {
              val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
                val (vr14: (Tree, OptionInt), vd13: Int) = locally {
                  val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                    val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                    (e53, (2 + d318))
                  }
                  
                  ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                    (1 + vd14)
                  } else {
                    (1 + vd14)
                  }))
                }
                
                locally {
                  val (br13: (Tree, OptionInt), bd13: Int) = locally {
                    val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                    locally {
                      val (br15: (Tree, OptionInt), bd15: Int) = locally {
                        val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                        locally {
                          val (br16: (Tree, OptionInt), bd16: Int) = locally {
                            val dcond21 = (1 + vd16)
                            if (vr17.isInstanceOf[None]) {
                              ((t, None()), if ((dcond21 >= 2)) {
                                dcond21
                              } else {
                                2
                              })
                            } else {
                              locally {
                                val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                                  val (vr18: Tree, vd17: Int) = locally {
                                    val (r289: Node, d329: Int) = locally {
                                      val (r293: Int, d334: Int) = locally {
                                        val (r294: Int, d335: Int) = locally {
                                          val (e55: Int, d338: Int) = rank(vr16)
                                          (e55, ((1 + d338) + vd15))
                                        }
                                        
                                        ((r294 + 1), (1 + if ((d335 >= 0)) {
                                          d335
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      } >= 1)) {
                                        if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        }
                                      } else {
                                        1
                                      } >= d334)) {
                                        if ((if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        } >= 1)) {
                                          if ((vd15 >= (1 + vd16))) {
                                            vd15
                                          } else {
                                            (1 + vd16)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d334
                                      }))
                                    }
                                    
                                    locally {
                                      val (e54: Tree, d330: Int) = balance(r289)
                                      (e54, ((1 + d330) + d329))
                                    }
                                    
                                  }
                                  
                                  ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                    vd17
                                  } else {
                                    2
                                  }))
                                }
                                
                                (relse20, if ((dcond21 >= delse20)) {
                                  dcond21
                                } else {
                                  delse20
                                })
                              }
                              
                            }
                          }
                          
                          (br16, (bd16 + 1))
                        }
                        
                      }
                      
                      (br15, (bd15 + 1))
                    }
                    
                  }
                  
                  (br13, (bd13 + 1))
                }
                
              }
              
              (rthen20, if ((dcond20 >= dthen20)) {
                dcond20
              } else {
                dthen20
              })
            }
            
          } else {
            locally {
              val (relse21: (Tree, OptionInt), delse21: Int) = locally {
                val dcond22 = 1
                if (t.isInstanceOf[Node]) {
                  locally {
                    val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                      val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                      (e56, (2 + d346))
                    }
                    
                    (rthen22, if ((dcond22 >= dthen22)) {
                      dcond22
                    } else {
                      dthen22
                    })
                  }
                  
                } else {
                  ((t, None()), if ((dcond22 >= 2)) {
                    dcond22
                  } else {
                    2
                  })
                }
              }
              
              (relse21, if ((dcond20 >= delse21)) {
                dcond20
              } else {
                delse21
              })
            }
            
          }
        }
        
        (relse19, if ((dcond19 >= delse19)) {
          dcond19
        } else {
          delse19
        })
      }
      
    }
  }
  } ensuring(res12 => true)

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), e, Leaf(), 1), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((e == t.value)) {
            (t, if ((dcond1 >= 0)) {
              dcond1
            } else {
              0
            })
          } else {
            locally {
              val (relse1: Node, delse1: Int) = locally {
                val dcond2 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (vr1: Tree, vd: Int) = locally {
                        val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                        (e4, (2 + d13))
                      }
                      
                      locally {
                        val (br: Node, bd: Int) = locally {
                          val (r27: Int, d18: Int) = locally {
                            val (r28: Int, d19: Int) = locally {
                              val (r30: Int, d21: Int) = locally {
                                val (e7: Int, d28: Int) = rank(vr1)
                                (e7, ((1 + d28) + vd))
                              }
                              
                              locally {
                                val (r31: Int, d22: Int) = locally {
                                  val (e6: Int, d25: Int) = rank(t.right)
                                  (e6, (2 + d25))
                                }
                                
                                locally {
                                  val (e5: Int, d23: Int) = max(r30, r31)
                                  (e5, ((1 + d23) + if ((d21 >= d22)) {
                                    d21
                                  } else {
                                    d22
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r28 + 1), (1 + if ((d19 >= 0)) {
                              d19
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                            vd
                          } else {
                            1
                          } >= 1)) {
                            if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d18)) {
                            if ((if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            } >= 1)) {
                              if ((vd >= 1)) {
                                vd
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d18
                          }))
                        }
                        
                        (br, (bd + 1))
                      }
                      
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Node, delse2: Int) = locally {
                      val (vr2: Tree, vd1: Int) = locally {
                        val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                        (e8, (2 + d33))
                      }
                      
                      locally {
                        val (br1: Node, bd1: Int) = locally {
                          val (r43: Int, d38: Int) = locally {
                            val (r44: Int, d39: Int) = locally {
                              val (r46: Int, d41: Int) = locally {
                                val (e11: Int, d47: Int) = rank(t.left)
                                (e11, (2 + d47))
                              }
                              
                              locally {
                                val (r47: Int, d42: Int) = locally {
                                  val (e10: Int, d45: Int) = rank(vr2)
                                  (e10, ((1 + d45) + vd1))
                                }
                                
                                locally {
                                  val (e9: Int, d43: Int) = max(r46, r47)
                                  (e9, ((1 + d43) + if ((d41 >= d42)) {
                                    d41
                                  } else {
                                    d42
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r44 + 1), (1 + if ((d39 >= 0)) {
                              d39
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                            1
                          } else {
                            vd1
                          } >= d38)) {
                            if ((1 >= vd1)) {
                              1
                            } else {
                              vd1
                            }
                          } else {
                            d38
                          }))
                        }
                        
                        (br1, (bd1 + 1))
                      }
                      
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  }

  def balance(t : Tree) : (Tree, Int) = {locally {
    val dcond14 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond14 >= 1)) {
        dcond14
      } else {
        1
      })
    } else {
      locally {
        val (relse14: Tree, delse14: Int) = locally {
          val (vr11: Int, vd10: Int) = locally {
            val (e40: Int, d241: Int) = balanceFactor(t)
            (e40, (1 + d241))
          }
          
          locally {
            val (br10: Tree, bd10: Int) = locally {
              val dcond15 = (1 + if ((vd10 >= 0)) {
                vd10
              } else {
                0
              })
              if ((vr11 > 1)) {
                locally {
                  val (rthen15: Tree, dthen15: Int) = locally {
                    val (vr12: Tree, vd11: Int) = locally {
                      val (rcond16: Boolean, dcond16: Int) = locally {
                        val (r217: Int, d244: Int) = locally {
                          val (e41: Int, d247: Int) = balanceFactor(t.left)
                          (e41, (2 + d247))
                        }
                        
                        ((r217 < 0), (1 + if ((d244 >= 0)) {
                          d244
                        } else {
                          0
                        }))
                      }
                      
                      if (rcond16) {
                        locally {
                          val (rthen16: Tree, dthen16: Int) = locally {
                            val (e42: Tree, d250: Int) = rotateLeft(t.left)
                            (e42, (2 + d250))
                          }
                          
                          (rthen16, if ((dcond16 >= dthen16)) {
                            dcond16
                          } else {
                            dthen16
                          })
                        }
                        
                      } else {
                        (t.left, if ((dcond16 >= 1)) {
                          dcond16
                        } else {
                          1
                        })
                      }
                    }
                    
                    locally {
                      val (br11: Tree, bd11: Int) = locally {
                        val (r224: Node, d253: Int) = locally {
                          val (r228: Int, d258: Int) = locally {
                            val (r229: Int, d259: Int) = locally {
                              val (r231: Int, d261: Int) = locally {
                                val (e46: Int, d268: Int) = rank(vr12)
                                (e46, ((1 + d268) + vd11))
                              }
                              
                              locally {
                                val (r232: Int, d262: Int) = locally {
                                  val (e45: Int, d265: Int) = rank(t.right)
                                  (e45, (2 + d265))
                                }
                                
                                locally {
                                  val (e44: Int, d263: Int) = max(r231, r232)
                                  (e44, ((1 + d263) + if ((d261 >= d262)) {
                                    d261
                                  } else {
                                    d262
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r229 + 1), (1 + if ((d259 >= 0)) {
                              d259
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d258)) {
                            if ((if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            } >= 1)) {
                              if ((vd11 >= 1)) {
                                vd11
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d258
                          }))
                        }
                        
                        locally {
                          val (e43: Tree, d254: Int) = rotateRight(r224)
                          (e43, ((1 + d254) + d253))
                        }
                        
                      }
                      
                      (br11, (bd11 + 1))
                    }
                    
                  }
                  
                  (rthen15, if ((dcond15 >= dthen15)) {
                    dcond15
                  } else {
                    dthen15
                  })
                }
                
              } else {
                locally {
                  val (relse16: Tree, delse16: Int) = locally {
                    val dcond17 = (1 + if ((vd10 >= 0)) {
                      vd10
                    } else {
                      0
                    })
                    if ((vr11 < -1)) {
                      locally {
                        val (rthen17: Tree, dthen17: Int) = locally {
                          val (vr13: Tree, vd12: Int) = locally {
                            val (rcond18: Boolean, dcond18: Int) = locally {
                              val (r240: Int, d273: Int) = locally {
                                val (e47: Int, d276: Int) = balanceFactor(t.right)
                                (e47, (2 + d276))
                              }
                              
                              ((r240 > 0), (1 + if ((d273 >= 0)) {
                                d273
                              } else {
                                0
                              }))
                            }
                            
                            if (rcond18) {
                              locally {
                                val (rthen18: Tree, dthen18: Int) = locally {
                                  val (e48: Tree, d279: Int) = rotateRight(t.right)
                                  (e48, (2 + d279))
                                }
                                
                                (rthen18, if ((dcond18 >= dthen18)) {
                                  dcond18
                                } else {
                                  dthen18
                                })
                              }
                              
                            } else {
                              (t.right, if ((dcond18 >= 1)) {
                                dcond18
                              } else {
                                1
                              })
                            }
                          }
                          
                          locally {
                            val (br12: Tree, bd12: Int) = locally {
                              val (r247: Node, d282: Int) = locally {
                                val (r251: Int, d287: Int) = locally {
                                  val (r252: Int, d288: Int) = locally {
                                    val (r254: Int, d290: Int) = locally {
                                      val (e52: Int, d297: Int) = rank(vr13)
                                      (e52, ((1 + d297) + vd12))
                                    }
                                    
                                    locally {
                                      val (r255: Int, d291: Int) = locally {
                                        val (e51: Int, d294: Int) = rank(t.left)
                                        (e51, (2 + d294))
                                      }
                                      
                                      locally {
                                        val (e50: Int, d292: Int) = max(r254, r255)
                                        (e50, ((1 + d292) + if ((d290 >= d291)) {
                                          d290
                                        } else {
                                          d291
                                        }))
                                      }
                                      
                                    }
                                    
                                  }
                                  
                                  ((r252 + 1), (1 + if ((d288 >= 0)) {
                                    d288
                                  } else {
                                    0
                                  }))
                                }
                                
                                (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                } >= d287)) {
                                  if ((1 >= vd12)) {
                                    1
                                  } else {
                                    vd12
                                  }
                                } else {
                                  d287
                                }))
                              }
                              
                              locally {
                                val (e49: Tree, d283: Int) = rotateLeft(r247)
                                (e49, ((1 + d283) + d282))
                              }
                              
                            }
                            
                            (br12, (bd12 + 1))
                          }
                          
                        }
                        
                        (rthen17, if ((dcond17 >= dthen17)) {
                          dcond17
                        } else {
                          dthen17
                        })
                      }
                      
                    } else {
                      (t, if ((dcond17 >= 0)) {
                        dcond17
                      } else {
                        0
                      })
                    }
                  }
                  
                  (relse16, if ((dcond15 >= delse16)) {
                    dcond15
                  } else {
                    delse16
                  })
                }
                
              }
            }
            
            (br10, (bd10 + 1))
          }
          
        }
        
        (relse14, if ((dcond14 >= delse14)) {
          dcond14
        } else {
          delse14
        })
      }
      
    }
  }
  }

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res10 => true)

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr)._1 + 1)
        }
        
      }
      
  })}

  def rank(t : Tree) : (Int, Int) = {locally {
    val dcond13 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      (t.rank, if ((dcond13 >= 1)) {
        dcond13
      } else {
        1
      })
    }
  }
  }

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {locally {
    val dcond4 = 1
    if ((i1 >= i2)) {
      (i1, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      (i2, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    }
  }
  }

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond7 >= 1)) {
        dcond7
      } else {
        1
      })
    } else {
      locally {
        val (relse7: Tree, delse7: Int) = locally {
          val dcond8 = 2
          if ((e == t.value)) {
            locally {
              val (rthen8: Tree, dthen8: Int) = locally {
                val dcond9 = 2
                if ((t.left == Leaf())) {
                  (t.right, if ((dcond9 >= 1)) {
                    dcond9
                  } else {
                    1
                  })
                } else {
                  locally {
                    val (relse8: Tree, delse8: Int) = locally {
                      val dcond10 = 2
                      if ((t.right == Leaf())) {
                        (t.left, if ((dcond10 >= 1)) {
                          dcond10
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse9: Tree, delse9: Int) = locally {
                            val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                              val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                                val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                                (e28, (2 + d169))
                              }
                              
                              ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                                (1 + vd5)
                              } else {
                                (1 + vd5)
                              }))
                            }
                            
                            locally {
                              val (br4: Tree, bd4: Int) = locally {
                                val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                                locally {
                                  val (br6: Tree, bd6: Int) = locally {
                                    val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                                    locally {
                                      val (br7: Tree, bd7: Int) = locally {
                                        val dcond11 = (1 + vd7)
                                        if (vr8.isInstanceOf[None]) {
                                          (t, if ((dcond11 >= 0)) {
                                            dcond11
                                          } else {
                                            0
                                          })
                                        } else {
                                          locally {
                                            val (relse10: Node, delse10: Int) = locally {
                                              val (r166: Int, d181: Int) = locally {
                                                val (r167: Int, d182: Int) = locally {
                                                  val (r169: Int, d184: Int) = locally {
                                                    val (e31: Int, d191: Int) = rank(vr7)
                                                    (e31, ((1 + d191) + vd6))
                                                  }
                                                  
                                                  locally {
                                                    val (r170: Int, d185: Int) = locally {
                                                      val (e30: Int, d188: Int) = rank(t.right)
                                                      (e30, (2 + d188))
                                                    }
                                                    
                                                    locally {
                                                      val (e29: Int, d186: Int) = max(r169, r170)
                                                      (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                        d184
                                                      } else {
                                                        d185
                                                      }))
                                                    }
                                                    
                                                  }
                                                  
                                                }
                                                
                                                ((r167 + 1), (1 + if ((d182 >= 0)) {
                                                  d182
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                                vd6
                                              } else {
                                                (1 + vd7)
                                              } >= 1)) {
                                                if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                }
                                              } else {
                                                1
                                              } >= d181)) {
                                                if ((if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                } >= 1)) {
                                                  if ((vd6 >= (1 + vd7))) {
                                                    vd6
                                                  } else {
                                                    (1 + vd7)
                                                  }
                                                } else {
                                                  1
                                                }
                                              } else {
                                                d181
                                              }))
                                            }
                                            
                                            (relse10, if ((dcond11 >= delse10)) {
                                              dcond11
                                            } else {
                                              delse10
                                            })
                                          }
                                          
                                        }
                                      }
                                      
                                      (br7, (bd7 + 1))
                                    }
                                    
                                  }
                                  
                                  (br6, (bd6 + 1))
                                }
                                
                              }
                              
                              (br4, (bd4 + 1))
                            }
                            
                          }
                          
                          (relse9, if ((dcond10 >= delse9)) {
                            dcond10
                          } else {
                            delse9
                          })
                        }
                        
                      }
                    }
                    
                    (relse8, if ((dcond9 >= delse8)) {
                      dcond9
                    } else {
                      delse8
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse11: Node, delse11: Int) = locally {
                val dcond12 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen12: Node, dthen12: Int) = locally {
                      val (vr9: Tree, vd8: Int) = locally {
                        val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                        (e32, (2 + d199))
                      }
                      
                      locally {
                        val (br8: Node, bd8: Int) = locally {
                          val (r185: Int, d204: Int) = locally {
                            val (r186: Int, d205: Int) = locally {
                              val (r188: Int, d207: Int) = locally {
                                val (e35: Int, d214: Int) = rank(vr9)
                                (e35, ((1 + d214) + vd8))
                              }
                              
                              locally {
                                val (r189: Int, d208: Int) = locally {
                                  val (e34: Int, d211: Int) = rank(t.right)
                                  (e34, (2 + d211))
                                }
                                
                                locally {
                                  val (e33: Int, d209: Int) = max(r188, r189)
                                  (e33, ((1 + d209) + if ((d207 >= d208)) {
                                    d207
                                  } else {
                                    d208
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r186 + 1), (1 + if ((d205 >= 0)) {
                              d205
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                            vd8
                          } else {
                            1
                          } >= 1)) {
                            if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d204)) {
                            if ((if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            } >= 1)) {
                              if ((vd8 >= 1)) {
                                vd8
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d204
                          }))
                        }
                        
                        (br8, (bd8 + 1))
                      }
                      
                    }
                    
                    (rthen12, if ((dcond12 >= dthen12)) {
                      dcond12
                    } else {
                      dthen12
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: Node, delse12: Int) = locally {
                      val (vr10: Tree, vd9: Int) = locally {
                        val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                        (e36, (2 + d219))
                      }
                      
                      locally {
                        val (br9: Node, bd9: Int) = locally {
                          val (r201: Int, d224: Int) = locally {
                            val (r202: Int, d225: Int) = locally {
                              val (r204: Int, d227: Int) = locally {
                                val (e39: Int, d233: Int) = rank(t.left)
                                (e39, (2 + d233))
                              }
                              
                              locally {
                                val (r205: Int, d228: Int) = locally {
                                  val (e38: Int, d231: Int) = rank(vr10)
                                  (e38, ((1 + d231) + vd9))
                                }
                                
                                locally {
                                  val (e37: Int, d229: Int) = max(r204, r205)
                                  (e37, ((1 + d229) + if ((d227 >= d228)) {
                                    d227
                                  } else {
                                    d228
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r202 + 1), (1 + if ((d225 >= 0)) {
                              d225
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                            1
                          } else {
                            vd9
                          } >= d224)) {
                            if ((1 >= vd9)) {
                              1
                            } else {
                              vd9
                            }
                          } else {
                            d224
                          }))
                        }
                        
                        (br9, (bd9 + 1))
                      }
                      
                    }
                    
                    (relse12, if ((dcond12 >= delse12)) {
                      dcond12
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (relse11, if ((dcond8 >= delse11)) {
                dcond8
              } else {
                delse11
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  }

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def rotateLeft(t : Tree) : (Tree, Int) = {locally {
    val dcond5 = 3
    if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
      locally {
        val (rthen5: Node, dthen5: Int) = locally {
          val (vr4: Int, vd3: Int) = locally {
            val (r103: Int, d110: Int) = locally {
              val (r105: Int, d112: Int) = locally {
                val (e23: Int, d120: Int) = rank(t.left)
                (e23, (2 + d120))
              }
              
              locally {
                val (r106: Int, d113: Int) = locally {
                  val (e22: Int, d116: Int) = rank(t.right.left)
                  (e22, (3 + d116))
                }
                
                locally {
                  val (e21: Int, d114: Int) = max(r105, r106)
                  (e21, ((1 + d114) + if ((d112 >= d113)) {
                    d112
                  } else {
                    d113
                  }))
                }
                
              }
              
            }
            
            ((r103 + 1), (1 + if ((d110 >= 0)) {
              d110
            } else {
              0
            }))
          }
          
          locally {
            val (br3: Node, bd3: Int) = locally {
              val (r115: Int, d125: Int) = locally {
                val (r116: Int, d126: Int) = locally {
                  val (r119: Int, d129: Int) = locally {
                    val (e25: Int, d132: Int) = rank(t.right.right)
                    (e25, (3 + d132))
                  }
                  
                  locally {
                    val (e24: Int, d130: Int) = max(vr4, r119)
                    (e24, ((1 + d130) + if ((vd3 >= d129)) {
                      vd3
                    } else {
                      d129
                    }))
                  }
                  
                }
                
                ((r116 + 1), (1 + if ((d126 >= 0)) {
                  d126
                } else {
                  0
                }))
              }
              
              (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              } >= d125)) {
                if ((if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                } >= 2)) {
                  if (((1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  }) >= 2)) {
                    (1 + if ((2 >= vd3)) {
                      2
                    } else {
                      vd3
                    })
                  } else {
                    2
                  }
                } else {
                  2
                }
              } else {
                d125
              }))
            }
            
            (br3, (bd3 + 1))
          }
          
        }
        
        (rthen5, if ((dcond5 >= dthen5)) {
          dcond5
        } else {
          dthen5
        })
      }
      
    } else {
      (t, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object AVLTree {
  sealed abstract class Tree

  case class None() extends OptionInt

  case class Some(i: Int) extends OptionInt

  sealed abstract class OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Leaf() extends Tree

  def balanceFactor(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse6: Int, delse6: Int) = locally {
        val (r136: Int, d148: Int) = locally {
          val (e27: Int, d154: Int) = rank(t.left)
          (e27, (2 + d154))
        }
        
        locally {
          val (r137: Int, d149: Int) = locally {
            val (e26: Int, d151: Int) = rank(t.right)
            (e26, (2 + d151))
          }
          
          ((r136 - r137), (1 + if ((d148 >= d149)) {
            d148
          } else {
            d149
          }))
        }
        
      }
      
      (relse6, if ((1 >= delse6)) {
        1
      } else {
        delse6
      })
    }
    
  }}

  def rotateRight(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
    locally {
      val (rthen3: Node, dthen3: Int) = locally {
        val (vr3: Int, vd2: Int) = locally {
          val (r58: Int, d56: Int) = locally {
            val (r60: Int, d58: Int) = locally {
              val (e14: Int, d65: Int) = rank(t.left.right)
              (e14, (3 + d65))
            }
            
            locally {
              val (r61: Int, d59: Int) = locally {
                val (e13: Int, d62: Int) = rank(t.right)
                (e13, (2 + d62))
              }
              
              locally {
                val (e12: Int, d60: Int) = max(r60, r61)
                (e12, ((1 + d60) + if ((d58 >= d59)) {
                  d58
                } else {
                  d59
                }))
              }
              
            }
            
          }
          
          ((r58 + 1), (1 + if ((d56 >= 0)) {
            d56
          } else {
            0
          }))
        }
        
        locally {
          val (br2: Node, bd2: Int) = locally {
            val (r70: Int, d71: Int) = locally {
              val (r71: Int, d72: Int) = locally {
                val (r73: Int, d74: Int) = locally {
                  val (e16: Int, d78: Int) = rank(t.left.left)
                  (e16, (3 + d78))
                }
                
                locally {
                  val (e15: Int, d76: Int) = max(r73, vr3)
                  (e15, ((1 + d76) + if ((d74 >= vd2)) {
                    d74
                  } else {
                    vd2
                  }))
                }
                
              }
              
              ((r71 + 1), (1 + if ((d72 >= 0)) {
                d72
              } else {
                0
              }))
            }
            
            (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
              2
            } else {
              vd2
            }))) {
              2
            } else {
              (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              })
            } >= d71)) {
              if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              }
            } else {
              d71
            }))
          }
          
          (br2, (bd2 + 1))
        }
        
      }
      
      (rthen3, if ((3 >= dthen3)) {
        3
      } else {
        dthen3
      })
    }
    
  } else {
    (t, if ((3 >= 0)) {
      3
    } else {
      0
    })
  }}

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res11 => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res9 => true)

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
    ((Leaf(), Some(t.value)), if ((3 >= 3)) {
      3
    } else {
      3
    })
  } else {
    locally {
      val (relse19: (Tree, OptionInt), delse19: Int) = if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
        locally {
          val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
            val (vr14: (Tree, OptionInt), vd13: Int) = locally {
              val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                (e53, (2 + d318))
              }
              
              ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                (1 + vd14)
              } else {
                (1 + vd14)
              }))
            }
            
            locally {
              val (br13: (Tree, OptionInt), bd13: Int) = locally {
                val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                locally {
                  val (br15: (Tree, OptionInt), bd15: Int) = locally {
                    val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                    locally {
                      val (br16: (Tree, OptionInt), bd16: Int) = locally {
                        val dcond21 = (1 + vd16)
                        if (vr17.isInstanceOf[None]) {
                          ((t, None()), if ((dcond21 >= 2)) {
                            dcond21
                          } else {
                            2
                          })
                        } else {
                          locally {
                            val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                              val (vr18: Tree, vd17: Int) = locally {
                                val (r289: Node, d329: Int) = locally {
                                  val (r293: Int, d334: Int) = locally {
                                    val (r294: Int, d335: Int) = locally {
                                      val (e55: Int, d338: Int) = rank(vr16)
                                      (e55, ((1 + d338) + vd15))
                                    }
                                    
                                    ((r294 + 1), (1 + if ((d335 >= 0)) {
                                      d335
                                    } else {
                                      0
                                    }))
                                  }
                                  
                                  (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                    vd15
                                  } else {
                                    (1 + vd16)
                                  } >= 1)) {
                                    if ((vd15 >= (1 + vd16))) {
                                      vd15
                                    } else {
                                      (1 + vd16)
                                    }
                                  } else {
                                    1
                                  } >= d334)) {
                                    if ((if ((vd15 >= (1 + vd16))) {
                                      vd15
                                    } else {
                                      (1 + vd16)
                                    } >= 1)) {
                                      if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      }
                                    } else {
                                      1
                                    }
                                  } else {
                                    d334
                                  }))
                                }
                                
                                locally {
                                  val (e54: Tree, d330: Int) = balance(r289)
                                  (e54, ((1 + d330) + d329))
                                }
                                
                              }
                              
                              ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                vd17
                              } else {
                                2
                              }))
                            }
                            
                            (relse20, if ((dcond21 >= delse20)) {
                              dcond21
                            } else {
                              delse20
                            })
                          }
                          
                        }
                      }
                      
                      (br16, (bd16 + 1))
                    }
                    
                  }
                  
                  (br15, (bd15 + 1))
                }
                
              }
              
              (br13, (bd13 + 1))
            }
            
          }
          
          (rthen20, if ((3 >= dthen20)) {
            3
          } else {
            dthen20
          })
        }
        
      } else {
        locally {
          val (relse21: (Tree, OptionInt), delse21: Int) = if (t.isInstanceOf[Node]) {
            locally {
              val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                (e56, (2 + d346))
              }
              
              (rthen22, if ((1 >= dthen22)) {
                1
              } else {
                dthen22
              })
            }
            
          } else {
            ((t, None()), if ((1 >= 2)) {
              1
            } else {
              2
            })
          }
          (relse21, if ((3 >= delse21)) {
            3
          } else {
            delse21
          })
        }
        
      }
      (relse19, if ((3 >= delse19)) {
        3
      } else {
        delse19
      })
    }
    
  }} ensuring(res12 => true)

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Node(Leaf(), e, Leaf(), 1), if ((1 >= 2)) {
      1
    } else {
      2
    })
  } else {
    locally {
      val (relse: Tree, delse: Int) = if ((e == t.value)) {
        (t, if ((2 >= 0)) {
          2
        } else {
          0
        })
      } else {
        locally {
          val (relse1: Node, delse1: Int) = if ((e < t.value)) {
            locally {
              val (rthen2: Node, dthen2: Int) = locally {
                val (vr1: Tree, vd: Int) = locally {
                  val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                  (e4, (2 + d13))
                }
                
                locally {
                  val (br: Node, bd: Int) = locally {
                    val (r27: Int, d18: Int) = locally {
                      val (r28: Int, d19: Int) = locally {
                        val (r30: Int, d21: Int) = locally {
                          val (e7: Int, d28: Int) = rank(vr1)
                          (e7, ((1 + d28) + vd))
                        }
                        
                        locally {
                          val (r31: Int, d22: Int) = locally {
                            val (e6: Int, d25: Int) = rank(t.right)
                            (e6, (2 + d25))
                          }
                          
                          locally {
                            val (e5: Int, d23: Int) = max(r30, r31)
                            (e5, ((1 + d23) + if ((d21 >= d22)) {
                              d21
                            } else {
                              d22
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r28 + 1), (1 + if ((d19 >= 0)) {
                        d19
                      } else {
                        0
                      }))
                    }
                    
                    (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                      vd
                    } else {
                      1
                    } >= 1)) {
                      if ((vd >= 1)) {
                        vd
                      } else {
                        1
                      }
                    } else {
                      1
                    } >= d18)) {
                      if ((if ((vd >= 1)) {
                        vd
                      } else {
                        1
                      } >= 1)) {
                        if ((vd >= 1)) {
                          vd
                        } else {
                          1
                        }
                      } else {
                        1
                      }
                    } else {
                      d18
                    }))
                  }
                  
                  (br, (bd + 1))
                }
                
              }
              
              (rthen2, if ((2 >= dthen2)) {
                2
              } else {
                dthen2
              })
            }
            
          } else {
            locally {
              val (relse2: Node, delse2: Int) = locally {
                val (vr2: Tree, vd1: Int) = locally {
                  val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                  (e8, (2 + d33))
                }
                
                locally {
                  val (br1: Node, bd1: Int) = locally {
                    val (r43: Int, d38: Int) = locally {
                      val (r44: Int, d39: Int) = locally {
                        val (r46: Int, d41: Int) = locally {
                          val (e11: Int, d47: Int) = rank(t.left)
                          (e11, (2 + d47))
                        }
                        
                        locally {
                          val (r47: Int, d42: Int) = locally {
                            val (e10: Int, d45: Int) = rank(vr2)
                            (e10, ((1 + d45) + vd1))
                          }
                          
                          locally {
                            val (e9: Int, d43: Int) = max(r46, r47)
                            (e9, ((1 + d43) + if ((d41 >= d42)) {
                              d41
                            } else {
                              d42
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r44 + 1), (1 + if ((d39 >= 0)) {
                        d39
                      } else {
                        0
                      }))
                    }
                    
                    (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                      1
                    } else {
                      vd1
                    } >= d38)) {
                      if ((1 >= vd1)) {
                        1
                      } else {
                        vd1
                      }
                    } else {
                      d38
                    }))
                  }
                  
                  (br1, (bd1 + 1))
                }
                
              }
              
              (relse2, if ((2 >= delse2)) {
                2
              } else {
                delse2
              })
            }
            
          }
          (relse1, if ((2 >= delse1)) {
            2
          } else {
            delse1
          })
        }
        
      }
      (relse, if ((1 >= delse)) {
        1
      } else {
        delse
      })
    }
    
  }}

  def balance(t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse14: Tree, delse14: Int) = locally {
        val (vr11: Int, vd10: Int) = locally {
          val (e40: Int, d241: Int) = balanceFactor(t)
          (e40, (1 + d241))
        }
        
        locally {
          val (br10: Tree, bd10: Int) = locally {
            val dcond15 = (1 + if ((vd10 >= 0)) {
              vd10
            } else {
              0
            })
            if ((vr11 > 1)) {
              locally {
                val (rthen15: Tree, dthen15: Int) = locally {
                  val (vr12: Tree, vd11: Int) = locally {
                    val (rcond16: Boolean, dcond16: Int) = locally {
                      val (r217: Int, d244: Int) = locally {
                        val (e41: Int, d247: Int) = balanceFactor(t.left)
                        (e41, (2 + d247))
                      }
                      
                      ((r217 < 0), (1 + if ((d244 >= 0)) {
                        d244
                      } else {
                        0
                      }))
                    }
                    
                    if (rcond16) {
                      locally {
                        val (rthen16: Tree, dthen16: Int) = locally {
                          val (e42: Tree, d250: Int) = rotateLeft(t.left)
                          (e42, (2 + d250))
                        }
                        
                        (rthen16, if ((dcond16 >= dthen16)) {
                          dcond16
                        } else {
                          dthen16
                        })
                      }
                      
                    } else {
                      (t.left, if ((dcond16 >= 1)) {
                        dcond16
                      } else {
                        1
                      })
                    }
                  }
                  
                  locally {
                    val (br11: Tree, bd11: Int) = locally {
                      val (r224: Node, d253: Int) = locally {
                        val (r228: Int, d258: Int) = locally {
                          val (r229: Int, d259: Int) = locally {
                            val (r231: Int, d261: Int) = locally {
                              val (e46: Int, d268: Int) = rank(vr12)
                              (e46, ((1 + d268) + vd11))
                            }
                            
                            locally {
                              val (r232: Int, d262: Int) = locally {
                                val (e45: Int, d265: Int) = rank(t.right)
                                (e45, (2 + d265))
                              }
                              
                              locally {
                                val (e44: Int, d263: Int) = max(r231, r232)
                                (e44, ((1 + d263) + if ((d261 >= d262)) {
                                  d261
                                } else {
                                  d262
                                }))
                              }
                              
                            }
                            
                          }
                          
                          ((r229 + 1), (1 + if ((d259 >= 0)) {
                            d259
                          } else {
                            0
                          }))
                        }
                        
                        (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                          vd11
                        } else {
                          1
                        } >= 1)) {
                          if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          }
                        } else {
                          1
                        } >= d258)) {
                          if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          }
                        } else {
                          d258
                        }))
                      }
                      
                      locally {
                        val (e43: Tree, d254: Int) = rotateRight(r224)
                        (e43, ((1 + d254) + d253))
                      }
                      
                    }
                    
                    (br11, (bd11 + 1))
                  }
                  
                }
                
                (rthen15, if ((dcond15 >= dthen15)) {
                  dcond15
                } else {
                  dthen15
                })
              }
              
            } else {
              locally {
                val (relse16: Tree, delse16: Int) = locally {
                  val dcond17 = (1 + if ((vd10 >= 0)) {
                    vd10
                  } else {
                    0
                  })
                  if ((vr11 < -1)) {
                    locally {
                      val (rthen17: Tree, dthen17: Int) = locally {
                        val (vr13: Tree, vd12: Int) = locally {
                          val (rcond18: Boolean, dcond18: Int) = locally {
                            val (r240: Int, d273: Int) = locally {
                              val (e47: Int, d276: Int) = balanceFactor(t.right)
                              (e47, (2 + d276))
                            }
                            
                            ((r240 > 0), (1 + if ((d273 >= 0)) {
                              d273
                            } else {
                              0
                            }))
                          }
                          
                          if (rcond18) {
                            locally {
                              val (rthen18: Tree, dthen18: Int) = locally {
                                val (e48: Tree, d279: Int) = rotateRight(t.right)
                                (e48, (2 + d279))
                              }
                              
                              (rthen18, if ((dcond18 >= dthen18)) {
                                dcond18
                              } else {
                                dthen18
                              })
                            }
                            
                          } else {
                            (t.right, if ((dcond18 >= 1)) {
                              dcond18
                            } else {
                              1
                            })
                          }
                        }
                        
                        locally {
                          val (br12: Tree, bd12: Int) = locally {
                            val (r247: Node, d282: Int) = locally {
                              val (r251: Int, d287: Int) = locally {
                                val (r252: Int, d288: Int) = locally {
                                  val (r254: Int, d290: Int) = locally {
                                    val (e52: Int, d297: Int) = rank(vr13)
                                    (e52, ((1 + d297) + vd12))
                                  }
                                  
                                  locally {
                                    val (r255: Int, d291: Int) = locally {
                                      val (e51: Int, d294: Int) = rank(t.left)
                                      (e51, (2 + d294))
                                    }
                                    
                                    locally {
                                      val (e50: Int, d292: Int) = max(r254, r255)
                                      (e50, ((1 + d292) + if ((d290 >= d291)) {
                                        d290
                                      } else {
                                        d291
                                      }))
                                    }
                                    
                                  }
                                  
                                }
                                
                                ((r252 + 1), (1 + if ((d288 >= 0)) {
                                  d288
                                } else {
                                  0
                                }))
                              }
                              
                              (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                1
                              } else {
                                vd12
                              } >= d287)) {
                                if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                }
                              } else {
                                d287
                              }))
                            }
                            
                            locally {
                              val (e49: Tree, d283: Int) = rotateLeft(r247)
                              (e49, ((1 + d283) + d282))
                            }
                            
                          }
                          
                          (br12, (bd12 + 1))
                        }
                        
                      }
                      
                      (rthen17, if ((dcond17 >= dthen17)) {
                        dcond17
                      } else {
                        dthen17
                      })
                    }
                    
                  } else {
                    (t, if ((dcond17 >= 0)) {
                      dcond17
                    } else {
                      0
                    })
                  }
                }
                
                (relse16, if ((dcond15 >= delse16)) {
                  dcond15
                } else {
                  delse16
                })
              }
              
            }
          }
          
          (br10, (bd10 + 1))
        }
        
      }
      
      (relse14, if ((1 >= delse14)) {
        1
      } else {
        delse14
      })
    }
    
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res10 => true)

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      (max(height(l), height(r))._1 + 1)
  })}

  def rank(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    (t.rank, if ((1 >= 1)) {
      1
    } else {
      1
    })
  }}

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {if ((i1 >= i2)) {
    (i1, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    (i2, if ((1 >= 0)) {
      1
    } else {
      0
    })
  }}

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse7: Tree, delse7: Int) = if ((e == t.value)) {
        locally {
          val (rthen8: Tree, dthen8: Int) = if ((t.left == Leaf())) {
            (t.right, if ((2 >= 1)) {
              2
            } else {
              1
            })
          } else {
            locally {
              val (relse8: Tree, delse8: Int) = if ((t.right == Leaf())) {
                (t.left, if ((2 >= 1)) {
                  2
                } else {
                  1
                })
              } else {
                locally {
                  val (relse9: Tree, delse9: Int) = locally {
                    val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                      val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                        val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                        (e28, (2 + d169))
                      }
                      
                      ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                        (1 + vd5)
                      } else {
                        (1 + vd5)
                      }))
                    }
                    
                    locally {
                      val (br4: Tree, bd4: Int) = locally {
                        val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                        locally {
                          val (br6: Tree, bd6: Int) = locally {
                            val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                            locally {
                              val (br7: Tree, bd7: Int) = locally {
                                val dcond11 = (1 + vd7)
                                if (vr8.isInstanceOf[None]) {
                                  (t, if ((dcond11 >= 0)) {
                                    dcond11
                                  } else {
                                    0
                                  })
                                } else {
                                  locally {
                                    val (relse10: Node, delse10: Int) = locally {
                                      val (r166: Int, d181: Int) = locally {
                                        val (r167: Int, d182: Int) = locally {
                                          val (r169: Int, d184: Int) = locally {
                                            val (e31: Int, d191: Int) = rank(vr7)
                                            (e31, ((1 + d191) + vd6))
                                          }
                                          
                                          locally {
                                            val (r170: Int, d185: Int) = locally {
                                              val (e30: Int, d188: Int) = rank(t.right)
                                              (e30, (2 + d188))
                                            }
                                            
                                            locally {
                                              val (e29: Int, d186: Int) = max(r169, r170)
                                              (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                d184
                                              } else {
                                                d185
                                              }))
                                            }
                                            
                                          }
                                          
                                        }
                                        
                                        ((r167 + 1), (1 + if ((d182 >= 0)) {
                                          d182
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                        vd6
                                      } else {
                                        (1 + vd7)
                                      } >= 1)) {
                                        if ((vd6 >= (1 + vd7))) {
                                          vd6
                                        } else {
                                          (1 + vd7)
                                        }
                                      } else {
                                        1
                                      } >= d181)) {
                                        if ((if ((vd6 >= (1 + vd7))) {
                                          vd6
                                        } else {
                                          (1 + vd7)
                                        } >= 1)) {
                                          if ((vd6 >= (1 + vd7))) {
                                            vd6
                                          } else {
                                            (1 + vd7)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d181
                                      }))
                                    }
                                    
                                    (relse10, if ((dcond11 >= delse10)) {
                                      dcond11
                                    } else {
                                      delse10
                                    })
                                  }
                                  
                                }
                              }
                              
                              (br7, (bd7 + 1))
                            }
                            
                          }
                          
                          (br6, (bd6 + 1))
                        }
                        
                      }
                      
                      (br4, (bd4 + 1))
                    }
                    
                  }
                  
                  (relse9, if ((2 >= delse9)) {
                    2
                  } else {
                    delse9
                  })
                }
                
              }
              (relse8, if ((2 >= delse8)) {
                2
              } else {
                delse8
              })
            }
            
          }
          (rthen8, if ((2 >= dthen8)) {
            2
          } else {
            dthen8
          })
        }
        
      } else {
        locally {
          val (relse11: Node, delse11: Int) = if ((e < t.value)) {
            locally {
              val (rthen12: Node, dthen12: Int) = locally {
                val (vr9: Tree, vd8: Int) = locally {
                  val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                  (e32, (2 + d199))
                }
                
                locally {
                  val (br8: Node, bd8: Int) = locally {
                    val (r185: Int, d204: Int) = locally {
                      val (r186: Int, d205: Int) = locally {
                        val (r188: Int, d207: Int) = locally {
                          val (e35: Int, d214: Int) = rank(vr9)
                          (e35, ((1 + d214) + vd8))
                        }
                        
                        locally {
                          val (r189: Int, d208: Int) = locally {
                            val (e34: Int, d211: Int) = rank(t.right)
                            (e34, (2 + d211))
                          }
                          
                          locally {
                            val (e33: Int, d209: Int) = max(r188, r189)
                            (e33, ((1 + d209) + if ((d207 >= d208)) {
                              d207
                            } else {
                              d208
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r186 + 1), (1 + if ((d205 >= 0)) {
                        d205
                      } else {
                        0
                      }))
                    }
                    
                    (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                      vd8
                    } else {
                      1
                    } >= 1)) {
                      if ((vd8 >= 1)) {
                        vd8
                      } else {
                        1
                      }
                    } else {
                      1
                    } >= d204)) {
                      if ((if ((vd8 >= 1)) {
                        vd8
                      } else {
                        1
                      } >= 1)) {
                        if ((vd8 >= 1)) {
                          vd8
                        } else {
                          1
                        }
                      } else {
                        1
                      }
                    } else {
                      d204
                    }))
                  }
                  
                  (br8, (bd8 + 1))
                }
                
              }
              
              (rthen12, if ((2 >= dthen12)) {
                2
              } else {
                dthen12
              })
            }
            
          } else {
            locally {
              val (relse12: Node, delse12: Int) = locally {
                val (vr10: Tree, vd9: Int) = locally {
                  val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                  (e36, (2 + d219))
                }
                
                locally {
                  val (br9: Node, bd9: Int) = locally {
                    val (r201: Int, d224: Int) = locally {
                      val (r202: Int, d225: Int) = locally {
                        val (r204: Int, d227: Int) = locally {
                          val (e39: Int, d233: Int) = rank(t.left)
                          (e39, (2 + d233))
                        }
                        
                        locally {
                          val (r205: Int, d228: Int) = locally {
                            val (e38: Int, d231: Int) = rank(vr10)
                            (e38, ((1 + d231) + vd9))
                          }
                          
                          locally {
                            val (e37: Int, d229: Int) = max(r204, r205)
                            (e37, ((1 + d229) + if ((d227 >= d228)) {
                              d227
                            } else {
                              d228
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r202 + 1), (1 + if ((d225 >= 0)) {
                        d225
                      } else {
                        0
                      }))
                    }
                    
                    (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                      1
                    } else {
                      vd9
                    } >= d224)) {
                      if ((1 >= vd9)) {
                        1
                      } else {
                        vd9
                      }
                    } else {
                      d224
                    }))
                  }
                  
                  (br9, (bd9 + 1))
                }
                
              }
              
              (relse12, if ((2 >= delse12)) {
                2
              } else {
                delse12
              })
            }
            
          }
          (relse11, if ((2 >= delse11)) {
            2
          } else {
            delse11
          })
        }
        
      }
      (relse7, if ((1 >= delse7)) {
        1
      } else {
        delse7
      })
    }
    
  }}

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def rotateLeft(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
    locally {
      val (rthen5: Node, dthen5: Int) = locally {
        val (vr4: Int, vd3: Int) = locally {
          val (r103: Int, d110: Int) = locally {
            val (r105: Int, d112: Int) = locally {
              val (e23: Int, d120: Int) = rank(t.left)
              (e23, (2 + d120))
            }
            
            locally {
              val (r106: Int, d113: Int) = locally {
                val (e22: Int, d116: Int) = rank(t.right.left)
                (e22, (3 + d116))
              }
              
              locally {
                val (e21: Int, d114: Int) = max(r105, r106)
                (e21, ((1 + d114) + if ((d112 >= d113)) {
                  d112
                } else {
                  d113
                }))
              }
              
            }
            
          }
          
          ((r103 + 1), (1 + if ((d110 >= 0)) {
            d110
          } else {
            0
          }))
        }
        
        locally {
          val (br3: Node, bd3: Int) = locally {
            val (r115: Int, d125: Int) = locally {
              val (r116: Int, d126: Int) = locally {
                val (r119: Int, d129: Int) = locally {
                  val (e25: Int, d132: Int) = rank(t.right.right)
                  (e25, (3 + d132))
                }
                
                locally {
                  val (e24: Int, d130: Int) = max(vr4, r119)
                  (e24, ((1 + d130) + if ((vd3 >= d129)) {
                    vd3
                  } else {
                    d129
                  }))
                }
                
              }
              
              ((r116 + 1), (1 + if ((d126 >= 0)) {
                d126
              } else {
                0
              }))
            }
            
            (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
              2
            } else {
              vd3
            }) >= 2)) {
              (1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              })
            } else {
              2
            } >= 2)) {
              if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              }
            } else {
              2
            } >= d125)) {
              if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              }
            } else {
              d125
            }))
          }
          
          (br3, (bd3 + 1))
        }
        
      }
      
      (rthen5, if ((3 >= dthen5)) {
        3
      } else {
        dthen5
      })
    }
    
  } else {
    (t, if ((3 >= 0)) {
      3
    } else {
      0
    })
  }}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: avlInsert template --> (res11._2 ≤ ((a?1 * height(t)) + b?1))
Function: size template --> (height(t) ≤ ((a? * res9) + b?))
Function: deleteMax template --> (res12._2 ≤ ((a?2 * height(t)) + b?2))
Function: avlDelete template --> (res10._2 ≤ ((a?3 * height(t)) + b?3))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(balanceFactor, rotateLeft, rotateRight, balance, height, avlInsert, unbalancedInsert, deleteMax, rankHeight, avlDelete, unbalancedDelete, size)
[[34m Info  [0m] - considering function avlInsert...
[[34m Info  [0m] Body: (let (r95,d100 := (let (e20,d104 := unbalancedInsert(t, e)) in
            (e20, (1 + d104)))) in
            (let (e19,d101 := balance(r95)) in
              (e19, ((1 + d101) + d100))))
[[34m Info  [0m] Post: true
falttened Body: ((res11 == tp) && (arg == ((1 + d101) + d100)) && (tp == (e19, arg)) && (e20 == ts) && (ts == tres1._1) && (tres1 == r307) && (r307 == unbalancedInsert(t, e)) && (tres == r308) && (r308 == balance(r95)) && (d100 == (1 + d104)) && (d104 == ts1) && (ts1 == tres1._2) && (d101 == ts2) && (ts2 == tres._2) && (r95 == e20) && (e19 == ts3) && (ts3 == tres._1))
Flattened Post: ((ts4 > ((a?1 * r309) + b?1)) && (ts4 == res11._2) && (r309 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((0 * height(t)) + (1 * res11._2)) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 9 + 0
solving...
solved... in 0.015s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/3
Unrolled calls: Set((r307 == unbalancedInsert(t, e)), (r308 == balance(r95)), (r309 == height(t)))
Creating VC for unbalancedInsert
[[34m Info  [0m] - Number of new terms enumerated: 3
[[34m Info  [0m] - Template generated for function unbalancedInsert : (((a?5 * e) + a?4) ≤ 0)
Unrolling (r307 == unbalancedInsert(t, e))
Inlining (r308 == balance(r95))
Creating VC for height
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function height : (((a?7 * #res) + a?6) ≤ 0)
Unrolling (r309 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((1 * res11._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 145
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 18 + 0
solving...
solved... in 0.01s
candidate Invariants
avlInsert-->((((16 * res11._2) + (-2 * height(t))) + 8) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((2 * #res) + 5) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 73
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 18
solving...
solved... in 0.016s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-1 * height(t))) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((6 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 145
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 26 + 34
solving...
solved... in 0.013s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/35
Unrolled calls: Set((r373 == max(r371, r372)), (r319 == max(r312, r311)), (r322 == rank(cs7)), (r321 == avlInsert(cs6, e)), (r370 == max(r368, r369)), (r355 == balanceFactor(r95)), (r320 == rank(vr19)))
Unrolling (r321 == avlInsert(cs6, e))
Inlining (r370 == max(r368, r369))
Inlining (r355 == balanceFactor(r95))
Inlining (r319 == max(r312, r311))
Inlining (r322 == rank(cs7))
Inlining (r373 == max(r371, r372))
Inlining (r320 == rank(vr19))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((1 * res11._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 186
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 33 + 0
solving...
solved... in 0.016s
candidate Invariants
avlInsert-->((((2 * res11._2) + (2 * height(t))) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 82
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 20 + 33
solving...
solved... in 0.014s
candidate Invariants
avlInsert-->((((0 * height(t)) + (1 * res11._2)) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + -1) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 82
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 12 + 53
solving...
solved... in 0.021s
candidate Invariants
avlInsert-->((((8 * res11._2) + (-2 * height(t))) + -4) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((16 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 714
[[34m Info  [0m] Number of equal calls: 56
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 71 + 65
solving...
solved... in 0.025s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 16/36
Unrolled calls: Set((r387 == height(cs23)), (r385 == height(cs12)), (r361 == max(r345, r344)), (r359 == balanceFactor(cs27)), (r358 == rank(cs26)), (r340 == max(r332, r331)), (r382 == rank(cs42)), (r326 == rank(vr20)), (r383 == rank(cs43)), (r356 == rank(vr23)), (r325 == avlInsert(cs12, e)), (r357 == rotateRight(r348)), (r339 == rank(cs22)), (r341 == rank(vr22)), (r324 == rank(cs11)), (r323 == max(r316, r315)))
Inlining (r339 == rank(cs22))
Inlining (r361 == max(r345, r344))
Inlining (r359 == balanceFactor(cs27))
Inlining (r340 == max(r332, r331))
Inlining (r323 == max(r316, r315))
Inlining (r324 == rank(cs11))
Inlining (r356 == rank(vr23))
Inlining (r358 == rank(cs26))
Unrolling (r385 == height(cs12))
Unrolling (r325 == avlInsert(cs12, e))
Inlining (r326 == rank(vr20))
Inlining (r341 == rank(vr22))
Unrolling (r387 == height(cs23))
Inlining (r382 == rank(cs42))
Inlining (r383 == rank(cs43))
Inlining (r357 == rotateRight(r348))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((1 * res11._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 31 + 0
solving...
solved... in 0.008s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-12 * height(t))) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((-24 * #res) + 155) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 31
solving...
solved... in 0.014s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-12 * height(t))) + -45) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 738
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 24 + 47
solving...
solved... in 0.021s
candidate Invariants
avlInsert-->((((-1 * height(t)) + (2 * res11._2)) + -26) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((16 * #res) + -8) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 39 + 71
solving...
solved... in 0.048s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/35
Unrolled calls: Set((r360 == rotateLeft(cs28)), (r394 == rank(cs47)), (r395 == rank(cs48)))
Inlining (r360 == rotateLeft(cs28))
Inlining (r394 == rank(cs47))
Inlining (r395 == rank(cs48))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((1 * res11._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 565
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 34 + 0
solving...
solved... in 0.009s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-2 * height(t))) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 9) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 27
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 29 + 34
solving...
solved... in 0.019s
candidate Invariants
avlInsert-->((((8 * res11._2) + (8 * height(t))) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((1 * #res) + -8) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 21 + 63
solving...
solved... in 0.033s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + 25) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 26 + 84
solving...
solved... in 0.044s
candidate Invariants
avlInsert-->((((-19 * height(t)) + (1 * res11._2)) + 7) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 545
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 22 + 110
solving...
solved... in 0.048s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -2) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 468
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 32 + 132
solving...
solved... in 0.096s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/37
Unrolled calls: Set((r336 == max(r328, r327)), (r384 == height(cs20)), (r337 == rank(vr21)), (r404 == max(r402, r403)), (r335 == rank(cs17)))
Inlining (r335 == rank(cs17))
Inlining (r404 == max(r402, r403))
Inlining (r336 == max(r328, r327))
Inlining (r337 == rank(vr21))
Unrolling (r384 == height(cs20))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((0 * height(t)) + (1 * res11._2)) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 26 + 0
solving...
solved... in 0.008s
candidate Invariants
avlInsert-->((((-4 * height(t)) + (2 * res11._2)) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((-24 * #res) + 187) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 26
solving...
solved... in 0.009s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-4 * height(t))) + -53) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 27 + 42
solving...
solved... in 0.022s
candidate Invariants
avlInsert-->((((1 * height(t)) + (1 * res11._2)) + -13) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 536
[[34m Info  [0m] Number of equal calls: 39
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 48 + 69
solving...
solved... in 0.06s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/35
Unrolled calls: Set((r364 == rank(vr24)), (r367 == rank(cs37)), (r362 == rotateRight(cs32)), (r365 == rotateLeft(r354)), (r366 == balanceFactor(cs36)), (r363 == max(r351, r350)))
Inlining (r367 == rank(cs37))
Inlining (r363 == max(r351, r350))
Inlining (r365 == rotateLeft(r354))
Inlining (r364 == rank(vr24))
Inlining (r366 == balanceFactor(cs36))
Inlining (r362 == rotateRight(cs32))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((1 * res11._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 586
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 33 + 0
solving...
solved... in 0.009s
candidate Invariants
avlInsert-->((((2 * res11._2) + (6 * height(t))) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((1 * #res) + 41) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 21 + 33
solving...
solved... in 0.015s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-2 * height(t))) + -21) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 623
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 37 + 54
solving...
solved... in 0.027s
candidate Invariants
avlInsert-->((((1 * height(t)) + (1 * res11._2)) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 34 + 91
solving...
solved... in 0.089s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-1 * height(t))) + -10) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 613
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 54 + 125
solving...
solved... in 0.121s
candidate Invariants
avlInsert-->((((-19 * height(t)) + (1 * res11._2)) + 7) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 28 + 179
solving...
solved... in 0.788s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + 1) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1430
[[34m Info  [0m] Number of equal calls: 79
# of atomic predicates: 56 + 207
solving...
solved... in 0.857s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -7) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2642
[[34m Info  [0m] Number of equal calls: 98
# of atomic predicates: 86 + 263
solving...
solved... in 0.945s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 18/41
Unrolled calls: Set((r411 == rank(cs62)), (r412 == rank(cs63)), (r426 == rank(cs77)), (r414 == max(r406, r405)), (r450 == rank(cs99)), (r452 == max(vr28, r447)), (r458 == rank(cs114)), (r415 == max(r408, vr26)), (r427 == max(r421, r420)), (r454 == max(r445, r444)), (r457 == rank(cs113)), (r429 == rank(cs80)), (r430 == max(vr27, r423)), (r451 == rank(cs101)), (r428 == rank(cs78)), (r439 == max(r437, r438)), (r413 == rank(cs65)), (r453 == rank(cs102)))
Inlining (r451 == rank(cs101))
Inlining (r414 == max(r406, r405))
Inlining (r453 == rank(cs102))
Inlining (r411 == rank(cs62))
Inlining (r454 == max(r445, r444))
Inlining (r412 == rank(cs63))
Inlining (r426 == rank(cs77))
Inlining (r458 == rank(cs114))
Inlining (r452 == max(vr28, r447))
Inlining (r413 == rank(cs65))
Inlining (r450 == rank(cs99))
Inlining (r429 == rank(cs80))
Inlining (r439 == max(r437, r438))
Inlining (r457 == rank(cs113))
Inlining (r430 == max(vr27, r423))
Inlining (r415 == max(r408, vr26))
Inlining (r427 == max(r421, r420))
Inlining (r428 == rank(cs78))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((0 * height(t)) + (1 * res11._2)) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 31 + 0
solving...
solved... in 0.007s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-12 * height(t))) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((-24 * #res) + 155) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 31
solving...
solved... in 0.008s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-12 * height(t))) + -45) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 30 + 47
solving...
solved... in 0.027s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-1 * height(t))) + -26) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 39 + 77
solving...
solved... in 0.056s
candidate Invariants
avlInsert-->((((-10 * height(t)) + (1 * res11._2)) + 18) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 26 + 116
solving...
solved... in 0.055s
candidate Invariants
avlInsert-->((((-10 * height(t)) + (1 * res11._2)) + -2) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 132
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 15 + 142
solving...
solved... in 0.071s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-10 * height(t))) + -12) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 32 + 157
solving...
solved... in 0.094s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -12) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 545
[[34m Info  [0m] Number of equal calls: 46
# of atomic predicates: 22 + 189
solving...
solved... in 0.082s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -21) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3066
[[34m Info  [0m] Number of equal calls: 107
# of atomic predicates: 62 + 211
solving...
solved... in 0.143s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/23
Unrolled calls: Set((r469 == max(r460, r459)), (r466 == rank(cs119)), (r465 == rank(cs117)), (r468 == rank(cs128)), (r467 == max(r462, vr29)))
Inlining (r467 == max(r462, vr29))
Inlining (r466 == rank(cs119))
Inlining (r465 == rank(cs117))
Inlining (r469 == max(r460, r459))
Inlining (r468 == rank(cs128))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlInsert-->((((0 * height(t)) + (1 * res11._2)) + 0) ≤ 0)
unbalancedInsert-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 31 + 0
solving...
solved... in 0.007s
candidate Invariants
avlInsert-->((((-12 * height(t)) + (2 * res11._2)) + -1) ≤ 0)
unbalancedInsert-->(((0 * e) + 1) ≤ 0)
height-->(((-24 * #res) + 155) ≤ 0)
Function: unbalancedInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 31
solving...
solved... in 0.012s
candidate Invariants
avlInsert-->((((2 * res11._2) + (-12 * height(t))) + -45) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 39 + 47
solving...
solved... in 0.025s
candidate Invariants
avlInsert-->((((-1 * height(t)) + (2 * res11._2)) + -26) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 39 + 86
solving...
solved... in 0.049s
candidate Invariants
avlInsert-->((((-19 * height(t)) + (1 * res11._2)) + 45) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 216
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 26 + 125
solving...
solved... in 0.053s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + 7) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 132
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 15 + 151
solving...
solved... in 0.046s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -12) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1777
[[34m Info  [0m] Number of equal calls: 85
# of atomic predicates: 33 + 166
solving...
solved... in 0.059s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -14) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3534
[[34m Info  [0m] Number of equal calls: 113
# of atomic predicates: 78 + 199
solving...
timed out... in 20.163s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 608
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 21 + 199
solving...
solved... in 0.067s
candidate Invariants
avlInsert-->((((1 * res11._2) + (-19 * height(t))) + -21) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1812
[[34m Info  [0m] Number of equal calls: 84
# of atomic predicates: 42 + 220
solving...
solved... in 0.09s
candidate Invariants
avlInsert-->((((-19 * height(t)) + (1 * res11._2)) + -33) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1176
[[34m Info  [0m] Number of equal calls: 73
# of atomic predicates: 47 + 262
solving...
solved... in 0.194s
candidate Invariants
avlInsert-->((((-28 * height(t)) + (1 * res11._2)) + -33) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3480
[[34m Info  [0m] Number of equal calls: 112
# of atomic predicates: 46 + 309
solving...
solved... in 0.175s
candidate Invariants
avlInsert-->((((-28 * height(t)) + (1 * res11._2)) + -40) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: avlInsert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4846
[[34m Info  [0m] Number of equal calls: 140
# of atomic predicates: 39 + 355
solving...
solved... in 0.393s
candidate Invariants
avlInsert-->((((-47 * height(t)) + (1 * res11._2)) + -40) ≤ 0)
unbalancedInsert-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: avlInsert --> ((((1 * res11._2) + (-47 * height(t))) + -40) <= 0)
[[34m Info  [0m] - Found inductive invariant: unbalancedInsert --> (((0 * e) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function deleteMax...
[[34m Info  [0m] Body: if ((t.isInstanceOf[Node] ∧ t.left.isInstanceOf[Leaf] ∧ t.right.isInstanceOf[Leaf]))
            ((Leaf(), Some(t.value)), if ((3 ≥ 3))
              3
            else
              3)
          else
            (let (relse19,delse19 := if ((t.isInstanceOf[Node] ∧ t.right.isInstanceOf[Leaf]))
              (let (rthen20,dthen20 := (let (vr14,vd13 := (let (vr15,vd14 := (let (e53,d318 := deleteMax(t.left)) in
                (e53, (2 + d318)))) in
                ((vr15._1, vr15._2), (2 + if (((1 + vd14) ≥ (1 + vd14)))
                  (1 + vd14)
                else
                  (1 + vd14))))) in
                (let (br13,bd13 := (let (vr16,vd15 := (vr14._1, (1 + vd13))) in
                  (let (br15,bd15 := (let (vr17,vd16 := (vr14._2, (1 + vd13))) in
                    (let (br16,bd16 := (let (dcond21 := (1 + vd16)) in
                      if (vr17.isInstanceOf[None])
                        ((t, None()), if ((dcond21 ≥ 2))
                          dcond21
                        else
                          2)
                      else
                        (let (relse20,delse20 := (let (vr18,vd17 := (let (r289,d329 := (let (r293,d334 := (let (r294,d335 := (let (e55,d338 := rank(vr16)) in
                          (e55, ((1 + d338) + vd15)))) in
                          ((r294 + 1), (1 + if ((d335 ≥ 0))
                            d335
                          else
                            0)))) in
                          (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 ≥ (1 + vd16)))
                            vd15
                          else
                            (1 + vd16) ≥ 1))
                            if ((vd15 ≥ (1 + vd16)))
                              vd15
                            else
                              (1 + vd16)
                          else
                            1 ≥ d334))
                            if ((if ((vd15 ≥ (1 + vd16)))
                              vd15
                            else
                              (1 + vd16) ≥ 1))
                              if ((vd15 ≥ (1 + vd16)))
                                vd15
                              else
                                (1 + vd16)
                            else
                              1
                          else
                            d334)))) in
                          (let (e54,d330 := balance(r289)) in
                            (e54, ((1 + d330) + d329))))) in
                          ((vr18, Some(t.value)), (2 + if ((vd17 ≥ 2))
                            vd17
                          else
                            2)))) in
                          (relse20, if ((dcond21 ≥ delse20))
                            dcond21
                          else
                            delse20)))) in
                      (br16, (bd16 + 1))))) in
                    (br15, (bd15 + 1))))) in
                  (br13, (bd13 + 1))))) in
                (rthen20, if ((3 ≥ dthen20))
                  3
                else
                  dthen20))
            else
              (let (relse21,delse21 := if (t.isInstanceOf[Node])
                (let (rthen22,dthen22 := (let (e56,d346 := deleteMax(t.right)) in
                  (e56, (2 + d346)))) in
                  (rthen22, if ((1 ≥ dthen22))
                    1
                  else
                    dthen22))
              else
                ((t, None()), if ((1 ≥ 2))
                  1
                else
                  2)) in
                (relse21, if ((3 ≥ delse21))
                  3
                else
                  delse21))) in
              (relse19, if ((3 ≥ delse19))
                3
              else
                delse19))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres395) && ((ci98 && (ci98 == t.isInstanceOf[Node]) && ci99 && (cs144 == t.left) && (ci99 == cs144.isInstanceOf[Leaf]) && ci100 && (cs145 == t.right) && (ci100 == cs145.isInstanceOf[Leaf]) && (ifres395 == tp136) && (cc22 == Some(cs146)) && (cs146 == t.value) && (cc21 == Leaf()) && (tp135 == (cc21, cc22)) && (tp136 == (tp135, ifres396)) && (((3 >= 3) && (ifres396 == 3)) || ((3 < 3) && (ifres396 == 3)))) || (((!(ci101) && (ci101 == t.isInstanceOf[Node])) || (!(ci102) && (cs147 == t.left) && (ci102 == cs147.isInstanceOf[Leaf])) || (!(ci103) && (cs148 == t.right) && (ci103 == cs148.isInstanceOf[Leaf]))) && (ifres395 == tp137) && (tp137 == (relse19, ifres397)) && ((ci104 && (ci104 == t.isInstanceOf[Node]) && ci105 && (cs149 == t.right) && (ci105 == cs149.isInstanceOf[Leaf]) && (ifres398 == tp138) && (tp138 == (rthen20, ifres399)) && ((ci106 && (ci106 == vr17.isInstanceOf[None]) && (ifres400 == tp140) && (cc23 == None()) && (tp139 == (t, cc23)) && (tp140 == (tp139, ifres401)) && (((dcond21 >= 2) && (ifres401 == dcond21)) || ((dcond21 < 2) && (ifres401 == 2)))) || (!(ci107) && (ci107 == vr17.isInstanceOf[None]) && (ifres400 == tp141) && (tp141 == (relse20, ifres402)) && (((dcond21 >= delse20) && (ifres402 == dcond21)) || ((dcond21 < delse20) && (ifres402 == delse20))) && (relse20 == tp142) && (cs150 == t.value) && (cc24 == Some(cs150)) && (tp142 == (vr18, cc24)) && (r289 == cc26) && (cs151 == vr17.i) && (cc25 == Leaf()) && (cc26 == Node(vr16, cs151, cc25, r293)) && (d334 == (1 + ifres417)) && (e54 == ts201) && (ts201 == tres61._1) && (d335 == ((1 + d338) + vd15)) && (((ifres405 >= d334) && (((ifres406 >= 1) && (((vd15 >= (1 + vd16)) && (ifres406 == vd15)) || ((vd15 < (1 + vd16)) && (ifres406 == (1 + vd16)))) && (ifres405 == ifres407) && (((vd15 >= (1 + vd16)) && (ifres407 == vd15)) || ((vd15 < (1 + vd16)) && (ifres407 == (1 + vd16))))) || ((ifres408 < 1) && (((vd15 >= (1 + vd16)) && (ifres408 == vd15)) || ((vd15 < (1 + vd16)) && (ifres408 == (1 + vd16)))) && (ifres405 == 1))) && (ifres404 == ifres409) && (((ifres410 >= 1) && (((vd15 >= (1 + vd16)) && (ifres410 == vd15)) || ((vd15 < (1 + vd16)) && (ifres410 == (1 + vd16)))) && (ifres409 == ifres411) && (((vd15 >= (1 + vd16)) && (ifres411 == vd15)) || ((vd15 < (1 + vd16)) && (ifres411 == (1 + vd16))))) || ((ifres412 < 1) && (((vd15 >= (1 + vd16)) && (ifres412 == vd15)) || ((vd15 < (1 + vd16)) && (ifres412 == (1 + vd16)))) && (ifres409 == 1)))) || ((ifres413 < d334) && (((ifres414 >= 1) && (((vd15 >= (1 + vd16)) && (ifres414 == vd15)) || ((vd15 < (1 + vd16)) && (ifres414 == (1 + vd16)))) && (ifres413 == ifres415) && (((vd15 >= (1 + vd16)) && (ifres415 == vd15)) || ((vd15 < (1 + vd16)) && (ifres415 == (1 + vd16))))) || ((ifres416 < 1) && (((vd15 >= (1 + vd16)) && (ifres416 == vd15)) || ((vd15 < (1 + vd16)) && (ifres416 == (1 + vd16)))) && (ifres413 == 1))) && (ifres404 == d334))) && (d330 == ts202) && (ts202 == tres61._2) && (vr18 == e54) && (d338 == ts203) && (ts203 == tres62._2) && (((vd17 >= 2) && (ifres403 == vd17)) || ((vd17 < 2) && (ifres403 == 2))) && (d329 == (1 + ifres404)) && (((d335 >= 0) && (ifres417 == d335)) || ((d335 < 0) && (ifres417 == 0))) && (tres61 == r501) && (r501 == balance(r289)) && (r293 == (r294 + 1)) && (r294 == e55) && (delse20 == (2 + ifres403)) && (vd17 == ((1 + d330) + d329)) && (tres62 == r502) && (r502 == rank(vr16)) && (e55 == ts204) && (ts204 == tres62._1))) && (vd15 == (1 + vd13)) && (vr14 == tp143) && (ts205 == vr15._1) && (ts206 == vr15._2) && (tp143 == (ts205, ts206)) && (bd13 == (bd15 + 1)) && (((3 >= dthen20) && (ifres399 == 3)) || ((3 < dthen20) && (ifres399 == dthen20))) && (d318 == ts207) && (ts207 == tres63._2) && ((((1 + vd14) >= (1 + vd14)) && (ifres418 == (1 + vd14))) || (((1 + vd14) < (1 + vd14)) && (ifres418 == (1 + vd14)))) && (vr15 == e53) && (bd15 == (bd16 + 1)) && (vd13 == (2 + ifres418)) && (e53 == ts208) && (ts208 == tres63._1) && (tres63 == r503) && (cs152 == t.left) && (r503 == deleteMax(cs152)) && (vr16 == ts209) && (ts209 == vr14._1) && (vd14 == (2 + d318)) && (vd16 == (1 + vd13)) && (dcond21 == (1 + vd16)) && (rthen20 == br13) && (bd16 == ts210) && (ts210 == ifres400._2) && (br13 == br15) && (dthen20 == (bd13 + 1)) && (br15 == br16) && (vr17 == ts211) && (ts211 == vr14._2) && (br16 == ts212) && (ts212 == ifres400._1)) || (((!(ci108) && (ci108 == t.isInstanceOf[Node])) || (!(ci109) && (cs153 == t.right) && (ci109 == cs153.isInstanceOf[Leaf]))) && (ifres398 == tp144) && (tp144 == (relse21, ifres419)) && ((ci110 && (ci110 == t.isInstanceOf[Node]) && (ifres420 == tp145) && (tp145 == (rthen22, ifres421)) && (d346 == ts213) && (ts213 == tres64._2) && (tres64 == r504) && (cs154 == t.right) && (r504 == deleteMax(cs154)) && (rthen22 == e56) && (((1 >= dthen22) && (ifres421 == 1)) || ((1 < dthen22) && (ifres421 == dthen22))) && (dthen22 == (2 + d346)) && (e56 == ts214) && (ts214 == tres64._1)) || (!(ci111) && (ci111 == t.isInstanceOf[Node]) && (ifres420 == tp147) && (cc27 == None()) && (tp146 == (t, cc27)) && (tp147 == (tp146, ifres422)) && (((1 >= 2) && (ifres422 == 1)) || ((1 < 2) && (ifres422 == 2))))) && (relse21 == ts215) && (ts215 == ifres420._1) && (delse21 == ts216) && (ts216 == ifres420._2) && (((3 >= delse21) && (ifres419 == 3)) || ((3 < delse21) && (ifres419 == delse21))))) && (relse19 == ts217) && (ts217 == ifres398._1) && (delse19 == ts218) && (ts218 == ifres398._2) && (((3 >= delse19) && (ifres397 == 3)) || ((3 < delse19) && (ifres397 == delse19))))))
Flattened Post: ((ts219 > ((a?2 * r505) + b?2)) && (ts219 == res12._2) && (r505 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 48
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 11 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/5
Unrolled calls: Set((r505 == height(t)))
Creating VC for height
Unrolling (r505 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res12._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 86
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 15 + 0
solving...
solved... in 0.006s
candidate Invariants
deleteMax-->((((-8 * height(t)) + (16 * res12._2)) + -2) ≤ 0)
height-->(((-8 * #res) + 126) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 14
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 23 + 15
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/12
Unrolled calls: Set((r512 == max(r510, r511)), (r514 == height(cs154)), (r513 == height(cs152)))
Inlining (r512 == max(r510, r511))
Unrolling (r514 == height(cs154))
Unrolling (r513 == height(cs152))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 134
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 24 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((2 * res12._2) + (-1 * height(t))) + -2) ≤ 0)
height-->(((0 * #res) + 2) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 24
solving...
solved... in 0.01s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/15
Unrolled calls: Set((r522 == max(r520, r521)), (r502 == rank(vr16)), (r501 == balance(r289)))
Inlining (r522 == max(r520, r521))
Inlining (r502 == rank(vr16))
Inlining (r501 == balance(r289))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.01s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-7 * height(t))) + 1) ≤ 0)
height-->(((1 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 38 + 31
solving...
solved... in 0.038s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-6 * height(t))) + 4) ≤ 0)
height-->(((-1 * #res) + -2) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 69
solving...
solved... in 0.031s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/25
Unrolled calls: Set((r509 == max(r507, r508)))
Inlining (r509 == max(r507, r508))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.01s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-7 * height(t))) + 1) ≤ 0)
height-->(((1 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 43 + 31
solving...
solved... in 0.028s
candidate Invariants
deleteMax-->((((-6 * height(t)) + (1 * res12._2)) + 4) ≤ 0)
height-->(((-1 * #res) + -2) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 29 + 74
solving...
solved... in 0.038s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-6 * height(t))) + 9) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 404
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 63 + 103
solving...
solved... in 0.206s
candidate Invariants
deleteMax-->((((-10 * height(t)) + (1 * res12._2)) + 25) ≤ 0)
height-->(((-1 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 425
[[34m Info  [0m] Number of equal calls: 47
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 56 + 166
solving...
solved... in 0.599s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 11/24
Unrolled calls: Set((r547 == balanceFactor(cs175)), (r543 == rank(cs170)), (r549 == balanceFactor(r289)), (r541 == max(r527, r526)), (r537 == rank(vr30)), (r545 == rank(vr31)), (r539 == balanceFactor(cs166)), (r546 == rotateLeft(r536)), (r540 == rank(cs169)), (r548 == max(r533, r532)), (r542 == rotateRight(r530)))
Inlining (r540 == rank(cs169))
Inlining (r547 == balanceFactor(cs175))
Inlining (r548 == max(r533, r532))
Inlining (r549 == balanceFactor(r289))
Inlining (r537 == rank(vr30))
Inlining (r546 == rotateLeft(r536))
Inlining (r543 == rank(cs170))
Inlining (r539 == balanceFactor(cs166))
Inlining (r542 == rotateRight(r530))
Inlining (r545 == rank(vr31))
Inlining (r541 == max(r527, r526))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 283
[[34m Info  [0m] Number of equal calls: 38
# of atomic predicates: 53 + 0
solving...
solved... in 0.01s
candidate Invariants
deleteMax-->((((2 * res12._2) + (1 * height(t))) + -2) ≤ 0)
height-->(((704 * #res) + 712) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 95
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 53
solving...
solved... in 0.023s
candidate Invariants
deleteMax-->((((2 * res12._2) + (1 * height(t))) + 18) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 30 + 94
solving...
solved... in 0.09s
candidate Invariants
deleteMax-->((((4 * res12._2) + (-4 * height(t))) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 124
solving...
solved... in 0.127s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/29
Unrolled calls: Set((r564 == rank(cs179)), (r565 == rank(cs180)), (r519 == max(r517, r518)))
Inlining (r564 == rank(cs179))
Inlining (r565 == rank(cs180))
Inlining (r519 == max(r517, r518))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res12._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 15 + 0
solving...
solved... in 0.006s
candidate Invariants
deleteMax-->((((16 * res12._2) + (-2 * height(t))) + -8) ≤ 0)
height-->(((-36 * #res) + 1272) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 38 + 15
solving...
solved... in 0.033s
candidate Invariants
deleteMax-->((((-3 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 53
solving...
solved... in 0.027s
candidate Invariants
deleteMax-->((((-6 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 43
# of atomic predicates: 35 + 84
solving...
solved... in 0.032s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-6 * height(t))) + 2) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 39 + 119
solving...
solved... in 0.041s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-13 * height(t))) + 9) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1797
[[34m Info  [0m] Number of equal calls: 86
# of atomic predicates: 110 + 158
solving...
solved... in 0.213s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/26
Unrolled calls: Set((r588 == rank(cs203)), (r580 == rank(cs199)), (r589 == max(r582, r581)), (r579 == rank(cs198)), (r591 == max(r584, vr34)), (r590 == rank(cs213)), (r538 == rotateLeft(cs164)), (r587 == rank(cs202)))
Inlining (r588 == rank(cs203))
Inlining (r591 == max(r584, vr34))
Inlining (r538 == rotateLeft(cs164))
Inlining (r580 == rank(cs199))
Inlining (r587 == rank(cs202))
Inlining (r590 == rank(cs213))
Inlining (r579 == rank(cs198))
Inlining (r589 == max(r582, r581))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 30 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((1 * height(t)) + (1 * res12._2)) + 1) ≤ 0)
height-->(((64 * #res) + 568) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 30
solving...
solved... in 0.026s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-3 * height(t))) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 39 + 71
solving...
solved... in 0.034s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-6 * height(t))) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 67
# of atomic predicates: 33 + 110
solving...
solved... in 0.053s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-6 * height(t))) + -8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 39 + 143
solving...
solved... in 0.076s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-13 * height(t))) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 39 + 182
solving...
solved... in 0.095s
candidate Invariants
deleteMax-->((((-17 * height(t)) + (1 * res12._2)) + 12) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 10 + 221
solving...
solved... in 0.093s
candidate Invariants
deleteMax-->((((-17 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 69
# of atomic predicates: 30 + 231
solving...
solved... in 0.108s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-17 * height(t))) + -8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3598
[[34m Info  [0m] Number of equal calls: 120
# of atomic predicates: 78 + 261
solving...
solved... in 0.23s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/23
Unrolled calls: Set((r608 == max(vr35, r605)), (r611 == max(r603, r602)), (r612 == rank(cs232)), (r610 == rank(cs230)), (r609 == rank(cs228)))
Inlining (r608 == max(vr35, r605))
Inlining (r610 == rank(cs230))
Inlining (r611 == max(r603, r602))
Inlining (r609 == rank(cs228))
Inlining (r612 == rank(cs232))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.009s
candidate Invariants
deleteMax-->((((-7 * height(t)) + (1 * res12._2)) + 1) ≤ 0)
height-->(((1 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 41
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 54 + 31
solving...
solved... in 0.016s
candidate Invariants
deleteMax-->((((-28 * height(t)) + (4 * res12._2)) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 41
# of atomic predicates: 47 + 85
solving...
solved... in 0.047s
candidate Invariants
deleteMax-->((((1 * res12._2) + (1 * height(t))) + 4) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 41
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 51 + 132
solving...
solved... in 0.072s
candidate Invariants
deleteMax-->((((2 * res12._2) + (1 * height(t))) + 14) ≤ 0)
height-->(((-8 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 30 + 183
solving...
solved... in 0.232s
candidate Invariants
deleteMax-->((((-24 * height(t)) + (1 * res12._2)) + 66) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 37 + 213
solving...
solved... in 0.253s
candidate Invariants
deleteMax-->((((-24 * height(t)) + (1 * res12._2)) + 56) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 28 + 250
solving...
solved... in 0.186s
candidate Invariants
deleteMax-->((((-13 * height(t)) + (1 * res12._2)) + 23) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 10 + 278
solving...
solved... in 0.186s
candidate Invariants
deleteMax-->((((-13 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 39 + 288
solving...
solved... in 0.3s
candidate Invariants
deleteMax-->((((-17 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4137
[[34m Info  [0m] Number of equal calls: 128
# of atomic predicates: 87 + 327
solving...
solved... in 3.046s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-17 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3903
[[34m Info  [0m] Number of equal calls: 134
# of atomic predicates: 61 + 414
solving...
solved... in 3.103s
candidate Invariants
deleteMax-->((((-17 * height(t)) + (1 * res12._2)) + -11) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 301
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 34 + 475
solving...
solved... in 2.886s
candidate Invariants
deleteMax-->((((-24 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2164
[[34m Info  [0m] Number of equal calls: 106
# of atomic predicates: 50 + 509
solving...
solved... in 0.711s
candidate Invariants
deleteMax-->((((-45 * height(t)) + (1 * res12._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4137
[[34m Info  [0m] Number of equal calls: 129
# of atomic predicates: 85 + 559
solving...
solved... in 1.072s
candidate Invariants
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: deleteMax --> ((((1 * res12._2) + (-52 * height(t))) + -4) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function avlDelete...
[[34m Info  [0m] Body: (let (r92,d95 := (let (e18,d99 := unbalancedDelete(t, e)) in
            (e18, (1 + d99)))) in
            (let (e17,d96 := balance(r92)) in
              (e17, ((1 + d96) + d95))))
[[34m Info  [0m] Post: true
falttened Body: ((res10 == tp220) && (arg56 == ((1 + d96) + d95)) && (tp220 == (e17, arg56)) && (tres100 == r638) && (r638 == unbalancedDelete(t, e)) && (tres99 == r639) && (r639 == balance(r92)) && (e17 == ts350) && (ts350 == tres99._1) && (e18 == ts351) && (ts351 == tres100._1) && (d99 == ts352) && (ts352 == tres100._2) && (r92 == e18) && (d95 == (1 + d99)) && (d96 == ts353) && (ts353 == tres99._2))
Flattened Post: ((ts354 > ((a?3 * r640) + b?3)) && (ts354 == res10._2) && (r640 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 9 + 0
solving...
solved... in 0.004s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/3
Unrolled calls: Set((r638 == unbalancedDelete(t, e)), (r639 == balance(r92)), (r640 == height(t)))
Creating VC for unbalancedDelete
[[34m Info  [0m] - Number of new terms enumerated: 3
[[34m Info  [0m] - Template generated for function unbalancedDelete : (((a?9 * e) + a?8) ≤ 0)
Unrolling (r638 == unbalancedDelete(t, e))
Inlining (r639 == balance(r92))
Creating VC for height
Unrolling (r640 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 308
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 28 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((16 * res10._2) + (-2 * height(t))) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((4 * #res) + 1) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 308
[[34m Info  [0m] Number of equal calls: 31
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 33 + 28
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((32 * res10._2) + (-4 * height(t))) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 73
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 18 + 61
solving...
solved... in 0.013s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 10/43
Unrolled calls: Set((r665 == rank(vr41)), (r686 == max(r675, r674)), (r702 == balanceFactor(r92)), (r720 == max(r718, r719)), (r664 == max(r651, r650)), (r717 == max(r715, r716)), (r663 == rank(cs263)), (r688 == rank(cs285)), (r662 == avlDelete(cs260, e)), (r687 == rank(vr47)))
Inlining (r720 == max(r718, r719))
Inlining (r665 == rank(vr41))
Inlining (r686 == max(r675, r674))
Inlining (r687 == rank(vr47))
Inlining (r663 == rank(cs263))
Inlining (r717 == max(r715, r716))
Unrolling (r662 == avlDelete(cs260, e))
Inlining (r688 == rank(cs285))
Inlining (r702 == balanceFactor(r92))
Inlining (r664 == max(r651, r650))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 251
[[34m Info  [0m] Number of equal calls: 26
# of atomic predicates: 26 + 0
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((1 * height(t)) + (2 * res10._2)) + -2) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + 4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 251
[[34m Info  [0m] Number of equal calls: 26
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 39 + 26
solving...
solved... in 0.01s
candidate Invariants
avlDelete-->((((32 * res10._2) + (-4 * height(t))) + -8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 178
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 14 + 65
solving...
solved... in 0.023s
candidate Invariants
avlDelete-->((((4 * res10._2) + (0 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-8 * #res) + -1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 170
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 12 + 79
solving...
solved... in 0.026s
candidate Invariants
avlDelete-->((((2 * res10._2) + (1 * height(t))) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 91
solving...
solved... in 0.023s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/41
Unrolled calls: Set((r733 == height(cs260)), (r725 == balance(r724)), (r730 == rank(cs308)), (r729 == rank(cs307)))
Unrolling (r733 == height(cs260))
Inlining (r725 == balance(r724))
Inlining (r730 == rank(cs308))
Inlining (r729 == rank(cs307))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 441
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 23 + 0
solving...
solved... in 0.006s
candidate Invariants
avlDelete-->((((-2 * height(t)) + (16 * res10._2)) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 96
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 23
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((8 * res10._2) + (-4 * height(t))) + -2) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 480
[[34m Info  [0m] Number of equal calls: 43
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 39
solving...
solved... in 0.027s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/53
Unrolled calls: Set((r682 == max(r671, r670)), (r678 == deleteMax(cs271)), (r654 == deleteMax(cs248)), (r684 == rank(cs280)), (r731 == height(cs281)), (r683 == rank(vr46)))
Inlining (r682 == max(r671, r670))
Creating VC for deleteMax
Unrolling (r654 == deleteMax(cs248))
Inlining (r684 == rank(cs280))
Unrolling (r731 == height(cs281))
Inlining (r683 == rank(vr46))
Unrolling (r678 == deleteMax(cs271))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 48
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 18 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/65
Unrolled calls: Set((r778 == height(t)))
Unrolling (r778 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 25 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((2 * res10._2) + (0 * height(t))) + -7) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 164
[[34m Info  [0m] Number of equal calls: 32
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 25
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/73
Unrolled calls: Set((r657 == rank(vr38)), (r655 == rank(cs249)), (r796 == height(cs248)), (r803 == height(cs335)), (r656 == max(r643, r642)), (r802 == max(r800, r801)))
Unrolling (r803 == height(cs335))
Inlining (r655 == rank(cs249))
Inlining (r656 == max(r643, r642))
Inlining (r657 == rank(vr38))
Unrolling (r796 == height(cs248))
Inlining (r802 == max(r800, r801))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 87
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 27 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-3 * height(t))) + -7) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 623
[[34m Info  [0m] Number of equal calls: 50
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 105
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 56 + 27
solving...
solved... in 0.022s
candidate Invariants
avlDelete-->((((4 * res10._2) + (-1 * height(t))) + 4) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 83
solving...
solved... in 0.046s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/73
Unrolled calls: Set((r805 == height(cs331)), (r775 == rank(vr57)), (r776 == balance(r773)), (r788 == max(r786, r787)))
Unrolling (r805 == height(cs331))
Inlining (r775 == rank(vr57))
Inlining (r776 == balance(r773))
Inlining (r788 == max(r786, r787))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 110
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 30 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((-6 * height(t)) + (2 * res10._2)) + -15) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 964
[[34m Info  [0m] Number of equal calls: 60
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 453
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 72 + 30
solving...
solved... in 0.019s
candidate Invariants
avlDelete-->((((1 * height(t)) + (1 * res10._2)) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 102
solving...
solved... in 0.02s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 15/85
Unrolled calls: Set((r852 == rank(vr70)), (r705 == rotateRight(r695)), (r703 == rank(vr48)), (r847 == rotateRight(cs379)), (r851 == rotateLeft(r839)), (r827 == max(r825, r826)), (r850 == max(r836, r835)), (r704 == rotateLeft(cs287)), (r708 == rank(cs292)), (r706 == balanceFactor(cs291)), (r732 == height(cs286)), (r849 == rank(cs384)), (r707 == max(r692, r691)), (r848 == balanceFactor(cs381)), (r840 == balanceFactor(r773)))
Inlining (r840 == balanceFactor(r773))
Inlining (r708 == rank(cs292))
Inlining (r848 == balanceFactor(cs381))
Inlining (r703 == rank(vr48))
Inlining (r850 == max(r836, r835))
Inlining (r827 == max(r825, r826))
Inlining (r705 == rotateRight(r695))
Inlining (r706 == balanceFactor(cs291))
Inlining (r849 == rank(cs384))
Inlining (r851 == rotateLeft(r839))
Unrolling (r732 == height(cs286))
Inlining (r847 == rotateRight(cs379))
Inlining (r852 == rank(vr70))
Inlining (r704 == rotateLeft(cs287))
Inlining (r707 == max(r692, r691))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 283
[[34m Info  [0m] Number of equal calls: 38
# of atomic predicates: 48 + 0
solving...
solved... in 0.01s
candidate Invariants
avlDelete-->((((32 * res10._2) + (12 * height(t))) + -24) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((1 * #res) + 16) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 31 + 48
solving...
solved... in 0.016s
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + -5) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 79
solving...
solved... in 0.017s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/99
Unrolled calls: Set((r861 == rank(cs385)), (r862 == rank(cs386)))
Inlining (r861 == rank(cs385))
Inlining (r862 == rank(cs386))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 602
[[34m Info  [0m] Number of equal calls: 54
# of atomic predicates: 66 + 0
solving...
solved... in 0.01s
candidate Invariants
avlDelete-->((((32 * res10._2) + (12 * height(t))) + -152) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((2 * #res) + 8) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 31 + 66
solving...
solved... in 0.036s
candidate Invariants
avlDelete-->((((4 * res10._2) + (0 * height(t))) + -29) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 97
solving...
solved... in 0.02s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/97
Unrolled calls: Set((r844 == rotateRight(r833)), (r841 == rank(vr69)), (r846 == balanceFactor(cs376)), (r843 == rank(cs375)), (r845 == max(r830, r829)))
Inlining (r843 == rank(cs375))
Inlining (r841 == rank(vr69))
Inlining (r844 == rotateRight(r833))
Inlining (r846 == balanceFactor(cs376))
Inlining (r845 == max(r830, r829))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1772
[[34m Info  [0m] Number of equal calls: 91
# of atomic predicates: 70 + 0
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((32 * res10._2) + (12 * height(t))) + -200) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((2 * #res) + 8) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 592
[[34m Info  [0m] Number of equal calls: 50
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 89 + 70
solving...
solved... in 0.058s
candidate Invariants
avlDelete-->((((8 * height(t)) + (8 * res10._2)) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 159
solving...
solved... in 0.038s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/99
Unrolled calls: Set((r944 == rank(cs477)), (r939 == rank(cs474)), (r938 == max(r931, r930)), (r937 == rank(cs472)), (r936 == rank(cs462)), (r943 == rank(cs476)), (r940 == max(r933, vr76)), (r895 == max(r893, r894)))
Inlining (r936 == rank(cs462))
Inlining (r944 == rank(cs477))
Inlining (r938 == max(r931, r930))
Inlining (r895 == max(r893, r894))
Inlining (r943 == rank(cs476))
Inlining (r939 == rank(cs474))
Inlining (r940 == max(r933, vr76))
Inlining (r937 == rank(cs472))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 36 + 0
solving...
solved... in 0.01s
candidate Invariants
avlDelete-->((((-6 * height(t)) + (2 * res10._2)) + -15) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 559
[[34m Info  [0m] Number of equal calls: 54
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1016
[[34m Info  [0m] Number of equal calls: 70
# of atomic predicates: 73 + 36
solving...
solved... in 0.029s
candidate Invariants
avlDelete-->((((8 * res10._2) + (-1 * height(t))) + -8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 109
solving...
solved... in 0.029s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/91
Unrolled calls: Set((r842 == rotateLeft(cs373)), (r807 == height(cs361)), (r797 == height(cs271)))
Inlining (r842 == rotateLeft(cs373))
Unrolling (r807 == height(cs361))
Unrolling (r797 == height(cs271))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 50
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 68 + 0
solving...
solved... in 0.016s
candidate Invariants
avlDelete-->((((-64 * height(t)) + (16 * res10._2)) + -315) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1493
[[34m Info  [0m] Number of equal calls: 81
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3542
[[34m Info  [0m] Number of equal calls: 123
# of atomic predicates: 121 + 68
solving...
solved... in 0.179s
candidate Invariants
avlDelete-->((((8 * res10._2) + (1 * height(t))) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 82
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3598
[[34m Info  [0m] Number of equal calls: 123
# of atomic predicates: 91 + 189
solving...
solved... in 0.21s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 17/99
Unrolled calls: Set((r881 == rank(cs407)), (r966 == max(r958, r957)), (r658 == rank(vr40)), (r880 == rank(cs406)), (r963 == rank(cs485)), (r874 == rank(cs394)), (r661 == avlDelete(cs258, e)), (r660 == max(r647, r646)), (r875 == max(r870, vr72)), (r965 == rank(cs486)), (r967 == rank(cs496)), (r734 == height(cs258)), (r877 == max(r868, r867)), (r876 == rank(cs396)), (r659 == rank(cs257)), (r964 == max(vr77, r960)), (r873 == rank(cs393)))
Inlining (r658 == rank(vr40))
Inlining (r964 == max(vr77, r960))
Inlining (r876 == rank(cs396))
Inlining (r880 == rank(cs406))
Inlining (r875 == max(r870, vr72))
Inlining (r873 == rank(cs393))
Inlining (r874 == rank(cs394))
Inlining (r877 == max(r868, r867))
Inlining (r967 == rank(cs496))
Inlining (r881 == rank(cs407))
Unrolling (r734 == height(cs258))
Inlining (r965 == rank(cs486))
Inlining (r963 == rank(cs485))
Inlining (r966 == max(r958, r957))
Unrolling (r661 == avlDelete(cs258, e))
Inlining (r659 == rank(cs257))
Inlining (r660 == max(r647, r646))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 47 + 0
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((-40 * height(t)) + (8 * res10._2)) + -75) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 586
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 37 + 47
solving...
solved... in 0.027s
candidate Invariants
avlDelete-->((((32 * res10._2) + (-8 * height(t))) + -4) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 84
solving...
solved... in 0.069s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-10 * height(t))) + 4) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1117
[[34m Info  [0m] Number of equal calls: 64
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 81 + 92
solving...
solved... in 0.141s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/87
Unrolled calls: Set((r712 == rotateRight(cs293)), (r713 == rank(cs297)), (r711 == rank(vr49)), (r709 == rotateLeft(r701)), (r710 == max(r698, r697)), (r714 == balanceFactor(cs298)))
Inlining (r713 == rank(cs297))
Inlining (r709 == rotateLeft(r701))
Inlining (r712 == rotateRight(cs293))
Inlining (r714 == balanceFactor(cs298))
Inlining (r711 == rank(vr49))
Inlining (r710 == max(r698, r697))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 37 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-24 * height(t)) + (8 * res10._2)) + -39) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 654
[[34m Info  [0m] Number of equal calls: 62
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 58 + 37
solving...
solved... in 0.023s
candidate Invariants
avlDelete-->((((-2 * height(t)) + (1 * res10._2)) + -308) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 33 + 95
solving...
solved... in 0.024s
candidate Invariants
avlDelete-->((((4 * res10._2) + (4 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 312
[[34m Info  [0m] Number of equal calls: 44
# of atomic predicates: 29 + 128
solving...
solved... in 0.111s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-7 * height(t))) + -55) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 30 + 157
solving...
solved... in 0.116s
candidate Invariants
avlDelete-->((((-26 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1137
[[34m Info  [0m] Number of equal calls: 75
# of atomic predicates: 24 + 187
solving...
solved... in 0.323s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-28 * height(t))) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 805
[[34m Info  [0m] Number of equal calls: 69
# of atomic predicates: 57 + 211
solving...
solved... in 0.196s
candidate Invariants
avlDelete-->((((-53 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 933
[[34m Info  [0m] Number of equal calls: 76
# of atomic predicates: 40 + 268
solving...
solved... in 0.234s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 10/93
Unrolled calls: Set((r680 == rank(cs272)), (r679 == rank(vr44)), (r681 == max(r667, r666)), (r804 == height(cs346)), (r973 == max(r971, r972)), (r818 == max(r816, r817)), (r808 == height(cs357)), (r970 == max(r968, r969)), (r794 == balance(r791)), (r793 == rank(vr67)))
Inlining (r794 == balance(r791))
Inlining (r973 == max(r971, r972))
Inlining (r680 == rank(cs272))
Unrolling (r808 == height(cs357))
Inlining (r818 == max(r816, r817))
Inlining (r681 == max(r667, r666))
Unrolling (r804 == height(cs346))
Inlining (r679 == rank(vr44))
Inlining (r970 == max(r968, r969))
Inlining (r793 == rank(vr67))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 349
[[34m Info  [0m] Number of equal calls: 33
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 45 + 0
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((-12 * height(t)) + (2 * res10._2)) + -9) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 373
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 35 + 45
solving...
solved... in 0.02s
candidate Invariants
avlDelete-->((((4 * res10._2) + (-24 * height(t))) + -17) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 613
[[34m Info  [0m] Number of equal calls: 51
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 42 + 80
solving...
solved... in 0.09s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res10._2)) + 27) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 613
[[34m Info  [0m] Number of equal calls: 52
# of atomic predicates: 45 + 122
solving...
solved... in 0.178s
candidate Invariants
avlDelete-->((((-38 * height(t)) + (2 * res10._2)) + 41) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 31 + 167
solving...
solved... in 0.166s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-19 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 17 + 198
solving...
solved... in 0.262s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2847
[[34m Info  [0m] Number of equal calls: 101
# of atomic predicates: 103 + 215
solving...
solved... in 0.387s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 13/102
Unrolled calls: Set((r1002 == max(vr78, r997)), (r1014 == rank(cs541)), (r1000 == rank(cs525)), (r1003 == max(r995, r994)), (r1019 == rank(cs546)), (r1013 == max(r1006, r1005)), (r1012 == rank(cs540)), (r1015 == rank(cs543)), (r1011 == max(r1008, vr79)), (r1018 == rank(cs545)), (r1001 == rank(cs526)), (r1004 == rank(cs528)), (r1066 == max(r1064, r1065)))
Inlining (r1012 == rank(cs540))
Inlining (r1001 == rank(cs526))
Inlining (r1018 == rank(cs545))
Inlining (r1002 == max(vr78, r997))
Inlining (r1003 == max(r995, r994))
Inlining (r1004 == rank(cs528))
Inlining (r1066 == max(r1064, r1065))
Inlining (r1013 == max(r1006, r1005))
Inlining (r1015 == rank(cs543))
Inlining (r1019 == rank(cs546))
Inlining (r1011 == max(r1008, vr79))
Inlining (r1000 == rank(cs525))
Inlining (r1014 == rank(cs541))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 50
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 68 + 0
solving...
solved... in 0.015s
candidate Invariants
avlDelete-->((((16 * res10._2) + (-16 * height(t))) + -287) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-4 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 68
solving...
solved... in 0.019s
candidate Invariants
avlDelete-->((((4 * res10._2) + (-1 * height(t))) + -100) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 586
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 36 + 84
solving...
solved... in 0.093s
candidate Invariants
avlDelete-->((((1 * height(t)) + (1 * res10._2)) + 5) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 277
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 23 + 120
solving...
solved... in 0.129s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-19 * height(t))) + 26) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 277
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 22 + 143
solving...
solved... in 0.134s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res10._2)) + 7) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 17 + 165
solving...
solved... in 3.096s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 696
[[34m Info  [0m] Number of equal calls: 61
# of atomic predicates: 70 + 182
solving...
solved... in 1.185s
candidate Invariants
avlDelete-->((((-53 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3326
[[34m Info  [0m] Number of equal calls: 110
# of atomic predicates: 55 + 252
solving...
timed out... in 20.184s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4308
[[34m Info  [0m] Number of equal calls: 127
# of atomic predicates: 131 + 252
solving...
timed out... in 20.272s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4369
[[34m Info  [0m] Number of equal calls: 128
# of atomic predicates: 112 + 252
solving...
solved... in 4.132s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-53 * height(t))) + 47) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 12 + 364
solving...
timed out... in 20.296s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 28 + 364
solving...
solved... in 4.173s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-53 * height(t))) + 35) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1983
[[34m Info  [0m] Number of equal calls: 92
# of atomic predicates: 31 + 392
solving...
solved... in 4.644s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-53 * height(t))) + 20) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2717
[[34m Info  [0m] Number of equal calls: 113
# of atomic predicates: 60 + 423
solving...
solved... in 8.234s
candidate Invariants
avlDelete-->((((-53 * height(t)) + (1 * res10._2)) + 14) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 12 + 483
solving...
timed out... in 20.341s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4274
[[34m Info  [0m] Number of equal calls: 136
# of atomic predicates: 82 + 483
solving...
timed out... in 20.38s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3326
[[34m Info  [0m] Number of equal calls: 109
# of atomic predicates: 79 + 483
solving...
solved... in 2.279s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/89
Unrolled calls: Set((r915 == max(r908, r907)), (r914 == rank(cs446)), (r917 == rank(cs455)), (r916 == max(vr75, r910)), (r913 == rank(cs444)))
Inlining (r917 == rank(cs455))
Inlining (r916 == max(vr75, r910))
Inlining (r913 == rank(cs444))
Inlining (r915 == max(r908, r907))
Inlining (r914 == rank(cs446))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 37 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-24 * height(t)) + (8 * res10._2)) + -39) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1257
[[34m Info  [0m] Number of equal calls: 75
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 40 + 37
solving...
solved... in 0.015s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (8 * res10._2)) + -216) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 41 + 77
solving...
solved... in 0.034s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (8 * res10._2)) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 118
solving...
solved... in 0.073s
candidate Invariants
avlDelete-->((((-15 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2721
[[34m Info  [0m] Number of equal calls: 113
# of atomic predicates: 24 + 126
solving...
solved... in 0.081s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-15 * height(t))) + -9) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2810
[[34m Info  [0m] Number of equal calls: 112
# of atomic predicates: 24 + 150
solving...
solved... in 0.094s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-15 * height(t))) + -24) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 39 + 174
solving...
solved... in 0.118s
candidate Invariants
avlDelete-->((((-15 * height(t)) + (1 * res10._2)) + -9) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 613
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 43 + 213
solving...
solved... in 0.161s
candidate Invariants
avlDelete-->((((-21 * height(t)) + (1 * res10._2)) + -18) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2846
[[34m Info  [0m] Number of equal calls: 114
# of atomic predicates: 29 + 256
solving...
solved... in 0.192s
candidate Invariants
avlDelete-->((((1 * res10._2) + (-23 * height(t))) + 7) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 12 + 285
solving...
solved... in 0.198s
candidate Invariants
avlDelete-->((((-23 * height(t)) + (1 * res10._2)) + -5) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 970
[[34m Info  [0m] Number of equal calls: 75
# of atomic predicates: 69 + 297
solving...
solved... in 0.365s
candidate Invariants
avlDelete-->((((-53 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3913
[[34m Info  [0m] Number of equal calls: 125
# of atomic predicates: 31 + 366
solving...
solved... in 0.403s
candidate Invariants
avlDelete-->((((-53 * height(t)) + (1 * res10._2)) + -40) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res12._2) + (-52 * height(t))) + -4) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: avlDelete --> ((((1 * res10._2) + (-53 * height(t))) + -40) <= 0)
[[34m Info  [0m] - Found inductive invariant: unbalancedDelete --> (((0 * e) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: deleteMax --> ((((1 * res12._2) + (-52 * height(t))) + -4) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function size...
[[34m Info  [0m] Body: t match {
            case Leaf() => 0
            case Node(l, _, r, _) => ((size(l) + 1) + size(r))
          }
[[34m Info  [0m] Post: true
falttened Body: ((res9 == ifres1574) && ((ci400 && (ci400 == t.isInstanceOf[Leaf]) && (ifres1574 == 0)) || (!(ci401) && (ci401 == t.isInstanceOf[Leaf]) && (ifres1574 == ((r1133 + 1) + r1134)) && (cs578 == t.left) && (r1133 == size(cs578)) && (cs579 == t.right) && (r1134 == size(cs579)))))
Flattened Post: ((r1135 > ((a? * res9) + b?)) && (r1135 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
size-->((((1 * height(t)) + (0 * res9)) + 0) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/3
Unrolled calls: Set((r1135 == height(t)))
Creating VC for height
Unrolling (r1135 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
size-->((((1 * height(t)) + (0 * res9)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 17
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 16 + 0
solving...
solved... in 0.006s
candidate Invariants
size-->((((0 * res9) + (8 * height(t))) + -1) ≤ 0)
height-->(((8 * #res) + 15) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 16
solving...
solved... in 0.006s
candidate Invariants
size-->((((0 * res9) + (1 * height(t))) + -3) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 8 + 24
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/10
Unrolled calls: Set((r1142 == max(r1140, r1141)), (r1144 == height(cs579)), (r1143 == height(cs578)), (r1139 == max(r1137, r1138)))
Inlining (r1142 == max(r1140, r1141))
Unrolling (r1144 == height(cs579))
Unrolling (r1143 == height(cs578))
Inlining (r1139 == max(r1137, r1138))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
size-->((((0 * res9) + (1 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 24 + 0
solving...
solved... in 0.007s
candidate Invariants
size-->((((0 * res9) + (2 * height(t))) + 1) ≤ 0)
height-->(((-4 * #res) + 1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 24
solving...
solved... in 0.006s
candidate Invariants
size-->((((0 * res9) + (4 * height(t))) + 5) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 10 + 32
solving...
solved... in 0.01s
candidate Invariants
size-->((((0 * res9) + (128 * height(t))) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 41
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 22 + 42
solving...
solved... in 0.019s
candidate Invariants
size-->((((0 * res9) + (1 * height(t))) + -9) ≤ 0)
height-->(((1 * #res) + -8) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 13 + 64
solving...
solved... in 0.023s
candidate Invariants
size-->((((1 * height(t)) + (-3 * res9)) + 0) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: size --> ((((-3 * res9) + (1 * height(t))) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
