[[33mWarning[0m] warning: there were 9 deprecation warning(s); re-run with -deprecation for details
After Depth Instrumentation: 
object ForElimination {
  case class Nil() extends List

  sealed abstract class List

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class While(expr: Expression, body: Statement) extends Statement

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Cons(head: Statement, tail: List) extends List

  case class Skip() extends Statement

  case class Block(body: List) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  case class And(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Var(varID: Int) extends Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  def isForFreeList(l : List) : (Boolean, Int) = {locally {
    val dcond1 = 1
    if (l.isInstanceOf[Nil]) {
      (true, if ((dcond1 >= 0)) {
        dcond1
      } else {
        0
      })
    } else {
      locally {
        val (relse1: Boolean, delse1: Int) = locally {
          val (r9: Boolean, d10: Int) = locally {
            val (e3: Boolean, d16: Int) = isForFree(l.head)
            (e3, (2 + d16))
          }
          
          locally {
            val (r10: Boolean, d11: Int) = locally {
              val (e2: Boolean, d13: Int) = isForFreeList(l.tail)
              (e2, (2 + d13))
            }
            
            ((r9 && r10), (1 + if ((d10 >= d11)) {
              d10
            } else {
              d11
            }))
          }
          
        }
        
        (relse1, if ((dcond1 >= delse1)) {
          dcond1
        } else {
          delse1
        })
      }
      
    }
  }
  } ensuring(res => true)

  def eliminateForLoopsList(l : List) : (List, Int) = {locally {
    val dcond = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), if ((dcond >= 1)) {
        dcond
      } else {
        1
      })
    } else {
      locally {
        val (relse: Cons, delse: Int) = locally {
          val (r2: Statement, d1: Int) = locally {
            val (e1: Statement, d7: Int) = eliminateForLoops(l.head)
            (e1, (2 + d7))
          }
          
          locally {
            val (r3: List, d2: Int) = locally {
              val (e: List, d4: Int) = eliminateForLoopsList(l.tail)
              (e, (2 + d4))
            }
            
            (Cons(r2, r3), (1 + if ((d1 >= d2)) {
              d1
            } else {
              d2
            }))
          }
          
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoops(stat : Statement) : (Statement, Int) = {locally {
    val dcond3 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen3: Block, dthen3: Int) = locally {
          val (r23: List, d28: Int) = locally {
            val (e6: List, d30: Int) = eliminateWhileLoopsList(stat.body)
            (e6, (2 + d30))
          }
          
          (Block(r23), (1 + d28))
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      locally {
        val (relse3: Statement, delse3: Int) = locally {
          val dcond4 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen4: IfThenElse, dthen4: Int) = locally {
                val (r28: Statement, d34: Int) = locally {
                  val (e8: Statement, d40: Int) = eliminateWhileLoops(stat.then)
                  (e8, (2 + d40))
                }
                
                locally {
                  val (r29: Statement, d35: Int) = locally {
                    val (e7: Statement, d37: Int) = eliminateWhileLoops(stat.elze)
                    (e7, (2 + d37))
                  }
                  
                  (IfThenElse(stat.expr, r28, r29), (1 + if ((if ((1 >= d34)) {
                    1
                  } else {
                    d34
                  } >= d35)) {
                    if ((1 >= d34)) {
                      1
                    } else {
                      d34
                    }
                  } else {
                    d35
                  }))
                }
                
              }
              
              (rthen4, if ((dcond4 >= dthen4)) {
                dcond4
              } else {
                dthen4
              })
            }
            
          } else {
            locally {
              val (relse4: Statement, delse4: Int) = locally {
                val dcond5 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen5: For, dthen5: Int) = locally {
                      val (r39: Statement, d47: Int) = locally {
                        val (e9: Statement, d49: Int) = eliminateWhileLoops(stat.body)
                        (e9, (2 + d49))
                      }
                      
                      (For(Skip(), stat.expr, Skip(), r39), (1 + if ((1 >= d47)) {
                        1
                      } else {
                        d47
                      }))
                    }
                    
                    (rthen5, if ((dcond5 >= dthen5)) {
                      dcond5
                    } else {
                      dthen5
                    })
                  }
                  
                } else {
                  locally {
                    val (relse5: Statement, delse5: Int) = locally {
                      val dcond6 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen6: For, dthen6: Int) = locally {
                            val (r44: Statement, d53: Int) = locally {
                              val (e12: Statement, d65: Int) = eliminateWhileLoops(stat.init)
                              (e12, (2 + d65))
                            }
                            
                            locally {
                              val (r46: Statement, d55: Int) = locally {
                                val (e11: Statement, d61: Int) = eliminateWhileLoops(stat.step)
                                (e11, (2 + d61))
                              }
                              
                              locally {
                                val (r47: Statement, d56: Int) = locally {
                                  val (e10: Statement, d58: Int) = eliminateWhileLoops(stat.body)
                                  (e10, (2 + d58))
                                }
                                
                                (For(r44, stat.expr, r46, r47), (1 + if ((if ((if ((d53 >= 1)) {
                                  d53
                                } else {
                                  1
                                } >= d55)) {
                                  if ((d53 >= 1)) {
                                    d53
                                  } else {
                                    1
                                  }
                                } else {
                                  d55
                                } >= d56)) {
                                  if ((if ((d53 >= 1)) {
                                    d53
                                  } else {
                                    1
                                  } >= d55)) {
                                    if ((d53 >= 1)) {
                                      d53
                                    } else {
                                      1
                                    }
                                  } else {
                                    d55
                                  }
                                } else {
                                  d56
                                }))
                              }
                              
                            }
                            
                          }
                          
                          (rthen6, if ((dcond6 >= dthen6)) {
                            dcond6
                          } else {
                            dthen6
                          })
                        }
                        
                      } else {
                        (stat, if ((dcond6 >= 0)) {
                          dcond6
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse5, if ((dcond5 >= delse5)) {
                      dcond5
                    } else {
                      delse5
                    })
                  }
                  
                }
              }
              
              (relse4, if ((dcond4 >= delse4)) {
                dcond4
              } else {
                delse4
              })
            }
            
          }
        }
        
        (relse3, if ((dcond3 >= delse3)) {
          dcond3
        } else {
          delse3
        })
      }
      
    }
  }
  } ensuring(res => true)

  def isForFree(stat : Statement) : (Boolean, Int) = {locally {
    val dcond7 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen7: Boolean, dthen7: Int) = locally {
          val (e13: Boolean, d69: Int) = isForFreeList(stat.body)
          (e13, (2 + d69))
        }
        
        (rthen7, if ((dcond7 >= dthen7)) {
          dcond7
        } else {
          dthen7
        })
      }
      
    } else {
      locally {
        val (relse7: Boolean, delse7: Int) = locally {
          val dcond8 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen8: Boolean, dthen8: Int) = locally {
                val (r59: Boolean, d72: Int) = locally {
                  val (e15: Boolean, d78: Int) = isForFree(stat.then)
                  (e15, (2 + d78))
                }
                
                locally {
                  val (r60: Boolean, d73: Int) = locally {
                    val (e14: Boolean, d75: Int) = isForFree(stat.elze)
                    (e14, (2 + d75))
                  }
                  
                  ((r59 && r60), (1 + if ((d72 >= d73)) {
                    d72
                  } else {
                    d73
                  }))
                }
                
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse8: Boolean, delse8: Int) = locally {
                val dcond9 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen9: Boolean, dthen9: Int) = locally {
                      val (e16: Boolean, d82: Int) = isForFree(stat.body)
                      (e16, (2 + d82))
                    }
                    
                    (rthen9, if ((dcond9 >= dthen9)) {
                      dcond9
                    } else {
                      dthen9
                    })
                  }
                  
                } else {
                  locally {
                    val (relse9: Boolean, delse9: Int) = locally {
                      val dcond10 = 1
                      if (stat.isInstanceOf[For]) {
                        (false, if ((dcond10 >= 0)) {
                          dcond10
                        } else {
                          0
                        })
                      } else {
                        (true, if ((dcond10 >= 0)) {
                          dcond10
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse9, if ((dcond9 >= delse9)) {
                      dcond9
                    } else {
                      delse9
                    })
                  }
                  
                }
              }
              
              (relse8, if ((dcond8 >= delse8)) {
                dcond8
              } else {
                delse8
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  } ensuring(res => true)

  def eliminateForLoops(stat : Statement) : (Statement, Int) = {locally {
    val dcond16 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen16: Block, dthen16: Int) = locally {
          val (r100: List, d125: Int) = locally {
            val (e26: List, d127: Int) = eliminateForLoopsList(stat.body)
            (e26, (2 + d127))
          }
          
          (Block(r100), (1 + d125))
        }
        
        (rthen16, if ((dcond16 >= dthen16)) {
          dcond16
        } else {
          dthen16
        })
      }
      
    } else {
      locally {
        val (relse16: Statement, delse16: Int) = locally {
          val dcond17 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen17: IfThenElse, dthen17: Int) = locally {
                val (r105: Statement, d131: Int) = locally {
                  val (e28: Statement, d137: Int) = eliminateForLoops(stat.then)
                  (e28, (2 + d137))
                }
                
                locally {
                  val (r106: Statement, d132: Int) = locally {
                    val (e27: Statement, d134: Int) = eliminateForLoops(stat.elze)
                    (e27, (2 + d134))
                  }
                  
                  (IfThenElse(stat.expr, r105, r106), (1 + if ((if ((1 >= d131)) {
                    1
                  } else {
                    d131
                  } >= d132)) {
                    if ((1 >= d131)) {
                      1
                    } else {
                      d131
                    }
                  } else {
                    d132
                  }))
                }
                
              }
              
              (rthen17, if ((dcond17 >= dthen17)) {
                dcond17
              } else {
                dthen17
              })
            }
            
          } else {
            locally {
              val (relse17: Statement, delse17: Int) = locally {
                val dcond18 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen18: While, dthen18: Int) = locally {
                      val (r114: Statement, d142: Int) = locally {
                        val (e29: Statement, d144: Int) = eliminateForLoops(stat.body)
                        (e29, (2 + d144))
                      }
                      
                      (While(stat.expr, r114), (1 + if ((1 >= d142)) {
                        1
                      } else {
                        d142
                      }))
                    }
                    
                    (rthen18, if ((dcond18 >= dthen18)) {
                      dcond18
                    } else {
                      dthen18
                    })
                  }
                  
                } else {
                  locally {
                    val (relse18: Statement, delse18: Int) = locally {
                      val dcond19 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen19: Block, dthen19: Int) = locally {
                            val (r119: Cons, d148: Int) = locally {
                              val (r120: Statement, d149: Int) = locally {
                                val (e32: Statement, d168: Int) = eliminateForLoops(stat.init)
                                (e32, (2 + d168))
                              }
                              
                              locally {
                                val (r121: Cons, d150: Int) = locally {
                                  val (r122: While, d151: Int) = locally {
                                    val (r125: Block, d154: Int) = locally {
                                      val (r126: Cons, d155: Int) = locally {
                                        val (r127: Statement, d156: Int) = locally {
                                          val (e31: Statement, d164: Int) = eliminateForLoops(stat.body)
                                          (e31, (2 + d164))
                                        }
                                        
                                        locally {
                                          val (r128: Cons, d157: Int) = locally {
                                            val (r129: Statement, d158: Int) = locally {
                                              val (e30: Statement, d161: Int) = eliminateForLoops(stat.step)
                                              (e30, (2 + d161))
                                            }
                                            
                                            (Cons(r129, Nil()), (1 + if ((d158 >= 1)) {
                                              d158
                                            } else {
                                              1
                                            }))
                                          }
                                          
                                          (Cons(r127, r128), (1 + if ((d156 >= d157)) {
                                            d156
                                          } else {
                                            d157
                                          }))
                                        }
                                        
                                      }
                                      
                                      (Block(r126), (1 + d155))
                                    }
                                    
                                    (While(stat.expr, r125), (1 + if ((1 >= d154)) {
                                      1
                                    } else {
                                      d154
                                    }))
                                  }
                                  
                                  (Cons(r122, Nil()), (1 + if ((d151 >= 1)) {
                                    d151
                                  } else {
                                    1
                                  }))
                                }
                                
                                (Cons(r120, r121), (1 + if ((d149 >= d150)) {
                                  d149
                                } else {
                                  d150
                                }))
                              }
                              
                            }
                            
                            (Block(r119), (1 + d148))
                          }
                          
                          (rthen19, if ((dcond19 >= dthen19)) {
                            dcond19
                          } else {
                            dthen19
                          })
                        }
                        
                      } else {
                        (stat, if ((dcond19 >= 0)) {
                          dcond19
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse18, if ((dcond18 >= delse18)) {
                      dcond18
                    } else {
                      delse18
                    })
                  }
                  
                }
              }
              
              (relse17, if ((dcond17 >= delse17)) {
                dcond17
              } else {
                delse17
              })
            }
            
          }
        }
        
        (relse16, if ((dcond16 >= delse16)) {
          dcond16
        } else {
          delse16
        })
      }
      
    }
  }
  } ensuring(res => true)

  def eliminateWhileLoopsList(l : List) : (List, Int) = {locally {
    val dcond2 = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), if ((dcond2 >= 1)) {
        dcond2
      } else {
        1
      })
    } else {
      locally {
        val (relse2: Cons, delse2: Int) = locally {
          val (r16: Statement, d19: Int) = locally {
            val (e5: Statement, d25: Int) = eliminateWhileLoops(l.head)
            (e5, (2 + d25))
          }
          
          locally {
            val (r17: List, d20: Int) = locally {
              val (e4: List, d22: Int) = eliminateWhileLoopsList(l.tail)
              (e4, (2 + d22))
            }
            
            (Cons(r16, r17), (1 + if ((d19 >= d20)) {
              d19
            } else {
              d20
            }))
          }
          
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : (Boolean, Int) = {locally {
    val dcond12 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen12: Boolean, dthen12: Int) = locally {
          val (e19: Boolean, d96: Int) = forLoopsWellFormedList(stat.body)
          (e19, (2 + d96))
        }
        
        (rthen12, if ((dcond12 >= dthen12)) {
          dcond12
        } else {
          dthen12
        })
      }
      
    } else {
      locally {
        val (relse12: Boolean, delse12: Int) = locally {
          val dcond13 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen13: Boolean, dthen13: Int) = locally {
                val (r80: Boolean, d99: Int) = locally {
                  val (e21: Boolean, d105: Int) = forLoopsWellFormed(stat.then)
                  (e21, (2 + d105))
                }
                
                locally {
                  val (r81: Boolean, d100: Int) = locally {
                    val (e20: Boolean, d102: Int) = forLoopsWellFormed(stat.elze)
                    (e20, (2 + d102))
                  }
                  
                  ((r80 && r81), (1 + if ((d99 >= d100)) {
                    d99
                  } else {
                    d100
                  }))
                }
                
              }
              
              (rthen13, if ((dcond13 >= dthen13)) {
                dcond13
              } else {
                dthen13
              })
            }
            
          } else {
            locally {
              val (relse13: Boolean, delse13: Int) = locally {
                val dcond14 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen14: Boolean, dthen14: Int) = locally {
                      val (e22: Boolean, d109: Int) = forLoopsWellFormed(stat.body)
                      (e22, (2 + d109))
                    }
                    
                    (rthen14, if ((dcond14 >= dthen14)) {
                      dcond14
                    } else {
                      dthen14
                    })
                  }
                  
                } else {
                  locally {
                    val (relse14: Boolean, delse14: Int) = locally {
                      val dcond15 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen15: Boolean, dthen15: Int) = locally {
                            val (r90: Boolean, d112: Int) = locally {
                              val (e25: Boolean, d122: Int) = isForFree(stat.init)
                              (e25, (2 + d122))
                            }
                            
                            locally {
                              val (r91: Boolean, d113: Int) = locally {
                                val (e24: Boolean, d119: Int) = isForFree(stat.step)
                                (e24, (2 + d119))
                              }
                              
                              locally {
                                val (r92: Boolean, d114: Int) = locally {
                                  val (e23: Boolean, d116: Int) = forLoopsWellFormed(stat.body)
                                  (e23, (2 + d116))
                                }
                                
                                ((r90 && r91 && r92), (1 + if ((if ((d112 >= d113)) {
                                  d112
                                } else {
                                  d113
                                } >= d114)) {
                                  if ((d112 >= d113)) {
                                    d112
                                  } else {
                                    d113
                                  }
                                } else {
                                  d114
                                }))
                              }
                              
                            }
                            
                          }
                          
                          (rthen15, if ((dcond15 >= dthen15)) {
                            dcond15
                          } else {
                            dthen15
                          })
                        }
                        
                      } else {
                        (true, if ((dcond15 >= 0)) {
                          dcond15
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse14, if ((dcond14 >= delse14)) {
                      dcond14
                    } else {
                      delse14
                    })
                  }
                  
                }
              }
              
              (relse13, if ((dcond13 >= delse13)) {
                dcond13
              } else {
                delse13
              })
            }
            
          }
        }
        
        (relse12, if ((dcond12 >= delse12)) {
          dcond12
        } else {
          delse12
        })
      }
      
    }
  }
  } ensuring(res => true)

  def forLoopsWellFormedList(l : List) : (Boolean, Int) = {locally {
    val dcond11 = 1
    if (l.isInstanceOf[Nil]) {
      (true, if ((dcond11 >= 0)) {
        dcond11
      } else {
        0
      })
    } else {
      locally {
        val (relse11: Boolean, delse11: Int) = locally {
          val (r70: Boolean, d86: Int) = locally {
            val (e18: Boolean, d92: Int) = forLoopsWellFormed(l.head)
            (e18, (2 + d92))
          }
          
          locally {
            val (r71: Boolean, d87: Int) = locally {
              val (e17: Boolean, d89: Int) = forLoopsWellFormedList(l.tail)
              (e17, (2 + d89))
            }
            
            ((r70 && r71), (1 + if ((d86 >= d87)) {
              d86
            } else {
              d87
            }))
          }
          
        }
        
        (relse11, if ((dcond11 >= delse11)) {
          dcond11
        } else {
          delse11
        })
      }
      
    }
  }
  } ensuring(res => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: isForFreeList
Defined fun: eliminateForLoopsList
Defined fun: sizeStat
Defined fun: eliminateWhileLoops
Defined fun: isForFree
Defined fun: eliminateForLoops
Defined fun: eliminateWhileLoopsList
Defined fun: sizeList
Defined fun: forLoopsWellFormed
Defined fun: forLoopsWellFormedList
Defined fun: max
FunMap: Map(eliminateWhileLoops -> eliminateWhileLoops, forLoopsWellFormed -> forLoopsWellFormed, sizeStat -> sizeStat, max -> max, forLoopsWellFormedList -> forLoopsWellFormedList, eliminateForLoops -> eliminateForLoops, eliminateForLoopsList -> eliminateForLoopsList, eliminateWhileLoopsList -> eliminateWhileLoopsList, isForFree -> isForFree, isForFreeList -> isForFreeList, sizeList -> sizeList)
After Time Instrumentation: 
object ForElimination {
  case class Nil() extends List

  sealed abstract class List

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class While(expr: Expression, body: Statement) extends Statement

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Cons(head: Statement, tail: List) extends List

  case class Skip() extends Statement

  case class Block(body: List) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  case class And(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Var(varID: Int) extends Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  def isForFreeList(l : List) : (Boolean, Int) = {locally {
    val dcond1 = 1
    if (l.isInstanceOf[Nil]) {
      (true, if ((dcond1 >= 0)) {
        dcond1
      } else {
        0
      })
    } else {
      locally {
        val (relse1: Boolean, delse1: Int) = locally {
          val (r9: Boolean, d10: Int) = locally {
            val (e3: Boolean, d16: Int) = isForFree(l.head)
            (e3, (2 + d16))
          }
          
          locally {
            val (r10: Boolean, d11: Int) = locally {
              val (e2: Boolean, d13: Int) = isForFreeList(l.tail)
              (e2, (2 + d13))
            }
            
            ((r9 && r10), (1 + if ((d10 >= d11)) {
              d10
            } else {
              d11
            }))
          }
          
        }
        
        (relse1, if ((dcond1 >= delse1)) {
          dcond1
        } else {
          delse1
        })
      }
      
    }
  }
  } ensuring(res24 => true)

  def eliminateForLoopsList(l : List) : (List, Int) = {locally {
    val dcond = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), if ((dcond >= 1)) {
        dcond
      } else {
        1
      })
    } else {
      locally {
        val (relse: Cons, delse: Int) = locally {
          val (r2: Statement, d1: Int) = locally {
            val (e1: Statement, d7: Int) = eliminateForLoops(l.head)
            (e1, (2 + d7))
          }
          
          locally {
            val (r3: List, d2: Int) = locally {
              val (e: List, d4: Int) = eliminateForLoopsList(l.tail)
              (e, (2 + d4))
            }
            
            (Cons(r2, r3), (1 + if ((d1 >= d2)) {
              d1
            } else {
              d2
            }))
          }
          
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res21 => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoops(stat : Statement) : (Statement, Int) = {locally {
    val dcond3 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen3: Block, dthen3: Int) = locally {
          val (r23: List, d28: Int) = locally {
            val (e6: List, d30: Int) = eliminateWhileLoopsList(stat.body)
            (e6, (2 + d30))
          }
          
          (Block(r23), (1 + d28))
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      locally {
        val (relse3: Statement, delse3: Int) = locally {
          val dcond4 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen4: IfThenElse, dthen4: Int) = locally {
                val (r28: Statement, d34: Int) = locally {
                  val (e8: Statement, d40: Int) = eliminateWhileLoops(stat.then)
                  (e8, (2 + d40))
                }
                
                locally {
                  val (r29: Statement, d35: Int) = locally {
                    val (e7: Statement, d37: Int) = eliminateWhileLoops(stat.elze)
                    (e7, (2 + d37))
                  }
                  
                  (IfThenElse(stat.expr, r28, r29), (1 + if ((if ((1 >= d34)) {
                    1
                  } else {
                    d34
                  } >= d35)) {
                    if ((1 >= d34)) {
                      1
                    } else {
                      d34
                    }
                  } else {
                    d35
                  }))
                }
                
              }
              
              (rthen4, if ((dcond4 >= dthen4)) {
                dcond4
              } else {
                dthen4
              })
            }
            
          } else {
            locally {
              val (relse4: Statement, delse4: Int) = locally {
                val dcond5 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen5: For, dthen5: Int) = locally {
                      val (r39: Statement, d47: Int) = locally {
                        val (e9: Statement, d49: Int) = eliminateWhileLoops(stat.body)
                        (e9, (2 + d49))
                      }
                      
                      (For(Skip(), stat.expr, Skip(), r39), (1 + if ((1 >= d47)) {
                        1
                      } else {
                        d47
                      }))
                    }
                    
                    (rthen5, if ((dcond5 >= dthen5)) {
                      dcond5
                    } else {
                      dthen5
                    })
                  }
                  
                } else {
                  locally {
                    val (relse5: Statement, delse5: Int) = locally {
                      val dcond6 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen6: For, dthen6: Int) = locally {
                            val (r44: Statement, d53: Int) = locally {
                              val (e12: Statement, d65: Int) = eliminateWhileLoops(stat.init)
                              (e12, (2 + d65))
                            }
                            
                            locally {
                              val (r46: Statement, d55: Int) = locally {
                                val (e11: Statement, d61: Int) = eliminateWhileLoops(stat.step)
                                (e11, (2 + d61))
                              }
                              
                              locally {
                                val (r47: Statement, d56: Int) = locally {
                                  val (e10: Statement, d58: Int) = eliminateWhileLoops(stat.body)
                                  (e10, (2 + d58))
                                }
                                
                                (For(r44, stat.expr, r46, r47), (1 + if ((if ((if ((d53 >= 1)) {
                                  d53
                                } else {
                                  1
                                } >= d55)) {
                                  if ((d53 >= 1)) {
                                    d53
                                  } else {
                                    1
                                  }
                                } else {
                                  d55
                                } >= d56)) {
                                  if ((if ((d53 >= 1)) {
                                    d53
                                  } else {
                                    1
                                  } >= d55)) {
                                    if ((d53 >= 1)) {
                                      d53
                                    } else {
                                      1
                                    }
                                  } else {
                                    d55
                                  }
                                } else {
                                  d56
                                }))
                              }
                              
                            }
                            
                          }
                          
                          (rthen6, if ((dcond6 >= dthen6)) {
                            dcond6
                          } else {
                            dthen6
                          })
                        }
                        
                      } else {
                        (stat, if ((dcond6 >= 0)) {
                          dcond6
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse5, if ((dcond5 >= delse5)) {
                      dcond5
                    } else {
                      delse5
                    })
                  }
                  
                }
              }
              
              (relse4, if ((dcond4 >= delse4)) {
                dcond4
              } else {
                delse4
              })
            }
            
          }
        }
        
        (relse3, if ((dcond3 >= delse3)) {
          dcond3
        } else {
          delse3
        })
      }
      
    }
  }
  } ensuring(res17 => true)

  def isForFree(stat : Statement) : (Boolean, Int) = {locally {
    val dcond7 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen7: Boolean, dthen7: Int) = locally {
          val (e13: Boolean, d69: Int) = isForFreeList(stat.body)
          (e13, (2 + d69))
        }
        
        (rthen7, if ((dcond7 >= dthen7)) {
          dcond7
        } else {
          dthen7
        })
      }
      
    } else {
      locally {
        val (relse7: Boolean, delse7: Int) = locally {
          val dcond8 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen8: Boolean, dthen8: Int) = locally {
                val (r59: Boolean, d72: Int) = locally {
                  val (e15: Boolean, d78: Int) = isForFree(stat.then)
                  (e15, (2 + d78))
                }
                
                locally {
                  val (r60: Boolean, d73: Int) = locally {
                    val (e14: Boolean, d75: Int) = isForFree(stat.elze)
                    (e14, (2 + d75))
                  }
                  
                  ((r59 && r60), (1 + if ((d72 >= d73)) {
                    d72
                  } else {
                    d73
                  }))
                }
                
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse8: Boolean, delse8: Int) = locally {
                val dcond9 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen9: Boolean, dthen9: Int) = locally {
                      val (e16: Boolean, d82: Int) = isForFree(stat.body)
                      (e16, (2 + d82))
                    }
                    
                    (rthen9, if ((dcond9 >= dthen9)) {
                      dcond9
                    } else {
                      dthen9
                    })
                  }
                  
                } else {
                  locally {
                    val (relse9: Boolean, delse9: Int) = locally {
                      val dcond10 = 1
                      if (stat.isInstanceOf[For]) {
                        (false, if ((dcond10 >= 0)) {
                          dcond10
                        } else {
                          0
                        })
                      } else {
                        (true, if ((dcond10 >= 0)) {
                          dcond10
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse9, if ((dcond9 >= delse9)) {
                      dcond9
                    } else {
                      delse9
                    })
                  }
                  
                }
              }
              
              (relse8, if ((dcond8 >= delse8)) {
                dcond8
              } else {
                delse8
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  } ensuring(res23 => true)

  def eliminateForLoops(stat : Statement) : (Statement, Int) = {locally {
    val dcond16 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen16: Block, dthen16: Int) = locally {
          val (r100: List, d125: Int) = locally {
            val (e26: List, d127: Int) = eliminateForLoopsList(stat.body)
            (e26, (2 + d127))
          }
          
          (Block(r100), (1 + d125))
        }
        
        (rthen16, if ((dcond16 >= dthen16)) {
          dcond16
        } else {
          dthen16
        })
      }
      
    } else {
      locally {
        val (relse16: Statement, delse16: Int) = locally {
          val dcond17 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen17: IfThenElse, dthen17: Int) = locally {
                val (r105: Statement, d131: Int) = locally {
                  val (e28: Statement, d137: Int) = eliminateForLoops(stat.then)
                  (e28, (2 + d137))
                }
                
                locally {
                  val (r106: Statement, d132: Int) = locally {
                    val (e27: Statement, d134: Int) = eliminateForLoops(stat.elze)
                    (e27, (2 + d134))
                  }
                  
                  (IfThenElse(stat.expr, r105, r106), (1 + if ((if ((1 >= d131)) {
                    1
                  } else {
                    d131
                  } >= d132)) {
                    if ((1 >= d131)) {
                      1
                    } else {
                      d131
                    }
                  } else {
                    d132
                  }))
                }
                
              }
              
              (rthen17, if ((dcond17 >= dthen17)) {
                dcond17
              } else {
                dthen17
              })
            }
            
          } else {
            locally {
              val (relse17: Statement, delse17: Int) = locally {
                val dcond18 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen18: While, dthen18: Int) = locally {
                      val (r114: Statement, d142: Int) = locally {
                        val (e29: Statement, d144: Int) = eliminateForLoops(stat.body)
                        (e29, (2 + d144))
                      }
                      
                      (While(stat.expr, r114), (1 + if ((1 >= d142)) {
                        1
                      } else {
                        d142
                      }))
                    }
                    
                    (rthen18, if ((dcond18 >= dthen18)) {
                      dcond18
                    } else {
                      dthen18
                    })
                  }
                  
                } else {
                  locally {
                    val (relse18: Statement, delse18: Int) = locally {
                      val dcond19 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen19: Block, dthen19: Int) = locally {
                            val (r119: Cons, d148: Int) = locally {
                              val (r120: Statement, d149: Int) = locally {
                                val (e32: Statement, d168: Int) = eliminateForLoops(stat.init)
                                (e32, (2 + d168))
                              }
                              
                              locally {
                                val (r121: Cons, d150: Int) = locally {
                                  val (r122: While, d151: Int) = locally {
                                    val (r125: Block, d154: Int) = locally {
                                      val (r126: Cons, d155: Int) = locally {
                                        val (r127: Statement, d156: Int) = locally {
                                          val (e31: Statement, d164: Int) = eliminateForLoops(stat.body)
                                          (e31, (2 + d164))
                                        }
                                        
                                        locally {
                                          val (r128: Cons, d157: Int) = locally {
                                            val (r129: Statement, d158: Int) = locally {
                                              val (e30: Statement, d161: Int) = eliminateForLoops(stat.step)
                                              (e30, (2 + d161))
                                            }
                                            
                                            (Cons(r129, Nil()), (1 + if ((d158 >= 1)) {
                                              d158
                                            } else {
                                              1
                                            }))
                                          }
                                          
                                          (Cons(r127, r128), (1 + if ((d156 >= d157)) {
                                            d156
                                          } else {
                                            d157
                                          }))
                                        }
                                        
                                      }
                                      
                                      (Block(r126), (1 + d155))
                                    }
                                    
                                    (While(stat.expr, r125), (1 + if ((1 >= d154)) {
                                      1
                                    } else {
                                      d154
                                    }))
                                  }
                                  
                                  (Cons(r122, Nil()), (1 + if ((d151 >= 1)) {
                                    d151
                                  } else {
                                    1
                                  }))
                                }
                                
                                (Cons(r120, r121), (1 + if ((d149 >= d150)) {
                                  d149
                                } else {
                                  d150
                                }))
                              }
                              
                            }
                            
                            (Block(r119), (1 + d148))
                          }
                          
                          (rthen19, if ((dcond19 >= dthen19)) {
                            dcond19
                          } else {
                            dthen19
                          })
                        }
                        
                      } else {
                        (stat, if ((dcond19 >= 0)) {
                          dcond19
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse18, if ((dcond18 >= delse18)) {
                      dcond18
                    } else {
                      delse18
                    })
                  }
                  
                }
              }
              
              (relse17, if ((dcond17 >= delse17)) {
                dcond17
              } else {
                delse17
              })
            }
            
          }
        }
        
        (relse16, if ((dcond16 >= delse16)) {
          dcond16
        } else {
          delse16
        })
      }
      
    }
  }
  } ensuring(res20 => true)

  def eliminateWhileLoopsList(l : List) : (List, Int) = {locally {
    val dcond2 = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), if ((dcond2 >= 1)) {
        dcond2
      } else {
        1
      })
    } else {
      locally {
        val (relse2: Cons, delse2: Int) = locally {
          val (r16: Statement, d19: Int) = locally {
            val (e5: Statement, d25: Int) = eliminateWhileLoops(l.head)
            (e5, (2 + d25))
          }
          
          locally {
            val (r17: List, d20: Int) = locally {
              val (e4: List, d22: Int) = eliminateWhileLoopsList(l.tail)
              (e4, (2 + d22))
            }
            
            (Cons(r16, r17), (1 + if ((d19 >= d20)) {
              d19
            } else {
              d20
            }))
          }
          
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res22 => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : (Boolean, Int) = {locally {
    val dcond12 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (rthen12: Boolean, dthen12: Int) = locally {
          val (e19: Boolean, d96: Int) = forLoopsWellFormedList(stat.body)
          (e19, (2 + d96))
        }
        
        (rthen12, if ((dcond12 >= dthen12)) {
          dcond12
        } else {
          dthen12
        })
      }
      
    } else {
      locally {
        val (relse12: Boolean, delse12: Int) = locally {
          val dcond13 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (rthen13: Boolean, dthen13: Int) = locally {
                val (r80: Boolean, d99: Int) = locally {
                  val (e21: Boolean, d105: Int) = forLoopsWellFormed(stat.then)
                  (e21, (2 + d105))
                }
                
                locally {
                  val (r81: Boolean, d100: Int) = locally {
                    val (e20: Boolean, d102: Int) = forLoopsWellFormed(stat.elze)
                    (e20, (2 + d102))
                  }
                  
                  ((r80 && r81), (1 + if ((d99 >= d100)) {
                    d99
                  } else {
                    d100
                  }))
                }
                
              }
              
              (rthen13, if ((dcond13 >= dthen13)) {
                dcond13
              } else {
                dthen13
              })
            }
            
          } else {
            locally {
              val (relse13: Boolean, delse13: Int) = locally {
                val dcond14 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (rthen14: Boolean, dthen14: Int) = locally {
                      val (e22: Boolean, d109: Int) = forLoopsWellFormed(stat.body)
                      (e22, (2 + d109))
                    }
                    
                    (rthen14, if ((dcond14 >= dthen14)) {
                      dcond14
                    } else {
                      dthen14
                    })
                  }
                  
                } else {
                  locally {
                    val (relse14: Boolean, delse14: Int) = locally {
                      val dcond15 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (rthen15: Boolean, dthen15: Int) = locally {
                            val (r90: Boolean, d112: Int) = locally {
                              val (e25: Boolean, d122: Int) = isForFree(stat.init)
                              (e25, (2 + d122))
                            }
                            
                            locally {
                              val (r91: Boolean, d113: Int) = locally {
                                val (e24: Boolean, d119: Int) = isForFree(stat.step)
                                (e24, (2 + d119))
                              }
                              
                              locally {
                                val (r92: Boolean, d114: Int) = locally {
                                  val (e23: Boolean, d116: Int) = forLoopsWellFormed(stat.body)
                                  (e23, (2 + d116))
                                }
                                
                                ((r90 && r91 && r92), (1 + if ((if ((d112 >= d113)) {
                                  d112
                                } else {
                                  d113
                                } >= d114)) {
                                  if ((d112 >= d113)) {
                                    d112
                                  } else {
                                    d113
                                  }
                                } else {
                                  d114
                                }))
                              }
                              
                            }
                            
                          }
                          
                          (rthen15, if ((dcond15 >= dthen15)) {
                            dcond15
                          } else {
                            dthen15
                          })
                        }
                        
                      } else {
                        (true, if ((dcond15 >= 0)) {
                          dcond15
                        } else {
                          0
                        })
                      }
                    }
                    
                    (relse14, if ((dcond14 >= delse14)) {
                      dcond14
                    } else {
                      delse14
                    })
                  }
                  
                }
              }
              
              (relse13, if ((dcond13 >= delse13)) {
                dcond13
              } else {
                delse13
              })
            }
            
          }
        }
        
        (relse12, if ((dcond12 >= delse12)) {
          dcond12
        } else {
          delse12
        })
      }
      
    }
  }
  } ensuring(res18 => true)

  def forLoopsWellFormedList(l : List) : (Boolean, Int) = {locally {
    val dcond11 = 1
    if (l.isInstanceOf[Nil]) {
      (true, if ((dcond11 >= 0)) {
        dcond11
      } else {
        0
      })
    } else {
      locally {
        val (relse11: Boolean, delse11: Int) = locally {
          val (r70: Boolean, d86: Int) = locally {
            val (e18: Boolean, d92: Int) = forLoopsWellFormed(l.head)
            (e18, (2 + d92))
          }
          
          locally {
            val (r71: Boolean, d87: Int) = locally {
              val (e17: Boolean, d89: Int) = forLoopsWellFormedList(l.tail)
              (e17, (2 + d89))
            }
            
            ((r70 && r71), (1 + if ((d86 >= d87)) {
              d86
            } else {
              d87
            }))
          }
          
        }
        
        (relse11, if ((dcond11 >= delse11)) {
          dcond11
        } else {
          delse11
        })
      }
      
    }
  }
  } ensuring(res19 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object ForElimination {
  case class Nil() extends List

  sealed abstract class List

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class While(expr: Expression, body: Statement) extends Statement

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Cons(head: Statement, tail: List) extends List

  case class Skip() extends Statement

  case class Block(body: List) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  case class And(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Var(varID: Int) extends Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  def isForFreeList(l : List) : (Boolean, Int) = {if (l.isInstanceOf[Nil]) {
    (true, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse1: Boolean, delse1: Int) = locally {
        val (r9: Boolean, d10: Int) = locally {
          val (e3: Boolean, d16: Int) = isForFree(l.head)
          (e3, (2 + d16))
        }
        
        locally {
          val (r10: Boolean, d11: Int) = locally {
            val (e2: Boolean, d13: Int) = isForFreeList(l.tail)
            (e2, (2 + d13))
          }
          
          ((r9 && r10), (1 + if ((d10 >= d11)) {
            d10
          } else {
            d11
          }))
        }
        
      }
      
      (relse1, if ((1 >= delse1)) {
        1
      } else {
        delse1
      })
    }
    
  }} ensuring(res24 => true)

  def eliminateForLoopsList(l : List) : (List, Int) = {if (l.isInstanceOf[Nil]) {
    (Nil(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse: Cons, delse: Int) = locally {
        val (r2: Statement, d1: Int) = locally {
          val (e1: Statement, d7: Int) = eliminateForLoops(l.head)
          (e1, (2 + d7))
        }
        
        locally {
          val (r3: List, d2: Int) = locally {
            val (e: List, d4: Int) = eliminateForLoopsList(l.tail)
            (e, (2 + d4))
          }
          
          (Cons(r2, r3), (1 + if ((d1 >= d2)) {
            d1
          } else {
            d2
          }))
        }
        
      }
      
      (relse, if ((1 >= delse)) {
        1
      } else {
        delse
      })
    }
    
  }} ensuring(res21 => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoops(stat : Statement) : (Statement, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (rthen3: Block, dthen3: Int) = locally {
        val (r23: List, d28: Int) = locally {
          val (e6: List, d30: Int) = eliminateWhileLoopsList(stat.body)
          (e6, (2 + d30))
        }
        
        (Block(r23), (1 + d28))
      }
      
      (rthen3, if ((1 >= dthen3)) {
        1
      } else {
        dthen3
      })
    }
    
  } else {
    locally {
      val (relse3: Statement, delse3: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (rthen4: IfThenElse, dthen4: Int) = locally {
            val (r28: Statement, d34: Int) = locally {
              val (e8: Statement, d40: Int) = eliminateWhileLoops(stat.then)
              (e8, (2 + d40))
            }
            
            locally {
              val (r29: Statement, d35: Int) = locally {
                val (e7: Statement, d37: Int) = eliminateWhileLoops(stat.elze)
                (e7, (2 + d37))
              }
              
              (IfThenElse(stat.expr, r28, r29), (1 + if ((if ((1 >= d34)) {
                1
              } else {
                d34
              } >= d35)) {
                if ((1 >= d34)) {
                  1
                } else {
                  d34
                }
              } else {
                d35
              }))
            }
            
          }
          
          (rthen4, if ((1 >= dthen4)) {
            1
          } else {
            dthen4
          })
        }
        
      } else {
        locally {
          val (relse4: Statement, delse4: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (rthen5: For, dthen5: Int) = locally {
                val (r39: Statement, d47: Int) = locally {
                  val (e9: Statement, d49: Int) = eliminateWhileLoops(stat.body)
                  (e9, (2 + d49))
                }
                
                (For(Skip(), stat.expr, Skip(), r39), (1 + if ((1 >= d47)) {
                  1
                } else {
                  d47
                }))
              }
              
              (rthen5, if ((1 >= dthen5)) {
                1
              } else {
                dthen5
              })
            }
            
          } else {
            locally {
              val (relse5: Statement, delse5: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (rthen6: For, dthen6: Int) = locally {
                    val (r44: Statement, d53: Int) = locally {
                      val (e12: Statement, d65: Int) = eliminateWhileLoops(stat.init)
                      (e12, (2 + d65))
                    }
                    
                    locally {
                      val (r46: Statement, d55: Int) = locally {
                        val (e11: Statement, d61: Int) = eliminateWhileLoops(stat.step)
                        (e11, (2 + d61))
                      }
                      
                      locally {
                        val (r47: Statement, d56: Int) = locally {
                          val (e10: Statement, d58: Int) = eliminateWhileLoops(stat.body)
                          (e10, (2 + d58))
                        }
                        
                        (For(r44, stat.expr, r46, r47), (1 + if ((if ((if ((d53 >= 1)) {
                          d53
                        } else {
                          1
                        } >= d55)) {
                          if ((d53 >= 1)) {
                            d53
                          } else {
                            1
                          }
                        } else {
                          d55
                        } >= d56)) {
                          if ((if ((d53 >= 1)) {
                            d53
                          } else {
                            1
                          } >= d55)) {
                            if ((d53 >= 1)) {
                              d53
                            } else {
                              1
                            }
                          } else {
                            d55
                          }
                        } else {
                          d56
                        }))
                      }
                      
                    }
                    
                  }
                  
                  (rthen6, if ((1 >= dthen6)) {
                    1
                  } else {
                    dthen6
                  })
                }
                
              } else {
                (stat, if ((1 >= 0)) {
                  1
                } else {
                  0
                })
              }
              (relse5, if ((1 >= delse5)) {
                1
              } else {
                delse5
              })
            }
            
          }
          (relse4, if ((1 >= delse4)) {
            1
          } else {
            delse4
          })
        }
        
      }
      (relse3, if ((1 >= delse3)) {
        1
      } else {
        delse3
      })
    }
    
  }} ensuring(res17 => true)

  def isForFree(stat : Statement) : (Boolean, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (rthen7: Boolean, dthen7: Int) = locally {
        val (e13: Boolean, d69: Int) = isForFreeList(stat.body)
        (e13, (2 + d69))
      }
      
      (rthen7, if ((1 >= dthen7)) {
        1
      } else {
        dthen7
      })
    }
    
  } else {
    locally {
      val (relse7: Boolean, delse7: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (rthen8: Boolean, dthen8: Int) = locally {
            val (r59: Boolean, d72: Int) = locally {
              val (e15: Boolean, d78: Int) = isForFree(stat.then)
              (e15, (2 + d78))
            }
            
            locally {
              val (r60: Boolean, d73: Int) = locally {
                val (e14: Boolean, d75: Int) = isForFree(stat.elze)
                (e14, (2 + d75))
              }
              
              ((r59 && r60), (1 + if ((d72 >= d73)) {
                d72
              } else {
                d73
              }))
            }
            
          }
          
          (rthen8, if ((1 >= dthen8)) {
            1
          } else {
            dthen8
          })
        }
        
      } else {
        locally {
          val (relse8: Boolean, delse8: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (rthen9: Boolean, dthen9: Int) = locally {
                val (e16: Boolean, d82: Int) = isForFree(stat.body)
                (e16, (2 + d82))
              }
              
              (rthen9, if ((1 >= dthen9)) {
                1
              } else {
                dthen9
              })
            }
            
          } else {
            locally {
              val (relse9: Boolean, delse9: Int) = if (stat.isInstanceOf[For]) {
                (false, if ((1 >= 0)) {
                  1
                } else {
                  0
                })
              } else {
                (true, if ((1 >= 0)) {
                  1
                } else {
                  0
                })
              }
              (relse9, if ((1 >= delse9)) {
                1
              } else {
                delse9
              })
            }
            
          }
          (relse8, if ((1 >= delse8)) {
            1
          } else {
            delse8
          })
        }
        
      }
      (relse7, if ((1 >= delse7)) {
        1
      } else {
        delse7
      })
    }
    
  }} ensuring(res23 => true)

  def eliminateForLoops(stat : Statement) : (Statement, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (rthen16: Block, dthen16: Int) = locally {
        val (r100: List, d125: Int) = locally {
          val (e26: List, d127: Int) = eliminateForLoopsList(stat.body)
          (e26, (2 + d127))
        }
        
        (Block(r100), (1 + d125))
      }
      
      (rthen16, if ((1 >= dthen16)) {
        1
      } else {
        dthen16
      })
    }
    
  } else {
    locally {
      val (relse16: Statement, delse16: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (rthen17: IfThenElse, dthen17: Int) = locally {
            val (r105: Statement, d131: Int) = locally {
              val (e28: Statement, d137: Int) = eliminateForLoops(stat.then)
              (e28, (2 + d137))
            }
            
            locally {
              val (r106: Statement, d132: Int) = locally {
                val (e27: Statement, d134: Int) = eliminateForLoops(stat.elze)
                (e27, (2 + d134))
              }
              
              (IfThenElse(stat.expr, r105, r106), (1 + if ((if ((1 >= d131)) {
                1
              } else {
                d131
              } >= d132)) {
                if ((1 >= d131)) {
                  1
                } else {
                  d131
                }
              } else {
                d132
              }))
            }
            
          }
          
          (rthen17, if ((1 >= dthen17)) {
            1
          } else {
            dthen17
          })
        }
        
      } else {
        locally {
          val (relse17: Statement, delse17: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (rthen18: While, dthen18: Int) = locally {
                val (r114: Statement, d142: Int) = locally {
                  val (e29: Statement, d144: Int) = eliminateForLoops(stat.body)
                  (e29, (2 + d144))
                }
                
                (While(stat.expr, r114), (1 + if ((1 >= d142)) {
                  1
                } else {
                  d142
                }))
              }
              
              (rthen18, if ((1 >= dthen18)) {
                1
              } else {
                dthen18
              })
            }
            
          } else {
            locally {
              val (relse18: Statement, delse18: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (rthen19: Block, dthen19: Int) = locally {
                    val (r119: Cons, d148: Int) = locally {
                      val (r120: Statement, d149: Int) = locally {
                        val (e32: Statement, d168: Int) = eliminateForLoops(stat.init)
                        (e32, (2 + d168))
                      }
                      
                      locally {
                        val (r121: Cons, d150: Int) = locally {
                          val (r122: While, d151: Int) = locally {
                            val (r125: Block, d154: Int) = locally {
                              val (r126: Cons, d155: Int) = locally {
                                val (r127: Statement, d156: Int) = locally {
                                  val (e31: Statement, d164: Int) = eliminateForLoops(stat.body)
                                  (e31, (2 + d164))
                                }
                                
                                locally {
                                  val (r128: Cons, d157: Int) = locally {
                                    val (r129: Statement, d158: Int) = locally {
                                      val (e30: Statement, d161: Int) = eliminateForLoops(stat.step)
                                      (e30, (2 + d161))
                                    }
                                    
                                    (Cons(r129, Nil()), (1 + if ((d158 >= 1)) {
                                      d158
                                    } else {
                                      1
                                    }))
                                  }
                                  
                                  (Cons(r127, r128), (1 + if ((d156 >= d157)) {
                                    d156
                                  } else {
                                    d157
                                  }))
                                }
                                
                              }
                              
                              (Block(r126), (1 + d155))
                            }
                            
                            (While(stat.expr, r125), (1 + if ((1 >= d154)) {
                              1
                            } else {
                              d154
                            }))
                          }
                          
                          (Cons(r122, Nil()), (1 + if ((d151 >= 1)) {
                            d151
                          } else {
                            1
                          }))
                        }
                        
                        (Cons(r120, r121), (1 + if ((d149 >= d150)) {
                          d149
                        } else {
                          d150
                        }))
                      }
                      
                    }
                    
                    (Block(r119), (1 + d148))
                  }
                  
                  (rthen19, if ((1 >= dthen19)) {
                    1
                  } else {
                    dthen19
                  })
                }
                
              } else {
                (stat, if ((1 >= 0)) {
                  1
                } else {
                  0
                })
              }
              (relse18, if ((1 >= delse18)) {
                1
              } else {
                delse18
              })
            }
            
          }
          (relse17, if ((1 >= delse17)) {
            1
          } else {
            delse17
          })
        }
        
      }
      (relse16, if ((1 >= delse16)) {
        1
      } else {
        delse16
      })
    }
    
  }} ensuring(res20 => true)

  def eliminateWhileLoopsList(l : List) : (List, Int) = {if (l.isInstanceOf[Nil]) {
    (Nil(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse2: Cons, delse2: Int) = locally {
        val (r16: Statement, d19: Int) = locally {
          val (e5: Statement, d25: Int) = eliminateWhileLoops(l.head)
          (e5, (2 + d25))
        }
        
        locally {
          val (r17: List, d20: Int) = locally {
            val (e4: List, d22: Int) = eliminateWhileLoopsList(l.tail)
            (e4, (2 + d22))
          }
          
          (Cons(r16, r17), (1 + if ((d19 >= d20)) {
            d19
          } else {
            d20
          }))
        }
        
      }
      
      (relse2, if ((1 >= delse2)) {
        1
      } else {
        delse2
      })
    }
    
  }} ensuring(res22 => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : (Boolean, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (rthen12: Boolean, dthen12: Int) = locally {
        val (e19: Boolean, d96: Int) = forLoopsWellFormedList(stat.body)
        (e19, (2 + d96))
      }
      
      (rthen12, if ((1 >= dthen12)) {
        1
      } else {
        dthen12
      })
    }
    
  } else {
    locally {
      val (relse12: Boolean, delse12: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (rthen13: Boolean, dthen13: Int) = locally {
            val (r80: Boolean, d99: Int) = locally {
              val (e21: Boolean, d105: Int) = forLoopsWellFormed(stat.then)
              (e21, (2 + d105))
            }
            
            locally {
              val (r81: Boolean, d100: Int) = locally {
                val (e20: Boolean, d102: Int) = forLoopsWellFormed(stat.elze)
                (e20, (2 + d102))
              }
              
              ((r80 && r81), (1 + if ((d99 >= d100)) {
                d99
              } else {
                d100
              }))
            }
            
          }
          
          (rthen13, if ((1 >= dthen13)) {
            1
          } else {
            dthen13
          })
        }
        
      } else {
        locally {
          val (relse13: Boolean, delse13: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (rthen14: Boolean, dthen14: Int) = locally {
                val (e22: Boolean, d109: Int) = forLoopsWellFormed(stat.body)
                (e22, (2 + d109))
              }
              
              (rthen14, if ((1 >= dthen14)) {
                1
              } else {
                dthen14
              })
            }
            
          } else {
            locally {
              val (relse14: Boolean, delse14: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (rthen15: Boolean, dthen15: Int) = locally {
                    val (r90: Boolean, d112: Int) = locally {
                      val (e25: Boolean, d122: Int) = isForFree(stat.init)
                      (e25, (2 + d122))
                    }
                    
                    locally {
                      val (r91: Boolean, d113: Int) = locally {
                        val (e24: Boolean, d119: Int) = isForFree(stat.step)
                        (e24, (2 + d119))
                      }
                      
                      locally {
                        val (r92: Boolean, d114: Int) = locally {
                          val (e23: Boolean, d116: Int) = forLoopsWellFormed(stat.body)
                          (e23, (2 + d116))
                        }
                        
                        ((r90 && r91 && r92), (1 + if ((if ((d112 >= d113)) {
                          d112
                        } else {
                          d113
                        } >= d114)) {
                          if ((d112 >= d113)) {
                            d112
                          } else {
                            d113
                          }
                        } else {
                          d114
                        }))
                      }
                      
                    }
                    
                  }
                  
                  (rthen15, if ((1 >= dthen15)) {
                    1
                  } else {
                    dthen15
                  })
                }
                
              } else {
                (true, if ((1 >= 0)) {
                  1
                } else {
                  0
                })
              }
              (relse14, if ((1 >= delse14)) {
                1
              } else {
                delse14
              })
            }
            
          }
          (relse13, if ((1 >= delse13)) {
            1
          } else {
            delse13
          })
        }
        
      }
      (relse12, if ((1 >= delse12)) {
        1
      } else {
        delse12
      })
    }
    
  }} ensuring(res18 => true)

  def forLoopsWellFormedList(l : List) : (Boolean, Int) = {if (l.isInstanceOf[Nil]) {
    (true, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse11: Boolean, delse11: Int) = locally {
        val (r70: Boolean, d86: Int) = locally {
          val (e18: Boolean, d92: Int) = forLoopsWellFormed(l.head)
          (e18, (2 + d92))
        }
        
        locally {
          val (r71: Boolean, d87: Int) = locally {
            val (e17: Boolean, d89: Int) = forLoopsWellFormedList(l.tail)
            (e17, (2 + d89))
          }
          
          ((r70 && r71), (1 + if ((d86 >= d87)) {
            d86
          } else {
            d87
          }))
        }
        
      }
      
      (relse11, if ((1 >= delse11)) {
        1
      } else {
        delse11
      })
    }
    
  }} ensuring(res19 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: isForFreeList template --> (res24._2 ≤ ((a?1 * sizeList(l)) + b?1))
Function: eliminateForLoopsList template --> (res21._2 ≤ ((a?6 * sizeList(l)) + b?6))
Function: eliminateWhileLoops template --> (res17._2 ≤ ((a?5 * sizeStat(stat)) + b?5))
Function: isForFree template --> (res23._2 ≤ ((a? * sizeStat(stat)) + b?))
Function: eliminateForLoops template --> (res20._2 ≤ ((a?7 * sizeStat(stat)) + b?7))
Function: eliminateWhileLoopsList template --> (res22._2 ≤ ((a?4 * sizeList(l)) + b?4))
Function: forLoopsWellFormed template --> (res18._2 ≤ ((a?3 * sizeStat(stat)) + b?3))
Function: forLoopsWellFormedList template --> (res19._2 ≤ ((a?2 * sizeList(l)) + b?2))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(sizeStat, sizeList, eliminateForLoops, eliminateForLoopsList, eliminateWhileLoops, eliminateWhileLoopsList, isForFreeList, isForFree, forLoopsWellFormed, forLoopsWellFormedList)
[[34m Info  [0m] - considering function eliminateForLoops...
[[34m Info  [0m] Body: if (stat.isInstanceOf[Block])
            (let (rthen16,dthen16 := (let (r100,d125 := (let (e26,d127 := eliminateForLoopsList(stat.body)) in
              (e26, (2 + d127)))) in
              (Block(r100), (1 + d125)))) in
              (rthen16, if ((1 ≥ dthen16))
                1
              else
                dthen16))
          else
            (let (relse16,delse16 := if (stat.isInstanceOf[IfThenElse])
              (let (rthen17,dthen17 := (let (r105,d131 := (let (e28,d137 := eliminateForLoops(stat.then)) in
                (e28, (2 + d137)))) in
                (let (r106,d132 := (let (e27,d134 := eliminateForLoops(stat.elze)) in
                  (e27, (2 + d134)))) in
                  (IfThenElse(stat.expr, r105, r106), (1 + if ((if ((1 ≥ d131))
                    1
                  else
                    d131 ≥ d132))
                    if ((1 ≥ d131))
                      1
                    else
                      d131
                  else
                    d132))))) in
                (rthen17, if ((1 ≥ dthen17))
                  1
                else
                  dthen17))
            else
              (let (relse17,delse17 := if (stat.isInstanceOf[While])
                (let (rthen18,dthen18 := (let (r114,d142 := (let (e29,d144 := eliminateForLoops(stat.body)) in
                  (e29, (2 + d144)))) in
                  (While(stat.expr, r114), (1 + if ((1 ≥ d142))
                    1
                  else
                    d142)))) in
                  (rthen18, if ((1 ≥ dthen18))
                    1
                  else
                    dthen18))
              else
                (let (relse18,delse18 := if (stat.isInstanceOf[For])
                  (let (rthen19,dthen19 := (let (r119,d148 := (let (r120,d149 := (let (e32,d168 := eliminateForLoops(stat.init)) in
                    (e32, (2 + d168)))) in
                    (let (r121,d150 := (let (r122,d151 := (let (r125,d154 := (let (r126,d155 := (let (r127,d156 := (let (e31,d164 := eliminateForLoops(stat.body)) in
                      (e31, (2 + d164)))) in
                      (let (r128,d157 := (let (r129,d158 := (let (e30,d161 := eliminateForLoops(stat.step)) in
                        (e30, (2 + d161)))) in
                        (Cons(r129, Nil()), (1 + if ((d158 ≥ 1))
                          d158
                        else
                          1)))) in
                        (Cons(r127, r128), (1 + if ((d156 ≥ d157))
                          d156
                        else
                          d157))))) in
                      (Block(r126), (1 + d155)))) in
                      (While(stat.expr, r125), (1 + if ((1 ≥ d154))
                        1
                      else
                        d154)))) in
                      (Cons(r122, Nil()), (1 + if ((d151 ≥ 1))
                        d151
                      else
                        1)))) in
                      (Cons(r120, r121), (1 + if ((d149 ≥ d150))
                        d149
                      else
                        d150))))) in
                    (Block(r119), (1 + d148)))) in
                    (rthen19, if ((1 ≥ dthen19))
                      1
                    else
                      dthen19))
                else
                  (stat, if ((1 ≥ 0))
                    1
                  else
                    0)) in
                  (relse18, if ((1 ≥ delse18))
                    1
                  else
                    delse18))) in
                (relse17, if ((1 ≥ delse17))
                  1
                else
                  delse17))) in
              (relse16, if ((1 ≥ delse16))
                1
              else
                delse16))
[[34m Info  [0m] Post: true
falttened Body: ((res20 == ifres) && ((ci && (ci == stat.isInstanceOf[Block]) && (ifres == tp) && (tp == (rthen16, ifres1)) && (e26 == ts) && (ts == tres._1) && (rthen16 == cc) && (cc == Block(r100)) && (r100 == e26) && (d127 == ts1) && (ts1 == tres._2) && (((1 >= dthen16) && (ifres1 == 1)) || ((1 < dthen16) && (ifres1 == dthen16))) && (dthen16 == (1 + d125)) && (d125 == (2 + d127)) && (tres == r138) && (cs == stat.body) && (r138 == eliminateForLoopsList(cs))) || (!(ci1) && (ci1 == stat.isInstanceOf[Block]) && (ifres == tp1) && (tp1 == (relse16, ifres2)) && ((ci2 && (ci2 == stat.isInstanceOf[IfThenElse]) && (ifres3 == tp2) && (tp2 == (rthen17, ifres4)) && (e27 == ts2) && (ts2 == tres1._1) && (((1 >= dthen17) && (ifres4 == 1)) || ((1 < dthen17) && (ifres4 == dthen17))) && (dthen17 == (1 + ifres5)) && (e28 == ts3) && (ts3 == tres2._1) && (d134 == ts4) && (ts4 == tres1._2) && (d132 == (2 + d134)) && (rthen17 == cc1) && (cs1 == stat.expr) && (cc1 == IfThenElse(cs1, r105, r106)) && (((ifres6 >= d132) && (((1 >= d131) && (ifres6 == 1)) || ((1 < d131) && (ifres6 == d131))) && (ifres5 == ifres7) && (((1 >= d131) && (ifres7 == 1)) || ((1 < d131) && (ifres7 == d131)))) || ((ifres8 < d132) && (((1 >= d131) && (ifres8 == 1)) || ((1 < d131) && (ifres8 == d131))) && (ifres5 == d132))) && (r106 == e27) && (tres2 == r139) && (cs2 == stat.then) && (r139 == eliminateForLoops(cs2)) && (d131 == (2 + d137)) && (r105 == e28) && (d137 == ts5) && (ts5 == tres2._2) && (tres1 == r140) && (cs3 == stat.elze) && (r140 == eliminateForLoops(cs3))) || (!(ci3) && (ci3 == stat.isInstanceOf[IfThenElse]) && (ifres3 == tp3) && (tp3 == (relse17, ifres9)) && ((ci4 && (ci4 == stat.isInstanceOf[While]) && (ifres10 == tp4) && (tp4 == (rthen18, ifres11)) && (d142 == (2 + d144)) && (tres3 == r141) && (cs4 == stat.body) && (r141 == eliminateForLoops(cs4)) && (((1 >= d142) && (ifres12 == 1)) || ((1 < d142) && (ifres12 == d142))) && (d144 == ts6) && (ts6 == tres3._2) && (rthen18 == cc2) && (cs5 == stat.expr) && (cc2 == While(cs5, r114)) && (r114 == e29) && (e29 == ts7) && (ts7 == tres3._1) && (((1 >= dthen18) && (ifres11 == 1)) || ((1 < dthen18) && (ifres11 == dthen18))) && (dthen18 == (1 + ifres12))) || (!(ci5) && (ci5 == stat.isInstanceOf[While]) && (ifres10 == tp5) && (tp5 == (relse18, ifres13)) && ((ci6 && (ci6 == stat.isInstanceOf[For]) && (ifres14 == tp6) && (tp6 == (rthen19, ifres15)) && (d149 == (2 + d168)) && (((d158 >= 1) && (ifres20 == d158)) || ((d158 < 1) && (ifres20 == 1))) && (tres4 == r142) && (cs6 == stat.step) && (r142 == eliminateForLoops(cs6)) && (dthen19 == (1 + d148)) && (d157 == (1 + ifres20)) && (tres6 == r143) && (cs7 == stat.init) && (r143 == eliminateForLoops(cs7)) && (d161 == ts8) && (ts8 == tres4._2) && (d148 == (1 + ifres16)) && (d150 == (1 + ifres17)) && (((d149 >= d150) && (ifres16 == d149)) || ((d149 < d150) && (ifres16 == d150))) && (((1 >= d154) && (ifres18 == 1)) || ((1 < d154) && (ifres18 == d154))) && (r126 == cc3) && (cc3 == Cons(r127, r128)) && (d158 == (2 + d161)) && (e31 == ts9) && (ts9 == tres5._1) && (d155 == (1 + ifres19)) && (((d151 >= 1) && (ifres17 == d151)) || ((d151 < 1) && (ifres17 == 1))) && (d168 == ts10) && (ts10 == tres6._2) && (r129 == e30) && (r127 == e31) && (d151 == (1 + ifres18)) && (r121 == cc5) && (cc4 == Nil()) && (cc5 == Cons(r122, cc4)) && (e32 == ts11) && (ts11 == tres6._1) && (d156 == (2 + d164)) && (((d156 >= d157) && (ifres19 == d156)) || ((d156 < d157) && (ifres19 == d157))) && (tres5 == r144) && (cs8 == stat.body) && (r144 == eliminateForLoops(cs8)) && (e30 == ts12) && (ts12 == tres4._1) && (d164 == ts13) && (ts13 == tres5._2) && (r125 == cc6) && (cc6 == Block(r126)) && (r122 == cc7) && (cs9 == stat.expr) && (cc7 == While(cs9, r125)) && (d154 == (1 + d155)) && (((1 >= dthen19) && (ifres15 == 1)) || ((1 < dthen19) && (ifres15 == dthen19))) && (r120 == e32) && (rthen19 == cc8) && (cc8 == Block(r119)) && (r128 == cc10) && (cc9 == Nil()) && (cc10 == Cons(r129, cc9)) && (r119 == cc11) && (cc11 == Cons(r120, r121))) || (!(ci7) && (ci7 == stat.isInstanceOf[For]) && (ifres14 == tp7) && (tp7 == (stat, ifres21)) && (((1 >= 0) && (ifres21 == 1)) || ((1 < 0) && (ifres21 == 0))))) && (relse18 == ts14) && (ts14 == ifres14._1) && (delse18 == ts15) && (ts15 == ifres14._2) && (((1 >= delse18) && (ifres13 == 1)) || ((1 < delse18) && (ifres13 == delse18))))) && (relse17 == ts16) && (ts16 == ifres10._1) && (delse17 == ts17) && (ts17 == ifres10._2) && (((1 >= delse17) && (ifres9 == 1)) || ((1 < delse17) && (ifres9 == delse17))))) && (relse16 == ts18) && (ts18 == ifres3._1) && (delse16 == ts19) && (ts19 == ifres3._2) && (((1 >= delse16) && (ifres2 == 1)) || ((1 < delse16) && (ifres2 == delse16))))))
Flattened Post: ((ts20 > ((a?7 * r145) + b?7)) && (ts20 == res20._2) && (r145 == sizeStat(stat)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 153
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 10 + 0
solving...
solved... in 0.022s
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + -16) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 153
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 11 + 10
solving...
solved... in 0.017s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/8
Unrolled calls: Set((r145 == sizeStat(stat)))
Creating VC for sizeStat
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function sizeStat : (((a?9 * #res) + a?8) ≤ 0)
Unrolling (r145 == sizeStat(stat))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((0 * sizeStat(stat)) + (1 * res20._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 81
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 19 + 0
solving...
solved... in 0.018s
candidate Invariants
eliminateForLoops-->((((0 * sizeStat(stat)) + (8 * res20._2)) + -1) ≤ 0)
sizeStat-->(((0 * #res) + 5) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 19
solving...
solved... in 0.02s
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + 6) ≤ 0)
sizeStat-->(((0 * #res) + -1) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 81
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 17 + 27
solving...
solved... in 0.047s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/27
Unrolled calls: Set((r164 == sizeStat(cs3)), (r162 == sizeStat(cs2)))
Unrolling (r164 == sizeStat(cs3))
Unrolling (r162 == sizeStat(cs2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 11 + 0
solving...
solved... in 0.014s
candidate Invariants
eliminateForLoops-->((((-2 * sizeStat(stat)) + (16 * res20._2)) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 243
[[34m Info  [0m] Number of equal calls: 32
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 37 + 11
solving...
solved... in 0.024s
candidate Invariants
eliminateForLoops-->((((-316 * sizeStat(stat)) + (6 * res20._2)) + 3) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 4
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 19 + 48
solving...
solved... in 0.023s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/39
Unrolled calls: Set((r165 == sizeStat(cs8)), (r155 == sizeList(cs17)), (r148 == sizeList(cs10)), (r167 == sizeStat(cs7)), (r138 == eliminateForLoopsList(cs)), (r163 == sizeStat(cs6)))
Unrolling (r165 == sizeStat(cs8))
Creating VC for eliminateForLoopsList
Unrolling (r138 == eliminateForLoopsList(cs))
Creating VC for sizeList
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function sizeList : (((a?11 * #res) + a?10) ≤ 0)
Unrolling (r155 == sizeList(cs17))
Unrolling (r163 == sizeStat(cs6))
Unrolling (r167 == sizeStat(cs7))
Unrolling (r148 == sizeList(cs10))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (0 * sizeList(l))) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 245
[[34m Info  [0m] Number of equal calls: 27
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 43 + 0
solving...
solved... in 0.021s
candidate Invariants
eliminateForLoops-->((((16 * res20._2) + (-2 * sizeStat(stat))) + -8) ≤ 0)
sizeStat-->(((0 * #res) + 229) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (1 * res21._2)) + -3) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 18 + 43
solving...
solved... in 0.019s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/66
Unrolled calls: Set((r208 == sizeList(cs53)), (r199 == sizeList(l)), (r197 == eliminateForLoops(cs45)))
Unrolling (r208 == sizeList(cs53))
Unrolling (r199 == sizeList(l))
Unrolling (r197 == eliminateForLoops(cs45))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((0 * sizeStat(stat)) + (1 * res20._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (0 * sizeList(l))) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 21 + 0
solving...
solved... in 0.013s
candidate Invariants
eliminateForLoops-->((((-2 * sizeStat(stat)) + (16 * res20._2)) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (2 * res21._2)) + 1) ≤ 0)
sizeList-->(((0 * #res) + 7) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 441
[[34m Info  [0m] Number of equal calls: 40
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 66 + 21
solving...
solved... in 0.036s
candidate Invariants
eliminateForLoops-->((((3 * res20._2) + (-122 * sizeStat(stat))) + -3) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (1 * res21._2)) + -4) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 235
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 36 + 87
solving...
solved... in 0.076s
candidate Invariants
eliminateForLoops-->((((1 * res20._2) + (0 * sizeStat(stat))) + -9) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
eliminateForLoopsList-->((((32 * res21._2) + (3 * sizeList(l))) + -448) ≤ 0)
sizeList-->(((3 * #res) + -32) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 13
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 235
[[34m Info  [0m] Number of equal calls: 29
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 67 + 123
solving...
solved... in 0.077s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/78
Unrolled calls: Set((r254 == sizeList(cs46)), (r255 == sizeStat(cs45)), (r166 == sizeStat(cs4)), (r204 == sizeStat(cs49)), (r231 == sizeStat(cs71)))
Unrolling (r254 == sizeList(cs46))
Unrolling (r255 == sizeStat(cs45))
Unrolling (r204 == sizeStat(cs49))
Unrolling (r231 == sizeStat(cs71))
Unrolling (r166 == sizeStat(cs4))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateForLoops-->((((0 * sizeStat(stat)) + (1 * res20._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (1 * res21._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 21 + 0
solving...
solved... in 0.012s
candidate Invariants
eliminateForLoops-->((((-2 * sizeStat(stat)) + (16 * res20._2)) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (2 * res21._2)) + 1) ≤ 0)
sizeList-->(((0 * #res) + 7) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 441
[[34m Info  [0m] Number of equal calls: 40
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 66 + 21
solving...
solved... in 0.029s
candidate Invariants
eliminateForLoops-->((((-122 * sizeStat(stat)) + (3 * res20._2)) + -3) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((0 * sizeList(l)) + (1 * res21._2)) + -4) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 67
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 40 + 87
solving...
solved... in 0.047s
candidate Invariants
eliminateForLoops-->((((8 * res20._2) + (-120 * sizeStat(stat))) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (-117 * sizeList(l))) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 54
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 29 + 127
solving...
solved... in 0.186s
candidate Invariants
eliminateForLoops-->((((32 * res20._2) + (1 * sizeStat(stat))) + -288) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
eliminateForLoopsList-->((((16 * res21._2) + (-2 * sizeList(l))) + -24) ≤ 0)
sizeList-->(((16 * #res) + -1) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 14
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 160
[[34m Info  [0m] Number of equal calls: 28
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 76 + 156
solving...
timed out... in 20.206s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 291
[[34m Info  [0m] Number of equal calls: 29
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 122
[[34m Info  [0m] Number of equal calls: 26
# of atomic predicates: 75 + 156
solving...
solved... in 0.726s
candidate Invariants
eliminateForLoops-->((((-6 * sizeStat(stat)) + (1 * res20._2)) + 4) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (-6 * sizeList(l))) + -2) ≤ 0)
sizeList-->(((-3 * #res) + -1) ≤ 0)
Function: eliminateForLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 11
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 16 + 231
solving...
solved... in 0.851s
candidate Invariants
eliminateForLoops-->((((-6 * sizeStat(stat)) + (1 * res20._2)) + 1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (-3 * sizeList(l))) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
Function: eliminateForLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 67
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 26 + 247
solving...
solved... in 0.809s
candidate Invariants
eliminateForLoops-->((((-6 * sizeStat(stat)) + (1 * res20._2)) + 1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
eliminateForLoopsList-->((((1 * res21._2) + (-6 * sizeList(l))) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: eliminateForLoops --> ((((1 * res20._2) + (-6 * sizeStat(stat))) + 1) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeStat --> (((-1 * #res) + 1) <= 0)
[[34m Info  [0m] - Found inductive invariant: eliminateForLoopsList --> ((((-6 * sizeList(l)) + (1 * res21._2)) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeList --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function eliminateWhileLoops...
[[34m Info  [0m] Body: if (stat.isInstanceOf[Block])
            (let (rthen3,dthen3 := (let (r23,d28 := (let (e6,d30 := eliminateWhileLoopsList(stat.body)) in
              (e6, (2 + d30)))) in
              (Block(r23), (1 + d28)))) in
              (rthen3, if ((1 ≥ dthen3))
                1
              else
                dthen3))
          else
            (let (relse3,delse3 := if (stat.isInstanceOf[IfThenElse])
              (let (rthen4,dthen4 := (let (r28,d34 := (let (e8,d40 := eliminateWhileLoops(stat.then)) in
                (e8, (2 + d40)))) in
                (let (r29,d35 := (let (e7,d37 := eliminateWhileLoops(stat.elze)) in
                  (e7, (2 + d37)))) in
                  (IfThenElse(stat.expr, r28, r29), (1 + if ((if ((1 ≥ d34))
                    1
                  else
                    d34 ≥ d35))
                    if ((1 ≥ d34))
                      1
                    else
                      d34
                  else
                    d35))))) in
                (rthen4, if ((1 ≥ dthen4))
                  1
                else
                  dthen4))
            else
              (let (relse4,delse4 := if (stat.isInstanceOf[While])
                (let (rthen5,dthen5 := (let (r39,d47 := (let (e9,d49 := eliminateWhileLoops(stat.body)) in
                  (e9, (2 + d49)))) in
                  (For(Skip(), stat.expr, Skip(), r39), (1 + if ((1 ≥ d47))
                    1
                  else
                    d47)))) in
                  (rthen5, if ((1 ≥ dthen5))
                    1
                  else
                    dthen5))
              else
                (let (relse5,delse5 := if (stat.isInstanceOf[For])
                  (let (rthen6,dthen6 := (let (r44,d53 := (let (e12,d65 := eliminateWhileLoops(stat.init)) in
                    (e12, (2 + d65)))) in
                    (let (r46,d55 := (let (e11,d61 := eliminateWhileLoops(stat.step)) in
                      (e11, (2 + d61)))) in
                      (let (r47,d56 := (let (e10,d58 := eliminateWhileLoops(stat.body)) in
                        (e10, (2 + d58)))) in
                        (For(r44, stat.expr, r46, r47), (1 + if ((if ((if ((d53 ≥ 1))
                          d53
                        else
                          1 ≥ d55))
                          if ((d53 ≥ 1))
                            d53
                          else
                            1
                        else
                          d55 ≥ d56))
                          if ((if ((d53 ≥ 1))
                            d53
                          else
                            1 ≥ d55))
                            if ((d53 ≥ 1))
                              d53
                            else
                              1
                          else
                            d55
                        else
                          d56)))))) in
                    (rthen6, if ((1 ≥ dthen6))
                      1
                    else
                      dthen6))
                else
                  (stat, if ((1 ≥ 0))
                    1
                  else
                    0)) in
                  (relse5, if ((1 ≥ delse5))
                    1
                  else
                    delse5))) in
                (relse4, if ((1 ≥ delse4))
                  1
                else
                  delse4))) in
              (relse3, if ((1 ≥ delse3))
                1
              else
                delse3))
[[34m Info  [0m] Post: true
falttened Body: ((res17 == ifres102) && ((ci120 && (ci120 == stat.isInstanceOf[Block]) && (ifres102 == tp20) && (tp20 == (rthen3, ifres103)) && (d28 == (2 + d30)) && (tres18 == r320) && (cs113 == stat.body) && (r320 == eliminateWhileLoopsList(cs113)) && (dthen3 == (1 + d28)) && (e6 == ts106) && (ts106 == tres18._1) && (d30 == ts107) && (ts107 == tres18._2) && (r23 == e6) && (rthen3 == cc28) && (cc28 == Block(r23)) && (((1 >= dthen3) && (ifres103 == 1)) || ((1 < dthen3) && (ifres103 == dthen3)))) || (!(ci121) && (ci121 == stat.isInstanceOf[Block]) && (ifres102 == tp21) && (tp21 == (relse3, ifres104)) && ((ci122 && (ci122 == stat.isInstanceOf[IfThenElse]) && (ifres105 == tp22) && (tp22 == (rthen4, ifres106)) && (((ifres108 >= d35) && (((1 >= d34) && (ifres108 == 1)) || ((1 < d34) && (ifres108 == d34))) && (ifres107 == ifres109) && (((1 >= d34) && (ifres109 == 1)) || ((1 < d34) && (ifres109 == d34)))) || ((ifres110 < d35) && (((1 >= d34) && (ifres110 == 1)) || ((1 < d34) && (ifres110 == d34))) && (ifres107 == d35))) && (d34 == (2 + d40)) && (e7 == ts108) && (ts108 == tres19._1) && (((1 >= dthen4) && (ifres106 == 1)) || ((1 < dthen4) && (ifres106 == dthen4))) && (d37 == ts109) && (ts109 == tres19._2) && (r28 == e8) && (tres19 == r321) && (cs114 == stat.elze) && (r321 == eliminateWhileLoops(cs114)) && (tres20 == r322) && (cs115 == stat.then) && (r322 == eliminateWhileLoops(cs115)) && (dthen4 == (1 + ifres107)) && (d35 == (2 + d37)) && (d40 == ts110) && (ts110 == tres20._2) && (rthen4 == cc29) && (cs116 == stat.expr) && (cc29 == IfThenElse(cs116, r28, r29)) && (r29 == e7) && (e8 == ts111) && (ts111 == tres20._1)) || (!(ci123) && (ci123 == stat.isInstanceOf[IfThenElse]) && (ifres105 == tp23) && (tp23 == (relse4, ifres111)) && ((ci124 && (ci124 == stat.isInstanceOf[While]) && (ifres112 == tp24) && (tp24 == (rthen5, ifres113)) && (dthen5 == (1 + ifres114)) && (d47 == (2 + d49)) && (e9 == ts112) && (ts112 == tres21._1) && (((1 >= dthen5) && (ifres113 == 1)) || ((1 < dthen5) && (ifres113 == dthen5))) && (d49 == ts113) && (ts113 == tres21._2) && (r39 == e9) && (((1 >= d47) && (ifres114 == 1)) || ((1 < d47) && (ifres114 == d47))) && (rthen5 == cc32) && (cc30 == Skip()) && (cs117 == stat.expr) && (cc31 == Skip()) && (cc32 == For(cc30, cs117, cc31, r39)) && (tres21 == r323) && (cs118 == stat.body) && (r323 == eliminateWhileLoops(cs118))) || (!(ci125) && (ci125 == stat.isInstanceOf[While]) && (ifres112 == tp25) && (tp25 == (relse5, ifres115)) && ((ci126 && (ci126 == stat.isInstanceOf[For]) && (ifres116 == tp26) && (tp26 == (rthen6, ifres117)) && (d56 == (2 + d58)) && (d53 == (2 + d65)) && (((1 >= dthen6) && (ifres117 == 1)) || ((1 < dthen6) && (ifres117 == dthen6))) && (tres22 == r324) && (cs119 == stat.body) && (r324 == eliminateWhileLoops(cs119)) && (tres24 == r325) && (cs120 == stat.init) && (r325 == eliminateWhileLoops(cs120)) && (e10 == ts114) && (ts114 == tres22._1) && (r47 == e10) && (d61 == ts115) && (ts115 == tres23._2) && (((ifres119 >= d56) && (((ifres120 >= d55) && (((d53 >= 1) && (ifres120 == d53)) || ((d53 < 1) && (ifres120 == 1))) && (ifres119 == ifres121) && (((d53 >= 1) && (ifres121 == d53)) || ((d53 < 1) && (ifres121 == 1)))) || ((ifres122 < d55) && (((d53 >= 1) && (ifres122 == d53)) || ((d53 < 1) && (ifres122 == 1))) && (ifres119 == d55))) && (ifres118 == ifres123) && (((ifres124 >= d55) && (((d53 >= 1) && (ifres124 == d53)) || ((d53 < 1) && (ifres124 == 1))) && (ifres123 == ifres125) && (((d53 >= 1) && (ifres125 == d53)) || ((d53 < 1) && (ifres125 == 1)))) || ((ifres126 < d55) && (((d53 >= 1) && (ifres126 == d53)) || ((d53 < 1) && (ifres126 == 1))) && (ifres123 == d55)))) || ((ifres127 < d56) && (((ifres128 >= d55) && (((d53 >= 1) && (ifres128 == d53)) || ((d53 < 1) && (ifres128 == 1))) && (ifres127 == ifres129) && (((d53 >= 1) && (ifres129 == d53)) || ((d53 < 1) && (ifres129 == 1)))) || ((ifres130 < d55) && (((d53 >= 1) && (ifres130 == d53)) || ((d53 < 1) && (ifres130 == 1))) && (ifres127 == d55))) && (ifres118 == d56))) && (d58 == ts116) && (ts116 == tres22._2) && (r44 == e12) && (d65 == ts117) && (ts117 == tres24._2) && (d55 == (2 + d61)) && (dthen6 == (1 + ifres118)) && (r46 == e11) && (e12 == ts118) && (ts118 == tres24._1) && (e11 == ts119) && (ts119 == tres23._1) && (rthen6 == cc33) && (cs121 == stat.expr) && (cc33 == For(r44, cs121, r46, r47)) && (tres23 == r326) && (cs122 == stat.step) && (r326 == eliminateWhileLoops(cs122))) || (!(ci127) && (ci127 == stat.isInstanceOf[For]) && (ifres116 == tp27) && (tp27 == (stat, ifres131)) && (((1 >= 0) && (ifres131 == 1)) || ((1 < 0) && (ifres131 == 0))))) && (relse5 == ts120) && (ts120 == ifres116._1) && (delse5 == ts121) && (ts121 == ifres116._2) && (((1 >= delse5) && (ifres115 == 1)) || ((1 < delse5) && (ifres115 == delse5))))) && (relse4 == ts122) && (ts122 == ifres112._1) && (delse4 == ts123) && (ts123 == ifres112._2) && (((1 >= delse4) && (ifres111 == 1)) || ((1 < delse4) && (ifres111 == delse4))))) && (relse3 == ts124) && (ts124 == ifres105._1) && (delse3 == ts125) && (ts125 == ifres105._2) && (((1 >= delse3) && (ifres104 == 1)) || ((1 < delse3) && (ifres104 == delse3))))))
Flattened Post: ((ts126 > ((a?5 * r327) + b?5)) && (ts126 == res17._2) && (r327 == sizeStat(stat)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((0 * sizeStat(stat)) + (1 * res17._2)) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 149
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 13 + 0
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/8
Unrolled calls: Set((r327 == sizeStat(stat)))
Creating VC for sizeStat
Unrolling (r327 == sizeStat(stat))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((0 * sizeStat(stat)) + (1 * res17._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 10 + 0
solving...
solved... in 0.012s
candidate Invariants
eliminateWhileLoops-->((((-2 * sizeStat(stat)) + (16 * res17._2)) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 62
[[34m Info  [0m] Number of equal calls: 13
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 22 + 10
solving...
solved... in 0.016s
candidate Invariants
eliminateWhileLoops-->((((-1 * sizeStat(stat)) + (2 * res17._2)) + -4) ≤ 0)
sizeStat-->(((-8 * #res) + 2) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 62
[[34m Info  [0m] Number of equal calls: 13
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 24 + 32
solving...
solved... in 0.021s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/27
Unrolled calls: Set((r346 == sizeStat(cs118)))
Unrolling (r346 == sizeStat(cs118))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((1 * res17._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 10 + 0
solving...
solved... in 0.012s
candidate Invariants
eliminateWhileLoops-->((((16 * res17._2) + (-2 * sizeStat(stat))) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 242
[[34m Info  [0m] Number of equal calls: 32
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 36 + 10
solving...
solved... in 0.011s
candidate Invariants
eliminateWhileLoops-->((((6 * res17._2) + (-92 * sizeStat(stat))) + 3) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 4
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 19 + 46
solving...
solved... in 0.02s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/33
Unrolled calls: Set((r329 == sizeList(cs123)), (r344 == sizeStat(cs122)), (r348 == sizeStat(cs119)), (r320 == eliminateWhileLoopsList(cs113)), (r336 == sizeList(cs130)), (r345 == sizeStat(cs120)))
Creating VC for sizeList
Unrolling (r336 == sizeList(cs130))
Unrolling (r344 == sizeStat(cs122))
Unrolling (r345 == sizeStat(cs120))
Creating VC for eliminateWhileLoopsList
Unrolling (r320 == eliminateWhileLoopsList(cs113))
Unrolling (r348 == sizeStat(cs119))
Unrolling (r329 == sizeList(cs123))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((1 * res17._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
eliminateWhileLoopsList-->((((0 * sizeList(l)) + (1 * res22._2)) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 62
[[34m Info  [0m] Number of equal calls: 13
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 27 + 0
solving...
solved... in 0.013s
candidate Invariants
eliminateWhileLoops-->((((-2 * sizeStat(stat)) + (16 * res17._2)) + 8) ≤ 0)
sizeStat-->(((24 * #res) + 50) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (0 * sizeList(l))) + -3) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 390
[[34m Info  [0m] Number of equal calls: 37
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 50 + 27
solving...
solved... in 3.264s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/60
Unrolled calls: Set((r384 == sizeList(l)), (r382 == eliminateWhileLoops(cs162)))
Unrolling (r384 == sizeList(l))
Unrolling (r382 == eliminateWhileLoops(cs162))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((0 * sizeStat(stat)) + (1 * res17._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (0 * sizeList(l))) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 20 + 0
solving...
solved... in 0.007s
candidate Invariants
eliminateWhileLoops-->((((-2 * sizeStat(stat)) + (16 * res17._2)) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
sizeList-->(((0 * #res) + 7) ≤ 0)
eliminateWhileLoopsList-->((((2 * res22._2) + (0 * sizeList(l))) + 1) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 81
[[34m Info  [0m] Number of equal calls: 18
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 39 + 20
solving...
solved... in 0.019s
candidate Invariants
eliminateWhileLoops-->((((1 * res17._2) + (1 * sizeStat(stat))) + -19) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((0 * sizeList(l)) + (1 * res22._2)) + -4) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 62
[[34m Info  [0m] Number of equal calls: 13
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 52 + 59
solving...
solved... in 0.026s
candidate Invariants
eliminateWhileLoops-->((((-8 * sizeStat(stat)) + (2 * res17._2)) + 1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (-4 * sizeList(l))) + -2) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 11
[[34m Info  [0m] Number of equal calls: 7
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 88
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 48 + 111
solving...
solved... in 0.042s
candidate Invariants
eliminateWhileLoops-->((((-32 * sizeStat(stat)) + (8 * res17._2)) + -1) ≤ 0)
sizeStat-->(((-2 * #res) + 1) ≤ 0)
sizeList-->(((-16 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (-8 * sizeList(l))) + -6) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 54
[[34m Info  [0m] Number of equal calls: 17
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 48 + 159
solving...
solved... in 7.577s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/71
Unrolled calls: Set((r403 == sizeStat(cs175)), (r398 == sizeList(cs113)), (r421 == sizeList(cs165)), (r422 == sizeList(cs163)), (r419 == sizeStat(cs164)), (r343 == sizeStat(cs115)), (r420 == sizeStat(cs162)), (r347 == sizeStat(cs114)))
Unrolling (r403 == sizeStat(cs175))
Unrolling (r421 == sizeList(cs165))
Unrolling (r398 == sizeList(cs113))
Unrolling (r419 == sizeStat(cs164))
Unrolling (r422 == sizeList(cs163))
Unrolling (r347 == sizeStat(cs114))
Unrolling (r343 == sizeStat(cs115))
Unrolling (r420 == sizeStat(cs162))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
eliminateWhileLoops-->((((0 * sizeStat(stat)) + (1 * res17._2)) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (0 * sizeList(l))) + 0) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 20 + 0
solving...
solved... in 0.008s
candidate Invariants
eliminateWhileLoops-->((((16 * res17._2) + (-2 * sizeStat(stat))) + 8) ≤ 0)
sizeStat-->(((8 * #res) + 46) ≤ 0)
sizeList-->(((0 * #res) + 7) ≤ 0)
eliminateWhileLoopsList-->((((0 * sizeList(l)) + (2 * res22._2)) + 1) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 449
[[34m Info  [0m] Number of equal calls: 39
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 65 + 20
solving...
solved... in 0.016s
candidate Invariants
eliminateWhileLoops-->((((-8 * sizeStat(stat)) + (1 * res17._2)) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((0 * sizeList(l)) + (1 * res22._2)) + -4) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 119
[[34m Info  [0m] Number of equal calls: 25
# of atomic predicates: 40 + 85
solving...
solved... in 0.028s
candidate Invariants
eliminateWhileLoops-->((((8 * res17._2) + (-40 * sizeStat(stat))) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (-91 * sizeList(l))) + -2) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 105
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 29 + 125
solving...
solved... in 0.067s
candidate Invariants
eliminateWhileLoops-->((((8 * res17._2) + (1 * sizeStat(stat))) + -40) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
sizeList-->(((1 * #res) + -8) ≤ 0)
eliminateWhileLoopsList-->((((16384 * res22._2) + (1398 * sizeList(l))) + -24576) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 62
[[34m Info  [0m] Number of equal calls: 13
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 160
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 77 + 154
solving...
timed out... in 20.142s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 81
[[34m Info  [0m] Number of equal calls: 14
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 138
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 60 + 154
solving...
timed out... in 20.175s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 102
[[34m Info  [0m] Number of equal calls: 19
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 86
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 63 + 154
solving...
solved... in 0.414s
candidate Invariants
eliminateWhileLoops-->((((-1 * sizeStat(stat)) + (1 * res17._2)) + -3) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((0 * sizeList(l)) + (2 * res22._2)) + -3) ≤ 0)
Function: eliminateWhileLoops--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 449
[[34m Info  [0m] Number of equal calls: 39
Function: eliminateWhileLoopsList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 160
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 81 + 217
solving...
solved... in 1.121s
candidate Invariants
eliminateWhileLoops-->((((-9 * sizeStat(stat)) + (1 * res17._2)) + 2) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
eliminateWhileLoopsList-->((((1 * res22._2) + (-9 * sizeList(l))) + -2) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: eliminateWhileLoops --> ((((1 * res17._2) + (-9 * sizeStat(stat))) + 2) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeStat --> (((-16 * #res) + 1) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeList --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: eliminateWhileLoopsList --> ((((-9 * sizeList(l)) + (1 * res22._2)) + -2) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function isForFreeList...
[[34m Info  [0m] Body: if (l.isInstanceOf[Nil])
            (true, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse1,delse1 := (let (r9,d10 := (let (e3,d16 := isForFree(l.head)) in
              (e3, (2 + d16)))) in
              (let (r10,d11 := (let (e2,d13 := isForFreeList(l.tail)) in
                (e2, (2 + d13)))) in
                ((r9 ∧ r10), (1 + if ((d10 ≥ d11))
                  d10
                else
                  d11))))) in
              (relse1, if ((1 ≥ delse1))
                1
              else
                delse1))
[[34m Info  [0m] Post: true
falttened Body: ((res24 == ifres221) && ((ci242 && (ci242 == l.isInstanceOf[Nil]) && (ifres221 == tp40) && arg && (tp40 == (arg, ifres222)) && (((1 >= 0) && (ifres222 == 1)) || ((1 < 0) && (ifres222 == 0)))) || (!(ci243) && (ci243 == l.isInstanceOf[Nil]) && (ifres221 == tp41) && (tp41 == (relse1, ifres223)) && (!(relse1) || (r9 && r10)) && (!(r9) || !(r10) || relse1) && (!(e2) || (ts211 && (ts211 == tres36._1))) && ((!(ts212) && (ts212 == tres36._1)) || e2) && (delse1 == (1 + ifres224)) && (((d10 >= d11) && (ifres224 == d10)) || ((d10 < d11) && (ifres224 == d11))) && (tres36 == r497) && (cs228 == l.tail) && (r497 == isForFreeList(cs228)) && (((1 >= delse1) && (ifres223 == 1)) || ((1 < delse1) && (ifres223 == delse1))) && (d10 == (2 + d16)) && (!(r9) || e3) && (!(e3) || r9) && (!(e3) || (ts213 && (ts213 == tres37._1))) && ((!(ts214) && (ts214 == tres37._1)) || e3) && (d16 == ts215) && (ts215 == tres37._2) && (d11 == (2 + d13)) && (tres37 == r498) && (cs229 == l.head) && (r498 == isForFree(cs229)) && (d13 == ts216) && (ts216 == tres36._2) && (!(r10) || e2) && (!(e2) || r10))))
Flattened Post: ((ts217 > ((a?1 * r499) + b?1)) && (ts217 == res24._2) && (r499 == sizeList(l)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((1 * res24._2) + (0 * sizeList(l))) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 16
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 10 + 0
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/3
Unrolled calls: Set((r498 == isForFree(cs229)), (r499 == sizeList(l)))
Creating VC for isForFree
Unrolling (r498 == isForFree(cs229))
Creating VC for sizeList
Unrolling (r499 == sizeList(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((1 * res24._2) + (0 * sizeList(l))) + 0) ≤ 0)
isForFree-->((((1 * res23._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 45
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 20 + 0
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/16
Unrolled calls: Set((r507 == sizeStat(stat)))
Creating VC for sizeStat
Unrolling (r507 == sizeStat(stat))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((1 * res24._2) + (0 * sizeList(l))) + 0) ≤ 0)
isForFree-->((((0 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 26 + 0
solving...
solved... in 0.009s
candidate Invariants
isForFreeList-->((((2 * res24._2) + (0 * sizeList(l))) + -1) ≤ 0)
isForFree-->((((-2 * sizeStat(stat)) + (16 * res23._2)) + 8) ≤ 0)
sizeList-->(((0 * #res) + 5) ≤ 0)
sizeStat-->(((-2 * #res) + 56) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 11
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 32 + 26
solving...
solved... in 0.019s
candidate Invariants
isForFreeList-->((((2 * res24._2) + (0 * sizeList(l))) + -7) ≤ 0)
isForFree-->((((-3 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((-8 * #res) + 3) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 166
[[34m Info  [0m] Number of equal calls: 19
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 5
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 59 + 58
solving...
solved... in 0.087s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/37
Unrolled calls: Set((r539 == sizeStat(cs237)), (r518 == sizeList(cs228)), (r542 == sizeList(cs230)), (r529 == sizeList(cs249)), (r516 == sizeStat(cs240)), (r543 == sizeStat(cs233)), (r503 == isForFreeList(cs230)), (r519 == sizeStat(cs229)))
Unrolling (r516 == sizeStat(cs240))
Unrolling (r503 == isForFreeList(cs230))
Unrolling (r543 == sizeStat(cs233))
Unrolling (r519 == sizeStat(cs229))
Unrolling (r518 == sizeList(cs228))
Unrolling (r539 == sizeStat(cs237))
Unrolling (r529 == sizeList(cs249))
Unrolling (r542 == sizeList(cs230))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (1 * res24._2)) + 0) ≤ 0)
isForFree-->((((0 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 20 + 0
solving...
solved... in 0.012s
candidate Invariants
isForFreeList-->((((8 * res24._2) + (0 * sizeList(l))) + -1) ≤ 0)
isForFree-->((((2 * res23._2) + (-1 * sizeStat(stat))) + 1) ≤ 0)
sizeList-->(((0 * #res) + 23) ≤ 0)
sizeStat-->(((-1 * #res) + 7) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 15
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 34 + 20
solving...
solved... in 0.022s
candidate Invariants
isForFreeList-->((((4 * res24._2) + (0 * sizeList(l))) + -13) ≤ 0)
isForFree-->((((-3 * sizeStat(stat)) + (1 * res23._2)) + 1) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 68 + 54
solving...
solved... in 0.027s
candidate Invariants
isForFreeList-->((((1 * res24._2) + (-16 * sizeList(l))) + -2) ≤ 0)
isForFree-->((((4 * res23._2) + (-32 * sizeStat(stat))) + 1) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 15
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 65 + 122
solving...
solved... in 0.129s
candidate Invariants
isForFreeList-->((((-6 * sizeList(l)) + (1 * res24._2)) + -2) ≤ 0)
isForFree-->((((8 * res23._2) + (-48 * sizeStat(stat))) + -1) ≤ 0)
sizeList-->(((-7 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 228
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 45 + 187
solving...
timed out... in 20.14s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 208
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 40 + 187
solving...
timed out... in 20.177s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 228
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 38 + 187
solving...
timed out... in 20.185s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
[[34m Info  [0m] - Exhausted all easy paths !!
[[34m Info  [0m] - Number of remaining hard paths: 3
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/65
Unrolled calls: Set((r586 == sizeStat(cs290)), (r538 == sizeStat(cs236)), (r522 == sizeList(cs242)), (r540 == sizeList(cs234)), (r568 == sizeList(cs272)), (r541 == sizeStat(cs235)), (r575 == sizeStat(cs279)))
Unrolling (r541 == sizeStat(cs235))
Unrolling (r522 == sizeList(cs242))
Unrolling (r568 == sizeList(cs272))
Unrolling (r538 == sizeStat(cs236))
Unrolling (r586 == sizeStat(cs290))
Unrolling (r575 == sizeStat(cs279))
Unrolling (r540 == sizeList(cs234))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((1 * res24._2) + (0 * sizeList(l))) + 0) ≤ 0)
isForFree-->((((0 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 37 + 0
solving...
solved... in 0.016s
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (1 * res24._2)) + -1) ≤ 0)
isForFree-->((((2 * res23._2) + (1 * sizeStat(stat))) + 2) ≤ 0)
sizeList-->(((0 * #res) + 2) ≤ 0)
sizeStat-->(((15 * #res) + 78) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 15
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 40 + 37
solving...
solved... in 0.048s
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (1 * res24._2)) + -4) ≤ 0)
isForFree-->((((-3 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 20
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 66 + 77
solving...
solved... in 0.063s
candidate Invariants
isForFreeList-->((((4 * res24._2) + (-167 * sizeList(l))) + -8) ≤ 0)
isForFree-->((((-3 * sizeStat(stat)) + (1 * res23._2)) + -2) ≤ 0)
sizeList-->(((-3 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 40 + 143
solving...
solved... in 0.095s
candidate Invariants
isForFreeList-->((((4 * res24._2) + (-23 * sizeList(l))) + -8) ≤ 0)
isForFree-->((((-3 * sizeStat(stat)) + (1 * res23._2)) + -2) ≤ 0)
sizeList-->(((-8 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 40 + 183
solving...
solved... in 0.809s
candidate Invariants
isForFreeList-->((((-6 * sizeList(l)) + (1 * res24._2)) + -2) ≤ 0)
isForFree-->((((1 * res23._2) + (-7 * sizeStat(stat))) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 179
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 43 + 223
solving...
solved... in 4.126s
candidate Invariants
isForFreeList-->((((1 * res24._2) + (-7 * sizeList(l))) + -2) ≤ 0)
isForFree-->((((-7 * sizeStat(stat)) + (1 * res23._2)) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 40 + 266
solving...
timed out... in 20.203s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 229
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 43 + 266
solving...
timed out... in 20.265s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 229
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 43 + 266
solving...
timed out... in 20.23s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 39 + 266
solving...
solved... in 0.254s
candidate Invariants
isForFreeList-->((((-14 * sizeList(l)) + (2 * res24._2)) + -3) ≤ 0)
isForFree-->((((-7 * sizeStat(stat)) + (1 * res23._2)) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 40 + 305
solving...
timed out... in 20.243s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 37 + 305
solving...
timed out... in 20.315s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 245
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 45 + 305
solving...
timed out... in 20.233s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
[[34m Info  [0m] - Exhausted all easy paths !!
[[34m Info  [0m] - Number of remaining hard paths: 3
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/94
Unrolled calls: Set((r577 == sizeList(cs281)), (r536 == sizeStat(cs231)), (r633 == sizeList(cs263)), (r632 == sizeStat(cs264)), (r537 == sizeStat(cs232)))
Unrolling (r633 == sizeList(cs263))
Unrolling (r536 == sizeStat(cs231))
Unrolling (r632 == sizeStat(cs264))
Unrolling (r537 == sizeStat(cs232))
Unrolling (r577 == sizeList(cs281))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (1 * res24._2)) + 0) ≤ 0)
isForFree-->((((0 * sizeStat(stat)) + (1 * res23._2)) + 0) ≤ 0)
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 38 + 0
solving...
solved... in 0.009s
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (2 * res24._2)) + -1) ≤ 0)
isForFree-->((((-2 * sizeStat(stat)) + (16 * res23._2)) + 8) ≤ 0)
sizeList-->(((0 * #res) + 5) ≤ 0)
sizeStat-->(((-120 * #res) + 4776) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 15
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 40 + 38
solving...
solved... in 0.023s
candidate Invariants
isForFreeList-->((((0 * sizeList(l)) + (2 * res24._2)) + -7) ≤ 0)
isForFree-->((((1 * res23._2) + (-1 * sizeStat(stat))) + 16) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((1 * #res) + -16) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 24 + 78
solving...
solved... in 0.035s
candidate Invariants
isForFreeList-->((((1 * res24._2) + (0 * sizeList(l))) + -4) ≤ 0)
isForFree-->((((-4 * sizeStat(stat)) + (1 * res23._2)) + 2) ≤ 0)
sizeList-->(((0 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 20
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 70 + 102
solving...
solved... in 0.056s
candidate Invariants
isForFreeList-->((((4 * res24._2) + (-163 * sizeList(l))) + -8) ≤ 0)
isForFree-->((((-4 * sizeStat(stat)) + (1 * res23._2)) + -2) ≤ 0)
sizeList-->(((-1 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 115
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 45 + 172
solving...
solved... in 1.729s
candidate Invariants
isForFreeList-->((((1 * res24._2) + (-5 * sizeList(l))) + -1) ≤ 0)
isForFree-->((((1 * res23._2) + (-3 * sizeStat(stat))) + -2) ≤ 0)
sizeList-->(((-1 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 115
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 39 + 217
solving...
solved... in 3.421s
candidate Invariants
isForFreeList-->((((1 * res24._2) + (-12 * sizeList(l))) + -2) ≤ 0)
isForFree-->((((1 * res23._2) + (-6 * sizeStat(stat))) + -1) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 139
[[34m Info  [0m] Number of equal calls: 23
# of atomic predicates: 45 + 256
solving...
timed out... in 20.197s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 153
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 47 + 256
solving...
solved... in 0.323s
candidate Invariants
isForFreeList-->((((-6 * sizeList(l)) + (1 * res24._2)) + -2) ≤ 0)
isForFree-->((((1 * res23._2) + (-6 * sizeStat(stat))) + -2) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 40 + 303
solving...
solved... in 0.34s
candidate Invariants
isForFreeList-->((((-11 * sizeList(l)) + (2 * res24._2)) + -10) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 188
[[34m Info  [0m] Number of equal calls: 25
# of atomic predicates: 43 + 343
solving...
solved... in 0.401s
candidate Invariants
isForFreeList-->((((-6 * sizeList(l)) + (1 * res24._2)) + -5) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-16 * #res) + 1) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: isForFreeList --> ((((1 * res24._2) + (-6 * sizeList(l))) + -5) <= 0)
[[34m Info  [0m] - Found inductive invariant: isForFree --> ((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeList --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeStat --> (((-16 * #res) + 1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function forLoopsWellFormed...
[[34m Info  [0m] Body: if (stat.isInstanceOf[Block])
            (let (rthen12,dthen12 := (let (e19,d96 := forLoopsWellFormedList(stat.body)) in
              (e19, (2 + d96)))) in
              (rthen12, if ((1 ≥ dthen12))
                1
              else
                dthen12))
          else
            (let (relse12,delse12 := if (stat.isInstanceOf[IfThenElse])
              (let (rthen13,dthen13 := (let (r80,d99 := (let (e21,d105 := forLoopsWellFormed(stat.then)) in
                (e21, (2 + d105)))) in
                (let (r81,d100 := (let (e20,d102 := forLoopsWellFormed(stat.elze)) in
                  (e20, (2 + d102)))) in
                  ((r80 ∧ r81), (1 + if ((d99 ≥ d100))
                    d99
                  else
                    d100))))) in
                (rthen13, if ((1 ≥ dthen13))
                  1
                else
                  dthen13))
            else
              (let (relse13,delse13 := if (stat.isInstanceOf[While])
                (let (rthen14,dthen14 := (let (e22,d109 := forLoopsWellFormed(stat.body)) in
                  (e22, (2 + d109)))) in
                  (rthen14, if ((1 ≥ dthen14))
                    1
                  else
                    dthen14))
              else
                (let (relse14,delse14 := if (stat.isInstanceOf[For])
                  (let (rthen15,dthen15 := (let (r90,d112 := (let (e25,d122 := isForFree(stat.init)) in
                    (e25, (2 + d122)))) in
                    (let (r91,d113 := (let (e24,d119 := isForFree(stat.step)) in
                      (e24, (2 + d119)))) in
                      (let (r92,d114 := (let (e23,d116 := forLoopsWellFormed(stat.body)) in
                        (e23, (2 + d116)))) in
                        ((r90 ∧ r91 ∧ r92), (1 + if ((if ((d112 ≥ d113))
                          d112
                        else
                          d113 ≥ d114))
                          if ((d112 ≥ d113))
                            d112
                          else
                            d113
                        else
                          d114)))))) in
                    (rthen15, if ((1 ≥ dthen15))
                      1
                    else
                      dthen15))
                else
                  (true, if ((1 ≥ 0))
                    1
                  else
                    0)) in
                  (relse14, if ((1 ≥ delse14))
                    1
                  else
                    delse14))) in
                (relse13, if ((1 ≥ delse13))
                  1
                else
                  delse13))) in
              (relse12, if ((1 ≥ delse12))
                1
              else
                delse12))
[[34m Info  [0m] Post: true
falttened Body: ((res18 == ifres317) && ((ci386 && (ci386 == stat.isInstanceOf[Block]) && (ifres317 == tp60) && (tp60 == (rthen12, ifres318)) && (!(e19) || (ts336 && (ts336 == tres48._1))) && ((!(ts337) && (ts337 == tres48._1)) || e19) && (d96 == ts338) && (ts338 == tres48._2) && (((1 >= dthen12) && (ifres318 == 1)) || ((1 < dthen12) && (ifres318 == dthen12))) && (tres48 == r697) && (cs351 == stat.body) && (r697 == forLoopsWellFormedList(cs351)) && (dthen12 == (2 + d96)) && (!(rthen12) || e19) && (!(e19) || rthen12)) || (!(ci387) && (ci387 == stat.isInstanceOf[Block]) && (ifres317 == tp61) && (tp61 == (relse12, ifres319)) && ((ci388 && (ci388 == stat.isInstanceOf[IfThenElse]) && (ifres320 == tp62) && (tp62 == (rthen13, ifres321)) && (!(rthen13) || (r80 && r81)) && (!(r80) || !(r81) || rthen13) && (((d99 >= d100) && (ifres322 == d99)) || ((d99 < d100) && (ifres322 == d100))) && (!(r81) || e20) && (!(e20) || r81) && (((1 >= dthen13) && (ifres321 == 1)) || ((1 < dthen13) && (ifres321 == dthen13))) && (dthen13 == (1 + ifres322)) && (d105 == ts339) && (ts339 == tres50._2) && (tres49 == r698) && (cs352 == stat.elze) && (r698 == forLoopsWellFormed(cs352)) && (!(e20) || (ts340 && (ts340 == tres49._1))) && ((!(ts341) && (ts341 == tres49._1)) || e20) && (tres50 == r699) && (cs353 == stat.then) && (r699 == forLoopsWellFormed(cs353)) && (d99 == (2 + d105)) && (d100 == (2 + d102)) && (!(r80) || e21) && (!(e21) || r80) && (d102 == ts342) && (ts342 == tres49._2) && (!(e21) || (ts343 && (ts343 == tres50._1))) && ((!(ts344) && (ts344 == tres50._1)) || e21)) || (!(ci389) && (ci389 == stat.isInstanceOf[IfThenElse]) && (ifres320 == tp63) && (tp63 == (relse13, ifres323)) && ((ci390 && (ci390 == stat.isInstanceOf[While]) && (ifres324 == tp64) && (tp64 == (rthen14, ifres325)) && (dthen14 == (2 + d109)) && (!(e22) || (ts345 && (ts345 == tres51._1))) && ((!(ts346) && (ts346 == tres51._1)) || e22) && (((1 >= dthen14) && (ifres325 == 1)) || ((1 < dthen14) && (ifres325 == dthen14))) && (d109 == ts347) && (ts347 == tres51._2) && (tres51 == r700) && (cs354 == stat.body) && (r700 == forLoopsWellFormed(cs354)) && (!(rthen14) || e22) && (!(e22) || rthen14)) || (!(ci391) && (ci391 == stat.isInstanceOf[While]) && (ifres324 == tp65) && (tp65 == (relse14, ifres326)) && ((ci392 && (ci392 == stat.isInstanceOf[For]) && (ifres327 == tp66) && (tp66 == (rthen15, ifres328)) && (d116 == ts348) && (ts348 == tres52._2) && (!(e25) || (ts349 && (ts349 == tres54._1))) && ((!(ts350) && (ts350 == tres54._1)) || e25) && (d113 == (2 + d119)) && (tres52 == r701) && (cs355 == stat.body) && (r701 == forLoopsWellFormed(cs355)) && (d114 == (2 + d116)) && (!(rthen15) || (r90 && r91 && r92)) && (!(r90) || !(r91) || !(r92) || rthen15) && (!(e24) || (ts351 && (ts351 == tres53._1))) && ((!(ts352) && (ts352 == tres53._1)) || e24) && (!(r90) || e25) && (!(e25) || r90) && (!(r91) || e24) && (!(e24) || r91) && (!(r92) || e23) && (!(e23) || r92) && (!(e23) || (ts353 && (ts353 == tres52._1))) && ((!(ts354) && (ts354 == tres52._1)) || e23) && (tres53 == r702) && (cs356 == stat.step) && (r702 == isForFree(cs356)) && (d122 == ts355) && (ts355 == tres54._2) && (d112 == (2 + d122)) && (tres54 == r703) && (cs357 == stat.init) && (r703 == isForFree(cs357)) && (dthen15 == (1 + ifres329)) && (((ifres330 >= d114) && (((d112 >= d113) && (ifres330 == d112)) || ((d112 < d113) && (ifres330 == d113))) && (ifres329 == ifres331) && (((d112 >= d113) && (ifres331 == d112)) || ((d112 < d113) && (ifres331 == d113)))) || ((ifres332 < d114) && (((d112 >= d113) && (ifres332 == d112)) || ((d112 < d113) && (ifres332 == d113))) && (ifres329 == d114))) && (((1 >= dthen15) && (ifres328 == 1)) || ((1 < dthen15) && (ifres328 == dthen15))) && (d119 == ts356) && (ts356 == tres53._2)) || (!(ci393) && (ci393 == stat.isInstanceOf[For]) && (ifres327 == tp67) && arg6 && (tp67 == (arg6, ifres333)) && (((1 >= 0) && (ifres333 == 1)) || ((1 < 0) && (ifres333 == 0))))) && (!(relse14) || (ts357 && (ts357 == ifres327._1))) && ((!(ts358) && (ts358 == ifres327._1)) || relse14) && (delse14 == ts359) && (ts359 == ifres327._2) && (((1 >= delse14) && (ifres326 == 1)) || ((1 < delse14) && (ifres326 == delse14))))) && (!(relse13) || (ts360 && (ts360 == ifres324._1))) && ((!(ts361) && (ts361 == ifres324._1)) || relse13) && (delse13 == ts362) && (ts362 == ifres324._2) && (((1 >= delse13) && (ifres323 == 1)) || ((1 < delse13) && (ifres323 == delse13))))) && (!(relse12) || (ts363 && (ts363 == ifres320._1))) && ((!(ts364) && (ts364 == ifres320._1)) || relse12) && (delse12 == ts365) && (ts365 == ifres320._2) && (((1 >= delse12) && (ifres319 == 1)) || ((1 < delse12) && (ifres319 == delse12))))))
Flattened Post: ((ts366 > ((a?3 * r704) + b?3)) && (ts366 == res18._2) && (r704 == sizeStat(stat)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
forLoopsWellFormed-->((((0 * sizeStat(stat)) + (1 * res18._2)) + 0) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 140
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 10 + 0
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/8
Unrolled calls: Set((r704 == sizeStat(stat)), (r702 == isForFree(cs356)), (r703 == isForFree(cs357)))
Creating VC for sizeStat
Unrolling (r704 == sizeStat(stat))
Creating VC for isForFree
Unrolling (r702 == isForFree(cs356))
Unrolling (r703 == isForFree(cs357))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
forLoopsWellFormed-->((((1 * res18._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 508
[[34m Info  [0m] Number of equal calls: 33
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 45
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 42 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/38
Unrolled calls: Set((r743 == sizeStat(cs357)), (r729 == isForFreeList(cs376)), (r741 == sizeStat(cs355)), (r726 == sizeStat(stat)), (r742 == sizeStat(cs356)))
Unrolling (r742 == sizeStat(cs356))
Unrolling (r743 == sizeStat(cs357))
Unrolling (r741 == sizeStat(cs355))
Creating VC for isForFreeList
Unrolling (r729 == isForFreeList(cs376))
Unrolling (r726 == sizeStat(stat))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
forLoopsWellFormed-->((((1 * res18._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 464
[[34m Info  [0m] Number of equal calls: 38
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 11
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 16
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 39 + 0
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 9/78
Unrolled calls: Set((r788 == sizeList(cs380)), (r735 == isForFreeList(cs380)), (r772 == sizeList(l)), (r761 == sizeList(cs398)), (r747 == sizeList(cs384)), (r771 == isForFree(cs406)), (r790 == sizeList(cs376)), (r754 == sizeList(cs391)), (r789 == sizeStat(cs375)))
Creating VC for sizeList
Unrolling (r788 == sizeList(cs380))
Unrolling (r761 == sizeList(cs398))
Unrolling (r754 == sizeList(cs391))
Unrolling (r771 == isForFree(cs406))
Unrolling (r735 == isForFreeList(cs380))
Unrolling (r772 == sizeList(l))
Unrolling (r747 == sizeList(cs384))
Unrolling (r790 == sizeList(cs376))
Unrolling (r789 == sizeStat(cs375))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((0 * sizeStat(stat)) + (1 * res18._2)) + 0) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 13
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 147
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 27 + 0
solving...
solved... in 0.014s
candidate Invariants
sizeList-->(((0 * #res) + 2) ≤ 0)
sizeStat-->(((1 * #res) + 24) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-8 * sizeStat(stat)) + (16 * res18._2)) + 10) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 13
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 53 + 27
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/100
Unrolled calls: Set((r793 == sizeStat(cs373)), (r744 == sizeStat(cs352)), (r831 == sizeList(cs405)), (r795 == sizeStat(cs374)), (r740 == sizeStat(cs353)), (r830 == sizeStat(cs406)), (r817 == sizeStat(cs430)))
Unrolling (r817 == sizeStat(cs430))
Unrolling (r795 == sizeStat(cs374))
Unrolling (r793 == sizeStat(cs373))
Unrolling (r830 == sizeStat(cs406))
Unrolling (r831 == sizeList(cs405))
Unrolling (r744 == sizeStat(cs352))
Unrolling (r740 == sizeStat(cs353))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 5
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 33 + 0
solving...
solved... in 0.009s
candidate Invariants
sizeList-->(((-1 * #res) + 0) ≤ 0)
sizeStat-->(((1 * #res) + 8) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-8 * sizeStat(stat)) + (16 * res18._2)) + -22) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 60 + 33
solving...
solved... in 0.018s
candidate Invariants
sizeList-->(((-1 * #res) + 8) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-1 * sizeStat(stat)) + (1 * res18._2)) + -1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 15
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 50 + 93
solving...
solved... in 0.037s
candidate Invariants
sizeList-->(((-4 * #res) + -1) ≤ 0)
sizeStat-->(((-2 * #res) + 1) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (-3 * sizeStat(stat))) + 1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 862
[[34m Info  [0m] Number of equal calls: 46
# of atomic predicates: 52 + 143
solving...
solved... in 0.206s
candidate Invariants
sizeList-->(((-4 * #res) + -1) ≤ 0)
sizeStat-->(((-2 * #res) + 1) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (-7 * sizeStat(stat))) + 5) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 7
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 13 + 195
solving...
solved... in 0.132s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 12/143
Unrolled calls: Set((r713 == sizeList(cs365)), (r697 == forLoopsWellFormedList(cs351)), (r861 == sizeList(cs464)), (r794 == sizeStat(cs379)), (r785 == sizeStat(cs383)), (r792 == sizeList(cs372)), (r868 == sizeStat(cs471)), (r887 == sizeList(cs424)), (r799 == sizeStat(cs416)), (r777 == sizeList(cs409)), (r877 == sizeList(cs480)), (r722 == isForFreeList(cs372)))
Unrolling (r868 == sizeStat(cs471))
Unrolling (r887 == sizeList(cs424))
Unrolling (r777 == sizeList(cs409))
Creating VC for forLoopsWellFormedList
Unrolling (r697 == forLoopsWellFormedList(cs351))
Unrolling (r785 == sizeStat(cs383))
Unrolling (r794 == sizeStat(cs379))
Unrolling (r861 == sizeList(cs464))
Unrolling (r792 == sizeList(cs372))
Unrolling (r877 == sizeList(cs480))
Unrolling (r722 == isForFreeList(cs372))
Unrolling (r713 == sizeList(cs365))
Unrolling (r799 == sizeStat(cs416))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
forLoopsWellFormedList-->((((1 * res19._2) + (0 * sizeList(l))) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (0 * sizeStat(stat))) + 0) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 16
[[34m Info  [0m] Number of equal calls: 4
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 15
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 958
[[34m Info  [0m] Number of equal calls: 51
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 173
[[34m Info  [0m] Number of equal calls: 25
# of atomic predicates: 104 + 0
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/179
Unrolled calls: Set((r918 == forLoopsWellFormed(cs498)), (r787 == sizeStat(cs381)), (r786 == sizeStat(cs382)), (r784 == sizeStat(cs378)), (r791 == sizeStat(cs377)), (r920 == sizeList(l)), (r912 == sizeStat(cs494)))
Unrolling (r920 == sizeList(l))
Unrolling (r918 == forLoopsWellFormed(cs498))
Unrolling (r791 == sizeStat(cs377))
Unrolling (r786 == sizeStat(cs382))
Unrolling (r787 == sizeStat(cs381))
Unrolling (r784 == sizeStat(cs378))
Unrolling (r912 == sizeStat(cs494))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
forLoopsWellFormedList-->((((1 * res19._2) + (0 * sizeList(l))) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((0 * sizeStat(stat)) + (1 * res18._2)) + 0) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 260
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 70 + 0
solving...
solved... in 0.015s
candidate Invariants
sizeList-->(((-8 * #res) + 1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((0 * sizeList(l)) + (8 * res19._2)) + -23) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((8 * res18._2) + (1 * sizeStat(stat))) + -25) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 147
[[34m Info  [0m] Number of equal calls: 18
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 835
[[34m Info  [0m] Number of equal calls: 46
# of atomic predicates: 76 + 70
solving...
solved... in 0.031s
candidate Invariants
sizeList-->(((-1 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 2) ≤ 0)
forLoopsWellFormedList-->((((-1 * sizeList(l)) + (1 * res19._2)) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((32 * res18._2) + (-4 * sizeStat(stat))) + -8) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 66
[[34m Info  [0m] Number of equal calls: 12
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1073
[[34m Info  [0m] Number of equal calls: 64
# of atomic predicates: 119 + 146
solving...
solved... in 0.125s
candidate Invariants
sizeList-->(((-1 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
forLoopsWellFormedList-->((((0 * sizeList(l)) + (2 * res19._2)) + -3) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((0 * sizeStat(stat)) + (1 * res18._2)) + -1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 147
[[34m Info  [0m] Number of equal calls: 18
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1083
[[34m Info  [0m] Number of equal calls: 66
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 221
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 145 + 265
solving...
solved... in 0.792s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 12/222
Unrolled calls: Set((r833 == sizeStat(cs407)), (r888 == sizeStat(cs426)), (r889 == sizeList(cs428)), (r832 == sizeList(cs408)), (r885 == sizeStat(cs429)), (r963 == sizeStat(cs533)), (r1013 == sizeList(cs499)), (r801 == sizeStat(cs418)), (r821 == sizeStat(cs434)), (r886 == sizeStat(cs425)), (r925 == sizeList(cs502)), (r1012 == sizeStat(cs498)))
Unrolling (r821 == sizeStat(cs434))
Unrolling (r963 == sizeStat(cs533))
Unrolling (r1013 == sizeList(cs499))
Unrolling (r886 == sizeStat(cs425))
Unrolling (r885 == sizeStat(cs429))
Unrolling (r801 == sizeStat(cs418))
Unrolling (r888 == sizeStat(cs426))
Unrolling (r1012 == sizeStat(cs498))
Unrolling (r833 == sizeStat(cs407))
Unrolling (r832 == sizeList(cs408))
Unrolling (r925 == sizeList(cs502))
Unrolling (r889 == sizeList(cs428))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
sizeList-->(((0 * #res) + 0) ≤ 0)
sizeStat-->(((0 * #res) + 0) ≤ 0)
forLoopsWellFormedList-->((((0 * sizeList(l)) + (1 * res19._2)) + 0) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((0 * sizeStat(stat)) + (1 * res18._2)) + 0) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: isForFree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 64
[[34m Info  [0m] Number of equal calls: 14
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 55
[[34m Info  [0m] Number of equal calls: 10
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 232
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 68 + 0
solving...
solved... in 0.013s
candidate Invariants
sizeList-->(((-2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((2 * res19._2) + (0 * sizeList(l))) + -7) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * sizeStat(stat)) + (8 * res18._2)) + -25) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 92
[[34m Info  [0m] Number of equal calls: 17
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 890
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 96 + 68
solving...
solved... in 0.084s
candidate Invariants
sizeList-->(((2 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((-14 * sizeList(l)) + (1 * res19._2)) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((8 * res18._2) + (1 * sizeStat(stat))) + -24) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: sizeStat--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 11
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 112
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 107 + 164
solving...
solved... in 0.124s
candidate Invariants
sizeList-->(((0 * #res) + 1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((0 * sizeList(l)) + (1 * res19._2)) + 1) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-3 * sizeStat(stat)) + (1 * res18._2)) + 1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 972
[[34m Info  [0m] Number of equal calls: 53
# of atomic predicates: 62 + 271
solving...
timed out... in 20.218s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1128
[[34m Info  [0m] Number of equal calls: 63
# of atomic predicates: 83 + 271
solving...
solved... in 1.453s
candidate Invariants
sizeList-->(((0 * #res) + 1) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((8 * res19._2) + (0 * sizeList(l))) + 1) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-56 * sizeStat(stat)) + (8 * res18._2)) + 1) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: sizeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 354
solving...
solved... in 5.319s
candidate Invariants
sizeList-->(((-1 * #res) + 0) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((-5 * sizeList(l)) + (1 * res19._2)) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (-7 * sizeStat(stat))) + 5) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormedList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 453
[[34m Info  [0m] Number of equal calls: 41
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 17
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 68 + 362
solving...
solved... in 0.508s
candidate Invariants
sizeList-->(((-3 * #res) + -1) ≤ 0)
sizeStat-->(((-2 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((1 * res19._2) + (-8 * sizeList(l))) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (-7 * sizeStat(stat))) + 3) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 83
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 38 + 430
solving...
solved... in 12.123s
candidate Invariants
sizeList-->(((-5 * #res) + -1) ≤ 0)
sizeStat-->(((-1 * #res) + 0) ≤ 0)
forLoopsWellFormedList-->((((-7 * sizeList(l)) + (1 * res19._2)) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((-7 * sizeStat(stat)) + (1 * res18._2)) + 3) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 742
[[34m Info  [0m] Number of equal calls: 49
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 234
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 84 + 468
solving...
timed out... in 20.41s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: forLoopsWellFormed--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1006
[[34m Info  [0m] Number of equal calls: 59
Function: isForFreeList--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 205
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 76 + 468
solving...
solved... in 0.429s
candidate Invariants
sizeList-->(((-1 * #res) + 0) ≤ 0)
sizeStat-->(((-1 * #res) + 1) ≤ 0)
forLoopsWellFormedList-->((((1 * res19._2) + (-7 * sizeList(l))) + -2) ≤ 0)
isForFree-->((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) ≤ 0)
forLoopsWellFormed-->((((1 * res18._2) + (-7 * sizeStat(stat))) + 3) ≤ 0)
isForFreeList-->((((1 * res24._2) + (-6 * sizeList(l))) + -5) ≤ 0)
[[34m Info  [0m] - Found inductive invariant: sizeList --> (((-1 * #res) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeStat --> (((-1 * #res) + 1) <= 0)
[[34m Info  [0m] - Found inductive invariant: forLoopsWellFormedList --> ((((-7 * sizeList(l)) + (1 * res19._2)) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: isForFree --> ((((-6 * sizeStat(stat)) + (1 * res23._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: forLoopsWellFormed --> ((((1 * res18._2) + (-7 * sizeStat(stat))) + 3) <= 0)
[[34m Info  [0m] - Found inductive invariant: isForFreeList --> ((((1 * res24._2) + (-6 * sizeList(l))) + -5) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
