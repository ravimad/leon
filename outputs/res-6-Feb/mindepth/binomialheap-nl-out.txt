[[33mWarning[0m] warning: there were 2 deprecation warning(s); re-run with -deprecation for details
After Depth Instrumentation: 
object BinomialHeap {
  sealed abstract class BinomialTree

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class ElementAbs

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  case class None() extends OptionalTree

  sealed abstract class List

  case class NilHeap() extends BinomialHeap

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class BinomialHeap

  def leq(a : Element, b : Element) : (Boolean, Int) = {locally {
    val dcond = 2
    if ((a.n <= b.n)) {
      (true, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    } else {
      (false, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    }
  }
  }

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond7 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen7: BinomialHeap, dthen7: Int) = locally {
          val dcond8 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen8: BinomialHeap, dthen8: Int) = locally {
                val (rcond9: Boolean, dcond9: Int) = locally {
                  val (r95: Int, d98: Int) = locally {
                    val (e9: Int, d104: Int) = rank(h1.head)
                    (e9, (2 + d104))
                  }
                  
                  locally {
                    val (r96: Int, d99: Int) = locally {
                      val (e8: Int, d101: Int) = rank(h2.head)
                      (e8, (2 + d101))
                    }
                    
                    ((r95 < r96), (1 + if ((d98 >= d99)) {
                      d98
                    } else {
                      d99
                    }))
                  }
                  
                }
                
                if (rcond9) {
                  locally {
                    val (rthen9: ConsHeap, dthen9: Int) = locally {
                      val (r102: BinomialHeap, d107: Int) = locally {
                        val (e10: BinomialHeap, d110: Int) = merge(h1.tail, h2)
                        (e10, (2 + d110))
                      }
                      
                      (ConsHeap(h1.head, r102), (1 + if ((1 >= d107)) {
                        1
                      } else {
                        d107
                      }))
                    }
                    
                    (rthen9, if ((dcond9 >= dthen9)) {
                      dcond9
                    } else {
                      dthen9
                    })
                  }
                  
                } else {
                  locally {
                    val (relse7: BinomialHeap, delse7: Int) = locally {
                      val (rcond10: Boolean, dcond10: Int) = locally {
                        val (r107: Int, d113: Int) = locally {
                          val (e12: Int, d119: Int) = rank(h2.head)
                          (e12, (2 + d119))
                        }
                        
                        locally {
                          val (r108: Int, d114: Int) = locally {
                            val (e11: Int, d116: Int) = rank(h1.head)
                            (e11, (2 + d116))
                          }
                          
                          ((r107 < r108), (1 + if ((d113 >= d114)) {
                            d113
                          } else {
                            d114
                          }))
                        }
                        
                      }
                      
                      if (rcond10) {
                        locally {
                          val (rthen10: ConsHeap, dthen10: Int) = locally {
                            val (r114: BinomialHeap, d122: Int) = locally {
                              val (e13: BinomialHeap, d125: Int) = merge(h1, h2.tail)
                              (e13, (2 + d125))
                            }
                            
                            (ConsHeap(h2.head, r114), (1 + if ((1 >= d122)) {
                              1
                            } else {
                              d122
                            }))
                          }
                          
                          (rthen10, if ((dcond10 >= dthen10)) {
                            dcond10
                          } else {
                            dthen10
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse8: BinomialHeap, delse8: Int) = locally {
                            val (r119: BinomialTree, d128: Int) = locally {
                              val (e15: BinomialTree, d136: Int) = link(h1.head, h2.head)
                              (e15, (2 + d136))
                            }
                            
                            locally {
                              val (e14: BinomialHeap, d131: Int) = mergeWithCarry(r119, h1.tail, h2.tail)
                              (e14, ((1 + d131) + if ((if ((d128 >= 1)) {
                                d128
                              } else {
                                1
                              } >= 1)) {
                                if ((d128 >= 1)) {
                                  d128
                                } else {
                                  1
                                }
                              } else {
                                1
                              }))
                            }
                            
                          }
                          
                          (relse8, if ((dcond10 >= delse8)) {
                            dcond10
                          } else {
                            delse8
                          })
                        }
                        
                      }
                    }
                    
                    (relse7, if ((dcond9 >= delse7)) {
                      dcond9
                    } else {
                      delse7
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            (h1, if ((dcond8 >= 0)) {
              dcond8
            } else {
              0
            })
          }
        }
        
        (rthen7, if ((dcond7 >= dthen7)) {
          dcond7
        } else {
          dthen7
        })
      }
      
    } else {
      (h2, if ((dcond7 >= 0)) {
        dcond7
      } else {
        0
      })
    }
  }
  } ensuring(res => true)

  def removeMinTree(h : BinomialHeap) : ((OptionalTree, BinomialHeap), Int) = {locally {
    val dcond2 = 3
    if ((h.isInstanceOf[ConsHeap] && h.tail.isInstanceOf[NilHeap])) {
      ((Some(h.head), NilHeap()), if ((dcond2 >= 3)) {
        dcond2
      } else {
        3
      })
    } else {
      locally {
        val (relse2: (OptionalTree, BinomialHeap), delse2: Int) = locally {
          val dcond3 = 1
          if (h.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen3: (OptionalTree, BinomialHeap), dthen3: Int) = locally {
                val (vr: (OptionalTree, BinomialHeap), vd: Int) = locally {
                  val (vr1: (OptionalTree, BinomialHeap), vd1: Int) = locally {
                    val (e2: (OptionalTree, BinomialHeap), d40: Int) = removeMinTree(h.tail)
                    (e2, (2 + d40))
                  }
                  
                  ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                    (1 + vd1)
                  } else {
                    (1 + vd1)
                  }))
                }
                
                locally {
                  val (br: (OptionalTree, BinomialHeap), bd: Int) = locally {
                    val (vr2: OptionalTree, vd2: Int) = (vr._1, (1 + vd))
                    locally {
                      val (br2: (OptionalTree, BinomialHeap), bd2: Int) = locally {
                        val (br3: (OptionalTree, BinomialHeap), bd3: Int) = locally {
                          val dcond4 = (1 + vd2)
                          if (vr2.isInstanceOf[None]) {
                            ((Some(h.head), h.tail), if ((dcond4 >= 3)) {
                              dcond4
                            } else {
                              3
                            })
                          } else {
                            locally {
                              val (relse3: (OptionalTree, BinomialHeap), delse3: Int) = locally {
                                val (rcond5: Boolean, dcond5: Int) = locally {
                                  val (r56: Element, d54: Int) = locally {
                                    val (e5: Element, d61: Int) = root(h.head)
                                    (e5, (2 + d61))
                                  }
                                  
                                  locally {
                                    val (r57: Element, d55: Int) = locally {
                                      val (e4: Element, d58: Int) = root(vr2.t)
                                      (e4, ((1 + d58) + (1 + vd2)))
                                    }
                                    
                                    locally {
                                      val (e3: Boolean, d56: Int) = leq(r56, r57)
                                      (e3, ((1 + d56) + if ((d54 >= d55)) {
                                        d54
                                      } else {
                                        d55
                                      }))
                                    }
                                    
                                  }
                                  
                                }
                                
                                if (rcond5) {
                                  ((Some(h.head), h.tail), if ((dcond5 >= 3)) {
                                    dcond5
                                  } else {
                                    3
                                  })
                                } else {
                                  ((Some(vr2.t), ConsHeap(h.head, vr._2)), if ((dcond5 >= (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                    1
                                  } else {
                                    (1 + vd)
                                  }))) {
                                    (1 + (1 + vd2))
                                  } else {
                                    (1 + if ((1 >= (1 + vd))) {
                                      1
                                    } else {
                                      (1 + vd)
                                    })
                                  }))) {
                                    dcond5
                                  } else {
                                    (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                      1
                                    } else {
                                      (1 + vd)
                                    }))) {
                                      (1 + (1 + vd2))
                                    } else {
                                      (1 + if ((1 >= (1 + vd))) {
                                        1
                                      } else {
                                        (1 + vd)
                                      })
                                    })
                                  })
                                }
                              }
                              
                              (relse3, if ((dcond4 >= delse3)) {
                                dcond4
                              } else {
                                delse3
                              })
                            }
                            
                          }
                        }
                        
                        (br3, (bd3 + 1))
                      }
                      
                      (br2, (bd2 + 1))
                    }
                    
                  }
                  
                  (br, (bd + 1))
                }
                
              }
              
              (rthen3, if ((dcond3 >= dthen3)) {
                dcond3
              } else {
                dthen3
              })
            }
            
          } else {
            ((None(), NilHeap()), if ((dcond3 >= 2)) {
              dcond3
            } else {
              2
            })
          }
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res => (treeNum(res._1._2) <= treeNum(h)))

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond11 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen11: BinomialHeap, dthen11: Int) = locally {
          val dcond12 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen12: BinomialHeap, dthen12: Int) = locally {
                val (rcond13: Boolean, dcond13: Int) = locally {
                  val (r131: Int, d142: Int) = locally {
                    val (e17: Int, d148: Int) = rank(h1.head)
                    (e17, (2 + d148))
                  }
                  
                  locally {
                    val (r132: Int, d143: Int) = locally {
                      val (e16: Int, d145: Int) = rank(h2.head)
                      (e16, (2 + d145))
                    }
                    
                    ((r131 < r132), (1 + if ((d142 >= d143)) {
                      d142
                    } else {
                      d143
                    }))
                  }
                  
                }
                
                if (rcond13) {
                  locally {
                    val (rthen13: BinomialHeap, dthen13: Int) = locally {
                      val (rcond14: Boolean, dcond14: Int) = locally {
                        val (r137: Int, d150: Int) = locally {
                          val (e19: Int, d156: Int) = rank(t)
                          (e19, (1 + d156))
                        }
                        
                        locally {
                          val (r138: Int, d151: Int) = locally {
                            val (e18: Int, d153: Int) = rank(h1.head)
                            (e18, (2 + d153))
                          }
                          
                          ((r137 < r138), (1 + if ((d150 >= d151)) {
                            d150
                          } else {
                            d151
                          }))
                        }
                        
                      }
                      
                      if (rcond14) {
                        locally {
                          val (rthen14: ConsHeap, dthen14: Int) = locally {
                            val (r143: ConsHeap, d158: Int) = locally {
                              val (r145: BinomialHeap, d160: Int) = locally {
                                val (e20: BinomialHeap, d163: Int) = merge(h1.tail, h2)
                                (e20, (2 + d163))
                              }
                              
                              (ConsHeap(h1.head, r145), (1 + if ((1 >= d160)) {
                                1
                              } else {
                                d160
                              }))
                            }
                            
                            (ConsHeap(t, r143), (1 + if ((0 >= d158)) {
                              0
                            } else {
                              d158
                            }))
                          }
                          
                          (rthen14, if ((dcond14 >= dthen14)) {
                            dcond14
                          } else {
                            dthen14
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse11: BinomialHeap, delse11: Int) = locally {
                            val (r150: BinomialTree, d166: Int) = locally {
                              val (e22: BinomialTree, d173: Int) = link(t, h1.head)
                              (e22, (2 + d173))
                            }
                            
                            locally {
                              val (e21: BinomialHeap, d169: Int) = mergeWithCarry(r150, h1.tail, h2)
                              (e21, ((1 + d169) + if ((if ((d166 >= 1)) {
                                d166
                              } else {
                                1
                              } >= 0)) {
                                if ((d166 >= 1)) {
                                  d166
                                } else {
                                  1
                                }
                              } else {
                                0
                              }))
                            }
                            
                          }
                          
                          (relse11, if ((dcond14 >= delse11)) {
                            dcond14
                          } else {
                            delse11
                          })
                        }
                        
                      }
                    }
                    
                    (rthen13, if ((dcond13 >= dthen13)) {
                      dcond13
                    } else {
                      dthen13
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: BinomialHeap, delse12: Int) = locally {
                      val (rcond15: Boolean, dcond15: Int) = locally {
                        val (r157: Int, d175: Int) = locally {
                          val (e24: Int, d181: Int) = rank(h2.head)
                          (e24, (2 + d181))
                        }
                        
                        locally {
                          val (r158: Int, d176: Int) = locally {
                            val (e23: Int, d178: Int) = rank(h1.head)
                            (e23, (2 + d178))
                          }
                          
                          ((r157 < r158), (1 + if ((d175 >= d176)) {
                            d175
                          } else {
                            d176
                          }))
                        }
                        
                      }
                      
                      if (rcond15) {
                        locally {
                          val (rthen15: BinomialHeap, dthen15: Int) = locally {
                            val (rcond16: Boolean, dcond16: Int) = locally {
                              val (r163: Int, d183: Int) = locally {
                                val (e26: Int, d189: Int) = rank(t)
                                (e26, (1 + d189))
                              }
                              
                              locally {
                                val (r164: Int, d184: Int) = locally {
                                  val (e25: Int, d186: Int) = rank(h2.head)
                                  (e25, (2 + d186))
                                }
                                
                                ((r163 < r164), (1 + if ((d183 >= d184)) {
                                  d183
                                } else {
                                  d184
                                }))
                              }
                              
                            }
                            
                            if (rcond16) {
                              locally {
                                val (rthen16: ConsHeap, dthen16: Int) = locally {
                                  val (r169: ConsHeap, d191: Int) = locally {
                                    val (r171: BinomialHeap, d193: Int) = locally {
                                      val (e27: BinomialHeap, d196: Int) = merge(h1, h2.tail)
                                      (e27, (2 + d196))
                                    }
                                    
                                    (ConsHeap(h2.head, r171), (1 + if ((1 >= d193)) {
                                      1
                                    } else {
                                      d193
                                    }))
                                  }
                                  
                                  (ConsHeap(t, r169), (1 + if ((0 >= d191)) {
                                    0
                                  } else {
                                    d191
                                  }))
                                }
                                
                                (rthen16, if ((dcond16 >= dthen16)) {
                                  dcond16
                                } else {
                                  dthen16
                                })
                              }
                              
                            } else {
                              locally {
                                val (relse13: BinomialHeap, delse13: Int) = locally {
                                  val (r176: BinomialTree, d199: Int) = locally {
                                    val (e29: BinomialTree, d206: Int) = link(t, h2.head)
                                    (e29, (2 + d206))
                                  }
                                  
                                  locally {
                                    val (e28: BinomialHeap, d202: Int) = mergeWithCarry(r176, h1, h2.tail)
                                    (e28, ((1 + d202) + if ((if ((d199 >= 0)) {
                                      d199
                                    } else {
                                      0
                                    } >= 1)) {
                                      if ((d199 >= 0)) {
                                        d199
                                      } else {
                                        0
                                      }
                                    } else {
                                      1
                                    }))
                                  }
                                  
                                }
                                
                                (relse13, if ((dcond16 >= delse13)) {
                                  dcond16
                                } else {
                                  delse13
                                })
                              }
                              
                            }
                          }
                          
                          (rthen15, if ((dcond15 >= dthen15)) {
                            dcond15
                          } else {
                            dthen15
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse14: ConsHeap, delse14: Int) = locally {
                            val (r184: BinomialHeap, d209: Int) = locally {
                              val (r185: BinomialTree, d210: Int) = locally {
                                val (e31: BinomialTree, d218: Int) = link(h1.head, h2.head)
                                (e31, (2 + d218))
                              }
                              
                              locally {
                                val (e30: BinomialHeap, d213: Int) = mergeWithCarry(r185, h1.tail, h2.tail)
                                (e30, ((1 + d213) + if ((if ((d210 >= 1)) {
                                  d210
                                } else {
                                  1
                                } >= 1)) {
                                  if ((d210 >= 1)) {
                                    d210
                                  } else {
                                    1
                                  }
                                } else {
                                  1
                                }))
                              }
                              
                            }
                            
                            (ConsHeap(t, r184), (1 + if ((0 >= d209)) {
                              0
                            } else {
                              d209
                            }))
                          }
                          
                          (relse14, if ((dcond15 >= delse14)) {
                            dcond15
                          } else {
                            delse14
                          })
                        }
                        
                      }
                    }
                    
                    (relse12, if ((dcond13 >= delse12)) {
                      dcond13
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (rthen12, if ((dcond12 >= dthen12)) {
                dcond12
              } else {
                dthen12
              })
            }
            
          } else {
            locally {
              val (relse15: BinomialHeap, delse15: Int) = locally {
                val (e32: BinomialHeap, d223: Int) = insTree(t, h1)
                (e32, (1 + d223))
              }
              
              (relse15, if ((dcond12 >= delse15)) {
                dcond12
              } else {
                delse15
              })
            }
            
          }
        }
        
        (rthen11, if ((dcond11 >= dthen11)) {
          dcond11
        } else {
          dthen11
        })
      }
      
    } else {
      locally {
        val (relse16: BinomialHeap, delse16: Int) = locally {
          val (e33: BinomialHeap, d226: Int) = insTree(t, h2)
          (e33, (1 + d226))
        }
        
        (relse16, if ((dcond11 >= delse16)) {
          dcond11
        } else {
          delse16
        })
      }
      
    }
  }
  } ensuring(res => true)

  def root(t : BinomialTree) : (ElementAbs, Int) = {(t.elem, 1)}

  def deleteMin(h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val (vr4: (OptionalTree, BinomialHeap), vd4: Int) = locally {
      val (vr5: (OptionalTree, BinomialHeap), vd5: Int) = locally {
        val (e6: (OptionalTree, BinomialHeap), d79: Int) = removeMinTree(h)
        (e6, (1 + d79))
      }
      
      ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
        (1 + vd5)
      } else {
        (1 + vd5)
      }))
    }
    
    locally {
      val (br4: BinomialHeap, bd4: Int) = locally {
        val (vr6: OptionalTree, vd6: Int) = (vr4._1, (1 + vd4))
        locally {
          val (br6: BinomialHeap, bd6: Int) = locally {
            val (br7: BinomialHeap, bd7: Int) = locally {
              val dcond6 = (1 + if (((1 + vd6) >= (1 + (1 + vd6)))) {
                (1 + vd6)
              } else {
                (1 + (1 + vd6))
              })
              if ((vr6.isInstanceOf[Some] && vr6.t.isInstanceOf[Node])) {
                locally {
                  val (rthen6: BinomialHeap, dthen6: Int) = locally {
                    val (e7: BinomialHeap, d93: Int) = merge(vr6.t.children, vr4._2)
                    (e7, ((1 + d93) + if (((1 + (1 + vd6)) >= (1 + vd4))) {
                      (1 + (1 + vd6))
                    } else {
                      (1 + vd4)
                    }))
                  }
                  
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                (h, if ((dcond6 >= 0)) {
                  dcond6
                } else {
                  0
                })
              }
            }
            
            (br7, (bd7 + 1))
          }
          
          (br6, (bd6 + 1))
        }
        
      }
      
      (br4, (bd4 + 1))
    }
    
  }
  } ensuring(res => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def minTreeChildren(h : BinomialHeap) : Int = {locally {
    val min = (removeMinTree(h)._1 match {
      case (min, _) =>
        min
    })
    (min match {
      case None() =>
        0
      case Some(Node(_, _, ch)) =>
        treeNum(ch)
    })
  }
  }

  def rank(t : BinomialTree) : (Int, Int) = {(t.rank, 1)}

  def link(t1 : BinomialTree, t2 : BinomialTree) : (BinomialTree, Int) = {locally {
    val (rcond1: Boolean, dcond1: Int) = locally {
      val (e1: Boolean, d6: Int) = leq(t1.elem, t2.elem)
      (e1, (2 + d6))
    }
    
    if (rcond1) {
      (Node((t1.rank + 1), t1.elem, ConsHeap(t2, t1.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    } else {
      (Node((t1.rank + 1), t2.elem, ConsHeap(t1, t2.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    }
  }
  }

  def insTree(t : BinomialTree, h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond17 = 1
    if (h.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen17: BinomialHeap, dthen17: Int) = locally {
          val (rcond18: Boolean, dcond18: Int) = locally {
            val (r199: Int, d228: Int) = locally {
              val (e35: Int, d234: Int) = rank(t)
              (e35, (1 + d234))
            }
            
            locally {
              val (r200: Int, d229: Int) = locally {
                val (e34: Int, d231: Int) = rank(h.head)
                (e34, (2 + d231))
              }
              
              ((r199 < r200), (1 + if ((d228 >= d229)) {
                d228
              } else {
                d229
              }))
            }
            
          }
          
          if (rcond18) {
            (ConsHeap(t, h), if ((dcond18 >= 1)) {
              dcond18
            } else {
              1
            })
          } else {
            locally {
              val (relse17: BinomialHeap, delse17: Int) = locally {
                val (rcond19: Boolean, dcond19: Int) = locally {
                  val (r206: Int, d237: Int) = locally {
                    val (e37: Int, d243: Int) = rank(t)
                    (e37, (1 + d243))
                  }
                  
                  locally {
                    val (r207: Int, d238: Int) = locally {
                      val (e36: Int, d240: Int) = rank(h.head)
                      (e36, (2 + d240))
                    }
                    
                    ((r206 > r207), (1 + if ((d237 >= d238)) {
                      d237
                    } else {
                      d238
                    }))
                  }
                  
                }
                
                if (rcond19) {
                  locally {
                    val (rthen19: ConsHeap, dthen19: Int) = locally {
                      val (r212: BinomialHeap, d245: Int) = locally {
                        val (e38: BinomialHeap, d248: Int) = insTree(t, h.tail)
                        (e38, (2 + d248))
                      }
                      
                      (ConsHeap(h.head, r212), (1 + if ((1 >= d245)) {
                        1
                      } else {
                        d245
                      }))
                    }
                    
                    (rthen19, if ((dcond19 >= dthen19)) {
                      dcond19
                    } else {
                      dthen19
                    })
                  }
                  
                } else {
                  locally {
                    val (relse18: BinomialHeap, delse18: Int) = locally {
                      val (r217: BinomialTree, d251: Int) = locally {
                        val (e40: BinomialTree, d257: Int) = link(t, h.head)
                        (e40, (2 + d257))
                      }
                      
                      locally {
                        val (e39: BinomialHeap, d253: Int) = insTree(r217, h.tail)
                        (e39, ((1 + d253) + if ((d251 >= 1)) {
                          d251
                        } else {
                          1
                        }))
                      }
                      
                    }
                    
                    (relse18, if ((dcond19 >= delse18)) {
                      dcond19
                    } else {
                      delse18
                    })
                  }
                  
                }
              }
              
              (relse17, if ((dcond18 >= delse17)) {
                dcond18
              } else {
                delse17
              })
            }
            
          }
        }
        
        (rthen17, if ((dcond17 >= dthen17)) {
          dcond17
        } else {
          dthen17
        })
      }
      
    } else {
      (ConsHeap(t, NilHeap()), if ((dcond17 >= 2)) {
        dcond17
      } else {
        2
      })
    }
  }
  } ensuring(res => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: leq
Defined fun: treeNum
Defined fun: merge
Defined fun: removeMinTree
Defined fun: mergeWithCarry
Defined fun: root
Defined fun: deleteMin
Defined fun: isEmpty
Defined fun: minTreeChildren
Defined fun: rank
Defined fun: link
Defined fun: insTree
Defined fun: max
FunMap: Map(leq -> leq, isEmpty -> isEmpty, minTreeChildren -> minTreeChildren, mergeWithCarry -> mergeWithCarry, rank -> rank, removeMinTree -> removeMinTree, max -> max, root -> root, link -> link, merge -> merge, treeNum -> treeNum, insTree -> insTree, deleteMin -> deleteMin)
After Time Instrumentation: 
object BinomialHeap {
  sealed abstract class BinomialTree

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class ElementAbs

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  case class None() extends OptionalTree

  sealed abstract class List

  case class NilHeap() extends BinomialHeap

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class BinomialHeap

  def leq(a : Element, b : Element) : (Boolean, Int) = {locally {
    val dcond = 2
    if ((a.n <= b.n)) {
      (true, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    } else {
      (false, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    }
  }
  }

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond7 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen7: BinomialHeap, dthen7: Int) = locally {
          val dcond8 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen8: BinomialHeap, dthen8: Int) = locally {
                val (rcond9: Boolean, dcond9: Int) = locally {
                  val (r95: Int, d98: Int) = locally {
                    val (e9: Int, d104: Int) = rank(h1.head)
                    (e9, (2 + d104))
                  }
                  
                  locally {
                    val (r96: Int, d99: Int) = locally {
                      val (e8: Int, d101: Int) = rank(h2.head)
                      (e8, (2 + d101))
                    }
                    
                    ((r95 < r96), (1 + if ((d98 >= d99)) {
                      d98
                    } else {
                      d99
                    }))
                  }
                  
                }
                
                if (rcond9) {
                  locally {
                    val (rthen9: ConsHeap, dthen9: Int) = locally {
                      val (r102: BinomialHeap, d107: Int) = locally {
                        val (e10: BinomialHeap, d110: Int) = merge(h1.tail, h2)
                        (e10, (2 + d110))
                      }
                      
                      (ConsHeap(h1.head, r102), (1 + if ((1 >= d107)) {
                        1
                      } else {
                        d107
                      }))
                    }
                    
                    (rthen9, if ((dcond9 >= dthen9)) {
                      dcond9
                    } else {
                      dthen9
                    })
                  }
                  
                } else {
                  locally {
                    val (relse7: BinomialHeap, delse7: Int) = locally {
                      val (rcond10: Boolean, dcond10: Int) = locally {
                        val (r107: Int, d113: Int) = locally {
                          val (e12: Int, d119: Int) = rank(h2.head)
                          (e12, (2 + d119))
                        }
                        
                        locally {
                          val (r108: Int, d114: Int) = locally {
                            val (e11: Int, d116: Int) = rank(h1.head)
                            (e11, (2 + d116))
                          }
                          
                          ((r107 < r108), (1 + if ((d113 >= d114)) {
                            d113
                          } else {
                            d114
                          }))
                        }
                        
                      }
                      
                      if (rcond10) {
                        locally {
                          val (rthen10: ConsHeap, dthen10: Int) = locally {
                            val (r114: BinomialHeap, d122: Int) = locally {
                              val (e13: BinomialHeap, d125: Int) = merge(h1, h2.tail)
                              (e13, (2 + d125))
                            }
                            
                            (ConsHeap(h2.head, r114), (1 + if ((1 >= d122)) {
                              1
                            } else {
                              d122
                            }))
                          }
                          
                          (rthen10, if ((dcond10 >= dthen10)) {
                            dcond10
                          } else {
                            dthen10
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse8: BinomialHeap, delse8: Int) = locally {
                            val (r119: BinomialTree, d128: Int) = locally {
                              val (e15: BinomialTree, d136: Int) = link(h1.head, h2.head)
                              (e15, (2 + d136))
                            }
                            
                            locally {
                              val (e14: BinomialHeap, d131: Int) = mergeWithCarry(r119, h1.tail, h2.tail)
                              (e14, ((1 + d131) + if ((if ((d128 >= 1)) {
                                d128
                              } else {
                                1
                              } >= 1)) {
                                if ((d128 >= 1)) {
                                  d128
                                } else {
                                  1
                                }
                              } else {
                                1
                              }))
                            }
                            
                          }
                          
                          (relse8, if ((dcond10 >= delse8)) {
                            dcond10
                          } else {
                            delse8
                          })
                        }
                        
                      }
                    }
                    
                    (relse7, if ((dcond9 >= delse7)) {
                      dcond9
                    } else {
                      delse7
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            (h1, if ((dcond8 >= 0)) {
              dcond8
            } else {
              0
            })
          }
        }
        
        (rthen7, if ((dcond7 >= dthen7)) {
          dcond7
        } else {
          dthen7
        })
      }
      
    } else {
      (h2, if ((dcond7 >= 0)) {
        dcond7
      } else {
        0
      })
    }
  }
  } ensuring(res13 => true)

  def removeMinTree(h : BinomialHeap) : ((OptionalTree, BinomialHeap), Int) = {locally {
    val dcond2 = 3
    if ((h.isInstanceOf[ConsHeap] && h.tail.isInstanceOf[NilHeap])) {
      ((Some(h.head), NilHeap()), if ((dcond2 >= 3)) {
        dcond2
      } else {
        3
      })
    } else {
      locally {
        val (relse2: (OptionalTree, BinomialHeap), delse2: Int) = locally {
          val dcond3 = 1
          if (h.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen3: (OptionalTree, BinomialHeap), dthen3: Int) = locally {
                val (vr: (OptionalTree, BinomialHeap), vd: Int) = locally {
                  val (vr1: (OptionalTree, BinomialHeap), vd1: Int) = locally {
                    val (e2: (OptionalTree, BinomialHeap), d40: Int) = removeMinTree(h.tail)
                    (e2, (2 + d40))
                  }
                  
                  ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                    (1 + vd1)
                  } else {
                    (1 + vd1)
                  }))
                }
                
                locally {
                  val (br: (OptionalTree, BinomialHeap), bd: Int) = locally {
                    val (vr2: OptionalTree, vd2: Int) = (vr._1, (1 + vd))
                    locally {
                      val (br2: (OptionalTree, BinomialHeap), bd2: Int) = locally {
                        val (br3: (OptionalTree, BinomialHeap), bd3: Int) = locally {
                          val dcond4 = (1 + vd2)
                          if (vr2.isInstanceOf[None]) {
                            ((Some(h.head), h.tail), if ((dcond4 >= 3)) {
                              dcond4
                            } else {
                              3
                            })
                          } else {
                            locally {
                              val (relse3: (OptionalTree, BinomialHeap), delse3: Int) = locally {
                                val (rcond5: Boolean, dcond5: Int) = locally {
                                  val (r56: Element, d54: Int) = locally {
                                    val (e5: Element, d61: Int) = root(h.head)
                                    (e5, (2 + d61))
                                  }
                                  
                                  locally {
                                    val (r57: Element, d55: Int) = locally {
                                      val (e4: Element, d58: Int) = root(vr2.t)
                                      (e4, ((1 + d58) + (1 + vd2)))
                                    }
                                    
                                    locally {
                                      val (e3: Boolean, d56: Int) = leq(r56, r57)
                                      (e3, ((1 + d56) + if ((d54 >= d55)) {
                                        d54
                                      } else {
                                        d55
                                      }))
                                    }
                                    
                                  }
                                  
                                }
                                
                                if (rcond5) {
                                  ((Some(h.head), h.tail), if ((dcond5 >= 3)) {
                                    dcond5
                                  } else {
                                    3
                                  })
                                } else {
                                  ((Some(vr2.t), ConsHeap(h.head, vr._2)), if ((dcond5 >= (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                    1
                                  } else {
                                    (1 + vd)
                                  }))) {
                                    (1 + (1 + vd2))
                                  } else {
                                    (1 + if ((1 >= (1 + vd))) {
                                      1
                                    } else {
                                      (1 + vd)
                                    })
                                  }))) {
                                    dcond5
                                  } else {
                                    (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                      1
                                    } else {
                                      (1 + vd)
                                    }))) {
                                      (1 + (1 + vd2))
                                    } else {
                                      (1 + if ((1 >= (1 + vd))) {
                                        1
                                      } else {
                                        (1 + vd)
                                      })
                                    })
                                  })
                                }
                              }
                              
                              (relse3, if ((dcond4 >= delse3)) {
                                dcond4
                              } else {
                                delse3
                              })
                            }
                            
                          }
                        }
                        
                        (br3, (bd3 + 1))
                      }
                      
                      (br2, (bd2 + 1))
                    }
                    
                  }
                  
                  (br, (bd + 1))
                }
                
              }
              
              (rthen3, if ((dcond3 >= dthen3)) {
                dcond3
              } else {
                dthen3
              })
            }
            
          } else {
            ((None(), NilHeap()), if ((dcond3 >= 2)) {
              dcond3
            } else {
              2
            })
          }
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res12 => (treeNum(res12._1._2) <= treeNum(h)))

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond11 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen11: BinomialHeap, dthen11: Int) = locally {
          val dcond12 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (rthen12: BinomialHeap, dthen12: Int) = locally {
                val (rcond13: Boolean, dcond13: Int) = locally {
                  val (r131: Int, d142: Int) = locally {
                    val (e17: Int, d148: Int) = rank(h1.head)
                    (e17, (2 + d148))
                  }
                  
                  locally {
                    val (r132: Int, d143: Int) = locally {
                      val (e16: Int, d145: Int) = rank(h2.head)
                      (e16, (2 + d145))
                    }
                    
                    ((r131 < r132), (1 + if ((d142 >= d143)) {
                      d142
                    } else {
                      d143
                    }))
                  }
                  
                }
                
                if (rcond13) {
                  locally {
                    val (rthen13: BinomialHeap, dthen13: Int) = locally {
                      val (rcond14: Boolean, dcond14: Int) = locally {
                        val (r137: Int, d150: Int) = locally {
                          val (e19: Int, d156: Int) = rank(t)
                          (e19, (1 + d156))
                        }
                        
                        locally {
                          val (r138: Int, d151: Int) = locally {
                            val (e18: Int, d153: Int) = rank(h1.head)
                            (e18, (2 + d153))
                          }
                          
                          ((r137 < r138), (1 + if ((d150 >= d151)) {
                            d150
                          } else {
                            d151
                          }))
                        }
                        
                      }
                      
                      if (rcond14) {
                        locally {
                          val (rthen14: ConsHeap, dthen14: Int) = locally {
                            val (r143: ConsHeap, d158: Int) = locally {
                              val (r145: BinomialHeap, d160: Int) = locally {
                                val (e20: BinomialHeap, d163: Int) = merge(h1.tail, h2)
                                (e20, (2 + d163))
                              }
                              
                              (ConsHeap(h1.head, r145), (1 + if ((1 >= d160)) {
                                1
                              } else {
                                d160
                              }))
                            }
                            
                            (ConsHeap(t, r143), (1 + if ((0 >= d158)) {
                              0
                            } else {
                              d158
                            }))
                          }
                          
                          (rthen14, if ((dcond14 >= dthen14)) {
                            dcond14
                          } else {
                            dthen14
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse11: BinomialHeap, delse11: Int) = locally {
                            val (r150: BinomialTree, d166: Int) = locally {
                              val (e22: BinomialTree, d173: Int) = link(t, h1.head)
                              (e22, (2 + d173))
                            }
                            
                            locally {
                              val (e21: BinomialHeap, d169: Int) = mergeWithCarry(r150, h1.tail, h2)
                              (e21, ((1 + d169) + if ((if ((d166 >= 1)) {
                                d166
                              } else {
                                1
                              } >= 0)) {
                                if ((d166 >= 1)) {
                                  d166
                                } else {
                                  1
                                }
                              } else {
                                0
                              }))
                            }
                            
                          }
                          
                          (relse11, if ((dcond14 >= delse11)) {
                            dcond14
                          } else {
                            delse11
                          })
                        }
                        
                      }
                    }
                    
                    (rthen13, if ((dcond13 >= dthen13)) {
                      dcond13
                    } else {
                      dthen13
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: BinomialHeap, delse12: Int) = locally {
                      val (rcond15: Boolean, dcond15: Int) = locally {
                        val (r157: Int, d175: Int) = locally {
                          val (e24: Int, d181: Int) = rank(h2.head)
                          (e24, (2 + d181))
                        }
                        
                        locally {
                          val (r158: Int, d176: Int) = locally {
                            val (e23: Int, d178: Int) = rank(h1.head)
                            (e23, (2 + d178))
                          }
                          
                          ((r157 < r158), (1 + if ((d175 >= d176)) {
                            d175
                          } else {
                            d176
                          }))
                        }
                        
                      }
                      
                      if (rcond15) {
                        locally {
                          val (rthen15: BinomialHeap, dthen15: Int) = locally {
                            val (rcond16: Boolean, dcond16: Int) = locally {
                              val (r163: Int, d183: Int) = locally {
                                val (e26: Int, d189: Int) = rank(t)
                                (e26, (1 + d189))
                              }
                              
                              locally {
                                val (r164: Int, d184: Int) = locally {
                                  val (e25: Int, d186: Int) = rank(h2.head)
                                  (e25, (2 + d186))
                                }
                                
                                ((r163 < r164), (1 + if ((d183 >= d184)) {
                                  d183
                                } else {
                                  d184
                                }))
                              }
                              
                            }
                            
                            if (rcond16) {
                              locally {
                                val (rthen16: ConsHeap, dthen16: Int) = locally {
                                  val (r169: ConsHeap, d191: Int) = locally {
                                    val (r171: BinomialHeap, d193: Int) = locally {
                                      val (e27: BinomialHeap, d196: Int) = merge(h1, h2.tail)
                                      (e27, (2 + d196))
                                    }
                                    
                                    (ConsHeap(h2.head, r171), (1 + if ((1 >= d193)) {
                                      1
                                    } else {
                                      d193
                                    }))
                                  }
                                  
                                  (ConsHeap(t, r169), (1 + if ((0 >= d191)) {
                                    0
                                  } else {
                                    d191
                                  }))
                                }
                                
                                (rthen16, if ((dcond16 >= dthen16)) {
                                  dcond16
                                } else {
                                  dthen16
                                })
                              }
                              
                            } else {
                              locally {
                                val (relse13: BinomialHeap, delse13: Int) = locally {
                                  val (r176: BinomialTree, d199: Int) = locally {
                                    val (e29: BinomialTree, d206: Int) = link(t, h2.head)
                                    (e29, (2 + d206))
                                  }
                                  
                                  locally {
                                    val (e28: BinomialHeap, d202: Int) = mergeWithCarry(r176, h1, h2.tail)
                                    (e28, ((1 + d202) + if ((if ((d199 >= 0)) {
                                      d199
                                    } else {
                                      0
                                    } >= 1)) {
                                      if ((d199 >= 0)) {
                                        d199
                                      } else {
                                        0
                                      }
                                    } else {
                                      1
                                    }))
                                  }
                                  
                                }
                                
                                (relse13, if ((dcond16 >= delse13)) {
                                  dcond16
                                } else {
                                  delse13
                                })
                              }
                              
                            }
                          }
                          
                          (rthen15, if ((dcond15 >= dthen15)) {
                            dcond15
                          } else {
                            dthen15
                          })
                        }
                        
                      } else {
                        locally {
                          val (relse14: ConsHeap, delse14: Int) = locally {
                            val (r184: BinomialHeap, d209: Int) = locally {
                              val (r185: BinomialTree, d210: Int) = locally {
                                val (e31: BinomialTree, d218: Int) = link(h1.head, h2.head)
                                (e31, (2 + d218))
                              }
                              
                              locally {
                                val (e30: BinomialHeap, d213: Int) = mergeWithCarry(r185, h1.tail, h2.tail)
                                (e30, ((1 + d213) + if ((if ((d210 >= 1)) {
                                  d210
                                } else {
                                  1
                                } >= 1)) {
                                  if ((d210 >= 1)) {
                                    d210
                                  } else {
                                    1
                                  }
                                } else {
                                  1
                                }))
                              }
                              
                            }
                            
                            (ConsHeap(t, r184), (1 + if ((0 >= d209)) {
                              0
                            } else {
                              d209
                            }))
                          }
                          
                          (relse14, if ((dcond15 >= delse14)) {
                            dcond15
                          } else {
                            delse14
                          })
                        }
                        
                      }
                    }
                    
                    (relse12, if ((dcond13 >= delse12)) {
                      dcond13
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (rthen12, if ((dcond12 >= dthen12)) {
                dcond12
              } else {
                dthen12
              })
            }
            
          } else {
            locally {
              val (relse15: BinomialHeap, delse15: Int) = locally {
                val (e32: BinomialHeap, d223: Int) = insTree(t, h1)
                (e32, (1 + d223))
              }
              
              (relse15, if ((dcond12 >= delse15)) {
                dcond12
              } else {
                delse15
              })
            }
            
          }
        }
        
        (rthen11, if ((dcond11 >= dthen11)) {
          dcond11
        } else {
          dthen11
        })
      }
      
    } else {
      locally {
        val (relse16: BinomialHeap, delse16: Int) = locally {
          val (e33: BinomialHeap, d226: Int) = insTree(t, h2)
          (e33, (1 + d226))
        }
        
        (relse16, if ((dcond11 >= delse16)) {
          dcond11
        } else {
          delse16
        })
      }
      
    }
  }
  } ensuring(res11 => true)

  def root(t : BinomialTree) : (ElementAbs, Int) = {(t.elem, 1)}

  def deleteMin(h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val (vr4: (OptionalTree, BinomialHeap), vd4: Int) = locally {
      val (vr5: (OptionalTree, BinomialHeap), vd5: Int) = locally {
        val (e6: (OptionalTree, BinomialHeap), d79: Int) = removeMinTree(h)
        (e6, (1 + d79))
      }
      
      ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
        (1 + vd5)
      } else {
        (1 + vd5)
      }))
    }
    
    locally {
      val (br4: BinomialHeap, bd4: Int) = locally {
        val (vr6: OptionalTree, vd6: Int) = (vr4._1, (1 + vd4))
        locally {
          val (br6: BinomialHeap, bd6: Int) = locally {
            val (br7: BinomialHeap, bd7: Int) = locally {
              val dcond6 = (1 + if (((1 + vd6) >= (1 + (1 + vd6)))) {
                (1 + vd6)
              } else {
                (1 + (1 + vd6))
              })
              if ((vr6.isInstanceOf[Some] && vr6.t.isInstanceOf[Node])) {
                locally {
                  val (rthen6: BinomialHeap, dthen6: Int) = locally {
                    val (e7: BinomialHeap, d93: Int) = merge(vr6.t.children, vr4._2)
                    (e7, ((1 + d93) + if (((1 + (1 + vd6)) >= (1 + vd4))) {
                      (1 + (1 + vd6))
                    } else {
                      (1 + vd4)
                    }))
                  }
                  
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                (h, if ((dcond6 >= 0)) {
                  dcond6
                } else {
                  0
                })
              }
            }
            
            (br7, (bd7 + 1))
          }
          
          (br6, (bd6 + 1))
        }
        
      }
      
      (br4, (bd4 + 1))
    }
    
  }
  } ensuring(res15 => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def minTreeChildren(h : BinomialHeap) : Int = {locally {
    val min = (removeMinTree(h)._1 match {
      case (min, _) =>
        min
    })
    (min match {
      case None() =>
        0
      case Some(Node(_, _, ch)) =>
        treeNum(ch)
    })
  }
  }

  def rank(t : BinomialTree) : (Int, Int) = {(t.rank, 1)}

  def link(t1 : BinomialTree, t2 : BinomialTree) : (BinomialTree, Int) = {locally {
    val (rcond1: Boolean, dcond1: Int) = locally {
      val (e1: Boolean, d6: Int) = leq(t1.elem, t2.elem)
      (e1, (2 + d6))
    }
    
    if (rcond1) {
      (Node((t1.rank + 1), t1.elem, ConsHeap(t2, t1.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    } else {
      (Node((t1.rank + 1), t2.elem, ConsHeap(t1, t2.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    }
  }
  }

  def insTree(t : BinomialTree, h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val dcond17 = 1
    if (h.isInstanceOf[ConsHeap]) {
      locally {
        val (rthen17: BinomialHeap, dthen17: Int) = locally {
          val (rcond18: Boolean, dcond18: Int) = locally {
            val (r199: Int, d228: Int) = locally {
              val (e35: Int, d234: Int) = rank(t)
              (e35, (1 + d234))
            }
            
            locally {
              val (r200: Int, d229: Int) = locally {
                val (e34: Int, d231: Int) = rank(h.head)
                (e34, (2 + d231))
              }
              
              ((r199 < r200), (1 + if ((d228 >= d229)) {
                d228
              } else {
                d229
              }))
            }
            
          }
          
          if (rcond18) {
            (ConsHeap(t, h), if ((dcond18 >= 1)) {
              dcond18
            } else {
              1
            })
          } else {
            locally {
              val (relse17: BinomialHeap, delse17: Int) = locally {
                val (rcond19: Boolean, dcond19: Int) = locally {
                  val (r206: Int, d237: Int) = locally {
                    val (e37: Int, d243: Int) = rank(t)
                    (e37, (1 + d243))
                  }
                  
                  locally {
                    val (r207: Int, d238: Int) = locally {
                      val (e36: Int, d240: Int) = rank(h.head)
                      (e36, (2 + d240))
                    }
                    
                    ((r206 > r207), (1 + if ((d237 >= d238)) {
                      d237
                    } else {
                      d238
                    }))
                  }
                  
                }
                
                if (rcond19) {
                  locally {
                    val (rthen19: ConsHeap, dthen19: Int) = locally {
                      val (r212: BinomialHeap, d245: Int) = locally {
                        val (e38: BinomialHeap, d248: Int) = insTree(t, h.tail)
                        (e38, (2 + d248))
                      }
                      
                      (ConsHeap(h.head, r212), (1 + if ((1 >= d245)) {
                        1
                      } else {
                        d245
                      }))
                    }
                    
                    (rthen19, if ((dcond19 >= dthen19)) {
                      dcond19
                    } else {
                      dthen19
                    })
                  }
                  
                } else {
                  locally {
                    val (relse18: BinomialHeap, delse18: Int) = locally {
                      val (r217: BinomialTree, d251: Int) = locally {
                        val (e40: BinomialTree, d257: Int) = link(t, h.head)
                        (e40, (2 + d257))
                      }
                      
                      locally {
                        val (e39: BinomialHeap, d253: Int) = insTree(r217, h.tail)
                        (e39, ((1 + d253) + if ((d251 >= 1)) {
                          d251
                        } else {
                          1
                        }))
                      }
                      
                    }
                    
                    (relse18, if ((dcond19 >= delse18)) {
                      dcond19
                    } else {
                      delse18
                    })
                  }
                  
                }
              }
              
              (relse17, if ((dcond18 >= delse17)) {
                dcond18
              } else {
                delse17
              })
            }
            
          }
        }
        
        (rthen17, if ((dcond17 >= dthen17)) {
          dcond17
        } else {
          dthen17
        })
      }
      
    } else {
      (ConsHeap(t, NilHeap()), if ((dcond17 >= 2)) {
        dcond17
      } else {
        2
      })
    }
  }
  } ensuring(res14 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object BinomialHeap {
  sealed abstract class BinomialTree

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class ElementAbs

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  case class None() extends OptionalTree

  sealed abstract class List

  case class NilHeap() extends BinomialHeap

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class BinomialHeap

  def leq(a : Element, b : Element) : (Boolean, Int) = {    require((a.isInstanceOf[Element] && b.isInstanceOf[Element]));
if ((a.n <= b.n)) {
    (true, if ((2 >= 0)) {
      2
    } else {
      0
    })
  } else {
    (false, if ((2 >= 0)) {
      2
    } else {
      0
    })
  }}

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {if (h1.isInstanceOf[ConsHeap]) {
    locally {
      val (rthen7: BinomialHeap, dthen7: Int) = if (h2.isInstanceOf[ConsHeap]) {
        locally {
          val (rthen8: BinomialHeap, dthen8: Int) = locally {
            val (rcond9: Boolean, dcond9: Int) = locally {
              val (r95: Int, d98: Int) = locally {
                val (e9: Int, d104: Int) = rank(h1.head)
                (e9, (2 + d104))
              }
              
              locally {
                val (r96: Int, d99: Int) = locally {
                  val (e8: Int, d101: Int) = rank(h2.head)
                  (e8, (2 + d101))
                }
                
                ((r95 < r96), (1 + if ((d98 >= d99)) {
                  d98
                } else {
                  d99
                }))
              }
              
            }
            
            if (rcond9) {
              locally {
                val (rthen9: ConsHeap, dthen9: Int) = locally {
                  val (r102: BinomialHeap, d107: Int) = locally {
                    val (e10: BinomialHeap, d110: Int) = merge(h1.tail, h2)
                    (e10, (2 + d110))
                  }
                  
                  (ConsHeap(h1.head, r102), (1 + if ((1 >= d107)) {
                    1
                  } else {
                    d107
                  }))
                }
                
                (rthen9, if ((dcond9 >= dthen9)) {
                  dcond9
                } else {
                  dthen9
                })
              }
              
            } else {
              locally {
                val (relse7: BinomialHeap, delse7: Int) = locally {
                  val (rcond10: Boolean, dcond10: Int) = locally {
                    val (r107: Int, d113: Int) = locally {
                      val (e12: Int, d119: Int) = rank(h2.head)
                      (e12, (2 + d119))
                    }
                    
                    locally {
                      val (r108: Int, d114: Int) = locally {
                        val (e11: Int, d116: Int) = rank(h1.head)
                        (e11, (2 + d116))
                      }
                      
                      ((r107 < r108), (1 + if ((d113 >= d114)) {
                        d113
                      } else {
                        d114
                      }))
                    }
                    
                  }
                  
                  if (rcond10) {
                    locally {
                      val (rthen10: ConsHeap, dthen10: Int) = locally {
                        val (r114: BinomialHeap, d122: Int) = locally {
                          val (e13: BinomialHeap, d125: Int) = merge(h1, h2.tail)
                          (e13, (2 + d125))
                        }
                        
                        (ConsHeap(h2.head, r114), (1 + if ((1 >= d122)) {
                          1
                        } else {
                          d122
                        }))
                      }
                      
                      (rthen10, if ((dcond10 >= dthen10)) {
                        dcond10
                      } else {
                        dthen10
                      })
                    }
                    
                  } else {
                    locally {
                      val (relse8: BinomialHeap, delse8: Int) = locally {
                        val (r119: BinomialTree, d128: Int) = locally {
                          val (e15: BinomialTree, d136: Int) = link(h1.head, h2.head)
                          (e15, (2 + d136))
                        }
                        
                        locally {
                          val (e14: BinomialHeap, d131: Int) = mergeWithCarry(r119, h1.tail, h2.tail)
                          (e14, ((1 + d131) + if ((if ((d128 >= 1)) {
                            d128
                          } else {
                            1
                          } >= 1)) {
                            if ((d128 >= 1)) {
                              d128
                            } else {
                              1
                            }
                          } else {
                            1
                          }))
                        }
                        
                      }
                      
                      (relse8, if ((dcond10 >= delse8)) {
                        dcond10
                      } else {
                        delse8
                      })
                    }
                    
                  }
                }
                
                (relse7, if ((dcond9 >= delse7)) {
                  dcond9
                } else {
                  delse7
                })
              }
              
            }
          }
          
          (rthen8, if ((1 >= dthen8)) {
            1
          } else {
            dthen8
          })
        }
        
      } else {
        (h1, if ((1 >= 0)) {
          1
        } else {
          0
        })
      }
      (rthen7, if ((1 >= dthen7)) {
        1
      } else {
        dthen7
      })
    }
    
  } else {
    (h2, if ((1 >= 0)) {
      1
    } else {
      0
    })
  }} ensuring(res13 => true)

  def removeMinTree(h : BinomialHeap) : ((OptionalTree, BinomialHeap), Int) = {if ((h.isInstanceOf[ConsHeap] && h.tail.isInstanceOf[NilHeap])) {
    ((Some(h.head), NilHeap()), if ((3 >= 3)) {
      3
    } else {
      3
    })
  } else {
    locally {
      val (relse2: (OptionalTree, BinomialHeap), delse2: Int) = if (h.isInstanceOf[ConsHeap]) {
        locally {
          val (rthen3: (OptionalTree, BinomialHeap), dthen3: Int) = locally {
            val (vr: (OptionalTree, BinomialHeap), vd: Int) = locally {
              val (vr1: (OptionalTree, BinomialHeap), vd1: Int) = locally {
                val (e2: (OptionalTree, BinomialHeap), d40: Int) = removeMinTree(h.tail)
                (e2, (2 + d40))
              }
              
              ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                (1 + vd1)
              } else {
                (1 + vd1)
              }))
            }
            
            locally {
              val (br: (OptionalTree, BinomialHeap), bd: Int) = locally {
                val (vr2: OptionalTree, vd2: Int) = (vr._1, (1 + vd))
                locally {
                  val (br2: (OptionalTree, BinomialHeap), bd2: Int) = locally {
                    val (br3: (OptionalTree, BinomialHeap), bd3: Int) = locally {
                      val dcond4 = (1 + vd2)
                      if (vr2.isInstanceOf[None]) {
                        ((Some(h.head), h.tail), if ((dcond4 >= 3)) {
                          dcond4
                        } else {
                          3
                        })
                      } else {
                        locally {
                          val (relse3: (OptionalTree, BinomialHeap), delse3: Int) = locally {
                            val (rcond5: Boolean, dcond5: Int) = locally {
                              val (r56: Element, d54: Int) = locally {
                                val (e5: Element, d61: Int) = root(h.head)
                                (e5, (2 + d61))
                              }
                              
                              locally {
                                val (r57: Element, d55: Int) = locally {
                                  val (e4: Element, d58: Int) = root(vr2.t)
                                  (e4, ((1 + d58) + (1 + vd2)))
                                }
                                
                                locally {
                                  val (e3: Boolean, d56: Int) = leq(r56, r57)
                                  (e3, ((1 + d56) + if ((d54 >= d55)) {
                                    d54
                                  } else {
                                    d55
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            if (rcond5) {
                              ((Some(h.head), h.tail), if ((dcond5 >= 3)) {
                                dcond5
                              } else {
                                3
                              })
                            } else {
                              ((Some(vr2.t), ConsHeap(h.head, vr._2)), if ((dcond5 >= (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                1
                              } else {
                                (1 + vd)
                              }))) {
                                (1 + (1 + vd2))
                              } else {
                                (1 + if ((1 >= (1 + vd))) {
                                  1
                                } else {
                                  (1 + vd)
                                })
                              }))) {
                                dcond5
                              } else {
                                (1 + if (((1 + (1 + vd2)) >= (1 + if ((1 >= (1 + vd))) {
                                  1
                                } else {
                                  (1 + vd)
                                }))) {
                                  (1 + (1 + vd2))
                                } else {
                                  (1 + if ((1 >= (1 + vd))) {
                                    1
                                  } else {
                                    (1 + vd)
                                  })
                                })
                              })
                            }
                          }
                          
                          (relse3, if ((dcond4 >= delse3)) {
                            dcond4
                          } else {
                            delse3
                          })
                        }
                        
                      }
                    }
                    
                    (br3, (bd3 + 1))
                  }
                  
                  (br2, (bd2 + 1))
                }
                
              }
              
              (br, (bd + 1))
            }
            
          }
          
          (rthen3, if ((1 >= dthen3)) {
            1
          } else {
            dthen3
          })
        }
        
      } else {
        ((None(), NilHeap()), if ((1 >= 2)) {
          1
        } else {
          2
        })
      }
      (relse2, if ((3 >= delse2)) {
        3
      } else {
        delse2
      })
    }
    
  }} ensuring(res12 => (treeNum(res12._1._2) <= treeNum(h)))

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {if (h1.isInstanceOf[ConsHeap]) {
    locally {
      val (rthen11: BinomialHeap, dthen11: Int) = if (h2.isInstanceOf[ConsHeap]) {
        locally {
          val (rthen12: BinomialHeap, dthen12: Int) = locally {
            val (rcond13: Boolean, dcond13: Int) = locally {
              val (r131: Int, d142: Int) = locally {
                val (e17: Int, d148: Int) = rank(h1.head)
                (e17, (2 + d148))
              }
              
              locally {
                val (r132: Int, d143: Int) = locally {
                  val (e16: Int, d145: Int) = rank(h2.head)
                  (e16, (2 + d145))
                }
                
                ((r131 < r132), (1 + if ((d142 >= d143)) {
                  d142
                } else {
                  d143
                }))
              }
              
            }
            
            if (rcond13) {
              locally {
                val (rthen13: BinomialHeap, dthen13: Int) = locally {
                  val (rcond14: Boolean, dcond14: Int) = locally {
                    val (r137: Int, d150: Int) = locally {
                      val (e19: Int, d156: Int) = rank(t)
                      (e19, (1 + d156))
                    }
                    
                    locally {
                      val (r138: Int, d151: Int) = locally {
                        val (e18: Int, d153: Int) = rank(h1.head)
                        (e18, (2 + d153))
                      }
                      
                      ((r137 < r138), (1 + if ((d150 >= d151)) {
                        d150
                      } else {
                        d151
                      }))
                    }
                    
                  }
                  
                  if (rcond14) {
                    locally {
                      val (rthen14: ConsHeap, dthen14: Int) = locally {
                        val (r143: ConsHeap, d158: Int) = locally {
                          val (r145: BinomialHeap, d160: Int) = locally {
                            val (e20: BinomialHeap, d163: Int) = merge(h1.tail, h2)
                            (e20, (2 + d163))
                          }
                          
                          (ConsHeap(h1.head, r145), (1 + if ((1 >= d160)) {
                            1
                          } else {
                            d160
                          }))
                        }
                        
                        (ConsHeap(t, r143), (1 + if ((0 >= d158)) {
                          0
                        } else {
                          d158
                        }))
                      }
                      
                      (rthen14, if ((dcond14 >= dthen14)) {
                        dcond14
                      } else {
                        dthen14
                      })
                    }
                    
                  } else {
                    locally {
                      val (relse11: BinomialHeap, delse11: Int) = locally {
                        val (r150: BinomialTree, d166: Int) = locally {
                          val (e22: BinomialTree, d173: Int) = link(t, h1.head)
                          (e22, (2 + d173))
                        }
                        
                        locally {
                          val (e21: BinomialHeap, d169: Int) = mergeWithCarry(r150, h1.tail, h2)
                          (e21, ((1 + d169) + if ((if ((d166 >= 1)) {
                            d166
                          } else {
                            1
                          } >= 0)) {
                            if ((d166 >= 1)) {
                              d166
                            } else {
                              1
                            }
                          } else {
                            0
                          }))
                        }
                        
                      }
                      
                      (relse11, if ((dcond14 >= delse11)) {
                        dcond14
                      } else {
                        delse11
                      })
                    }
                    
                  }
                }
                
                (rthen13, if ((dcond13 >= dthen13)) {
                  dcond13
                } else {
                  dthen13
                })
              }
              
            } else {
              locally {
                val (relse12: BinomialHeap, delse12: Int) = locally {
                  val (rcond15: Boolean, dcond15: Int) = locally {
                    val (r157: Int, d175: Int) = locally {
                      val (e24: Int, d181: Int) = rank(h2.head)
                      (e24, (2 + d181))
                    }
                    
                    locally {
                      val (r158: Int, d176: Int) = locally {
                        val (e23: Int, d178: Int) = rank(h1.head)
                        (e23, (2 + d178))
                      }
                      
                      ((r157 < r158), (1 + if ((d175 >= d176)) {
                        d175
                      } else {
                        d176
                      }))
                    }
                    
                  }
                  
                  if (rcond15) {
                    locally {
                      val (rthen15: BinomialHeap, dthen15: Int) = locally {
                        val (rcond16: Boolean, dcond16: Int) = locally {
                          val (r163: Int, d183: Int) = locally {
                            val (e26: Int, d189: Int) = rank(t)
                            (e26, (1 + d189))
                          }
                          
                          locally {
                            val (r164: Int, d184: Int) = locally {
                              val (e25: Int, d186: Int) = rank(h2.head)
                              (e25, (2 + d186))
                            }
                            
                            ((r163 < r164), (1 + if ((d183 >= d184)) {
                              d183
                            } else {
                              d184
                            }))
                          }
                          
                        }
                        
                        if (rcond16) {
                          locally {
                            val (rthen16: ConsHeap, dthen16: Int) = locally {
                              val (r169: ConsHeap, d191: Int) = locally {
                                val (r171: BinomialHeap, d193: Int) = locally {
                                  val (e27: BinomialHeap, d196: Int) = merge(h1, h2.tail)
                                  (e27, (2 + d196))
                                }
                                
                                (ConsHeap(h2.head, r171), (1 + if ((1 >= d193)) {
                                  1
                                } else {
                                  d193
                                }))
                              }
                              
                              (ConsHeap(t, r169), (1 + if ((0 >= d191)) {
                                0
                              } else {
                                d191
                              }))
                            }
                            
                            (rthen16, if ((dcond16 >= dthen16)) {
                              dcond16
                            } else {
                              dthen16
                            })
                          }
                          
                        } else {
                          locally {
                            val (relse13: BinomialHeap, delse13: Int) = locally {
                              val (r176: BinomialTree, d199: Int) = locally {
                                val (e29: BinomialTree, d206: Int) = link(t, h2.head)
                                (e29, (2 + d206))
                              }
                              
                              locally {
                                val (e28: BinomialHeap, d202: Int) = mergeWithCarry(r176, h1, h2.tail)
                                (e28, ((1 + d202) + if ((if ((d199 >= 0)) {
                                  d199
                                } else {
                                  0
                                } >= 1)) {
                                  if ((d199 >= 0)) {
                                    d199
                                  } else {
                                    0
                                  }
                                } else {
                                  1
                                }))
                              }
                              
                            }
                            
                            (relse13, if ((dcond16 >= delse13)) {
                              dcond16
                            } else {
                              delse13
                            })
                          }
                          
                        }
                      }
                      
                      (rthen15, if ((dcond15 >= dthen15)) {
                        dcond15
                      } else {
                        dthen15
                      })
                    }
                    
                  } else {
                    locally {
                      val (relse14: ConsHeap, delse14: Int) = locally {
                        val (r184: BinomialHeap, d209: Int) = locally {
                          val (r185: BinomialTree, d210: Int) = locally {
                            val (e31: BinomialTree, d218: Int) = link(h1.head, h2.head)
                            (e31, (2 + d218))
                          }
                          
                          locally {
                            val (e30: BinomialHeap, d213: Int) = mergeWithCarry(r185, h1.tail, h2.tail)
                            (e30, ((1 + d213) + if ((if ((d210 >= 1)) {
                              d210
                            } else {
                              1
                            } >= 1)) {
                              if ((d210 >= 1)) {
                                d210
                              } else {
                                1
                              }
                            } else {
                              1
                            }))
                          }
                          
                        }
                        
                        (ConsHeap(t, r184), (1 + if ((0 >= d209)) {
                          0
                        } else {
                          d209
                        }))
                      }
                      
                      (relse14, if ((dcond15 >= delse14)) {
                        dcond15
                      } else {
                        delse14
                      })
                    }
                    
                  }
                }
                
                (relse12, if ((dcond13 >= delse12)) {
                  dcond13
                } else {
                  delse12
                })
              }
              
            }
          }
          
          (rthen12, if ((1 >= dthen12)) {
            1
          } else {
            dthen12
          })
        }
        
      } else {
        locally {
          val (relse15: BinomialHeap, delse15: Int) = locally {
            val (e32: BinomialHeap, d223: Int) = insTree(t, h1)
            (e32, (1 + d223))
          }
          
          (relse15, if ((1 >= delse15)) {
            1
          } else {
            delse15
          })
        }
        
      }
      (rthen11, if ((1 >= dthen11)) {
        1
      } else {
        dthen11
      })
    }
    
  } else {
    locally {
      val (relse16: BinomialHeap, delse16: Int) = locally {
        val (e33: BinomialHeap, d226: Int) = insTree(t, h2)
        (e33, (1 + d226))
      }
      
      (relse16, if ((1 >= delse16)) {
        1
      } else {
        delse16
      })
    }
    
  }} ensuring(res11 => true)

  def root(t : BinomialTree) : (ElementAbs, Int) = {(t.elem, 1)}

  def deleteMin(h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val (vr4: (OptionalTree, BinomialHeap), vd4: Int) = locally {
      val (vr5: (OptionalTree, BinomialHeap), vd5: Int) = locally {
        val (e6: (OptionalTree, BinomialHeap), d79: Int) = removeMinTree(h)
        (e6, (1 + d79))
      }
      
      ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
        (1 + vd5)
      } else {
        (1 + vd5)
      }))
    }
    
    locally {
      val (br4: BinomialHeap, bd4: Int) = locally {
        val (vr6: OptionalTree, vd6: Int) = (vr4._1, (1 + vd4))
        locally {
          val (br6: BinomialHeap, bd6: Int) = locally {
            val (br7: BinomialHeap, bd7: Int) = locally {
              val dcond6 = (1 + if (((1 + vd6) >= (1 + (1 + vd6)))) {
                (1 + vd6)
              } else {
                (1 + (1 + vd6))
              })
              if ((vr6.isInstanceOf[Some] && vr6.t.isInstanceOf[Node])) {
                locally {
                  val (rthen6: BinomialHeap, dthen6: Int) = locally {
                    val (e7: BinomialHeap, d93: Int) = merge(vr6.t.children, vr4._2)
                    (e7, ((1 + d93) + if (((1 + (1 + vd6)) >= (1 + vd4))) {
                      (1 + (1 + vd6))
                    } else {
                      (1 + vd4)
                    }))
                  }
                  
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                (h, if ((dcond6 >= 0)) {
                  dcond6
                } else {
                  0
                })
              }
            }
            
            (br7, (bd7 + 1))
          }
          
          (br6, (bd6 + 1))
        }
        
      }
      
      (br4, (bd4 + 1))
    }
    
  }
  } ensuring(res15 => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def minTreeChildren(h : BinomialHeap) : Int = {((removeMinTree(h)._1 match {
    case (min, _) =>
      min
  }) match {
    case None() =>
      0
    case Some(Node(_, _, ch)) =>
      treeNum(ch)
  })}

  def rank(t : BinomialTree) : (Int, Int) = {(t.rank, 1)}

  def link(t1 : BinomialTree, t2 : BinomialTree) : (BinomialTree, Int) = {locally {
    val (rcond1: Boolean, dcond1: Int) = locally {
      val (e1: Boolean, d6: Int) = leq(t1.elem, t2.elem)
      (e1, (2 + d6))
    }
    
    if (rcond1) {
      (Node((t1.rank + 1), t1.elem, ConsHeap(t2, t1.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    } else {
      (Node((t1.rank + 1), t2.elem, ConsHeap(t1, t2.children)), if ((dcond1 >= 3)) {
        dcond1
      } else {
        3
      })
    }
  }
  }

  def insTree(t : BinomialTree, h : BinomialHeap) : (BinomialHeap, Int) = {if (h.isInstanceOf[ConsHeap]) {
    locally {
      val (rthen17: BinomialHeap, dthen17: Int) = locally {
        val (rcond18: Boolean, dcond18: Int) = locally {
          val (r199: Int, d228: Int) = locally {
            val (e35: Int, d234: Int) = rank(t)
            (e35, (1 + d234))
          }
          
          locally {
            val (r200: Int, d229: Int) = locally {
              val (e34: Int, d231: Int) = rank(h.head)
              (e34, (2 + d231))
            }
            
            ((r199 < r200), (1 + if ((d228 >= d229)) {
              d228
            } else {
              d229
            }))
          }
          
        }
        
        if (rcond18) {
          (ConsHeap(t, h), if ((dcond18 >= 1)) {
            dcond18
          } else {
            1
          })
        } else {
          locally {
            val (relse17: BinomialHeap, delse17: Int) = locally {
              val (rcond19: Boolean, dcond19: Int) = locally {
                val (r206: Int, d237: Int) = locally {
                  val (e37: Int, d243: Int) = rank(t)
                  (e37, (1 + d243))
                }
                
                locally {
                  val (r207: Int, d238: Int) = locally {
                    val (e36: Int, d240: Int) = rank(h.head)
                    (e36, (2 + d240))
                  }
                  
                  ((r206 > r207), (1 + if ((d237 >= d238)) {
                    d237
                  } else {
                    d238
                  }))
                }
                
              }
              
              if (rcond19) {
                locally {
                  val (rthen19: ConsHeap, dthen19: Int) = locally {
                    val (r212: BinomialHeap, d245: Int) = locally {
                      val (e38: BinomialHeap, d248: Int) = insTree(t, h.tail)
                      (e38, (2 + d248))
                    }
                    
                    (ConsHeap(h.head, r212), (1 + if ((1 >= d245)) {
                      1
                    } else {
                      d245
                    }))
                  }
                  
                  (rthen19, if ((dcond19 >= dthen19)) {
                    dcond19
                  } else {
                    dthen19
                  })
                }
                
              } else {
                locally {
                  val (relse18: BinomialHeap, delse18: Int) = locally {
                    val (r217: BinomialTree, d251: Int) = locally {
                      val (e40: BinomialTree, d257: Int) = link(t, h.head)
                      (e40, (2 + d257))
                    }
                    
                    locally {
                      val (e39: BinomialHeap, d253: Int) = insTree(r217, h.tail)
                      (e39, ((1 + d253) + if ((d251 >= 1)) {
                        d251
                      } else {
                        1
                      }))
                    }
                    
                  }
                  
                  (relse18, if ((dcond19 >= delse18)) {
                    dcond19
                  } else {
                    delse18
                  })
                }
                
              }
            }
            
            (relse17, if ((dcond18 >= delse17)) {
              dcond18
            } else {
              delse17
            })
          }
          
        }
      }
      
      (rthen17, if ((1 >= dthen17)) {
        1
      } else {
        dthen17
      })
    }
    
  } else {
    (ConsHeap(t, NilHeap()), if ((1 >= 2)) {
      1
    } else {
      2
    })
  }} ensuring(res14 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: merge template --> (res13._2 ? (((a?1 * treeNum(h1)) + (b?1 * treeNum(h2))) + c?))
Function: removeMinTree template --> (res12._2 ? ((a?2 * treeNum(h)) + b?2))
Function: mergeWithCarry template --> (res11._2 ? (((d? * treeNum(h1)) + (e? * treeNum(h2))) + f?))
Function: deleteMin template --> (res15._2 ? (((a?3 * minTreeChildren(h)) + (b?3 * treeNum(h))) + c?1))
Function: insTree template --> (res14._2 ? ((a? * treeNum(h)) + b?))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(treeNum, link, insTree, removeMinTree, minTreeChildren, merge, mergeWithCarry, deleteMin)
[[34m Info  [0m] - considering function insTree...
[[34m Info  [0m] Body: if (h.isInstanceOf[ConsHeap])
            (let (rthen17,dthen17 := (let (rcond18,dcond18 := (let (r199,d228 := (let (e35,d234 := rank(t)) in
              (e35, (1 + d234)))) in
              (let (r200,d229 := (let (e34,d231 := rank(h.head)) in
                (e34, (2 + d231)))) in
                ((r199 < r200), (1 + if ((d228 ? d229))
                  d228
                else
                  d229))))) in
              if (rcond18)
                (ConsHeap(t, h), if ((dcond18 ? 1))
                  dcond18
                else
                  1)
              else
                (let (relse17,delse17 := (let (rcond19,dcond19 := (let (r206,d237 := (let (e37,d243 := rank(t)) in
                  (e37, (1 + d243)))) in
                  (let (r207,d238 := (let (e36,d240 := rank(h.head)) in
                    (e36, (2 + d240)))) in
                    ((r206 > r207), (1 + if ((d237 ? d238))
                      d237
                    else
                      d238))))) in
                  if (rcond19)
                    (let (rthen19,dthen19 := (let (r212,d245 := (let (e38,d248 := insTree(t, h.tail)) in
                      (e38, (2 + d248)))) in
                      (ConsHeap(h.head, r212), (1 + if ((1 ? d245))
                        1
                      else
                        d245)))) in
                      (rthen19, if ((dcond19 ? dthen19))
                        dcond19
                      else
                        dthen19))
                  else
                    (let (relse18,delse18 := (let (r217,d251 := (let (e40,d257 := link(t, h.head)) in
                      (e40, (2 + d257)))) in
                      (let (e39,d253 := insTree(r217, h.tail)) in
                        (e39, ((1 + d253) + if ((d251 ? 1))
                          d251
                        else
                          1))))) in
                      (relse18, if ((dcond19 ? delse18))
                        dcond19
                      else
                        delse18)))) in
                  (relse17, if ((dcond18 ? delse17))
                    dcond18
                  else
                    delse17)))) in
              (rthen17, if ((1 ? dthen17))
                1
              else
                dthen17))
          else
            (ConsHeap(t, NilHeap()), if ((1 ? 2))
              1
            else
              2)
[[34m Info  [0m] Post: true
falttened Body: ((res14 == ifres) && ((ci && (ci == h.isInstanceOf[ConsHeap]) && (ifres == tp) && (tp == (rthen17, ifres1)) && (r199 == e35) && (tres6 == r225) && (r225 == rank(t)) && (tres5 == r226) && (cs == h.head) && (r226 == rank(cs)) && (!(rcond18) || (r199 < r200)) && ((r199 >= r200) || rcond18) && (d234 == ts) && (ts == tres6._2) && (rthen17 == ts1) && (ts1 == ifres2._1) && (e34 == ts2) && (ts2 == tres5._1) && (((d228 >= d229) && (ifres11 == d228)) || ((d228 < d229) && (ifres11 == d229))) && (d231 == ts3) && (ts3 == tres5._2) && (d228 == (1 + d234)) && (((1 >= dthen17) && (ifres1 == 1)) || ((1 < dthen17) && (ifres1 == dthen17))) && (d229 == (2 + d231)) && (e35 == ts4) && (ts4 == tres6._1) && (r200 == e34) && ((rcond18 && (ifres2 == tp1) && (cc == ConsHeap(t, h)) && (tp1 == (cc, ifres3)) && (((dcond18 >= 1) && (ifres3 == dcond18)) || ((dcond18 < 1) && (ifres3 == 1)))) || (!(rcond18) && (ifres2 == tp2) && (tp2 == (relse17, ifres4)) && (r206 == e37) && ((rcond19 && (ifres5 == tp3) && (tp3 == (rthen19, ifres6)) && (((dcond19 >= dthen19) && (ifres6 == dcond19)) || ((dcond19 < dthen19) && (ifres6 == dthen19))) && (d248 == ts5) && (ts5 == tres._2) && (dthen19 == (1 + ifres7)) && (d245 == (2 + d248)) && (((1 >= d245) && (ifres7 == 1)) || ((1 < d245) && (ifres7 == d245))) && (r212 == e38) && (tres == r227) && (cs1 == h.tail) && (r227 == insTree(t, cs1)) && (rthen19 == cc1) && (cs2 == h.head) && (cc1 == ConsHeap(cs2, r212)) && (e38 == ts6) && (ts6 == tres._1)) || (!(rcond19) && (ifres5 == tp4) && (tp4 == (relse18, ifres8)) && (relse18 == e39) && (d251 == (2 + d257)) && (r217 == e40) && (e39 == ts7) && (ts7 == tres1._1) && (e40 == ts8) && (ts8 == tres2._1) && (d257 == ts9) && (ts9 == tres2._2) && (((d251 >= 1) && (ifres9 == d251)) || ((d251 < 1) && (ifres9 == 1))) && (d253 == ts10) && (ts10 == tres1._2) && (delse18 == ((1 + d253) + ifres9)) && (tres1 == r228) && (cs3 == h.tail) && (r228 == insTree(r217, cs3)) && (((dcond19 >= delse18) && (ifres8 == dcond19)) || ((dcond19 < delse18) && (ifres8 == delse18))) && (tres2 == r229) && (cs4 == h.head) && (r229 == link(t, cs4)))) && (tres4 == r230) && (r230 == rank(t)) && (e36 == ts11) && (ts11 == tres3._1) && (((dcond18 >= delse17) && (ifres4 == dcond18)) || ((dcond18 < delse17) && (ifres4 == delse17))) && (delse17 == ts12) && (ts12 == ifres5._2) && (d240 == ts13) && (ts13 == tres3._2) && (dcond19 == (1 + ifres10)) && (!(rcond19) || (r206 > r207)) && ((r206 <= r207) || rcond19) && (relse17 == ts14) && (ts14 == ifres5._1) && (d238 == (2 + d240)) && (((d237 >= d238) && (ifres10 == d237)) || ((d237 < d238) && (ifres10 == d238))) && (e37 == ts15) && (ts15 == tres4._1) && (d237 == (1 + d243)) && (d243 == ts16) && (ts16 == tres4._2) && (r207 == e36) && (tres3 == r231) && (cs5 == h.head) && (r231 == rank(cs5)))) && (dcond18 == (1 + ifres11)) && (dthen17 == ts17) && (ts17 == ifres2._2)) || (!(ci1) && (ci1 == h.isInstanceOf[ConsHeap]) && (ifres == tp5) && (cc2 == NilHeap()) && (cc3 == ConsHeap(t, cc2)) && (tp5 == (cc3, ifres12)) && (((1 >= 2) && (ifres12 == 1)) || ((1 < 2) && (ifres12 == 2))))))
Flattened Post: ((ts18 > ((a? * r232) + b?)) && (ts18 == res14._2) && (r232 == treeNum(h)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + 0) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 0
solving...
solved... in 0.013s
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + -4) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 11 + 9
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/8
Unrolled calls: Set((r226 == rank(cs)), (r232 == treeNum(h)), (r225 == rank(t)))
Inlining (r226 == rank(cs))
Creating VC for treeNum
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function treeNum : (((a?5 * #res) + a?4) ? 0)
Unrolling (r232 == treeNum(h))
Inlining (r225 == rank(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.008s
candidate Invariants
insTree-->((((8 * res14._2) + (0 * treeNum(h))) + -1) ? 0)
treeNum-->(((0 * #res) + 31) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.008s
candidate Invariants
insTree-->((((0 * treeNum(h)) + (1 * res14._2)) + -5) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 26
# of atomic predicates: 15 + 18
solving...
solved... in 0.01s
candidate Invariants
insTree-->((((-5 * treeNum(h)) + (1 * res14._2)) + -3) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 10 + 33
solving...
solved... in 0.015s
candidate Invariants
insTree-->((((-4 * treeNum(h)) + (1 * res14._2)) + -5) ? 0)
treeNum-->(((-5 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 26
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 24 + 43
solving...
solved... in 0.033s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/9
Unrolled calls: Set((r230 == rank(t)), (r237 == treeNum(cs3)), (r229 == link(t, cs4)), (r231 == rank(cs5)))
Inlining (r230 == rank(t))
Unrolling (r237 == treeNum(cs3))
Inlining (r229 == link(t, cs4))
Inlining (r231 == rank(cs5))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.007s
candidate Invariants
insTree-->((((0 * treeNum(h)) + (8 * res14._2)) + -1) ? 0)
treeNum-->(((0 * #res) + 31) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.007s
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + -5) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 151
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 18 + 18
solving...
solved... in 0.009s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -3) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 12 + 36
solving...
solved... in 0.015s
candidate Invariants
insTree-->((((1 * res14._2) + (-3 * treeNum(h))) + -3) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
[[34m Info  [0m] Number of equal calls: 37
# of atomic predicates: 17 + 48
solving...
solved... in 0.017s
candidate Invariants
insTree-->((((-7 * treeNum(h)) + (1 * res14._2)) + -3) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
[[34m Info  [0m] Number of equal calls: 38
# of atomic predicates: 19 + 65
solving...
solved... in 0.035s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/7
Unrolled calls: Set((r238 == treeNum(cs1)), (r245 == leq(cs12, cs13)))
Unrolling (r238 == treeNum(cs1))
Inlining (r245 == leq(cs12, cs13))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (0 * treeNum(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
insTree-->((((8 * res14._2) + (0 * treeNum(h))) + -1) ? 0)
treeNum-->(((0 * #res) + 31) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.007s
candidate Invariants
insTree-->((((0 * treeNum(h)) + (1 * res14._2)) + -5) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 151
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 19 + 18
solving...
solved... in 0.016s
candidate Invariants
insTree-->((((2 * res14._2) + (1 * treeNum(h))) + -6) ? 0)
treeNum-->(((33 * #res) + -2) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 160
[[34m Info  [0m] Number of equal calls: 28
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 29 + 37
solving...
solved... in 0.013s
candidate Invariants
insTree-->((((-4 * treeNum(h)) + (1 * res14._2)) + -3) ? 0)
treeNum-->(((-1 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 197
[[34m Info  [0m] Number of equal calls: 38
# of atomic predicates: 18 + 66
solving...
solved... in 0.018s
candidate Invariants
insTree-->((((-8 * treeNum(h)) + (1 * res14._2)) + -3) ? 0)
treeNum-->(((-1 * #res) + -1) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 12 + 84
solving...
solved... in 0.018s
candidate Invariants
insTree-->((((1 * res14._2) + (-8 * treeNum(h))) + -5) ? 0)
treeNum-->(((-1 * #res) + -1) ? 0)
Nesting level: a?-->1
Nesting level: b?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b? Initial upperbound: 12
Found new upper bound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: insTree --> ((((1 * res14._2) + (-7 * treeNum(h))) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: treeNum --> (((-3 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function removeMinTree...
[[34m Info  [0m] Body: if ((h.isInstanceOf[ConsHeap] ? h.tail.isInstanceOf[NilHeap]))
            ((Some(h.head), NilHeap()), if ((3 ? 3))
              3
            else
              3)
          else
            (let (relse2,delse2 := if (h.isInstanceOf[ConsHeap])
              (let (rthen3,dthen3 := (let (vr,vd := (let (vr1,vd1 := (let (e2,d40 := removeMinTree(h.tail)) in
                (e2, (2 + d40)))) in
                ((vr1._1, vr1._2), (2 + if (((1 + vd1) ? (1 + vd1)))
                  (1 + vd1)
                else
                  (1 + vd1))))) in
                (let (br,bd := (let (vr2,vd2 := (vr._1, (1 + vd))) in
                  (let (br2,bd2 := (let (br3,bd3 := (let (dcond4 := (1 + vd2)) in
                    if (vr2.isInstanceOf[None])
                      ((Some(h.head), h.tail), if ((dcond4 ? 3))
                        dcond4
                      else
                        3)
                    else
                      (let (relse3,delse3 := (let (rcond5,dcond5 := (let (r56,d54 := (let (e5,d61 := root(h.head)) in
                        (e5, (2 + d61)))) in
                        (let (r57,d55 := (let (e4,d58 := root(vr2.t)) in
                          (e4, ((1 + d58) + (1 + vd2))))) in
                          (let (e3,d56 := leq(r56, r57)) in
                            (e3, ((1 + d56) + if ((d54 ? d55))
                              d54
                            else
                              d55)))))) in
                        if (rcond5)
                          ((Some(h.head), h.tail), if ((dcond5 ? 3))
                            dcond5
                          else
                            3)
                        else
                          ((Some(vr2.t), ConsHeap(h.head, vr._2)), if ((dcond5 ? (1 + if (((1 + (1 + vd2)) ? (1 + if ((1 ? (1 + vd)))
                            1
                          else
                            (1 + vd))))
                            (1 + (1 + vd2))
                          else
                            (1 + if ((1 ? (1 + vd)))
                              1
                            else
                              (1 + vd)))))
                            dcond5
                          else
                            (1 + if (((1 + (1 + vd2)) ? (1 + if ((1 ? (1 + vd)))
                              1
                            else
                              (1 + vd))))
                              (1 + (1 + vd2))
                            else
                              (1 + if ((1 ? (1 + vd)))
                                1
                              else
                                (1 + vd)))))) in
                        (relse3, if ((dcond4 ? delse3))
                          dcond4
                        else
                          delse3)))) in
                    (br3, (bd3 + 1)))) in
                    (br2, (bd2 + 1))))) in
                  (br, (bd + 1))))) in
                (rthen3, if ((1 ? dthen3))
                  1
                else
                  dthen3))
            else
              ((None(), NilHeap()), if ((1 ? 2))
                1
              else
                2)) in
              (relse2, if ((3 ? delse2))
                3
              else
                delse2))
[[34m Info  [0m] Post: (treeNum(res12._1._2) ? treeNum(h))
falttened Body: ((res12 == ifres23) && ((ci10 && (ci10 == h.isInstanceOf[ConsHeap]) && ci11 && (cs26 == h.tail) && (ci11 == cs26.isInstanceOf[NilHeap]) && (ifres23 == tp15) && (tp15 == (tp14, ifres24)) && (cc8 == Some(cs27)) && (cs27 == h.head) && (tp14 == (cc8, cc9)) && (cc9 == NilHeap()) && (((3 >= 3) && (ifres24 == 3)) || ((3 < 3) && (ifres24 == 3)))) || (((!(ci12) && (ci12 == h.isInstanceOf[ConsHeap])) || (!(ci13) && (cs28 == h.tail) && (ci13 == cs28.isInstanceOf[NilHeap]))) && (ifres23 == tp16) && (tp16 == (relse2, ifres25)) && ((ci14 && (ci14 == h.isInstanceOf[ConsHeap]) && (ifres26 == tp17) && (tp17 == (rthen3, ifres27)) && (vr1 == e2) && ((((1 + vd1) >= (1 + vd1)) && (ifres47 == (1 + vd1))) || (((1 + vd1) < (1 + vd1)) && (ifres47 == (1 + vd1)))) && (((1 >= dthen3) && (ifres27 == 1)) || ((1 < dthen3) && (ifres27 == dthen3))) && (e2 == ts45) && (ts45 == tres11._1) && (vd1 == (2 + d40)) && (br2 == br3) && (bd2 == (bd3 + 1)) && (bd == (bd2 + 1)) && (dcond4 == (1 + vd2)) && (tres11 == r261) && (cs29 == h.tail) && (r261 == removeMinTree(cs29)) && (dthen3 == (bd + 1)) && (vd == (2 + ifres47)) && (br3 == ts46) && (ts46 == ifres28._1) && (d40 == ts47) && (ts47 == tres11._2) && (bd3 == ts48) && (ts48 == ifres28._2) && (br == br2) && (vd2 == (1 + vd)) && (vr == tp18) && (ts49 == vr1._1) && (ts50 == vr1._2) && (tp18 == (ts49, ts50)) && (rthen3 == br) && ((ci15 && (ci15 == vr2.isInstanceOf[None]) && (ifres28 == tp20) && (cs31 == h.tail) && (tp20 == (tp19, ifres29)) && (tp19 == (cc10, cs31)) && (cs30 == h.head) && (cc10 == Some(cs30)) && (((dcond4 >= 3) && (ifres29 == dcond4)) || ((dcond4 < 3) && (ifres29 == 3)))) || (!(ci16) && (ci16 == vr2.isInstanceOf[None]) && (ifres28 == tp21) && (tp21 == (relse3, ifres30)) && (d58 == ts51) && (ts51 == tres9._2) && (d55 == ((1 + d58) + (1 + vd2))) && (tres9 == r262) && (cs32 == vr2.t) && (r262 == root(cs32)) && (d54 == (2 + d61)) && (((d54 >= d55) && (ifres46 == d54)) || ((d54 < d55) && (ifres46 == d55))) && (tres8 == r263) && (r263 == leq(r56, r57)) && (r57 == e4) && (relse3 == ts52) && (ts52 == ifres31._1) && ((rcond5 && (ifres31 == tp23) && (tp22 == (cc11, cs34)) && (tp23 == (tp22, ifres32)) && (cs34 == h.tail) && (cs33 == h.head) && (cc11 == Some(cs33)) && (((dcond5 >= 3) && (ifres32 == dcond5)) || ((dcond5 < 3) && (ifres32 == 3)))) || (!(rcond5) && (ifres31 == tp25) && (cc13 == ConsHeap(cs36, ts53)) && (cs35 == vr2.t) && (tp25 == (tp24, ifres33)) && (cc12 == Some(cs35)) && (ts53 == vr._2) && (tp24 == (cc12, cc13)) && (cs36 == h.head) && (((dcond5 >= (1 + ifres34)) && ((((1 + (1 + vd2)) >= (1 + ifres35)) && (((1 >= (1 + vd)) && (ifres35 == 1)) || ((1 < (1 + vd)) && (ifres35 == (1 + vd)))) && (ifres34 == (1 + (1 + vd2)))) || (((1 + (1 + vd2)) < (1 + ifres36)) && (((1 >= (1 + vd)) && (ifres36 == 1)) || ((1 < (1 + vd)) && (ifres36 == (1 + vd)))) && (ifres34 == (1 + ifres37)) && (((1 >= (1 + vd)) && (ifres37 == 1)) || ((1 < (1 + vd)) && (ifres37 == (1 + vd)))))) && (ifres33 == dcond5)) || ((dcond5 < (1 + ifres38)) && ((((1 + (1 + vd2)) >= (1 + ifres39)) && (((1 >= (1 + vd)) && (ifres39 == 1)) || ((1 < (1 + vd)) && (ifres39 == (1 + vd)))) && (ifres38 == (1 + (1 + vd2)))) || (((1 + (1 + vd2)) < (1 + ifres40)) && (((1 >= (1 + vd)) && (ifres40 == 1)) || ((1 < (1 + vd)) && (ifres40 == (1 + vd)))) && (ifres38 == (1 + ifres41)) && (((1 >= (1 + vd)) && (ifres41 == 1)) || ((1 < (1 + vd)) && (ifres41 == (1 + vd)))))) && (ifres33 == (1 + ifres42)) && ((((1 + (1 + vd2)) >= (1 + ifres43)) && (((1 >= (1 + vd)) && (ifres43 == 1)) || ((1 < (1 + vd)) && (ifres43 == (1 + vd)))) && (ifres42 == (1 + (1 + vd2)))) || (((1 + (1 + vd2)) < (1 + ifres44)) && (((1 >= (1 + vd)) && (ifres44 == 1)) || ((1 < (1 + vd)) && (ifres44 == (1 + vd)))) && (ifres42 == (1 + ifres45)) && (((1 >= (1 + vd)) && (ifres45 == 1)) || ((1 < (1 + vd)) && (ifres45 == (1 + vd)))))))))) && (d61 == ts54) && (ts54 == tres10._2) && (!(rcond5) || e3) && (!(e3) || rcond5) && (e5 == ts55) && (ts55 == tres10._1) && (e4 == ts56) && (ts56 == tres9._1) && (dcond5 == ((1 + d56) + ifres46)) && (!(e3) || (ts57 && (ts57 == tres8._1))) && ((!(ts58) && (ts58 == tres8._1)) || e3) && (tres10 == r264) && (cs37 == h.head) && (r264 == root(cs37)) && (r56 == e5) && (((dcond4 >= delse3) && (ifres30 == dcond4)) || ((dcond4 < delse3) && (ifres30 == delse3))) && (d56 == ts59) && (ts59 == tres8._2) && (delse3 == ts60) && (ts60 == ifres31._2))) && (vr2 == ts61) && (ts61 == vr._1)) || (!(ci17) && (ci17 == h.isInstanceOf[ConsHeap]) && (ifres26 == tp27) && (cc14 == None()) && (cc15 == NilHeap()) && (tp26 == (cc14, cc15)) && (tp27 == (tp26, ifres48)) && (((1 >= 2) && (ifres48 == 1)) || ((1 < 2) && (ifres48 == 2))))) && (relse2 == ts62) && (ts62 == ifres26._1) && (delse2 == ts63) && (ts63 == ifres26._2) && (((3 >= delse2) && (ifres25 == 3)) || ((3 < delse2) && (ifres25 == delse2))))))
Flattened Post: (((r265 > r266) && (ts64 == res12._1) && (ts65 == ts64._2) && (r265 == treeNum(ts65)) && (r266 == treeNum(h))) || ((ts66 > ((a?2 * r267) + b?2)) && (ts66 == res12._2) && (r267 == treeNum(h))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeMinTree-->((((0 * treeNum(h)) + (1 * res12._2)) + 0) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 12 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/9
Unrolled calls: Set((r268 == treeNum(ts68)), (r262 == root(cs32)), (r264 == root(cs37)), (r263 == leq(r56, r57)), (r267 == treeNum(h)), (r269 == treeNum(cs29)))
Inlining (r263 == leq(r56, r57))
Inlining (r264 == root(cs37))
Creating VC for treeNum
Unrolling (r269 == treeNum(cs29))
Unrolling (r267 == treeNum(h))
Inlining (r262 == root(cs32))
Unrolling (r268 == treeNum(ts68))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeMinTree-->((((1 * res12._2) + (0 * treeNum(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
removeMinTree-->((((0 * treeNum(h)) + (8 * res12._2)) + -1) ? 0)
treeNum-->(((0 * #res) + 39) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.007s
candidate Invariants
removeMinTree-->((((0 * treeNum(h)) + (1 * res12._2)) + -6) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 7 + 18
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/8
Unrolled calls: Set((r266 == treeNum(h)), (r265 == treeNum(ts65)))
Unrolling (r266 == treeNum(h))
Unrolling (r265 == treeNum(ts65))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeMinTree-->((((0 * treeNum(h)) + (1 * res12._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
removeMinTree-->((((8 * res12._2) + (0 * treeNum(h))) + -1) ? 0)
treeNum-->(((0 * #res) + 39) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 10
solving...
solved... in 0.006s
candidate Invariants
removeMinTree-->((((1 * res12._2) + (0 * treeNum(h))) + -6) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 123
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 27 + 18
solving...
solved... in 0.01s
candidate Invariants
removeMinTree-->((((-18 * treeNum(h)) + (1 * res12._2)) + -4) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 12 + 45
solving...
solved... in 0.013s
candidate Invariants
removeMinTree-->((((-11 * treeNum(h)) + (1 * res12._2)) + -4) ? 0)
treeNum-->(((-1 * #res) + -1) ? 0)
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 178
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 27 + 57
solving...
solved... in 0.03s
candidate Invariants
removeMinTree-->((((-16 * treeNum(h)) + (1 * res12._2)) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 16
Found new lower bound: 8
Found new lower bound: 12
Found new lower bound: 14
Found new upper bound: 15
Minimizing variable: b?2 Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: removeMinTree --> ((((-15 * treeNum(h)) + (1 * res12._2)) + -3) <= 0)
[[34m Info  [0m] - Found inductive invariant: treeNum --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function merge...
[[34m Info  [0m] Body: if (h1.isInstanceOf[ConsHeap])
            (let (rthen7,dthen7 := if (h2.isInstanceOf[ConsHeap])
              (let (rthen8,dthen8 := (let (rcond9,dcond9 := (let (r95,d98 := (let (e9,d104 := rank(h1.head)) in
                (e9, (2 + d104)))) in
                (let (r96,d99 := (let (e8,d101 := rank(h2.head)) in
                  (e8, (2 + d101)))) in
                  ((r95 < r96), (1 + if ((d98 ? d99))
                    d98
                  else
                    d99))))) in
                if (rcond9)
                  (let (rthen9,dthen9 := (let (r102,d107 := (let (e10,d110 := merge(h1.tail, h2)) in
                    (e10, (2 + d110)))) in
                    (ConsHeap(h1.head, r102), (1 + if ((1 ? d107))
                      1
                    else
                      d107)))) in
                    (rthen9, if ((dcond9 ? dthen9))
                      dcond9
                    else
                      dthen9))
                else
                  (let (relse7,delse7 := (let (rcond10,dcond10 := (let (r107,d113 := (let (e12,d119 := rank(h2.head)) in
                    (e12, (2 + d119)))) in
                    (let (r108,d114 := (let (e11,d116 := rank(h1.head)) in
                      (e11, (2 + d116)))) in
                      ((r107 < r108), (1 + if ((d113 ? d114))
                        d113
                      else
                        d114))))) in
                    if (rcond10)
                      (let (rthen10,dthen10 := (let (r114,d122 := (let (e13,d125 := merge(h1, h2.tail)) in
                        (e13, (2 + d125)))) in
                        (ConsHeap(h2.head, r114), (1 + if ((1 ? d122))
                          1
                        else
                          d122)))) in
                        (rthen10, if ((dcond10 ? dthen10))
                          dcond10
                        else
                          dthen10))
                    else
                      (let (relse8,delse8 := (let (r119,d128 := (let (e15,d136 := link(h1.head, h2.head)) in
                        (e15, (2 + d136)))) in
                        (let (e14,d131 := mergeWithCarry(r119, h1.tail, h2.tail)) in
                          (e14, ((1 + d131) + if ((if ((d128 ? 1))
                            d128
                          else
                            1 ? 1))
                            if ((d128 ? 1))
                              d128
                            else
                              1
                          else
                            1))))) in
                        (relse8, if ((dcond10 ? delse8))
                          dcond10
                        else
                          delse8)))) in
                    (relse7, if ((dcond9 ? delse7))
                      dcond9
                    else
                      delse7)))) in
                (rthen8, if ((1 ? dthen8))
                  1
                else
                  dthen8))
            else
              (h1, if ((1 ? 0))
                1
              else
                0)) in
              (rthen7, if ((1 ? dthen7))
                1
              else
                dthen7))
          else
            (h2, if ((1 ? 0))
              1
            else
              0)
[[34m Info  [0m] Post: true
falttened Body: ((res13 == ifres58) && ((ci30 && (ci30 == h1.isInstanceOf[ConsHeap]) && (ifres58 == tp32) && (tp32 == (rthen7, ifres59)) && ((ci31 && (ci31 == h2.isInstanceOf[ConsHeap]) && (ifres60 == tp33) && (tp33 == (rthen8, ifres61)) && (tres18 == r288) && (cs50 == h2.head) && (r288 == rank(cs50)) && (!(rcond9) || (r95 < r96)) && ((r95 >= r96) || rcond9) && (e9 == ts81) && (ts81 == tres19._1) && (d104 == ts82) && (ts82 == tres19._2) && (r95 == e9) && (d99 == (2 + d101)) && (rthen8 == ts83) && (ts83 == ifres62._1) && (((d98 >= d99) && (ifres75 == d98)) || ((d98 < d99) && (ifres75 == d99))) && (tres19 == r289) && (cs51 == h1.head) && (r289 == rank(cs51)) && ((rcond9 && (ifres62 == tp34) && (tp34 == (rthen9, ifres63)) && (rthen9 == cc16) && (cs52 == h1.head) && (cc16 == ConsHeap(cs52, r102)) && (tres12 == r290) && (cs53 == h1.tail) && (r290 == merge(cs53, h2)) && (d110 == ts84) && (ts84 == tres12._2) && (e10 == ts85) && (ts85 == tres12._1) && (d107 == (2 + d110)) && (r102 == e10) && (((1 >= d107) && (ifres64 == 1)) || ((1 < d107) && (ifres64 == d107))) && (dthen9 == (1 + ifres64)) && (((dcond9 >= dthen9) && (ifres63 == dcond9)) || ((dcond9 < dthen9) && (ifres63 == dthen9)))) || (!(rcond9) && (ifres62 == tp35) && (tp35 == (relse7, ifres65)) && (d119 == ts86) && (ts86 == tres17._2) && (tres16 == r291) && (cs54 == h1.head) && (r291 == rank(cs54)) && (e11 == ts87) && (ts87 == tres16._1) && (((dcond9 >= delse7) && (ifres65 == dcond9)) || ((dcond9 < delse7) && (ifres65 == delse7))) && (e12 == ts88) && (ts88 == tres17._1) && (d113 == (2 + d119)) && ((rcond10 && (ifres66 == tp36) && (tp36 == (rthen10, ifres67)) && (((dcond10 >= dthen10) && (ifres67 == dcond10)) || ((dcond10 < dthen10) && (ifres67 == dthen10))) && (tres13 == r292) && (cs55 == h2.tail) && (r292 == merge(h1, cs55)) && (((1 >= d122) && (ifres68 == 1)) || ((1 < d122) && (ifres68 == d122))) && (d122 == (2 + d125)) && (rthen10 == cc17) && (cs56 == h2.head) && (cc17 == ConsHeap(cs56, r114)) && (dthen10 == (1 + ifres68)) && (e13 == ts89) && (ts89 == tres13._1) && (d125 == ts90) && (ts90 == tres13._2) && (r114 == e13)) || (!(rcond10) && (ifres66 == tp37) && (tp37 == (relse8, ifres69)) && (r119 == e15) && (d131 == ts91) && (ts91 == tres14._2) && (tres14 == r293) && (cs57 == h1.tail) && (cs58 == h2.tail) && (r293 == mergeWithCarry(r119, cs57, cs58)) && (relse8 == e14) && (d128 == (2 + d136)) && (e14 == ts92) && (ts92 == tres14._1) && (e15 == ts93) && (ts93 == tres15._1) && (((dcond10 >= delse8) && (ifres69 == dcond10)) || ((dcond10 < delse8) && (ifres69 == delse8))) && (tres15 == r294) && (cs59 == h1.head) && (cs60 == h2.head) && (r294 == link(cs59, cs60)) && (delse8 == ((1 + d131) + ifres70)) && (((ifres71 >= 1) && (((d128 >= 1) && (ifres71 == d128)) || ((d128 < 1) && (ifres71 == 1))) && (ifres70 == ifres72) && (((d128 >= 1) && (ifres72 == d128)) || ((d128 < 1) && (ifres72 == 1)))) || ((ifres73 < 1) && (((d128 >= 1) && (ifres73 == d128)) || ((d128 < 1) && (ifres73 == 1))) && (ifres70 == 1))) && (d136 == ts94) && (ts94 == tres15._2))) && (tres17 == r295) && (cs61 == h2.head) && (r295 == rank(cs61)) && (relse7 == ts95) && (ts95 == ifres66._1) && (d116 == ts96) && (ts96 == tres16._2) && (d114 == (2 + d116)) && (dcond10 == (1 + ifres74)) && (((d113 >= d114) && (ifres74 == d113)) || ((d113 < d114) && (ifres74 == d114))) && (r107 == e12) && (!(rcond10) || (r107 < r108)) && ((r107 >= r108) || rcond10) && (r108 == e11) && (delse7 == ts97) && (ts97 == ifres66._2))) && (r96 == e8) && (e8 == ts98) && (ts98 == tres18._1) && (dthen8 == ts99) && (ts99 == ifres62._2) && (d101 == ts100) && (ts100 == tres18._2) && (d98 == (2 + d104)) && (((1 >= dthen8) && (ifres61 == 1)) || ((1 < dthen8) && (ifres61 == dthen8))) && (dcond9 == (1 + ifres75))) || (!(ci32) && (ci32 == h2.isInstanceOf[ConsHeap]) && (ifres60 == tp38) && (tp38 == (h1, ifres76)) && (((1 >= 0) && (ifres76 == 1)) || ((1 < 0) && (ifres76 == 0))))) && (rthen7 == ts101) && (ts101 == ifres60._1) && (dthen7 == ts102) && (ts102 == ifres60._2) && (((1 >= dthen7) && (ifres59 == 1)) || ((1 < dthen7) && (ifres59 == dthen7)))) || (!(ci33) && (ci33 == h1.isInstanceOf[ConsHeap]) && (ifres58 == tp39) && (tp39 == (h2, ifres77)) && (((1 >= 0) && (ifres77 == 1)) || ((1 < 0) && (ifres77 == 0))))))
Flattened Post: ((ts103 > (((a?1 * r296) + (b?1 * r297)) + c?)) && (ts103 == res13._2) && (r296 == treeNum(h1)) && (r297 == treeNum(h2)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res13._2)) + 0) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
merge-->(((((1 * treeNum(h2)) + (8 * res13._2)) + (-1 * treeNum(h1))) + -24) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 10
solving...
solved... in 0.006s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (1 * res13._2)) + (0 * treeNum(h1))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 63
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 12 + 20
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/10
Unrolled calls: Set((r288 == rank(cs50)), (r297 == treeNum(h2)), (r289 == rank(cs51)), (r296 == treeNum(h1)))
Inlining (r288 == rank(cs50))
Creating VC for treeNum
Unrolling (r297 == treeNum(h2))
Inlining (r289 == rank(cs51))
Unrolling (r296 == treeNum(h1))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (1 * res13._2)) + (0 * treeNum(h1))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 12 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (8 * res13._2)) + -1) ? 0)
treeNum-->(((0 * #res) + 23) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 12
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res13._2)) + -5) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 20 + 20
solving...
solved... in 0.009s
candidate Invariants
merge-->(((((1 * treeNum(h1)) + (-14 * treeNum(h2))) + (2 * res13._2)) + -4) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 13
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 12 + 40
solving...
solved... in 0.009s
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (1 * res13._2)) + (-7 * treeNum(h2))) + -2) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 12 + 52
solving...
solved... in 0.011s
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (1 * res13._2)) + (0 * treeNum(h2))) + -1) ? 0)
treeNum-->(((0 * #res) + -1) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 19 + 64
solving...
solved... in 0.015s
candidate Invariants
merge-->(((((-5 * treeNum(h1)) + (1 * res13._2)) + (-4 * treeNum(h2))) + -2) ? 0)
treeNum-->(((-5 * #res) + -1) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 182
[[34m Info  [0m] Number of equal calls: 32
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 22 + 83
solving...
solved... in 0.027s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/13
Unrolled calls: Set((r307 == treeNum(h1)), (r293 == mergeWithCarry(r119, cs57, cs58)), (r294 == link(cs59, cs60)), (r308 == treeNum(cs55)), (r291 == rank(cs54)), (r295 == rank(cs61)))
Inlining (r294 == link(cs59, cs60))
Unrolling (r308 == treeNum(cs55))
Inlining (r295 == rank(cs61))
Inlining (r291 == rank(cs54))
Unrolling (r307 == treeNum(h1))
Creating VC for mergeWithCarry
Unrolling (r293 == mergeWithCarry(r119, cs57, cs58))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((1 * res13._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res11._2)) + 0) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 7
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 23 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/50
Unrolled calls: Set((r361 == insTree(t, h2)), (r362 == treeNum(h1)), (r363 == treeNum(h2)))
Creating VC for insTree
Unrolling (r361 == insTree(t, h2))
Unrolling (r362 == treeNum(h1))
Unrolling (r363 == treeNum(h2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (1 * res13._2)) + (0 * treeNum(h2))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (1 * res11._2)) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 27 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/88
Unrolled calls: Set((r437 == treeNum(h2)), (r417 == treeNum(h)))
Unrolling (r437 == treeNum(h2))
Unrolling (r417 == treeNum(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (1 * res13._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (1 * res11._2)) + (0 * treeNum(h2))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 21
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 29 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (4 * res13._2)) + -11) ? 0)
treeNum-->(((0 * #res) + 1) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (4 * res11._2)) + (0 * treeNum(h2))) + -23) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 29
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/92
Unrolled calls: Set((r416 == rank(cs120)), (r415 == rank(t)))
Inlining (r416 == rank(cs120))
Inlining (r415 == rank(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (1 * res13._2)) + (0 * treeNum(h1))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res11._2)) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.008s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (4 * res13._2)) + (0 * treeNum(h1))) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((8 * res11._2) + (0 * treeNum(h1))) + (0 * treeNum(h2))) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 252
[[34m Info  [0m] Number of equal calls: 37
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 196
[[34m Info  [0m] Number of equal calls: 32
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 26
# of atomic predicates: 69 + 35
solving...
solved... in 0.021s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 11/90
Unrolled calls: Set((r413 == rank(cs119)), (r412 == link(t, cs118)), (r359 == rank(cs96)), (r465 == treeNum(cs117)), (r344 == rank(cs79)), (r351 == rank(cs86)), (r350 == rank(cs85)), (r440 == treeNum(cs92)), (r414 == rank(t)), (r358 == link(cs94, cs95)), (r441 == treeNum(cs93)))
Inlining (r359 == rank(cs96))
Inlining (r358 == link(cs94, cs95))
Unrolling (r440 == treeNum(cs92))
Inlining (r351 == rank(cs86))
Inlining (r350 == rank(cs85))
Inlining (r412 == link(t, cs118))
Inlining (r414 == rank(t))
Unrolling (r441 == treeNum(cs93))
Unrolling (r465 == treeNum(cs117))
Inlining (r344 == rank(cs79))
Inlining (r413 == rank(cs119))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (1 * res13._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((4 * res13._2) + (0 * treeNum(h1))) + (0 * treeNum(h2))) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (8 * res11._2)) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 252
[[34m Info  [0m] Number of equal calls: 37
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
[[34m Info  [0m] Number of equal calls: 29
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 203
[[34m Info  [0m] Number of equal calls: 37
# of atomic predicates: 69 + 35
solving...
solved... in 0.02s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/84
Unrolled calls: Set((r349 == rank(cs84)), (r439 == treeNum(h2)), (r490 == leq(cs145, cs146)), (r438 == treeNum(cs80)), (r345 == merge(cs80, h2)), (r348 == rank(t)))
Inlining (r349 == rank(cs84))
Unrolling (r345 == merge(cs80, h2))
Unrolling (r438 == treeNum(cs80))
Inlining (r348 == rank(t))
Inlining (r490 == leq(cs145, cs146))
Unrolling (r439 == treeNum(h2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res13._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (0 * treeNum(h1))) + (0 * treeNum(h2))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 8
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 37 + 0
solving...
solved... in 0.008s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (4 * res13._2)) + (0 * treeNum(h1))) + -11) ? 0)
treeNum-->(((-8 * #res) + 1) ? 0)
mergeWithCarry-->(((((7 * treeNum(h1)) + (0 * treeNum(h2))) + (14 * res11._2)) + -212) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 252
[[34m Info  [0m] Number of equal calls: 37
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 347
[[34m Info  [0m] Number of equal calls: 44
# of atomic predicates: 62 + 37
solving...
solved... in 0.022s
candidate Invariants
merge-->(((((-268 * treeNum(h1)) + (8 * res13._2)) + (-2 * treeNum(h2))) + -16) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-4340 * treeNum(h1)) + (-6979 * treeNum(h2))) + (196 * res11._2)) + -196) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 235
[[34m Info  [0m] Number of equal calls: 38
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 43 + 99
solving...
solved... in 0.033s
candidate Invariants
merge-->(((((20 * treeNum(h1)) + (4 * res13._2)) + (-1 * treeNum(h2))) + -8) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((567 * treeNum(h2)) + (196 * res11._2)) + (-3752 * treeNum(h1))) + -784) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 13
[[34m Info  [0m] Number of equal calls: 5
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 59
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 35 + 142
solving...
solved... in 0.036s
candidate Invariants
merge-->(((((-8 * treeNum(h2)) + (-1 * treeNum(h1))) + (2 * res13._2)) + -4) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-10971 * treeNum(h1)) + (-17253 * treeNum(h2))) + (896 * res11._2)) + -3584) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 108
[[34m Info  [0m] Number of equal calls: 21
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 311
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 53 + 177
solving...
solved... in 0.1s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 12/88
Unrolled calls: Set((r447 == treeNum(h1)), (r355 == rank(t)), (r424 == rank(t)), (r352 == merge(h1, cs88)), (r430 == rank(cs126)), (r448 == treeNum(h1)), (r360 == insTree(t, h1)), (r356 == rank(cs91)), (r309 == treeNum(cs53)), (r488 == leq(cs140, cs141)), (r310 == treeNum(h2)), (r449 == treeNum(cs88)))
Unrolling (r309 == treeNum(cs53))
Inlining (r355 == rank(t))
Unrolling (r449 == treeNum(cs88))
Unrolling (r448 == treeNum(h1))
Inlining (r488 == leq(cs140, cs141))
Unrolling (r447 == treeNum(h1))
Inlining (r356 == rank(cs91))
Inlining (r424 == rank(t))
Inlining (r430 == rank(cs126))
Unrolling (r360 == insTree(t, h1))
Unrolling (r310 == treeNum(h2))
Unrolling (r352 == merge(h1, cs88))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (1 * res13._2)) + (0 * treeNum(h2))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (1 * res11._2)) + (0 * treeNum(h2))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (4 * res13._2)) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (8 * res11._2)) + (0 * treeNum(h2))) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 252
[[34m Info  [0m] Number of equal calls: 37
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 206
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 61 + 35
solving...
solved... in 0.014s
candidate Invariants
merge-->(((((-5 * treeNum(h2)) + (1 * treeNum(h1))) + (1 * res13._2)) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-2 * treeNum(h1)) + (1 * res11._2)) + (11 * treeNum(h2))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 13
[[34m Info  [0m] Number of equal calls: 4
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 89
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 33 + 96
solving...
solved... in 0.02s
candidate Invariants
merge-->(((((-1 * treeNum(h1)) + (-5 * treeNum(h2))) + (1 * res13._2)) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((16 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res11._2)) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 23
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 189
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 46 + 129
solving...
solved... in 0.051s
candidate Invariants
merge-->(((((1 * res13._2) + (-1 * treeNum(h1))) + (3 * treeNum(h2))) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (-3 * treeNum(h2))) + (-7 * treeNum(h1))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 189
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 38 + 175
solving...
solved... in 0.057s
candidate Invariants
merge-->(((((8 * res13._2) + (4 * treeNum(h2))) + (-2 * treeNum(h1))) + -16) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 206
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 40 + 213
solving...
solved... in 0.127s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 9/102
Unrolled calls: Set((r429 == rank(cs125)), (r443 == treeNum(h2)), (r426 == link(t, cs123)), (r346 == link(t, cs82)), (r556 == rank(cs190)), (r555 == rank(t)), (r428 == rank(t)), (r442 == treeNum(cs83)), (r464 == treeNum(cs124)))
Unrolling (r464 == treeNum(cs124))
Inlining (r426 == link(t, cs123))
Inlining (r556 == rank(cs190))
Unrolling (r442 == treeNum(cs83))
Inlining (r346 == link(t, cs82))
Inlining (r428 == rank(t))
Inlining (r555 == rank(t))
Inlining (r429 == rank(cs125))
Unrolling (r443 == treeNum(h2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res13._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (1 * res11._2)) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (4 * res13._2)) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (8 * res11._2)) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 22
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 371
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 63 + 35
solving...
solved... in 0.015s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/106
Unrolled calls: Set((r436 == treeNum(cs89)), (r354 == link(t, cs90)), (r435 == treeNum(h1)))
Unrolling (r436 == treeNum(cs89))
Inlining (r354 == link(t, cs90))
Unrolling (r435 == treeNum(h1))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((1 * res13._2) + (0 * treeNum(h1))) + (0 * treeNum(h2))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((0 * treeNum(h2)) + (0 * treeNum(h1))) + (1 * res11._2)) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((4 * res13._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((8 * res11._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 22
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 41
# of atomic predicates: 68 + 35
solving...
solved... in 0.021s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/106
Unrolled calls: Set((r617 == leq(cs226, cs227)))
Inlining (r617 == leq(cs226, cs227))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (1 * res13._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 35 + 0
solving...
solved... in 0.007s
candidate Invariants
merge-->(((((4 * res13._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + -11) ? 0)
treeNum-->(((-24 * #res) + 1) ? 0)
mergeWithCarry-->(((((0 * treeNum(h1)) + (8 * res11._2)) + (0 * treeNum(h2))) + -45) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 22
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 288
[[34m Info  [0m] Number of equal calls: 43
# of atomic predicates: 65 + 35
solving...
solved... in 0.014s
candidate Invariants
merge-->(((((-5 * treeNum(h1)) + (1 * res13._2)) + (1 * treeNum(h2))) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-72 * treeNum(h1)) + (-1 * treeNum(h2))) + (8 * res11._2)) + -32) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 276
[[34m Info  [0m] Number of equal calls: 44
# of atomic predicates: 37 + 100
solving...
solved... in 0.031s
candidate Invariants
merge-->(((((-1 * treeNum(h2)) + (1 * res13._2)) + (-5 * treeNum(h1))) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-2 * treeNum(h2)) + (-8 * treeNum(h1))) + (1 * res11._2)) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 350
[[34m Info  [0m] Number of equal calls: 51
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 276
[[34m Info  [0m] Number of equal calls: 44
# of atomic predicates: 54 + 137
solving...
solved... in 0.061s
candidate Invariants
merge-->(((((-7 * treeNum(h1)) + (-1 * treeNum(h2))) + (1 * res13._2)) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-8 * treeNum(h1)) + (-8 * treeNum(h2))) + (1 * res11._2)) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 350
[[34m Info  [0m] Number of equal calls: 50
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 468
[[34m Info  [0m] Number of equal calls: 56
# of atomic predicates: 59 + 191
solving...
solved... in 0.336s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/105
Unrolled calls: Set((r638 == leq(cs233, cs234)), (r397 == insTree(r119, cs58)), (r399 == treeNum(cs58)), (r398 == treeNum(cs57)), (r325 == leq(cs67, cs68)), (r446 == treeNum(cs58)), (r615 == leq(cs210, cs211)))
Unrolling (r398 == treeNum(cs57))
Unrolling (r399 == treeNum(cs58))
Inlining (r325 == leq(cs67, cs68))
Inlining (r615 == leq(cs210, cs211))
Inlining (r638 == leq(cs233, cs234))
Unrolling (r397 == insTree(r119, cs58))
Unrolling (r446 == treeNum(cs58))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * treeNum(h2)) + (1 * res13._2)) + (0 * treeNum(h1))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (0 * treeNum(h2))) + (0 * treeNum(h1))) + 0) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 99
[[34m Info  [0m] Number of equal calls: 19
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 39 + 0
solving...
solved... in 0.009s
candidate Invariants
merge-->(((((0 * treeNum(h1)) + (0 * treeNum(h2))) + (4 * res13._2)) + -11) ? 0)
treeNum-->(((-8 * #res) + 1) ? 0)
mergeWithCarry-->(((((56 * res11._2) + (-56 * treeNum(h1))) + (-336 * treeNum(h2))) + -621) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 252
[[34m Info  [0m] Number of equal calls: 37
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 334
[[34m Info  [0m] Number of equal calls: 47
# of atomic predicates: 65 + 39
solving...
solved... in 0.022s
candidate Invariants
merge-->(((((1 * treeNum(h1)) + (-40 * treeNum(h2))) + (8 * res13._2)) + -16) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((8 * res11._2) + (-72 * treeNum(h2))) + (-1 * treeNum(h1))) + -56) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 13
[[34m Info  [0m] Number of equal calls: 4
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 242
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 40 + 104
solving...
solved... in 0.045s
candidate Invariants
merge-->(((((-5 * treeNum(h2)) + (1 * res13._2)) + (-1 * treeNum(h1))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-1 * treeNum(h2)) + (4 * res11._2)) + (-32 * treeNum(h1))) + 4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 23
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 18
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 43 + 144
solving...
solved... in 0.053s
candidate Invariants
merge-->(((((-1 * treeNum(h1)) + (3 * treeNum(h2))) + (1 * res13._2)) + -2) ? 0)
treeNum-->(((-3 * #res) + -1) ? 0)
mergeWithCarry-->(((((-8 * treeNum(h1)) + (-1 * treeNum(h2))) + (1 * res11._2)) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 2
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 279
[[34m Info  [0m] Number of equal calls: 45
# of atomic predicates: 41 + 187
solving...
solved... in 0.102s
candidate Invariants
merge-->(((((-4 * treeNum(h1)) + (1 * res13._2)) + (-4 * treeNum(h2))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-8 * treeNum(h1)) + (1 * res11._2)) + (-8 * treeNum(h2))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 428
[[34m Info  [0m] Number of equal calls: 55
# of atomic predicates: 28 + 228
solving...
solved... in 0.117s
candidate Invariants
merge-->(((((1 * res13._2) + (-8 * treeNum(h2))) + (-4 * treeNum(h1))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((1 * res11._2) + (-8 * treeNum(h2))) + (-8 * treeNum(h1))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 428
[[34m Info  [0m] Number of equal calls: 54
# of atomic predicates: 28 + 256
solving...
solved... in 0.129s
candidate Invariants
merge-->(((((-4 * treeNum(h2)) + (-8 * treeNum(h1))) + (1 * res13._2)) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-8 * treeNum(h1)) + (1 * res11._2)) + (-8 * treeNum(h2))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1084
[[34m Info  [0m] Number of equal calls: 84
# of atomic predicates: 36 + 284
solving...
solved... in 0.171s
candidate Invariants
merge-->(((((1 * res13._2) + (-8 * treeNum(h1))) + (-13 * treeNum(h2))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-8 * treeNum(h1)) + (1 * res11._2)) + (-8 * treeNum(h2))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 824
[[34m Info  [0m] Number of equal calls: 68
# of atomic predicates: 39 + 320
solving...
solved... in 0.204s
candidate Invariants
merge-->(((((1 * res13._2) + (-13 * treeNum(h2))) + (-8 * treeNum(h1))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-13 * treeNum(h2)) + (1 * res11._2)) + (-8 * treeNum(h1))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Nesting level: a?1-->1
Nesting level: b?1-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b?1 Initial upperbound: 12
Found new upper bound: 6
Found new upper bound: 3
Found new lower bound: 1
Found new lower bound: 2
Minimizing variable: c? Initial upperbound: 13
Found new lower bound: 6
Found new upper bound: 35/4
Found new lower bound: 7
Minimization complete...
candidate Invariants
merge-->(((((-12 * treeNum(h2)) + (-28 * treeNum(h1))) + (4 * res13._2)) + -35) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-232 * treeNum(h1)) + (32 * res11._2)) + (-88 * treeNum(h2))) + -372) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1084
[[34m Info  [0m] Number of equal calls: 82
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 279
[[34m Info  [0m] Number of equal calls: 44
# of atomic predicates: 63 + 359
solving...
solved... in 0.232s
candidate Invariants
merge-->(((((-13 * treeNum(h2)) + (1 * res13._2)) + (-8 * treeNum(h1))) + -2) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
mergeWithCarry-->(((((-13 * treeNum(h2)) + (1 * res11._2)) + (-8 * treeNum(h1))) + -4) ? 0)
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
Nesting level: a?1-->1
Nesting level: b?1-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b?1 Initial upperbound: 12
Found new lower bound: 6
Found new upper bound: 8
Found new upper bound: 7
Minimizing variable: c? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: merge --> (((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: treeNum --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: mergeWithCarry --> (((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) <= 0)
[[34m Info  [0m] - Found inductive invariant: insTree --> ((((1 * res14._2) + (-7 * treeNum(h))) + -2) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function deleteMin...
[[34m Info  [0m] Body: (let (vr4,vd4 := (let (vr5,vd5 := (let (e6,d79 := removeMinTree(h)) in
            (e6, (1 + d79)))) in
            ((vr5._1, vr5._2), (2 + if (((1 + vd5) ? (1 + vd5)))
              (1 + vd5)
            else
              (1 + vd5))))) in
            (let (br4,bd4 := (let (vr6,vd6 := (vr4._1, (1 + vd4))) in
              (let (br6,bd6 := (let (br7,bd7 := (let (dcond6 := (1 + if (((1 + vd6) ? (1 + (1 + vd6))))
                (1 + vd6)
              else
                (1 + (1 + vd6)))) in
                if ((vr6.isInstanceOf[Some] ? vr6.t.isInstanceOf[Node]))
                  (let (rthen6,dthen6 := (let (e7,d93 := merge(vr6.t.children, vr4._2)) in
                    (e7, ((1 + d93) + if (((1 + (1 + vd6)) ? (1 + vd4)))
                      (1 + (1 + vd6))
                    else
                      (1 + vd4))))) in
                    (rthen6, if ((dcond6 ? dthen6))
                      dcond6
                    else
                      dthen6))
                else
                  (h, if ((dcond6 ? 0))
                    dcond6
                  else
                    0))) in
                (br7, (bd7 + 1)))) in
                (br6, (bd6 + 1))))) in
              (br4, (bd4 + 1))))
[[34m Info  [0m] Post: true
falttened Body: ((res15 == tp150) && (arg58 == (bd4 + 1)) && (tp150 == (br4, arg58)) && (e6 == ts493) && (ts493 == tres107._1) && ((ci112 && (ci112 == vr6.isInstanceOf[Some]) && ci113 && (cs267 == vr6.t) && (ci113 == cs267.isInstanceOf[Node]) && (ifres311 == tp151) && (tp151 == (rthen6, ifres312)) && (d93 == ts494) && (ts494 == tres106._2) && (tres106 == r756) && (cs268 == vr6.t) && (cs269 == cs268.children) && (ts495 == vr4._2) && (r756 == merge(cs269, ts495)) && (e7 == ts496) && (ts496 == tres106._1) && (((dcond6 >= dthen6) && (ifres312 == dcond6)) || ((dcond6 < dthen6) && (ifres312 == dthen6))) && (dthen6 == ((1 + d93) + ifres313)) && ((((1 + (1 + vd6)) >= (1 + vd4)) && (ifres313 == (1 + (1 + vd6)))) || (((1 + (1 + vd6)) < (1 + vd4)) && (ifres313 == (1 + vd4)))) && (rthen6 == e7)) || (((!(ci114) && (ci114 == vr6.isInstanceOf[Some])) || (!(ci115) && (cs270 == vr6.t) && (ci115 == cs270.isInstanceOf[Node]))) && (ifres311 == tp152) && (tp152 == (h, ifres314)) && (((dcond6 >= 0) && (ifres314 == dcond6)) || ((dcond6 < 0) && (ifres314 == 0))))) && ((((1 + vd6) >= (1 + (1 + vd6))) && (ifres315 == (1 + vd6))) || (((1 + vd6) < (1 + (1 + vd6))) && (ifres315 == (1 + (1 + vd6))))) && (vd6 == (1 + vd4)) && (bd6 == (bd7 + 1)) && (vr6 == ts497) && (ts497 == vr4._1) && (d79 == ts498) && (ts498 == tres107._2) && (tres107 == r757) && (r757 == removeMinTree(h)) && (br6 == br7) && (bd4 == (bd6 + 1)) && (dcond6 == (1 + ifres315)) && ((((1 + vd5) >= (1 + vd5)) && (ifres316 == (1 + vd5))) || (((1 + vd5) < (1 + vd5)) && (ifres316 == (1 + vd5)))) && (vd4 == (2 + ifres316)) && (vr5 == e6) && (vd5 == (1 + d79)) && (br4 == br6) && (bd7 == ts499) && (ts499 == ifres311._2) && (br7 == ts500) && (ts500 == ifres311._1) && (vr4 == tp153) && (ts501 == vr5._1) && (ts502 == vr5._2) && (tp153 == (ts501, ts502)))
Flattened Post: ((ts503 > (((a?3 * r758) + (b?3 * r759)) + c?1)) && (ts503 == res15._2) && (r758 == minTreeChildren(h)) && (r759 == treeNum(h)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + 0) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 26
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + -5) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 26
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 11 + 10
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/6
Unrolled calls: Set((r759 == treeNum(h)), (r758 == minTreeChildren(h)), (r757 == removeMinTree(h)), (r760 == treeNum(ts505)), (r761 == treeNum(h)))
Creating VC for treeNum
Unrolling (r761 == treeNum(h))
Unrolling (r759 == treeNum(h))
Inlining (r758 == minTreeChildren(h))
Unrolling (r760 == treeNum(ts505))
Creating VC for removeMinTree
Unrolling (r757 == removeMinTree(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 99
[[34m Info  [0m] Number of equal calls: 24
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 12 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 10/41
Unrolled calls: Set((r794 == treeNum(h)), (r780 == root(cs284)), (r769 == removeMinTree(h)), (r793 == treeNum(ts564)), (r809 == treeNum(h)), (r781 == root(cs285)), (r784 == treeNum(h)), (r807 == treeNum(ts578)), (r782 == leq(r779, r778)), (r808 == treeNum(cs290)))
Unrolling (r793 == treeNum(ts564))
Unrolling (r809 == treeNum(h))
Unrolling (r769 == removeMinTree(h))
Inlining (r780 == root(cs284))
Unrolling (r794 == treeNum(h))
Inlining (r782 == leq(r779, r778))
Inlining (r781 == root(cs285))
Unrolling (r807 == treeNum(ts578))
Unrolling (r808 == treeNum(cs290))
Unrolling (r784 == treeNum(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 21 + 0
solving...
solved... in 0.007s
candidate Invariants
deleteMin-->(((((0 * minTreeChildren(h)) + (0 * treeNum(h))) + (8 * res15._2)) + -125) ? 0)
treeNum-->(((-120 * #res) + 1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1023
[[34m Info  [0m] Number of equal calls: 91
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 44 + 21
solving...
solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 25/52
Unrolled calls: Set((r803 == treeNum(ts574)), (r832 == treeNum(h)), (r756 == merge(cs269, ts495)), (r795 == treeNum(ts566)), (r787 == leq(r786, r785)), (r798 == treeNum(cs302)), (r771 == removeMinTree(h)), (r829 == treeNum(h)), (r804 == treeNum(h)), (r827 == treeNum(h)), (r773 == removeMinTree(h)), (r801 == treeNum(ts572)), (r792 == treeNum(h)), (r833 == treeNum(h)), (r788 == root(cs300)), (r802 == treeNum(h)), (r791 == treeNum(ts562)), (r830 == treeNum(cs302)), (r796 == treeNum(h)), (r797 == treeNum(ts568)), (r828 == treeNum(h)), (r772 == removeMinTree(h)), (r789 == root(cs301)), (r774 == treeNum(cs276)), (r770 == removeMinTree(h)))
Unrolling (r796 == treeNum(h))
Unrolling (r771 == removeMinTree(h))
Inlining (r789 == root(cs301))
Inlining (r787 == leq(r786, r785))
Unrolling (r772 == removeMinTree(h))
Unrolling (r803 == treeNum(ts574))
Unrolling (r804 == treeNum(h))
Unrolling (r798 == treeNum(cs302))
Unrolling (r829 == treeNum(h))
Unrolling (r828 == treeNum(h))
Inlining (r788 == root(cs300))
Unrolling (r791 == treeNum(ts562))
Unrolling (r792 == treeNum(h))
Unrolling (r833 == treeNum(h))
Unrolling (r773 == removeMinTree(h))
Unrolling (r770 == removeMinTree(h))
Unrolling (r830 == treeNum(cs302))
Unrolling (r774 == treeNum(cs276))
Unrolling (r797 == treeNum(ts568))
Unrolling (r801 == treeNum(ts572))
Unrolling (r802 == treeNum(h))
Unrolling (r832 == treeNum(h))
Creating VC for merge
Unrolling (r756 == merge(cs269, ts495))
Unrolling (r795 == treeNum(ts566))
Unrolling (r827 == treeNum(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMin-->(((((1 * res15._2) + (0 * treeNum(h))) + (0 * minTreeChildren(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 32 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/89
Unrolled calls: Set((r896 == treeNum(h2)), (r897 == treeNum(h1)))
Unrolling (r896 == treeNum(h2))
Unrolling (r897 == treeNum(h1))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMin-->(((((1 * res15._2) + (0 * minTreeChildren(h))) + (0 * treeNum(h))) + 0) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 42 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMin-->(((((0 * treeNum(h)) + (8 * res15._2)) + (0 * minTreeChildren(h))) + -209) ? 0)
treeNum-->(((-8 * #res) + 1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 8011
[[34m Info  [0m] Number of equal calls: 302
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 164
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 136 + 42
solving...
solved... in 0.068s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 36/101
Unrolled calls: Set((r853 == root(cs355)), (r925 == treeNum(cs269)), (r851 == root(cs350)), (r846 == root(cs333)), (r944 == treeNum(cs356)), (r924 == treeNum(ts495)), (r917 == treeNum(ts740)), (r912 == rank(cs419)), (r865 == root(cs371)), (r873 == root(cs388)), (r920 == treeNum(cs377)), (r921 == treeNum(ts744)), (r942 == treeNum(ts495)), (r895 == rank(cs407)), (r892 == mergeWithCarry(r887, cs402, cs403)), (r905 == rank(cs408)), (r893 == link(cs404, cs405)), (r845 == leq(r844, r843)), (r866 == root(cs372)), (r922 == treeNum(cs356)), (r894 == rank(cs406)), (r915 == treeNum(ts738)), (r916 == treeNum(cs381)), (r888 == rank(cs396)), (r874 == root(cs389)), (r867 == leq(r864, r863)), (r943 == treeNum(cs410)), (r919 == treeNum(ts742)), (r937 == treeNum(cs381)), (r940 == treeNum(cs339)), (r852 == leq(r850, r849)), (r918 == treeNum(cs339)), (r941 == treeNum(cs377)), (r872 == leq(r870, r869)), (r847 == root(cs334)), (r889 == rank(cs397)))
Inlining (r851 == root(cs350))
Unrolling (r944 == treeNum(cs356))
Unrolling (r942 == treeNum(ts495))
Inlining (r853 == root(cs355))
Unrolling (r919 == treeNum(ts742))
Inlining (r852 == leq(r850, r849))
Inlining (r912 == rank(cs419))
Inlining (r895 == rank(cs407))
Inlining (r845 == leq(r844, r843))
Inlining (r894 == rank(cs406))
Inlining (r888 == rank(cs396))
Inlining (r874 == root(cs389))
Creating VC for mergeWithCarry
Unrolling (r892 == mergeWithCarry(r887, cs402, cs403))
Unrolling (r918 == treeNum(cs339))
Inlining (r847 == root(cs334))
Unrolling (r917 == treeNum(ts740))
Inlining (r846 == root(cs333))
Inlining (r873 == root(cs388))
Unrolling (r922 == treeNum(cs356))
Unrolling (r920 == treeNum(cs377))
Unrolling (r921 == treeNum(ts744))
Unrolling (r941 == treeNum(cs377))
Inlining (r893 == link(cs404, cs405))
Unrolling (r925 == treeNum(cs269))
Inlining (r889 == rank(cs397))
Inlining (r865 == root(cs371))
Inlining (r867 == leq(r864, r863))
Unrolling (r924 == treeNum(ts495))
Unrolling (r940 == treeNum(cs339))
Unrolling (r943 == treeNum(cs410))
Inlining (r905 == rank(cs408))
Unrolling (r916 == treeNum(cs381))
Unrolling (r937 == treeNum(cs381))
Inlining (r872 == leq(r870, r869))
Inlining (r866 == root(cs372))
Unrolling (r915 == treeNum(ts738))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (0 * treeNum(h))) + (1 * res15._2)) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 7
[[34m Info  [0m] Number of equal calls: 3
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 0 + 0
solving...
solved... in 0.004s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/124
Unrolled calls: Set((r991 == insTree(t, h2)), (r992 == treeNum(h1)), (r993 == treeNum(h2)))
Creating VC for insTree
Unrolling (r991 == insTree(t, h2))
Unrolling (r992 == treeNum(h1))
Unrolling (r993 == treeNum(h2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((1 * res15._2) + (0 * treeNum(h))) + (0 * minTreeChildren(h))) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 0 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/162
Unrolled calls: Set((r1093 == treeNum(h1)), (r990 == insTree(t, h1)), (r1066 == treeNum(h)))
Unrolling (r1093 == treeNum(h1))
Unrolling (r990 == insTree(t, h1))
Unrolling (r1066 == treeNum(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 21
[[34m Info  [0m] Number of equal calls: 7
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 162
[[34m Info  [0m] Number of equal calls: 26
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 61 + 0
solving...
solved... in 0.008s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 1) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (8 * res15._2)) + -209) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 61
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 9/172
Unrolled calls: Set((r977 == link(t, cs446)), (r989 == rank(cs459)), (r975 == rank(cs443)), (r1064 == rank(t)), (r1065 == rank(cs519)), (r1089 == treeNum(h2)), (r979 == rank(t)), (r974 == rank(cs442)), (r1088 == treeNum(cs447)))
Inlining (r974 == rank(cs442))
Inlining (r979 == rank(t))
Inlining (r1065 == rank(cs519))
Inlining (r989 == rank(cs459))
Unrolling (r1089 == treeNum(h2))
Unrolling (r1088 == treeNum(cs447))
Inlining (r977 == link(t, cs446))
Inlining (r975 == rank(cs443))
Inlining (r1064 == rank(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (1 * res15._2)) + (0 * minTreeChildren(h))) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 313
[[34m Info  [0m] Number of equal calls: 40
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 65 + 0
solving...
solved... in 0.009s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 1) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (0 * treeNum(h))) + (1 * res15._2)) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 65
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/168
Unrolled calls: Set((r980 == rank(cs448)), (r1096 == treeNum(cs451)), (r985 == rank(t)), (r1097 == treeNum(h1)), (r982 == merge(h1, cs451)), (r988 == rank(cs458)), (r981 == rank(cs449)))
Inlining (r981 == rank(cs449))
Unrolling (r1097 == treeNum(h1))
Unrolling (r1096 == treeNum(cs451))
Inlining (r980 == rank(cs448))
Inlining (r988 == rank(cs458))
Unrolling (r982 == merge(h1, cs451))
Inlining (r985 == rank(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((1 * res15._2) + (0 * treeNum(h))) + (0 * minTreeChildren(h))) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 220
[[34m Info  [0m] Number of equal calls: 32
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 66 + 0
solving...
solved... in 0.009s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-1 * #res) + 1) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 121
[[34m Info  [0m] Number of equal calls: 26
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 240
[[34m Info  [0m] Number of equal calls: 39
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 350
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 224 + 66
solving...
solved... in 0.177s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 15/171
Unrolled calls: Set((r1090 == treeNum(cs403)), (r1034 == leq(cs493, cs494)), (r1042 == treeNum(cs402)), (r1063 == link(t, cs518)), (r987 == link(cs456, cs457)), (r1091 == treeNum(cs454)), (r1130 == treeNum(cs517)), (r1092 == treeNum(cs455)), (r1060 == rank(t)), (r976 == merge(cs445, h2)), (r1059 == rank(cs514)), (r1094 == treeNum(h2)), (r1027 == insTree(r887, cs403)), (r1043 == treeNum(cs403)), (r1095 == treeNum(cs445)))
Unrolling (r1094 == treeNum(h2))
Unrolling (r1043 == treeNum(cs403))
Inlining (r1059 == rank(cs514))
Unrolling (r1090 == treeNum(cs403))
Unrolling (r1130 == treeNum(cs517))
Unrolling (r1092 == treeNum(cs455))
Unrolling (r1027 == insTree(r887, cs403))
Unrolling (r1095 == treeNum(cs445))
Unrolling (r1091 == treeNum(cs454))
Inlining (r1060 == rank(t))
Inlining (r1063 == link(t, cs518))
Inlining (r987 == link(cs456, cs457))
Unrolling (r976 == merge(cs445, h2))
Inlining (r1034 == leq(cs493, cs494))
Unrolling (r1042 == treeNum(cs402))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 331
[[34m Info  [0m] Number of equal calls: 46
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 66 + 0
solving...
solved... in 0.01s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-1 * #res) + 1) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 203
[[34m Info  [0m] Number of equal calls: 37
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 331
[[34m Info  [0m] Number of equal calls: 46
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
# of atomic predicates: 206 + 66
solving...
solved... in 0.176s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/187
Unrolled calls: Set((r1223 == leq(cs585, cs586)), (r1224 == leq(cs593, cs594)))
Inlining (r1223 == leq(cs585, cs586))
Inlining (r1224 == leq(cs593, cs594))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (0 * treeNum(h))) + (1 * res15._2)) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 40
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 74 + 0
solving...
solved... in 0.01s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-1 * #res) + 1) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 371
[[34m Info  [0m] Number of equal calls: 47
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
# of atomic predicates: 194 + 74
solving...
solved... in 0.176s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/193
Unrolled calls: Set((r1151 == leq(cs548, cs549)), (r1104 == treeNum(h1)), (r1105 == treeNum(cs452)), (r984 == link(t, cs453)))
Inlining (r1151 == leq(cs548, cs549))
Unrolling (r1104 == treeNum(h1))
Unrolling (r1105 == treeNum(cs452))
Inlining (r984 == link(t, cs453))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (1 * res15._2)) + (0 * minTreeChildren(h))) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 334
[[34m Info  [0m] Number of equal calls: 47
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 70 + 0
solving...
solved... in 0.009s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-1 * #res) + 1) ? 0)
deleteMin-->(((((0 * minTreeChildren(h)) + (1 * res15._2)) + (0 * treeNum(h))) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 468
[[34m Info  [0m] Number of equal calls: 56
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
# of atomic predicates: 194 + 70
solving...
solved... in 0.178s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/192
Unrolled calls: Set((r1289 == leq(cs638, cs639)))
Inlining (r1289 == leq(cs638, cs639))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((0 * #res) + 0) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + 0) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: insTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 31
[[34m Info  [0m] Number of equal calls: 9
Function: mergeWithCarry--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 334
[[34m Info  [0m] Number of equal calls: 47
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 175
[[34m Info  [0m] Number of equal calls: 33
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 1
Function: removeMinTree--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 70 + 0
solving...
solved... in 0.01s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-1 * #res) + 1) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + -20) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: treeNum--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
# of atomic predicates: 178 + 70
solving...
solved... in 0.13s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-61 * treeNum(h)) + (-7 * minTreeChildren(h))) + (1 * res15._2)) + -15) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Nesting level: a?3-->1
Nesting level: b?3-->1
Nesting level: c?1-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 7
Found new upper bound: 2
Found new upper bound: 0
Found new lower bound: -1
Minimizing variable: b?3 Initial upperbound: 60
Found new upper bound: 29
Found new upper bound: 14
Found new upper bound: 3583/512
Found new upper bound: 196607/65536
Found new upper bound: 2097151/2097152
Found new upper bound: 0
Found new lower bound: -1
Minimizing variable: c?1 Initial upperbound: 26
Found new lower bound: 13
Found new lower bound: 19
Found new lower bound: 22
Found new upper bound: 24
Found new lower bound: 23
Minimization complete...
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((0 * treeNum(h)) + (0 * minTreeChildren(h))) + (1 * res15._2)) + -24) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6460
[[34m Info  [0m] Number of equal calls: 236
# of atomic predicates: 155 + 248
solving...
solved... in 2.436s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-128 * treeNum(h)) + (-769 * minTreeChildren(h))) + (128 * res15._2)) + -4992) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 8635
[[34m Info  [0m] Number of equal calls: 331
# of atomic predicates: 156 + 403
solving...
solved... in 3.363s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((128 * res15._2) + (-769 * minTreeChildren(h))) + (-128 * treeNum(h))) + -5632) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 9530
[[34m Info  [0m] Number of equal calls: 346
# of atomic predicates: 166 + 559
solving...
timed out... in 21.004s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 7439
[[34m Info  [0m] Number of equal calls: 257
# of atomic predicates: 164 + 559
solving...
solved... in 11.036s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-8 * minTreeChildren(h)) + (1 * res15._2)) + (-1 * treeNum(h))) + -44) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 8025
[[34m Info  [0m] Number of equal calls: 274
# of atomic predicates: 177 + 723
solving...
timed out... in 22.328s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10649
[[34m Info  [0m] Number of equal calls: 369
# of atomic predicates: 184 + 723
solving...
solved... in 10.892s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-23 * treeNum(h)) + (1 * res15._2)) + (-8 * minTreeChildren(h))) + -15) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Nesting level: a?3-->1
Nesting level: b?3-->1
Nesting level: c?1-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b?3 Initial upperbound: 23
Found new lower bound: 11
Found new lower bound: 17
Found new lower bound: 20
Found new lower bound: 21
Found new upper bound: 22
Minimizing variable: c?1 Initial upperbound: 15
Found new lower bound: 7
Found new lower bound: 11
Found new lower bound: 13
Found new upper bound: 14
Minimization complete...
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-22 * treeNum(h)) + (-7 * minTreeChildren(h))) + (1 * res15._2)) + -14) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Function: deleteMin--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10666
[[34m Info  [0m] Number of equal calls: 384
# of atomic predicates: 178 + 907
solving...
solved... in 13.418s
candidate Invariants
insTree-->((((1 * res14._2) + (-7 * treeNum(h))) + -2) ? 0)
mergeWithCarry-->(((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) ? 0)
treeNum-->(((-2 * #res) + -1) ? 0)
deleteMin-->(((((-23 * treeNum(h)) + (-8 * minTreeChildren(h))) + (1 * res15._2)) + -15) ? 0)
merge-->(((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) ? 0)
removeMinTree-->((((-15 * treeNum(h)) + (1 * res12._2)) + -3) ? 0)
Nesting level: a?3-->1
Nesting level: b?3-->1
Nesting level: c?1-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 8
Found new lower bound: 4
Found new lower bound: 6
Found new upper bound: 7
Minimizing variable: b?3 Initial upperbound: 23
Found new lower bound: 11
Found new lower bound: 17
Found new lower bound: 20
Found new lower bound: 21
Found new lower bound: 22
Minimizing variable: c?1 Initial upperbound: 15
Found new lower bound: 7
Found new lower bound: 11
Found new lower bound: 13
Found new lower bound: 14
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: insTree --> ((((1 * res14._2) + (-7 * treeNum(h))) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: mergeWithCarry --> (((((-7 * treeNum(h1)) + (1 * res11._2)) + (-7 * treeNum(h2))) + -4) <= 0)
[[34m Info  [0m] - Found inductive invariant: treeNum --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: deleteMin --> (((((-23 * treeNum(h)) + (-7 * minTreeChildren(h))) + (1 * res15._2)) + -15) <= 0)
[[34m Info  [0m] - Found inductive invariant: merge --> (((((-7 * treeNum(h2)) + (-7 * treeNum(h1))) + (1 * res13._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: removeMinTree --> ((((-15 * treeNum(h)) + (1 * res12._2)) + -3) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ???????????
          ??? Summary ?????????????????????????????????????????????????????????????????????????
          ? ???????????                                                                       ?
          
          ?????????????????????????????????????????????????????????????????????????????????????
          ? total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ?
          ?????????????????????????????????????????????????????????????????????????????????????
