After Depth Instrumentation: 
object MergeSort {
  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  sealed abstract class List

  def size(list : List) : Int = {(list match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + size(xs))
  })} ensuring(res => (res >= 0))

  def mergeSort(list : List) : (List, Int) = {locally {
    val dcond2 = 1
    if (list.isInstanceOf[Nil]) {
      (list, if ((dcond2 >= 0)) {
        dcond2
      } else {
        0
      })
    } else {
      locally {
        val (relse2: List, delse2: Int) = locally {
          val dcond3 = 3
          if ((list.isInstanceOf[Cons] && list.tail.isInstanceOf[Nil])) {
            (list, if ((dcond3 >= 0)) {
              dcond3
            } else {
              0
            })
          } else {
            locally {
              val (relse3: List, delse3: Int) = locally {
                val (vr4: (List, List), vd4: Int) = locally {
                  val (vr5: (List, List), vd5: Int) = locally {
                    val (r31: Int, d31: Int) = locally {
                      val (r32: Int, d33: Int) = locally {
                        val (e2: Int, d36: Int) = length(list)
                        (e2, (1 + d36))
                      }
                      
                      ((r32 / 2), (1 + if ((d33 >= 0)) {
                        d33
                      } else {
                        0
                      }))
                    }
                    
                    locally {
                      val (e1: (List, List), d32: Int) = split(list, r31)
                      (e1, ((1 + d32) + if ((0 >= d31)) {
                        0
                      } else {
                        d31
                      }))
                    }
                    
                  }
                  
                  ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                    (1 + vd5)
                  } else {
                    (1 + vd5)
                  }))
                }
                
                locally {
                  val (br4: List, bd4: Int) = locally {
                    val (br6: List, bd6: Int) = locally {
                      val (br7: List, bd7: Int) = locally {
                        val (r41: List, d43: Int) = locally {
                          val (e5: List, d49: Int) = mergeSort(vr4._1)
                          (e5, ((1 + d49) + (1 + vd4)))
                        }
                        
                        locally {
                          val (r42: List, d44: Int) = locally {
                            val (e4: List, d47: Int) = mergeSort(vr4._2)
                            (e4, ((1 + d47) + (1 + vd4)))
                          }
                          
                          locally {
                            val (e3: List, d45: Int) = merge(r41, r42)
                            (e3, ((1 + d45) + if ((d43 >= d44)) {
                              d43
                            } else {
                              d44
                            }))
                          }
                          
                        }
                        
                      }
                      
                      (br7, (bd7 + 1))
                    }
                    
                    (br6, (bd6 + 1))
                  }
                  
                  (br4, (bd4 + 1))
                }
                
              }
              
              (relse3, if ((dcond3 >= delse3)) {
                dcond3
              } else {
                delse3
              })
            }
            
          }
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res => (size(res._1) == size(list)))

  def length(l : List) : (Int, Int) = {locally {
    val dcond4 = 1
    if (l.isInstanceOf[Nil]) {
      (0, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      locally {
        val (relse4: Int, delse4: Int) = locally {
          val (r47: Int, d52: Int) = locally {
            val (e6: Int, d54: Int) = length(l.tail)
            (e6, (2 + d54))
          }
          
          ((1 + r47), (1 + if ((0 >= d52)) {
            0
          } else {
            d52
          }))
        }
        
        (relse4, if ((dcond4 >= delse4)) {
          dcond4
        } else {
          delse4
        })
      }
      
    }
  }
  } ensuring(res => ((res._1 >= 0) && (res._1 == size(l))))

  def merge(aList : List, bList : List) : (List, Int) = {locally {
    val dcond5 = 1
    if (bList.isInstanceOf[Nil]) {
      (aList, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    } else {
      locally {
        val (relse5: List, delse5: Int) = locally {
          val dcond6 = 1
          if (aList.isInstanceOf[Nil]) {
            (bList, if ((dcond6 >= 0)) {
              dcond6
            } else {
              0
            })
          } else {
            locally {
              val (relse6: Cons, delse6: Int) = locally {
                val dcond7 = 2
                if ((aList.head < bList.head)) {
                  locally {
                    val (rthen7: Cons, dthen7: Int) = locally {
                      val (r57: List, d63: Int) = locally {
                        val (e7: List, d66: Int) = merge(aList.tail, bList)
                        (e7, (2 + d66))
                      }
                      
                      (Cons(aList.head, r57), (1 + if ((1 >= d63)) {
                        1
                      } else {
                        d63
                      }))
                    }
                    
                    (rthen7, if ((dcond7 >= dthen7)) {
                      dcond7
                    } else {
                      dthen7
                    })
                  }
                  
                } else {
                  locally {
                    val (relse7: Cons, delse7: Int) = locally {
                      val (r63: List, d70: Int) = locally {
                        val (e8: List, d73: Int) = merge(aList, bList.tail)
                        (e8, (2 + d73))
                      }
                      
                      (Cons(bList.head, r63), (1 + if ((1 >= d70)) {
                        1
                      } else {
                        d70
                      }))
                    }
                    
                    (relse7, if ((dcond7 >= delse7)) {
                      dcond7
                    } else {
                      delse7
                    })
                  }
                  
                }
              }
              
              (relse6, if ((dcond6 >= delse6)) {
                dcond6
              } else {
                delse6
              })
            }
            
          }
        }
        
        (relse5, if ((dcond5 >= delse5)) {
          dcond5
        } else {
          delse5
        })
      }
      
    }
  }
  } ensuring(res => ((size(aList) + size(bList)) == size(res._1)))

  def split(l : List, n : Int) : ((List, List), Int) = {    require(((n >= 0) && (n <= size(l))));
locally {
    val dcond = 1
    if ((n <= 0)) {
      ((Nil(), l), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: (List, List), delse: Int) = locally {
          val dcond1 = 1
          if (l.isInstanceOf[Nil]) {
            ((Nil(), l), if ((dcond1 >= 2)) {
              dcond1
            } else {
              2
            })
          } else {
            locally {
              val (relse1: (List, List), delse1: Int) = locally {
                val (vr: (List, List), vd: Int) = locally {
                  val (vr1: (List, List), vd1: Int) = locally {
                    val (e: (List, List), d9: Int) = split(l.tail, (n - 1))
                    (e, (2 + d9))
                  }
                  
                  ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                    (1 + vd1)
                  } else {
                    (1 + vd1)
                  }))
                }
                
                ((Cons(l.head, vr._1), vr._2), (4 + if (((1 + if ((1 >= (1 + vd))) {
                  1
                } else {
                  (1 + vd)
                }) >= (1 + vd))) {
                  (1 + if ((1 >= (1 + vd))) {
                    1
                  } else {
                    (1 + vd)
                  })
                } else {
                  (1 + vd)
                }))
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res => ((size(res._1._2) == (size(l) - n)) && (size(res._1._1) == n)))

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: size
Defined fun: mergeSort
Defined fun: length
Defined fun: merge
Defined fun: split
Defined fun: max
FunMap: Map(length -> length, merge -> merge, max -> max, split -> split, size -> size, mergeSort -> mergeSort)
After Time Instrumentation: 
object MergeSort {
  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  sealed abstract class List

  def size(list : List) : Int = {(list match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + size(xs))
  })} ensuring(res14 => (res14 >= 0))

  def mergeSort(list : List) : (List, Int) = {locally {
    val dcond2 = 1
    if (list.isInstanceOf[Nil]) {
      (list, if ((dcond2 >= 0)) {
        dcond2
      } else {
        0
      })
    } else {
      locally {
        val (relse2: List, delse2: Int) = locally {
          val dcond3 = 3
          if ((list.isInstanceOf[Cons] && list.tail.isInstanceOf[Nil])) {
            (list, if ((dcond3 >= 0)) {
              dcond3
            } else {
              0
            })
          } else {
            locally {
              val (relse3: List, delse3: Int) = locally {
                val (vr4: (List, List), vd4: Int) = locally {
                  val (vr5: (List, List), vd5: Int) = locally {
                    val (r31: Int, d31: Int) = locally {
                      val (r32: Int, d33: Int) = locally {
                        val (e2: Int, d36: Int) = length(list)
                        (e2, (1 + d36))
                      }
                      
                      ((r32 / 2), (1 + if ((d33 >= 0)) {
                        d33
                      } else {
                        0
                      }))
                    }
                    
                    locally {
                      val (e1: (List, List), d32: Int) = split(list, r31)
                      (e1, ((1 + d32) + if ((0 >= d31)) {
                        0
                      } else {
                        d31
                      }))
                    }
                    
                  }
                  
                  ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                    (1 + vd5)
                  } else {
                    (1 + vd5)
                  }))
                }
                
                locally {
                  val (br4: List, bd4: Int) = locally {
                    val (br6: List, bd6: Int) = locally {
                      val (br7: List, bd7: Int) = locally {
                        val (r41: List, d43: Int) = locally {
                          val (e5: List, d49: Int) = mergeSort(vr4._1)
                          (e5, ((1 + d49) + (1 + vd4)))
                        }
                        
                        locally {
                          val (r42: List, d44: Int) = locally {
                            val (e4: List, d47: Int) = mergeSort(vr4._2)
                            (e4, ((1 + d47) + (1 + vd4)))
                          }
                          
                          locally {
                            val (e3: List, d45: Int) = merge(r41, r42)
                            (e3, ((1 + d45) + if ((d43 >= d44)) {
                              d43
                            } else {
                              d44
                            }))
                          }
                          
                        }
                        
                      }
                      
                      (br7, (bd7 + 1))
                    }
                    
                    (br6, (bd6 + 1))
                  }
                  
                  (br4, (bd4 + 1))
                }
                
              }
              
              (relse3, if ((dcond3 >= delse3)) {
                dcond3
              } else {
                delse3
              })
            }
            
          }
        }
        
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res15 => (size(res15._1) == size(list)))

  def length(l : List) : (Int, Int) = {locally {
    val dcond4 = 1
    if (l.isInstanceOf[Nil]) {
      (0, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      locally {
        val (relse4: Int, delse4: Int) = locally {
          val (r47: Int, d52: Int) = locally {
            val (e6: Int, d54: Int) = length(l.tail)
            (e6, (2 + d54))
          }
          
          ((1 + r47), (1 + if ((0 >= d52)) {
            0
          } else {
            d52
          }))
        }
        
        (relse4, if ((dcond4 >= delse4)) {
          dcond4
        } else {
          delse4
        })
      }
      
    }
  }
  } ensuring(res11 => ((res11._1 >= 0) && (res11._1 == size(l))))

  def merge(aList : List, bList : List) : (List, Int) = {locally {
    val dcond5 = 1
    if (bList.isInstanceOf[Nil]) {
      (aList, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    } else {
      locally {
        val (relse5: List, delse5: Int) = locally {
          val dcond6 = 1
          if (aList.isInstanceOf[Nil]) {
            (bList, if ((dcond6 >= 0)) {
              dcond6
            } else {
              0
            })
          } else {
            locally {
              val (relse6: Cons, delse6: Int) = locally {
                val dcond7 = 2
                if ((aList.head < bList.head)) {
                  locally {
                    val (rthen7: Cons, dthen7: Int) = locally {
                      val (r57: List, d63: Int) = locally {
                        val (e7: List, d66: Int) = merge(aList.tail, bList)
                        (e7, (2 + d66))
                      }
                      
                      (Cons(aList.head, r57), (1 + if ((1 >= d63)) {
                        1
                      } else {
                        d63
                      }))
                    }
                    
                    (rthen7, if ((dcond7 >= dthen7)) {
                      dcond7
                    } else {
                      dthen7
                    })
                  }
                  
                } else {
                  locally {
                    val (relse7: Cons, delse7: Int) = locally {
                      val (r63: List, d70: Int) = locally {
                        val (e8: List, d73: Int) = merge(aList, bList.tail)
                        (e8, (2 + d73))
                      }
                      
                      (Cons(bList.head, r63), (1 + if ((1 >= d70)) {
                        1
                      } else {
                        d70
                      }))
                    }
                    
                    (relse7, if ((dcond7 >= delse7)) {
                      dcond7
                    } else {
                      delse7
                    })
                  }
                  
                }
              }
              
              (relse6, if ((dcond6 >= delse6)) {
                dcond6
              } else {
                delse6
              })
            }
            
          }
        }
        
        (relse5, if ((dcond5 >= delse5)) {
          dcond5
        } else {
          delse5
        })
      }
      
    }
  }
  } ensuring(res12 => ((size(aList) + size(bList)) == size(res12._1)))

  def split(l : List, n : Int) : ((List, List), Int) = {    require(((n >= 0) && (n <= size(l))));
locally {
    val dcond = 1
    if ((n <= 0)) {
      ((Nil(), l), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: (List, List), delse: Int) = locally {
          val dcond1 = 1
          if (l.isInstanceOf[Nil]) {
            ((Nil(), l), if ((dcond1 >= 2)) {
              dcond1
            } else {
              2
            })
          } else {
            locally {
              val (relse1: (List, List), delse1: Int) = locally {
                val (vr: (List, List), vd: Int) = locally {
                  val (vr1: (List, List), vd1: Int) = locally {
                    val (e: (List, List), d9: Int) = split(l.tail, (n - 1))
                    (e, (2 + d9))
                  }
                  
                  ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                    (1 + vd1)
                  } else {
                    (1 + vd1)
                  }))
                }
                
                ((Cons(l.head, vr._1), vr._2), (4 + if (((1 + if ((1 >= (1 + vd))) {
                  1
                } else {
                  (1 + vd)
                }) >= (1 + vd))) {
                  (1 + if ((1 >= (1 + vd))) {
                    1
                  } else {
                    (1 + vd)
                  })
                } else {
                  (1 + vd)
                }))
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res13 => ((size(res13._1._2) == (size(l) - n)) && (size(res13._1._1) == n)))

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object MergeSort {
  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  sealed abstract class List

  def size(list : List) : Int = {(list match {
    case Nil() =>
      0
    case Cons(x, xs) =>
      (1 + size(xs))
  })} ensuring(res14 => (res14 >= 0))

  def mergeSort(list : List) : (List, Int) = {if (list.isInstanceOf[Nil]) {
    (list, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse2: List, delse2: Int) = if ((list.isInstanceOf[Cons] && list.tail.isInstanceOf[Nil])) {
        (list, if ((3 >= 0)) {
          3
        } else {
          0
        })
      } else {
        locally {
          val (relse3: List, delse3: Int) = locally {
            val (vr4: (List, List), vd4: Int) = locally {
              val (vr5: (List, List), vd5: Int) = locally {
                val (r31: Int, d31: Int) = locally {
                  val (r32: Int, d33: Int) = locally {
                    val (e2: Int, d36: Int) = length(list)
                    (e2, (1 + d36))
                  }
                  
                  ((r32 / 2), (1 + if ((d33 >= 0)) {
                    d33
                  } else {
                    0
                  }))
                }
                
                locally {
                  val (e1: (List, List), d32: Int) = split(list, r31)
                  (e1, ((1 + d32) + if ((0 >= d31)) {
                    0
                  } else {
                    d31
                  }))
                }
                
              }
              
              ((vr5._1, vr5._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                (1 + vd5)
              } else {
                (1 + vd5)
              }))
            }
            
            locally {
              val (br4: List, bd4: Int) = locally {
                val (br6: List, bd6: Int) = locally {
                  val (br7: List, bd7: Int) = locally {
                    val (r41: List, d43: Int) = locally {
                      val (e5: List, d49: Int) = mergeSort(vr4._1)
                      (e5, ((1 + d49) + (1 + vd4)))
                    }
                    
                    locally {
                      val (r42: List, d44: Int) = locally {
                        val (e4: List, d47: Int) = mergeSort(vr4._2)
                        (e4, ((1 + d47) + (1 + vd4)))
                      }
                      
                      locally {
                        val (e3: List, d45: Int) = merge(r41, r42)
                        (e3, ((1 + d45) + if ((d43 >= d44)) {
                          d43
                        } else {
                          d44
                        }))
                      }
                      
                    }
                    
                  }
                  
                  (br7, (bd7 + 1))
                }
                
                (br6, (bd6 + 1))
              }
              
              (br4, (bd4 + 1))
            }
            
          }
          
          (relse3, if ((3 >= delse3)) {
            3
          } else {
            delse3
          })
        }
        
      }
      (relse2, if ((1 >= delse2)) {
        1
      } else {
        delse2
      })
    }
    
  }} ensuring(res15 => (size(res15._1) == size(list)))

  def length(l : List) : (Int, Int) = {if (l.isInstanceOf[Nil]) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse4: Int, delse4: Int) = locally {
        val (r47: Int, d52: Int) = locally {
          val (e6: Int, d54: Int) = length(l.tail)
          (e6, (2 + d54))
        }
        
        ((1 + r47), (1 + if ((0 >= d52)) {
          0
        } else {
          d52
        }))
      }
      
      (relse4, if ((1 >= delse4)) {
        1
      } else {
        delse4
      })
    }
    
  }} ensuring(res11 => ((res11._1 >= 0) && (res11._1 == size(l))))

  def merge(aList : List, bList : List) : (List, Int) = {if (bList.isInstanceOf[Nil]) {
    (aList, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse5: List, delse5: Int) = if (aList.isInstanceOf[Nil]) {
        (bList, if ((1 >= 0)) {
          1
        } else {
          0
        })
      } else {
        locally {
          val (relse6: Cons, delse6: Int) = if ((aList.head < bList.head)) {
            locally {
              val (rthen7: Cons, dthen7: Int) = locally {
                val (r57: List, d63: Int) = locally {
                  val (e7: List, d66: Int) = merge(aList.tail, bList)
                  (e7, (2 + d66))
                }
                
                (Cons(aList.head, r57), (1 + if ((1 >= d63)) {
                  1
                } else {
                  d63
                }))
              }
              
              (rthen7, if ((2 >= dthen7)) {
                2
              } else {
                dthen7
              })
            }
            
          } else {
            locally {
              val (relse7: Cons, delse7: Int) = locally {
                val (r63: List, d70: Int) = locally {
                  val (e8: List, d73: Int) = merge(aList, bList.tail)
                  (e8, (2 + d73))
                }
                
                (Cons(bList.head, r63), (1 + if ((1 >= d70)) {
                  1
                } else {
                  d70
                }))
              }
              
              (relse7, if ((2 >= delse7)) {
                2
              } else {
                delse7
              })
            }
            
          }
          (relse6, if ((1 >= delse6)) {
            1
          } else {
            delse6
          })
        }
        
      }
      (relse5, if ((1 >= delse5)) {
        1
      } else {
        delse5
      })
    }
    
  }} ensuring(res12 => ((size(aList) + size(bList)) == size(res12._1)))

  def split(l : List, n : Int) : ((List, List), Int) = {    require(((n >= 0) && (n <= size(l))));
if ((n <= 0)) {
    ((Nil(), l), if ((1 >= 2)) {
      1
    } else {
      2
    })
  } else {
    locally {
      val (relse: (List, List), delse: Int) = if (l.isInstanceOf[Nil]) {
        ((Nil(), l), if ((1 >= 2)) {
          1
        } else {
          2
        })
      } else {
        locally {
          val (relse1: (List, List), delse1: Int) = locally {
            val (vr: (List, List), vd: Int) = locally {
              val (vr1: (List, List), vd1: Int) = locally {
                val (e: (List, List), d9: Int) = split(l.tail, (n - 1))
                (e, (2 + d9))
              }
              
              ((vr1._1, vr1._2), (2 + if (((1 + vd1) >= (1 + vd1))) {
                (1 + vd1)
              } else {
                (1 + vd1)
              }))
            }
            
            ((Cons(l.head, vr._1), vr._2), (4 + if (((1 + if ((1 >= (1 + vd))) {
              1
            } else {
              (1 + vd)
            }) >= (1 + vd))) {
              (1 + if ((1 >= (1 + vd))) {
                1
              } else {
                (1 + vd)
              })
            } else {
              (1 + vd)
            }))
          }
          
          (relse1, if ((1 >= delse1)) {
            1
          } else {
            delse1
          })
        }
        
      }
      (relse, if ((1 >= delse)) {
        1
      } else {
        delse
      })
    }
    
  }} ensuring(res13 => ((size(res13._1._2) == (size(l) - n)) && (size(res13._1._1) == n)))

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def mult(x : Int, y : Int) : Int = {locally {
    val r = locally {
      val px = if ((x < 0)) {
        -(x)
      } else {
        x
      }
      locally {
        val py = if ((y < 0)) {
          -(y)
        } else {
          y
        }
        pmult(px, py)
      }
      
    }
    
    if ((((x >= 0) && (y >= 0)) || ((x < 0) && (y < 0)))) {
      r
    } else {
      -(r)
    }
  }
  }

  def pmult(x : Int, y : Int) : Int = {if (((x == 0) || (y == 0))) {
    0
  } else {
    (pmult((x - 1), y) + y)
  }} ensuring(res => ((res >= 0) && (((x == 0) || (y == 0)) || (res == (pmult(x, (y - 1)) + x)))))
}

Function: mergeSort template --> (res15._2 ≤ ((a?3 * size(list)) + b?3))
Function: length template --> (res11._2 ≤ ((a? * size(l)) + b?))
Function: merge template --> (res12._2 ≤ (((a?2 * size(aList)) + (b?2 * size(bList))) + c?))
Function: split template --> (res13._2 ≤ ((a?1 * n) + b?1))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(size, merge, pmult, split, mult, length, mergeSort)
[[34m Info  [0m] - considering function size...
[[34m Info  [0m] Body: list match {
            case Nil() => 0
            case Cons(x, xs) => (1 + size(xs))
          }
[[34m Info  [0m] Post: (res14 ≥ 0)
falttened Body: ((res14 == ifres) && ((ci && (ci == list.isInstanceOf[Nil]) && (ifres == 0)) || (!(ci1) && (ci1 == list.isInstanceOf[Nil]) && (ifres == (1 + r68)) && (cs == list.tail) && (r68 == size(cs)))))
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function size : (((a?5 * res14) + a?4) ≤ 0)
Flattened Post: ((res14 < 0) || (((a?5 * res14) + a?4) > 0))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
size-->(((0 * res14) + 0) ≤ 0)
Nesting level: a?5-->0
Nesting level: a?4-->0
minimizing...
Minimizing variable: a?5 Initial upperbound: 0
Found new upper bound: -1
Found new upper bound: -2
Found new upper bound: -4
Found new upper bound: -8
Found new upper bound: -16
Found new upper bound: -32
Found new upper bound: -64
Found new upper bound: -128
Found new upper bound: -256
Found new upper bound: -512
Found new upper bound: -1024
Found new upper bound: -2048
Found new upper bound: -4096
Found new upper bound: -8192
Found new upper bound: -16384
Found new upper bound: -32768
Minimizing variable: a?4 Initial upperbound: 0
Found new upper bound: -1
Found new upper bound: -2
Found new upper bound: -4
Found new upper bound: -8
Found new upper bound: -16
Found new upper bound: -32
Found new upper bound: -64
Found new upper bound: -128
Found new upper bound: -256
Found new upper bound: -512
Found new upper bound: -1024
Found new upper bound: -2048
Found new upper bound: -4096
Found new upper bound: -8192
Found new upper bound: -16384
Found new upper bound: -32768
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: size --> (((-32768 * res14) + -32768) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function merge...
[[34m Info  [0m] Body: if (bList.isInstanceOf[Nil])
            (aList, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse5,delse5 := if (aList.isInstanceOf[Nil])
              (bList, if ((1 ≥ 0))
                1
              else
                0)
            else
              (let (relse6,delse6 := if ((aList.head < bList.head))
                (let (rthen7,dthen7 := (let (r57,d63 := (let (e7,d66 := merge(aList.tail, bList)) in
                  (e7, (2 + d66)))) in
                  (Cons(aList.head, r57), (1 + if ((1 ≥ d63))
                    1
                  else
                    d63)))) in
                  (rthen7, if ((2 ≥ dthen7))
                    2
                  else
                    dthen7))
              else
                (let (relse7,delse7 := (let (r63,d70 := (let (e8,d73 := merge(aList, bList.tail)) in
                  (e8, (2 + d73)))) in
                  (Cons(bList.head, r63), (1 + if ((1 ≥ d70))
                    1
                  else
                    d70)))) in
                  (relse7, if ((2 ≥ delse7))
                    2
                  else
                    delse7))) in
                (relse6, if ((1 ≥ delse6))
                  1
                else
                  delse6))) in
              (relse5, if ((1 ≥ delse5))
                1
              else
                delse5))
[[34m Info  [0m] Post: ((size(aList) + size(bList)) == size(res12._1))
falttened Body: ((res12 == ifres1) && ((ci2 && (ci2 == bList.isInstanceOf[Nil]) && (ifres1 == tp) && (tp == (aList, ifres2)) && (((1 >= 0) && (ifres2 == 1)) || ((1 < 0) && (ifres2 == 0)))) || (!(ci3) && (ci3 == bList.isInstanceOf[Nil]) && (ifres1 == tp1) && (tp1 == (relse5, ifres3)) && ((ci4 && (ci4 == aList.isInstanceOf[Nil]) && (ifres4 == tp2) && (tp2 == (bList, ifres5)) && (((1 >= 0) && (ifres5 == 1)) || ((1 < 0) && (ifres5 == 0)))) || (!(ci5) && (ci5 == aList.isInstanceOf[Nil]) && (ifres4 == tp3) && (tp3 == (relse6, ifres6)) && (((cs1 < cs2) && (cs1 == aList.head) && (cs2 == bList.head) && (ifres7 == tp4) && (tp4 == (rthen7, ifres8)) && (dthen7 == (1 + ifres9)) && (rthen7 == cc) && (cs3 == aList.head) && (cc == Cons(cs3, r57)) && (tres == r69) && (cs4 == aList.tail) && (r69 == merge(cs4, bList)) && (e7 == ts) && (ts == tres._1) && (r57 == e7) && (d63 == (2 + d66)) && (d66 == ts1) && (ts1 == tres._2) && (((1 >= d63) && (ifres9 == 1)) || ((1 < d63) && (ifres9 == d63))) && (((2 >= dthen7) && (ifres8 == 2)) || ((2 < dthen7) && (ifres8 == dthen7)))) || ((cs5 >= cs6) && (cs5 == aList.head) && (cs6 == bList.head) && (ifres7 == tp5) && (tp5 == (relse7, ifres10)) && (((1 >= d70) && (ifres11 == 1)) || ((1 < d70) && (ifres11 == d70))) && (relse7 == cc1) && (cs7 == bList.head) && (cc1 == Cons(cs7, r63)) && (d70 == (2 + d73)) && (tres1 == r70) && (cs8 == bList.tail) && (r70 == merge(aList, cs8)) && (d73 == ts2) && (ts2 == tres1._2) && (e8 == ts3) && (ts3 == tres1._1) && (r63 == e8) && (((2 >= delse7) && (ifres10 == 2)) || ((2 < delse7) && (ifres10 == delse7))) && (delse7 == (1 + ifres11)))) && (relse6 == ts4) && (ts4 == ifres7._1) && (delse6 == ts5) && (ts5 == ifres7._2) && (((1 >= delse6) && (ifres6 == 1)) || ((1 < delse6) && (ifres6 == delse6))))) && (relse5 == ts6) && (ts6 == ifres4._1) && (delse5 == ts7) && (ts7 == ifres4._2) && (((1 >= delse5) && (ifres3 == 1)) || ((1 < delse5) && (ifres3 == delse5))))))
Flattened Post: (((((r71 + r72) < r73) && (r71 == size(aList)) && (r72 == size(bList)) && (ts8 == res12._1) && (r73 == size(ts8))) || (((r74 + r75) > r76) && (r74 == size(aList)) && (r75 == size(bList)) && (ts9 == res12._1) && (r76 == size(ts9)))) || ((ts10 > (((a?2 * r77) + (b?2 * r78)) + c?)) && (ts10 == res12._2) && (r77 == size(aList)) && (r78 == size(bList))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((1 * res12._2) + (0 * size(aList))) + (0 * size(bList))) + 0) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 75
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 14 + 0
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/16
Unrolled calls: Set((r84 == size(ts12)), (r82 == size(aList)), (r78 == size(bList)), (r83 == size(cs8)), (r77 == size(aList)))
Creating VC for size
Unrolling (r84 == size(ts12))
Unrolling (r82 == size(aList))
Unrolling (r78 == size(bList))
Unrolling (r83 == size(cs8))
Unrolling (r77 == size(aList))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((1 * res12._2) + (0 * size(aList))) + (0 * size(bList))) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 13
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 16 + 0
solving...
solved... in 0.009s
candidate Invariants
merge-->(((((0 * size(aList)) + (1 * size(bList))) + (2 * res12._2)) + -1) ≤ 0)
size-->(((48 * res14) + 11) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 9 + 16
solving...
solved... in 0.009s
candidate Invariants
merge-->(((((4 * res12._2) + (0 * size(aList))) + (-16 * size(bList))) + -5) ≤ 0)
size-->(((-8 * res14) + 1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 123
[[34m Info  [0m] Number of equal calls: 19
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 31 + 25
solving...
solved... in 0.013s
candidate Invariants
merge-->(((((-40 * size(bList)) + (-48 * size(aList))) + (8 * res12._2)) + -1) ≤ 0)
size-->(((0 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 14 + 56
solving...
solved... in 0.015s
candidate Invariants
merge-->(((((-6 * size(aList)) + (1 * res12._2)) + (-3 * size(bList))) + -2) ≤ 0)
size-->(((0 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 12 + 70
solving...
solved... in 0.015s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/21
Unrolled calls: Set((r75 == size(bList)), (r74 == size(aList)), (r81 == size(ts11)), (r80 == size(bList)), (r94 == size(bList)), (r76 == size(ts9)), (r79 == size(cs4)), (r93 == size(cs4)))
Unrolling (r75 == size(bList))
Unrolling (r94 == size(bList))
Unrolling (r81 == size(ts11))
Unrolling (r80 == size(bList))
Unrolling (r76 == size(ts9))
Unrolling (r79 == size(cs4))
Unrolling (r93 == size(cs4))
Unrolling (r74 == size(aList))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * size(aList)) + (0 * size(bList))) + (1 * res12._2)) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 223
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 39 + 0
solving...
solved... in 0.01s
candidate Invariants
merge-->(((((-12 * size(aList)) + (2 * res12._2)) + (-14 * size(bList))) + 1) ≤ 0)
size-->(((7 * res14) + -32) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 25 + 39
solving...
solved... in 0.011s
candidate Invariants
merge-->(((((-14 * size(bList)) + (-12 * size(aList))) + (2 * res12._2)) + 1) ≤ 0)
size-->(((2 * res14) + 8) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 64
solving...
solved... in 0.013s
candidate Invariants
merge-->(((((-9 * size(aList)) + (1 * res12._2)) + (-10 * size(bList))) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 149
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 38 + 72
solving...
solved... in 0.055s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/21
Unrolled calls: Set((r71 == size(aList)), (r72 == size(bList)), (r73 == size(ts8)), (r95 == size(aList)), (r96 == size(cs8)))
Unrolling (r71 == size(aList))
Unrolling (r95 == size(aList))
Unrolling (r72 == size(bList))
Unrolling (r73 == size(ts8))
Unrolling (r96 == size(cs8))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((0 * size(aList)) + (1 * res12._2)) + (0 * size(bList))) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 223
[[34m Info  [0m] Number of equal calls: 25
# of atomic predicates: 48 + 0
solving...
solved... in 0.011s
candidate Invariants
merge-->(((((512 * res12._2) + (-642 * size(bList))) + (512 * size(aList))) + 256) ≤ 0)
size-->(((46 * res14) + 24) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 48
solving...
solved... in 0.022s
candidate Invariants
merge-->(((((-18887684 * size(bList)) + (-262144 * size(aList))) + (1048576 * res12._2)) + 262144) ≤ 0)
size-->(((1 * res14) + -8) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4
[[34m Info  [0m] Number of equal calls: 2
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 28 + 56
solving...
solved... in 0.02s
candidate Invariants
merge-->(((((1 * res12._2) + (-3 * size(aList))) + (-4 * size(bList))) + 1) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 14 + 84
solving...
solved... in 0.021s
candidate Invariants
merge-->(((((1 * res12._2) + (0 * size(aList))) + (-4 * size(bList))) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 223
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 54 + 98
solving...
solved... in 0.052s
candidate Invariants
merge-->(((((16384 * res12._2) + (0 * size(aList))) + (251735 * size(bList))) + -16384) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 177
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 44 + 152
solving...
solved... in 0.091s
candidate Invariants
merge-->(((((-4 * size(aList)) + (-4 * size(bList))) + (1 * res12._2)) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimizing variable: b?2 Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimizing variable: c? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: merge --> (((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * res14) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function split...
[[34m Info  [0m] Body: if ((n ≤ 0))
            ((Nil(), l), if ((1 ≥ 2))
              1
            else
              2)
          else
            (let (relse,delse := if (l.isInstanceOf[Nil])
              ((Nil(), l), if ((1 ≥ 2))
                1
              else
                2)
            else
              (let (relse1,delse1 := (let (vr,vd := (let (vr1,vd1 := (let (e,d9 := split(l.tail, (n - 1))) in
                (e, (2 + d9)))) in
                ((vr1._1, vr1._2), (2 + if (((1 + vd1) ≥ (1 + vd1)))
                  (1 + vd1)
                else
                  (1 + vd1))))) in
                ((Cons(l.head, vr._1), vr._2), (4 + if (((1 + if ((1 ≥ (1 + vd)))
                  1
                else
                  (1 + vd)) ≥ (1 + vd)))
                  (1 + if ((1 ≥ (1 + vd)))
                    1
                  else
                    (1 + vd))
                else
                  (1 + vd))))) in
                (relse1, if ((1 ≥ delse1))
                  1
                else
                  delse1))) in
              (relse, if ((1 ≥ delse))
                1
              else
                delse))
[[34m Info  [0m] Post: ((size(res13._1._2) == (size(l) - n)) ∧ (size(res13._1._1) == n))
falttened Body: ((n >= 0) && (n <= r144) && (r144 == size(l)) && (res13 == ifres31) && (((n <= 0) && (ifres31 == tp7) && (cc2 == Nil()) && (tp6 == (cc2, l)) && (tp7 == (tp6, ifres32)) && (((1 >= 2) && (ifres32 == 1)) || ((1 < 2) && (ifres32 == 2)))) || ((n > 0) && (ifres31 == tp8) && (tp8 == (relse, ifres33)) && ((ci44 && (ci44 == l.isInstanceOf[Nil]) && (ifres34 == tp10) && (cc3 == Nil()) && (tp9 == (cc3, l)) && (tp10 == (tp9, ifres35)) && (((1 >= 2) && (ifres35 == 1)) || ((1 < 2) && (ifres35 == 2)))) || (!(ci45) && (ci45 == l.isInstanceOf[Nil]) && (ifres34 == tp11) && (tp11 == (relse1, ifres36)) && ((((1 + vd1) >= (1 + vd1)) && (ifres41 == (1 + vd1))) || (((1 + vd1) < (1 + vd1)) && (ifres41 == (1 + vd1)))) && (vd == (2 + ifres41)) && (relse1 == tp12) && (ts33 == vr._1) && (cc4 == Cons(cs28, ts33)) && (tp12 == (cc4, ts34)) && (ts34 == vr._2) && (cs28 == l.head) && ((((1 + ifres38) >= (1 + vd)) && (((1 >= (1 + vd)) && (ifres38 == 1)) || ((1 < (1 + vd)) && (ifres38 == (1 + vd)))) && (ifres37 == (1 + ifres39)) && (((1 >= (1 + vd)) && (ifres39 == 1)) || ((1 < (1 + vd)) && (ifres39 == (1 + vd))))) || (((1 + ifres40) < (1 + vd)) && (((1 >= (1 + vd)) && (ifres40 == 1)) || ((1 < (1 + vd)) && (ifres40 == (1 + vd)))) && (ifres37 == (1 + vd)))) && (e == ts35) && (ts35 == tres2._1) && (vr == tp13) && (ts36 == vr1._1) && (ts37 == vr1._2) && (tp13 == (ts36, ts37)) && (delse1 == (4 + ifres37)) && (vr1 == e) && (tres2 == r145) && (cs29 == l.tail) && (arg == (n - 1)) && (r145 == split(cs29, arg)) && (d9 == ts38) && (ts38 == tres2._2) && (vd1 == (2 + d9)) && (((1 >= delse1) && (ifres36 == 1)) || ((1 < delse1) && (ifres36 == delse1))))) && (relse == ts39) && (ts39 == ifres34._1) && (delse == ts40) && (ts40 == ifres34._2) && (((1 >= delse) && (ifres33 == 1)) || ((1 < delse) && (ifres33 == delse))))))
Flattened Post: ((((r146 < (r147 - n)) && (ts41 == res13._1) && (ts42 == ts41._2) && (r146 == size(ts42)) && (r147 == size(l))) || ((r148 > (r149 - n)) && (ts43 == res13._1) && (ts44 == ts43._2) && (r148 == size(ts44)) && (r149 == size(l))) || ((r150 < n) && (ts45 == res13._1) && (ts46 == ts45._1) && (r150 == size(ts46))) || ((r151 > n) && (ts47 == res13._1) && (ts48 == ts47._1) && (r151 == size(ts48)))) || ((ts49 > ((a?1 * n) + b?1)) && (ts49 == res13._2)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
split-->((((0 * n) + (1 * res13._2)) + 0) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 14
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 0 + 0
solving...
solved... in 0.004s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/12
Unrolled calls: Set((r149 == size(l)), (r148 == size(ts44)), (r144 == size(l)))
Creating VC for size
Unrolling (r149 == size(l))
Unrolling (r148 == size(ts44))
Unrolling (r144 == size(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
split-->((((1 * res13._2) + (0 * n)) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 15 + 0
solving...
solved... in 0.006s
candidate Invariants
split-->((((8 * n) + (8 * res13._2)) + -31) ≤ 0)
size-->(((0 * res14) + 1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 9 + 15
solving...
solved... in 0.007s
candidate Invariants
split-->((((8 * n) + (8 * res13._2)) + -31) ≤ 0)
size-->(((-8 * res14) + 1) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 5
[[34m Info  [0m] Number of equal calls: 3
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 21 + 24
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/14
Unrolled calls: Set((r151 == size(ts48)))
Unrolling (r151 == size(ts48))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
split-->((((0 * n) + (1 * res13._2)) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 18 + 0
solving...
solved... in 0.006s
candidate Invariants
split-->((((1 * res13._2) + (1 * n)) + -4) ≤ 0)
size-->(((4 * res14) + 1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 18
solving...
solved... in 0.007s
candidate Invariants
split-->((((1 * n) + (1 * res13._2)) + -7) ≤ 0)
size-->(((2 * res14) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 11 + 26
solving...
solved... in 0.008s
candidate Invariants
split-->((((0 * n) + (1 * res13._2)) + -4) ≤ 0)
size-->(((-1 * res14) + -2) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 102
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 29 + 37
solving...
solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/14
Unrolled calls: Set((r150 == size(ts46)), (r155 == size(ts53)), (r153 == size(ts51)), (r154 == size(cs29)))
Unrolling (r150 == size(ts46))
Unrolling (r155 == size(ts53))
Unrolling (r153 == size(ts51))
Unrolling (r154 == size(cs29))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
split-->((((0 * n) + (1 * res13._2)) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 15 + 0
solving...
solved... in 0.007s
candidate Invariants
split-->((((8 * res13._2) + (8 * n)) + -31) ≤ 0)
size-->(((0 * res14) + 1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 15
solving...
solved... in 0.007s
candidate Invariants
split-->((((1 * n) + (1 * res13._2)) + -5) ≤ 0)
size-->(((0 * res14) + -1) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 33 + 23
solving...
solved... in 0.01s
candidate Invariants
split-->((((1 * n) + (1 * res13._2)) + -4) ≤ 0)
size-->(((6 * res14) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 11 + 56
solving...
solved... in 0.011s
candidate Invariants
split-->((((1 * res13._2) + (-12 * n)) + -4) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Nesting level: a?1-->0
Nesting level: b?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 12
Found new upper bound: -7
Found new upper bound: -15
Found new upper bound: -31
Found new upper bound: -63
Found new upper bound: -127
Found new upper bound: -255
Found new upper bound: -511
Found new upper bound: -1023
Found new upper bound: -2047
Found new upper bound: -4095
Found new upper bound: -8191
Found new upper bound: -16383
Found new upper bound: -32767
Found new upper bound: -65535
Found new upper bound: -131071
Found new upper bound: -262143
Minimizing variable: b?1 Initial upperbound: 4
Found new upper bound: 2
Found new lower bound: 1
Minimization complete...
candidate Invariants
split-->((((262143 * n) + (1 * res13._2)) + -2) ≤ 0)
size-->(((-1 * res14) + -2) ≤ 0)
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 33 + 67
solving...
solved... in 0.018s
candidate Invariants
split-->((((-12 * n) + (1 * res13._2)) + -3) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Nesting level: a?1-->0
Nesting level: b?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 12
Found new lower bound: 6
Found new lower bound: 9
Found new lower bound: 10
Found new upper bound: 11
Minimizing variable: b?1 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: split --> ((((1 * res13._2) + (-11 * n)) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * res14) + -2) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function length...
[[34m Info  [0m] Body: if (l.isInstanceOf[Nil])
            (0, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse4,delse4 := (let (r47,d52 := (let (e6,d54 := length(l.tail)) in
              (e6, (2 + d54)))) in
              ((1 + r47), (1 + if ((0 ≥ d52))
                0
              else
                d52)))) in
              (relse4, if ((1 ≥ delse4))
                1
              else
                delse4))
[[34m Info  [0m] Post: ((res11._1 ≥ 0) ∧ (res11._1 == size(l)))
falttened Body: ((res11 == ifres51) && ((ci64 && (ci64 == l.isInstanceOf[Nil]) && (ifres51 == tp14) && (arg1 == 0) && (tp14 == (arg1, ifres52)) && (((1 >= 0) && (ifres52 == 1)) || ((1 < 0) && (ifres52 == 0)))) || (!(ci65) && (ci65 == l.isInstanceOf[Nil]) && (ifres51 == tp15) && (tp15 == (relse4, ifres53)) && (relse4 == (1 + r47)) && (d52 == (2 + d54)) && (((1 >= delse4) && (ifres53 == 1)) || ((1 < delse4) && (ifres53 == delse4))) && (r47 == e6) && (delse4 == (1 + ifres54)) && (((0 >= d52) && (ifres54 == 0)) || ((0 < d52) && (ifres54 == d52))) && (tres3 == r166) && (cs39 == l.tail) && (r166 == length(cs39)) && (e6 == ts71) && (ts71 == tres3._1) && (d54 == ts72) && (ts72 == tres3._2))))
Flattened Post: ((((ts73 < 0) && (ts73 == res11._1)) || ((ts74 < r167) && (ts74 == res11._1) && (r167 == size(l))) || ((ts75 > r168) && (ts75 == res11._1) && (r168 == size(l)))) || ((ts76 > ((a? * r169) + b?)) && (ts76 == res11._2) && (r169 == size(l))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
length-->((((1 * res11._2) + (0 * size(l))) + 0) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 16
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 11 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/5
Unrolled calls: Set((r170 == size(cs39)), (r169 == size(l)))
Creating VC for size
Unrolling (r170 == size(cs39))
Unrolling (r169 == size(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
length-->((((1 * res11._2) + (0 * size(l))) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 0
solving...
solved... in 0.005s
candidate Invariants
length-->((((0 * size(l)) + (8 * res11._2)) + -1) ≤ 0)
size-->(((0 * res14) + 23) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 9 + 11
solving...
solved... in 0.006s
candidate Invariants
length-->((((8 * res11._2) + (0 * size(l))) + -23) ≤ 0)
size-->(((-8 * res14) + 1) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 6
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 20 + 20
solving...
solved... in 0.007s
candidate Invariants
length-->((((1 * res11._2) + (9 * size(l))) + -4) ≤ 0)
size-->(((0 * res14) + -1) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 6 + 40
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/7
Unrolled calls: Set((r167 == size(l)), (r175 == size(cs39)))
Unrolling (r167 == size(l))
Unrolling (r175 == size(cs39))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
length-->((((0 * size(l)) + (1 * res11._2)) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 42
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 26 + 0
solving...
solved... in 0.007s
candidate Invariants
length-->((((-1 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
size-->(((176 * res14) + 40) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 26
solving...
solved... in 0.007s
candidate Invariants
length-->((((-16 * size(l)) + (8 * res11._2)) + -117) ≤ 0)
size-->(((1 * res14) + -8) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 42
[[34m Info  [0m] Number of equal calls: 10
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 38 + 34
solving...
solved... in 0.012s
candidate Invariants
length-->((((-28 * size(l)) + (4 * res11._2)) + 1) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 72
solving...
solved... in 0.013s
candidate Invariants
length-->((((1 * res11._2) + (-7 * size(l))) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 24
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 14 + 83
solving...
solved... in 0.015s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/7
Unrolled calls: Set((r168 == size(l)))
Unrolling (r168 == size(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
length-->((((1 * res11._2) + (0 * size(l))) + 0) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 0
solving...
solved... in 0.005s
candidate Invariants
length-->((((8 * res11._2) + (0 * size(l))) + -1) ≤ 0)
size-->(((0 * res14) + 23) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 11
solving...
solved... in 0.006s
candidate Invariants
length-->((((0 * size(l)) + (1 * res11._2)) + -4) ≤ 0)
size-->(((0 * res14) + -1) ≤ 0)
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 23 + 19
solving...
solved... in 0.008s
candidate Invariants
length-->((((1 * res11._2) + (-1 * size(l))) + -2) ≤ 0)
size-->(((9 * res14) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 11 + 42
solving...
solved... in 0.009s
candidate Invariants
length-->((((1 * res11._2) + (-10 * size(l))) + -1) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: b?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 10
Found new upper bound: 5
Found new lower bound: 2
Found new upper bound: 3
Minimizing variable: b? Initial upperbound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: length --> ((((-3 * size(l)) + (1 * res11._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * res14) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function mergeSort...
[[34m Info  [0m] Body: if (list.isInstanceOf[Nil])
            (list, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse2,delse2 := if ((list.isInstanceOf[Cons] ∧ list.tail.isInstanceOf[Nil]))
              (list, if ((3 ≥ 0))
                3
              else
                0)
            else
              (let (relse3,delse3 := (let (vr4,vd4 := (let (vr5,vd5 := (let (r31,d31 := (let (r32,d33 := (let (e2,d36 := length(list)) in
                (e2, (1 + d36)))) in
                ((r32 / 2), (1 + if ((d33 ≥ 0))
                  d33
                else
                  0)))) in
                (let (e1,d32 := split(list, r31)) in
                  (e1, ((1 + d32) + if ((0 ≥ d31))
                    0
                  else
                    d31))))) in
                ((vr5._1, vr5._2), (2 + if (((1 + vd5) ≥ (1 + vd5)))
                  (1 + vd5)
                else
                  (1 + vd5))))) in
                (let (br4,bd4 := (let (br6,bd6 := (let (br7,bd7 := (let (r41,d43 := (let (e5,d49 := mergeSort(vr4._1)) in
                  (e5, ((1 + d49) + (1 + vd4))))) in
                  (let (r42,d44 := (let (e4,d47 := mergeSort(vr4._2)) in
                    (e4, ((1 + d47) + (1 + vd4))))) in
                    (let (e3,d45 := merge(r41, r42)) in
                      (e3, ((1 + d45) + if ((d43 ≥ d44))
                        d43
                      else
                        d44)))))) in
                  (br7, (bd7 + 1)))) in
                  (br6, (bd6 + 1)))) in
                  (br4, (bd4 + 1))))) in
                (relse3, if ((3 ≥ delse3))
                  3
                else
                  delse3))) in
              (relse2, if ((1 ≥ delse2))
                1
              else
                delse2))
[[34m Info  [0m] Post: (size(res15._1) == size(list))
falttened Body: ((res15 == ifres61) && ((ci78 && (ci78 == list.isInstanceOf[Nil]) && (ifres61 == tp16) && (tp16 == (list, ifres62)) && (((1 >= 0) && (ifres62 == 1)) || ((1 < 0) && (ifres62 == 0)))) || (!(ci79) && (ci79 == list.isInstanceOf[Nil]) && (ifres61 == tp17) && (tp17 == (relse2, ifres63)) && ((ci80 && (ci80 == list.isInstanceOf[Cons]) && ci81 && (cs46 == list.tail) && (ci81 == cs46.isInstanceOf[Nil]) && (ifres64 == tp18) && (tp18 == (list, ifres65)) && (((3 >= 0) && (ifres65 == 3)) || ((3 < 0) && (ifres65 == 0)))) || (((!(ci82) && (ci82 == list.isInstanceOf[Cons])) || (!(ci83) && (cs47 == list.tail) && (ci83 == cs47.isInstanceOf[Nil]))) && (ifres64 == tp19) && (tp19 == (relse3, ifres66)) && (bd7 == ((1 + d45) + ifres67)) && (bd4 == (bd6 + 1)) && (r41 == e5) && ((((1 + vd5) >= (1 + vd5)) && (ifres68 == (1 + vd5))) || (((1 + vd5) < (1 + vd5)) && (ifres68 == (1 + vd5)))) && (((d43 >= d44) && (ifres67 == d43)) || ((d43 < d44) && (ifres67 == d44))) && (vd5 == ((1 + d32) + ifres69)) && (tres6 == r194) && (ts96 == vr4._1) && (r194 == mergeSort(ts96)) && (e1 == ts97) && (ts97 == tres7._1) && (r31 == dv) && (e5 == ts98) && (ts98 == tres6._1) && (d49 == ts99) && (ts99 == tres6._2) && ((2 * dv) <= r32) && (br7 == e3) && (((d33 >= 0) && (ifres70 == d33)) || ((d33 < 0) && (ifres70 == 0))) && (r32 < ((2 * dv) + 1)) && (d45 == ts100) && (ts100 == tres4._2) && (((0 >= d31) && (ifres69 == 0)) || ((0 < d31) && (ifres69 == d31))) && (br6 == br7) && (vr4 == tp20) && (ts101 == vr5._1) && (ts102 == vr5._2) && (tp20 == (ts101, ts102)) && (d36 == ts103) && (ts103 == tres8._2) && (relse3 == br4) && (vd4 == (2 + ifres68)) && (tres5 == r195) && (ts104 == vr4._2) && (r195 == mergeSort(ts104)) && (r32 == e2) && (bd6 == (bd7 + 1)) && (d43 == ((1 + d49) + (1 + vd4))) && (delse3 == (bd4 + 1)) && (d32 == ts105) && (ts105 == tres7._2) && (d47 == ts106) && (ts106 == tres5._2) && (e2 == ts107) && (ts107 == tres8._1) && (br4 == br6) && (vr5 == e1) && (((3 >= delse3) && (ifres66 == 3)) || ((3 < delse3) && (ifres66 == delse3))) && (e4 == ts108) && (ts108 == tres5._1) && (d33 == (1 + d36)) && (tres7 == r196) && (r196 == split(list, r31)) && (tres4 == r197) && (r197 == merge(r41, r42)) && (tres8 == r198) && (r198 == length(list)) && (d44 == ((1 + d47) + (1 + vd4))) && (r42 == e4) && (d31 == (1 + ifres70)) && (e3 == ts109) && (ts109 == tres4._1))) && (relse2 == ts110) && (ts110 == ifres64._1) && (delse2 == ts111) && (ts111 == ifres64._2) && (((1 >= delse2) && (ifres63 == 1)) || ((1 < delse2) && (ifres63 == delse2))))))
Flattened Post: ((((r199 < r200) && (ts112 == res15._1) && (r199 == size(ts112)) && (r200 == size(list))) || ((r201 > r202) && (ts113 == res15._1) && (r201 == size(ts113)) && (r202 == size(list)))) || ((ts114 > ((a?3 * r203) + b?3)) && (ts114 == res15._2) && (r203 == size(list))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
mergeSort-->((((1 * res15._2) + (0 * size(list))) + 0) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 10
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
mergeSort-->((((-1 * size(list)) + (1 * res15._2)) + -5) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 191
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 13 + 10
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 15/22
Unrolled calls: Set((r209 == size(ts118)), (r207 == size(r41)), (r206 == size(list)), (r210 == size(ts119)), (r215 == size(ts123)), (r204 == size(ts115)), (r203 == size(list)), (r196 == split(list, r31)), (r198 == length(list)), (r205 == size(ts104)), (r213 == size(ts121)), (r214 == size(list)), (r197 == merge(r41, r42)), (r211 == size(ts96)), (r208 == size(r42)))
Creating VC for size
Unrolling (r211 == size(ts96))
Unrolling (r209 == size(ts118))
Unrolling (r204 == size(ts115))
Unrolling (r215 == size(ts123))
Unrolling (r208 == size(r42))
Unrolling (r207 == size(r41))
Unrolling (r210 == size(ts119))
Creating VC for length
Unrolling (r198 == length(list))
Unrolling (r205 == size(ts104))
Creating VC for merge
Unrolling (r197 == merge(r41, r42))
Unrolling (r203 == size(list))
Unrolling (r213 == size(ts121))
Creating VC for split
Unrolling (r196 == split(list, r31))
Unrolling (r206 == size(list))
Unrolling (r214 == size(list))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
mergeSort-->((((0 * size(list)) + (1 * res15._2)) + 0) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: merge--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 75
[[34m Info  [0m] Number of equal calls: 14
Function: split--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 40
[[34m Info  [0m] Number of equal calls: 11
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 5
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 16
[[34m Info  [0m] Number of equal calls: 4
# of atomic predicates: 0 + 0
solving...
solved... in 0.004s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 9/60
Unrolled calls: Set((r256 == size(ts171)), (r255 == size(bList)), (r244 == size(l)), (r236 == size(bList)), (r266 == size(cs56)), (r237 == size(aList)), (r228 == size(l)), (r254 == size(cs61)), (r267 == size(cs78)))
Unrolling (r266 == size(cs56))
Unrolling (r256 == size(ts171))
Unrolling (r237 == size(aList))
Unrolling (r244 == size(l))
Unrolling (r267 == size(cs78))
Unrolling (r236 == size(bList))
Unrolling (r255 == size(bList))
Unrolling (r254 == size(cs61))
Unrolling (r228 == size(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((0 * res14) + 0) ≤ 0)
mergeSort-->((((1 * res15._2) + (0 * size(list))) + 0) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 12
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 14 + 0
solving...
solved... in 0.006s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((32 * res14) + 37) ≤ 0)
mergeSort-->((((2 * res15._2) + (2 * size(list))) + -1) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 14
solving...
solved... in 0.005s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((1 * res14) + -1) ≤ 0)
mergeSort-->((((2 * res15._2) + (-2 * size(list))) + -13) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 11 + 22
solving...
solved... in 0.006s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((-1 * res14) + -2) ≤ 0)
mergeSort-->((((1 * res15._2) + (-3 * size(list))) + -6) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1605
[[34m Info  [0m] Number of equal calls: 103
# of atomic predicates: 101 + 33
solving...
solved... in 0.091s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
mergeSort-->((((1 * res15._2) + (-27 * size(list))) + 23) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 134
solving...
solved... in 0.084s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
mergeSort-->((((1 * res15._2) + (-27 * size(list))) + -2) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1605
[[34m Info  [0m] Number of equal calls: 101
# of atomic predicates: 104 + 145
solving...
solved... in 0.252s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
mergeSort-->((((1 * res15._2) + (-34 * size(list))) + -2) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Function: mergeSort--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1605
[[34m Info  [0m] Number of equal calls: 103
# of atomic predicates: 108 + 249
solving...
solved... in 0.435s
candidate Invariants
merge-->(((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) ≤ 0)
split-->((((1 * res13._2) + (-11 * n)) + -2) ≤ 0)
size-->(((-1 * res14) + -1) ≤ 0)
mergeSort-->((((1 * res15._2) + (-40 * size(list))) + -2) ≤ 0)
length-->((((-3 * size(l)) + (1 * res11._2)) + -1) ≤ 0)
Nesting level: a?3-->1
Nesting level: b?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 40
Found new lower bound: 20
Found new lower bound: 30
Found new lower bound: 35
Found new lower bound: 37
Found new lower bound: 38
Found new upper bound: 39
Minimizing variable: b?3 Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: merge --> (((((-3 * size(bList)) + (-3 * size(aList))) + (1 * res12._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: split --> ((((1 * res13._2) + (-11 * n)) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * res14) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: mergeSort --> ((((1 * res15._2) + (-39 * size(list))) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: length --> ((((-3 * size(l)) + (1 * res11._2)) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
