After Depth Instrumentation: 
object TreeOperations {
  sealed abstract class Tree

  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  case class Node(left: Tree, value: Int, right: Tree) extends Tree

  case class Leaf() extends Tree

  sealed abstract class List

  def removeAll(l : List, t : Tree) : (Tree, Int) = {locally {
    val dcond6 = 1
    if (l.isInstanceOf[Nil]) {
      (t, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Tree, delse6: Int) = locally {
          val (r74: Tree, d71: Int) = locally {
            val (e5: Tree, d75: Int) = remove(l.head, t)
            (e5, (2 + d75))
          }
          
          locally {
            val (e4: Tree, d72: Int) = removeAll(l.tail, r74)
            (e4, ((1 + d72) + if ((1 >= d71)) {
              1
            } else {
              d71
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  } ensuring(res => true)

  def remove(elem : Int, t : Tree) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond >= 1)) {
        dcond
      } else {
        1
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((t.value < elem)) {
            locally {
              val (rthen1: Node, dthen1: Int) = locally {
                val (r13: Tree, d6: Int) = locally {
                  val (e: Tree, d9: Int) = remove(elem, t.right)
                  (e, (2 + d9))
                }
                
                (Node(t.left, t.value, r13), (1 + if ((1 >= d6)) {
                  1
                } else {
                  d6
                }))
              }
              
              (rthen1, if ((dcond1 >= dthen1)) {
                dcond1
              } else {
                dthen1
              })
            }
            
          } else {
            locally {
              val (relse1: Tree, delse1: Int) = locally {
                val dcond2 = 2
                if ((t.value > elem)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (r22: Tree, d16: Int) = locally {
                        val (e1: Tree, d23: Int) = remove(elem, t.left)
                        (e1, (2 + d23))
                      }
                      
                      (Node(r22, t.value, t.right), (1 + if ((if ((d16 >= 1)) {
                        d16
                      } else {
                        1
                      } >= 1)) {
                        if ((d16 >= 1)) {
                          d16
                        } else {
                          1
                        }
                      } else {
                        1
                      }))
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Tree, delse2: Int) = locally {
                      val dcond3 = 3
                      if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
                        (Leaf(), if ((dcond3 >= 1)) {
                          dcond3
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse3: Tree, delse3: Int) = locally {
                            val dcond4 = 3
                            if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Node])) {
                              locally {
                                val (rthen4: Node, dthen4: Int) = locally {
                                  val (r48: Tree, d43: Int) = locally {
                                    val (e2: Tree, d46: Int) = remove(t.right.value, t.right)
                                    (e2, (3 + d46))
                                  }
                                  
                                  (Node(Leaf(), t.right.value, r48), (1 + if ((2 >= d43)) {
                                    2
                                  } else {
                                    d43
                                  }))
                                }
                                
                                (rthen4, if ((dcond4 >= dthen4)) {
                                  dcond4
                                } else {
                                  dthen4
                                })
                              }
                              
                            } else {
                              locally {
                                val (relse4: Tree, delse4: Int) = locally {
                                  val dcond5 = 3
                                  if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
                                    locally {
                                      val (rthen5: Node, dthen5: Int) = locally {
                                        val (r61: Tree, d57: Int) = locally {
                                          val (e3: Tree, d65: Int) = remove(t.left.value, t.left)
                                          (e3, (3 + d65))
                                        }
                                        
                                        (Node(r61, t.left.value, t.right), (1 + if ((if ((d57 >= 2)) {
                                          d57
                                        } else {
                                          2
                                        } >= 1)) {
                                          if ((d57 >= 2)) {
                                            d57
                                          } else {
                                            2
                                          }
                                        } else {
                                          1
                                        }))
                                      }
                                      
                                      (rthen5, if ((dcond5 >= dthen5)) {
                                        dcond5
                                      } else {
                                        dthen5
                                      })
                                    }
                                    
                                  } else {
                                    (Leaf(), if ((dcond5 >= 1)) {
                                      dcond5
                                    } else {
                                      1
                                    })
                                  }
                                }
                                
                                (relse4, if ((dcond4 >= delse4)) {
                                  dcond4
                                } else {
                                  delse4
                                })
                              }
                              
                            }
                          }
                          
                          (relse3, if ((dcond3 >= delse3)) {
                            dcond3
                          } else {
                            delse3
                          })
                        }
                        
                      }
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res => (height(res._1) <= height(t)))

  def contains(elem : Int, t : Tree) : (Boolean, Int) = {locally {
    val dcond9 = 1
    if (t.isInstanceOf[Leaf]) {
      (false, if ((dcond9 >= 0)) {
        dcond9
      } else {
        0
      })
    } else {
      locally {
        val (relse9: Boolean, delse9: Int) = locally {
          val dcond10 = 2
          if ((t.value == elem)) {
            (true, if ((dcond10 >= 0)) {
              dcond10
            } else {
              0
            })
          } else {
            locally {
              val (relse10: Boolean, delse10: Int) = locally {
                val dcond11 = 2
                if ((t.value < elem)) {
                  locally {
                    val (rthen11: Boolean, dthen11: Int) = locally {
                      val (e8: Boolean, d112: Int) = contains(elem, t.right)
                      (e8, (2 + d112))
                    }
                    
                    (rthen11, if ((dcond11 >= dthen11)) {
                      dcond11
                    } else {
                      dthen11
                    })
                  }
                  
                } else {
                  locally {
                    val (relse11: Boolean, delse11: Int) = locally {
                      val (e9: Boolean, d116: Int) = contains(elem, t.left)
                      (e9, (2 + d116))
                    }
                    
                    (relse11, if ((dcond11 >= delse11)) {
                      dcond11
                    } else {
                      delse11
                    })
                  }
                  
                }
              }
              
              (relse10, if ((dcond10 >= delse10)) {
                dcond10
              } else {
                delse10
              })
            }
            
          }
        }
        
        (relse9, if ((dcond9 >= delse9)) {
          dcond9
        } else {
          delse9
        })
      }
      
    }
  }
  } ensuring(res => true)

  def addAll(l : List, t : Tree) : (Tree, Int) = {locally {
    val dcond12 = 1
    if (l.isInstanceOf[Nil]) {
      (t, if ((dcond12 >= 0)) {
        dcond12
      } else {
        0
      })
    } else {
      locally {
        val (relse12: Tree, delse12: Int) = locally {
          val (vr: Tree, vd: Int) = locally {
            val (e10: Tree, d121: Int) = insert(l.head, t)
            (e10, (2 + d121))
          }
          
          locally {
            val (br: Tree, bd: Int) = locally {
              val (e11: Tree, d125: Int) = addAll(l.tail, vr)
              (e11, ((1 + d125) + if ((1 >= vd)) {
                1
              } else {
                vd
              }))
            }
            
            (br, (bd + 1))
          }
          
        }
        
        (relse12, if ((dcond12 >= delse12)) {
          dcond12
        } else {
          delse12
        })
      }
      
    }
  }
  } ensuring(res => true)

  def insert(elem : Int, t : Tree) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), elem, Leaf()), if ((dcond7 >= 2)) {
        dcond7
      } else {
        2
      })
    } else {
      locally {
        val (relse7: Node, delse7: Int) = locally {
          val dcond8 = 2
          if ((t.value <= elem)) {
            locally {
              val (rthen8: Node, dthen8: Int) = locally {
                val (r88: Tree, d87: Int) = locally {
                  val (e6: Tree, d90: Int) = insert(elem, t.right)
                  (e6, (2 + d90))
                }
                
                (Node(t.left, t.value, r88), (1 + if ((1 >= d87)) {
                  1
                } else {
                  d87
                }))
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse8: Node, delse8: Int) = locally {
                val (r94: Tree, d94: Int) = locally {
                  val (e7: Tree, d101: Int) = insert(elem, t.left)
                  (e7, (2 + d101))
                }
                
                (Node(r94, t.value, t.right), (1 + if ((if ((d94 >= 1)) {
                  d94
                } else {
                  1
                } >= 1)) {
                  if ((d94 >= 1)) {
                    d94
                  } else {
                    1
                  }
                } else {
                  1
                }))
              }
              
              (relse8, if ((dcond8 >= delse8)) {
                dcond8
              } else {
                delse8
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  } ensuring(res => (height(res._1) <= (height(t) + 1)))

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      ((size(l) + size(r)) + 1)
  })}

  def listSize(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + listSize(t))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: removeAll
Defined fun: remove
Defined fun: contains
Defined fun: addAll
Defined fun: insert
Defined fun: size
Defined fun: listSize
Defined fun: height
Defined fun: max
FunMap: Map(height -> height, addAll -> addAll, contains -> contains, max -> max, insert -> insert, remove -> remove, size -> size, removeAll -> removeAll, listSize -> listSize)
After Time Instrumentation: 
object TreeOperations {
  sealed abstract class Tree

  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  case class Node(left: Tree, value: Int, right: Tree) extends Tree

  case class Leaf() extends Tree

  sealed abstract class List

  def removeAll(l : List, t : Tree) : (Tree, Int) = {locally {
    val dcond6 = 1
    if (l.isInstanceOf[Nil]) {
      (t, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Tree, delse6: Int) = locally {
          val (r74: Tree, d71: Int) = locally {
            val (e5: Tree, d75: Int) = remove(l.head, t)
            (e5, (2 + d75))
          }
          
          locally {
            val (e4: Tree, d72: Int) = removeAll(l.tail, r74)
            (e4, ((1 + d72) + if ((1 >= d71)) {
              1
            } else {
              d71
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  } ensuring(res15 => true)

  def remove(elem : Int, t : Tree) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond >= 1)) {
        dcond
      } else {
        1
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((t.value < elem)) {
            locally {
              val (rthen1: Node, dthen1: Int) = locally {
                val (r13: Tree, d6: Int) = locally {
                  val (e: Tree, d9: Int) = remove(elem, t.right)
                  (e, (2 + d9))
                }
                
                (Node(t.left, t.value, r13), (1 + if ((1 >= d6)) {
                  1
                } else {
                  d6
                }))
              }
              
              (rthen1, if ((dcond1 >= dthen1)) {
                dcond1
              } else {
                dthen1
              })
            }
            
          } else {
            locally {
              val (relse1: Tree, delse1: Int) = locally {
                val dcond2 = 2
                if ((t.value > elem)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (r22: Tree, d16: Int) = locally {
                        val (e1: Tree, d23: Int) = remove(elem, t.left)
                        (e1, (2 + d23))
                      }
                      
                      (Node(r22, t.value, t.right), (1 + if ((if ((d16 >= 1)) {
                        d16
                      } else {
                        1
                      } >= 1)) {
                        if ((d16 >= 1)) {
                          d16
                        } else {
                          1
                        }
                      } else {
                        1
                      }))
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Tree, delse2: Int) = locally {
                      val dcond3 = 3
                      if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
                        (Leaf(), if ((dcond3 >= 1)) {
                          dcond3
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse3: Tree, delse3: Int) = locally {
                            val dcond4 = 3
                            if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Node])) {
                              locally {
                                val (rthen4: Node, dthen4: Int) = locally {
                                  val (r48: Tree, d43: Int) = locally {
                                    val (e2: Tree, d46: Int) = remove(t.right.value, t.right)
                                    (e2, (3 + d46))
                                  }
                                  
                                  (Node(Leaf(), t.right.value, r48), (1 + if ((2 >= d43)) {
                                    2
                                  } else {
                                    d43
                                  }))
                                }
                                
                                (rthen4, if ((dcond4 >= dthen4)) {
                                  dcond4
                                } else {
                                  dthen4
                                })
                              }
                              
                            } else {
                              locally {
                                val (relse4: Tree, delse4: Int) = locally {
                                  val dcond5 = 3
                                  if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
                                    locally {
                                      val (rthen5: Node, dthen5: Int) = locally {
                                        val (r61: Tree, d57: Int) = locally {
                                          val (e3: Tree, d65: Int) = remove(t.left.value, t.left)
                                          (e3, (3 + d65))
                                        }
                                        
                                        (Node(r61, t.left.value, t.right), (1 + if ((if ((d57 >= 2)) {
                                          d57
                                        } else {
                                          2
                                        } >= 1)) {
                                          if ((d57 >= 2)) {
                                            d57
                                          } else {
                                            2
                                          }
                                        } else {
                                          1
                                        }))
                                      }
                                      
                                      (rthen5, if ((dcond5 >= dthen5)) {
                                        dcond5
                                      } else {
                                        dthen5
                                      })
                                    }
                                    
                                  } else {
                                    (Leaf(), if ((dcond5 >= 1)) {
                                      dcond5
                                    } else {
                                      1
                                    })
                                  }
                                }
                                
                                (relse4, if ((dcond4 >= delse4)) {
                                  dcond4
                                } else {
                                  delse4
                                })
                              }
                              
                            }
                          }
                          
                          (relse3, if ((dcond3 >= delse3)) {
                            dcond3
                          } else {
                            delse3
                          })
                        }
                        
                      }
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res14 => (height(res14._1) <= height(t)))

  def contains(elem : Int, t : Tree) : (Boolean, Int) = {locally {
    val dcond9 = 1
    if (t.isInstanceOf[Leaf]) {
      (false, if ((dcond9 >= 0)) {
        dcond9
      } else {
        0
      })
    } else {
      locally {
        val (relse9: Boolean, delse9: Int) = locally {
          val dcond10 = 2
          if ((t.value == elem)) {
            (true, if ((dcond10 >= 0)) {
              dcond10
            } else {
              0
            })
          } else {
            locally {
              val (relse10: Boolean, delse10: Int) = locally {
                val dcond11 = 2
                if ((t.value < elem)) {
                  locally {
                    val (rthen11: Boolean, dthen11: Int) = locally {
                      val (e8: Boolean, d112: Int) = contains(elem, t.right)
                      (e8, (2 + d112))
                    }
                    
                    (rthen11, if ((dcond11 >= dthen11)) {
                      dcond11
                    } else {
                      dthen11
                    })
                  }
                  
                } else {
                  locally {
                    val (relse11: Boolean, delse11: Int) = locally {
                      val (e9: Boolean, d116: Int) = contains(elem, t.left)
                      (e9, (2 + d116))
                    }
                    
                    (relse11, if ((dcond11 >= delse11)) {
                      dcond11
                    } else {
                      delse11
                    })
                  }
                  
                }
              }
              
              (relse10, if ((dcond10 >= delse10)) {
                dcond10
              } else {
                delse10
              })
            }
            
          }
        }
        
        (relse9, if ((dcond9 >= delse9)) {
          dcond9
        } else {
          delse9
        })
      }
      
    }
  }
  } ensuring(res12 => true)

  def addAll(l : List, t : Tree) : (Tree, Int) = {locally {
    val dcond12 = 1
    if (l.isInstanceOf[Nil]) {
      (t, if ((dcond12 >= 0)) {
        dcond12
      } else {
        0
      })
    } else {
      locally {
        val (relse12: Tree, delse12: Int) = locally {
          val (vr: Tree, vd: Int) = locally {
            val (e10: Tree, d121: Int) = insert(l.head, t)
            (e10, (2 + d121))
          }
          
          locally {
            val (br: Tree, bd: Int) = locally {
              val (e11: Tree, d125: Int) = addAll(l.tail, vr)
              (e11, ((1 + d125) + if ((1 >= vd)) {
                1
              } else {
                vd
              }))
            }
            
            (br, (bd + 1))
          }
          
        }
        
        (relse12, if ((dcond12 >= delse12)) {
          dcond12
        } else {
          delse12
        })
      }
      
    }
  }
  } ensuring(res11 => true)

  def insert(elem : Int, t : Tree) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), elem, Leaf()), if ((dcond7 >= 2)) {
        dcond7
      } else {
        2
      })
    } else {
      locally {
        val (relse7: Node, delse7: Int) = locally {
          val dcond8 = 2
          if ((t.value <= elem)) {
            locally {
              val (rthen8: Node, dthen8: Int) = locally {
                val (r88: Tree, d87: Int) = locally {
                  val (e6: Tree, d90: Int) = insert(elem, t.right)
                  (e6, (2 + d90))
                }
                
                (Node(t.left, t.value, r88), (1 + if ((1 >= d87)) {
                  1
                } else {
                  d87
                }))
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse8: Node, delse8: Int) = locally {
                val (r94: Tree, d94: Int) = locally {
                  val (e7: Tree, d101: Int) = insert(elem, t.left)
                  (e7, (2 + d101))
                }
                
                (Node(r94, t.value, t.right), (1 + if ((if ((d94 >= 1)) {
                  d94
                } else {
                  1
                } >= 1)) {
                  if ((d94 >= 1)) {
                    d94
                  } else {
                    1
                  }
                } else {
                  1
                }))
              }
              
              (relse8, if ((dcond8 >= delse8)) {
                dcond8
              } else {
                delse8
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  } ensuring(res13 => (height(res13._1) <= (height(t) + 1)))

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      ((size(l) + size(r)) + 1)
  })}

  def listSize(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + listSize(t))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object TreeOperations {
  sealed abstract class Tree

  case class Cons(head: Int, tail: List) extends List

  case class Nil() extends List

  case class Node(left: Tree, value: Int, right: Tree) extends Tree

  case class Leaf() extends Tree

  sealed abstract class List

  def removeAll(l : List, t : Tree) : (Tree, Int) = {if (l.isInstanceOf[Nil]) {
    (t, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse6: Tree, delse6: Int) = locally {
        val (r74: Tree, d71: Int) = locally {
          val (e5: Tree, d75: Int) = remove(l.head, t)
          (e5, (2 + d75))
        }
        
        locally {
          val (e4: Tree, d72: Int) = removeAll(l.tail, r74)
          (e4, ((1 + d72) + if ((1 >= d71)) {
            1
          } else {
            d71
          }))
        }
        
      }
      
      (relse6, if ((1 >= delse6)) {
        1
      } else {
        delse6
      })
    }
    
  }} ensuring(res15 => true)

  def remove(elem : Int, t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse: Tree, delse: Int) = if ((t.value < elem)) {
        locally {
          val (rthen1: Node, dthen1: Int) = locally {
            val (r13: Tree, d6: Int) = locally {
              val (e: Tree, d9: Int) = remove(elem, t.right)
              (e, (2 + d9))
            }
            
            (Node(t.left, t.value, r13), (1 + if ((1 >= d6)) {
              1
            } else {
              d6
            }))
          }
          
          (rthen1, if ((2 >= dthen1)) {
            2
          } else {
            dthen1
          })
        }
        
      } else {
        locally {
          val (relse1: Tree, delse1: Int) = if ((t.value > elem)) {
            locally {
              val (rthen2: Node, dthen2: Int) = locally {
                val (r22: Tree, d16: Int) = locally {
                  val (e1: Tree, d23: Int) = remove(elem, t.left)
                  (e1, (2 + d23))
                }
                
                (Node(r22, t.value, t.right), (1 + if ((if ((d16 >= 1)) {
                  d16
                } else {
                  1
                } >= 1)) {
                  if ((d16 >= 1)) {
                    d16
                  } else {
                    1
                  }
                } else {
                  1
                }))
              }
              
              (rthen2, if ((2 >= dthen2)) {
                2
              } else {
                dthen2
              })
            }
            
          } else {
            locally {
              val (relse2: Tree, delse2: Int) = if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
                (Leaf(), if ((3 >= 1)) {
                  3
                } else {
                  1
                })
              } else {
                locally {
                  val (relse3: Tree, delse3: Int) = if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Node])) {
                    locally {
                      val (rthen4: Node, dthen4: Int) = locally {
                        val (r48: Tree, d43: Int) = locally {
                          val (e2: Tree, d46: Int) = remove(t.right.value, t.right)
                          (e2, (3 + d46))
                        }
                        
                        (Node(Leaf(), t.right.value, r48), (1 + if ((2 >= d43)) {
                          2
                        } else {
                          d43
                        }))
                      }
                      
                      (rthen4, if ((3 >= dthen4)) {
                        3
                      } else {
                        dthen4
                      })
                    }
                    
                  } else {
                    locally {
                      val (relse4: Tree, delse4: Int) = if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
                        locally {
                          val (rthen5: Node, dthen5: Int) = locally {
                            val (r61: Tree, d57: Int) = locally {
                              val (e3: Tree, d65: Int) = remove(t.left.value, t.left)
                              (e3, (3 + d65))
                            }
                            
                            (Node(r61, t.left.value, t.right), (1 + if ((if ((d57 >= 2)) {
                              d57
                            } else {
                              2
                            } >= 1)) {
                              if ((d57 >= 2)) {
                                d57
                              } else {
                                2
                              }
                            } else {
                              1
                            }))
                          }
                          
                          (rthen5, if ((3 >= dthen5)) {
                            3
                          } else {
                            dthen5
                          })
                        }
                        
                      } else {
                        (Leaf(), if ((3 >= 1)) {
                          3
                        } else {
                          1
                        })
                      }
                      (relse4, if ((3 >= delse4)) {
                        3
                      } else {
                        delse4
                      })
                    }
                    
                  }
                  (relse3, if ((3 >= delse3)) {
                    3
                  } else {
                    delse3
                  })
                }
                
              }
              (relse2, if ((2 >= delse2)) {
                2
              } else {
                delse2
              })
            }
            
          }
          (relse1, if ((2 >= delse1)) {
            2
          } else {
            delse1
          })
        }
        
      }
      (relse, if ((1 >= delse)) {
        1
      } else {
        delse
      })
    }
    
  }} ensuring(res14 => (height(res14._1) <= height(t)))

  def contains(elem : Int, t : Tree) : (Boolean, Int) = {if (t.isInstanceOf[Leaf]) {
    (false, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse9: Boolean, delse9: Int) = if ((t.value == elem)) {
        (true, if ((2 >= 0)) {
          2
        } else {
          0
        })
      } else {
        locally {
          val (relse10: Boolean, delse10: Int) = if ((t.value < elem)) {
            locally {
              val (rthen11: Boolean, dthen11: Int) = locally {
                val (e8: Boolean, d112: Int) = contains(elem, t.right)
                (e8, (2 + d112))
              }
              
              (rthen11, if ((2 >= dthen11)) {
                2
              } else {
                dthen11
              })
            }
            
          } else {
            locally {
              val (relse11: Boolean, delse11: Int) = locally {
                val (e9: Boolean, d116: Int) = contains(elem, t.left)
                (e9, (2 + d116))
              }
              
              (relse11, if ((2 >= delse11)) {
                2
              } else {
                delse11
              })
            }
            
          }
          (relse10, if ((2 >= delse10)) {
            2
          } else {
            delse10
          })
        }
        
      }
      (relse9, if ((1 >= delse9)) {
        1
      } else {
        delse9
      })
    }
    
  }} ensuring(res12 => true)

  def addAll(l : List, t : Tree) : (Tree, Int) = {if (l.isInstanceOf[Nil]) {
    (t, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse12: Tree, delse12: Int) = locally {
        val (vr: Tree, vd: Int) = locally {
          val (e10: Tree, d121: Int) = insert(l.head, t)
          (e10, (2 + d121))
        }
        
        locally {
          val (br: Tree, bd: Int) = locally {
            val (e11: Tree, d125: Int) = addAll(l.tail, vr)
            (e11, ((1 + d125) + if ((1 >= vd)) {
              1
            } else {
              vd
            }))
          }
          
          (br, (bd + 1))
        }
        
      }
      
      (relse12, if ((1 >= delse12)) {
        1
      } else {
        delse12
      })
    }
    
  }} ensuring(res11 => true)

  def insert(elem : Int, t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Node(Leaf(), elem, Leaf()), if ((1 >= 2)) {
      1
    } else {
      2
    })
  } else {
    locally {
      val (relse7: Node, delse7: Int) = if ((t.value <= elem)) {
        locally {
          val (rthen8: Node, dthen8: Int) = locally {
            val (r88: Tree, d87: Int) = locally {
              val (e6: Tree, d90: Int) = insert(elem, t.right)
              (e6, (2 + d90))
            }
            
            (Node(t.left, t.value, r88), (1 + if ((1 >= d87)) {
              1
            } else {
              d87
            }))
          }
          
          (rthen8, if ((2 >= dthen8)) {
            2
          } else {
            dthen8
          })
        }
        
      } else {
        locally {
          val (relse8: Node, delse8: Int) = locally {
            val (r94: Tree, d94: Int) = locally {
              val (e7: Tree, d101: Int) = insert(elem, t.left)
              (e7, (2 + d101))
            }
            
            (Node(r94, t.value, t.right), (1 + if ((if ((d94 >= 1)) {
              d94
            } else {
              1
            } >= 1)) {
              if ((d94 >= 1)) {
                d94
              } else {
                1
              }
            } else {
              1
            }))
          }
          
          (relse8, if ((2 >= delse8)) {
            2
          } else {
            delse8
          })
        }
        
      }
      (relse7, if ((1 >= delse7)) {
        1
      } else {
        delse7
      })
    }
    
  }} ensuring(res13 => (height(res13._1) <= (height(t) + 1)))

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      ((size(l) + size(r)) + 1)
  })}

  def listSize(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + listSize(t))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          if ((hl > hr)) {
            (hl + 1)
          } else {
            (hr + 1)
          }
        }
        
      }
      
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def mult(x : Int, y : Int) : Int = {locally {
    val r = locally {
      val px = if ((x < 0)) {
        -(x)
      } else {
        x
      }
      locally {
        val py = if ((y < 0)) {
          -(y)
        } else {
          y
        }
        pmult(px, py)
      }
      
    }
    
    if ((((x >= 0) && (y >= 0)) || ((x < 0) && (y < 0)))) {
      r
    } else {
      -(r)
    }
  }
  }

  def pmult(x : Int, y : Int) : Int = {if (((x == 0) || (y == 0))) {
    0
  } else {
    (pmult((x - 1), y) + y)
  }} ensuring(res => ((res >= 0) && (((x == 0) || (y == 0)) || (res == (pmult(x, (y - 1)) + x)))))
}

Function: removeAll template --> (res15._2 ≤ (((a?3 * mult(listSize(l), height(t))) + (b?3 * listSize(l))) + c?2))
Function: remove template --> (res14._2 ≤ ((a?2 * height(t)) + b?2))
Function: contains template --> (res12._2 ≤ ((a?4 * height(t)) + b?4))
Function: addAll template --> (res11._2 ≤ (((a?1 * mult(listSize(l), (height(t) + listSize(l)))) + (b?1 * listSize(l))) + c?))
Function: insert template --> (res13._2 ≤ ((a? * height(t)) + b?))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(height, remove, pmult, size, mult, listSize, removeAll, insert, addAll, contains)
[[34m Info  [0m] - considering function remove...
[[34m Info  [0m] Body: if (t.isInstanceOf[Leaf])
            (Leaf(), if ((1 ≥ 1))
              1
            else
              1)
          else
            (let (relse,delse := if ((t.value < elem))
              (let (rthen1,dthen1 := (let (r13,d6 := (let (e,d9 := remove(elem, t.right)) in
                (e, (2 + d9)))) in
                (Node(t.left, t.value, r13), (1 + if ((1 ≥ d6))
                  1
                else
                  d6)))) in
                (rthen1, if ((2 ≥ dthen1))
                  2
                else
                  dthen1))
            else
              (let (relse1,delse1 := if ((t.value > elem))
                (let (rthen2,dthen2 := (let (r22,d16 := (let (e1,d23 := remove(elem, t.left)) in
                  (e1, (2 + d23)))) in
                  (Node(r22, t.value, t.right), (1 + if ((if ((d16 ≥ 1))
                    d16
                  else
                    1 ≥ 1))
                    if ((d16 ≥ 1))
                      d16
                    else
                      1
                  else
                    1)))) in
                  (rthen2, if ((2 ≥ dthen2))
                    2
                  else
                    dthen2))
              else
                (let (relse2,delse2 := if ((t.isInstanceOf[Node] ∧ t.left.isInstanceOf[Leaf] ∧ t.right.isInstanceOf[Leaf]))
                  (Leaf(), if ((3 ≥ 1))
                    3
                  else
                    1)
                else
                  (let (relse3,delse3 := if ((t.isInstanceOf[Node] ∧ t.left.isInstanceOf[Leaf] ∧ t.right.isInstanceOf[Node]))
                    (let (rthen4,dthen4 := (let (r48,d43 := (let (e2,d46 := remove(t.right.value, t.right)) in
                      (e2, (3 + d46)))) in
                      (Node(Leaf(), t.right.value, r48), (1 + if ((2 ≥ d43))
                        2
                      else
                        d43)))) in
                      (rthen4, if ((3 ≥ dthen4))
                        3
                      else
                        dthen4))
                  else
                    (let (relse4,delse4 := if ((t.isInstanceOf[Node] ∧ t.left.isInstanceOf[Node]))
                      (let (rthen5,dthen5 := (let (r61,d57 := (let (e3,d65 := remove(t.left.value, t.left)) in
                        (e3, (3 + d65)))) in
                        (Node(r61, t.left.value, t.right), (1 + if ((if ((d57 ≥ 2))
                          d57
                        else
                          2 ≥ 1))
                          if ((d57 ≥ 2))
                            d57
                          else
                            2
                        else
                          1)))) in
                        (rthen5, if ((3 ≥ dthen5))
                          3
                        else
                          dthen5))
                    else
                      (Leaf(), if ((3 ≥ 1))
                        3
                      else
                        1)) in
                      (relse4, if ((3 ≥ delse4))
                        3
                      else
                        delse4))) in
                    (relse3, if ((3 ≥ delse3))
                      3
                    else
                      delse3))) in
                  (relse2, if ((2 ≥ delse2))
                    2
                  else
                    delse2))) in
                (relse1, if ((2 ≥ delse1))
                  2
                else
                  delse1))) in
              (relse, if ((1 ≥ delse))
                1
              else
                delse))
[[34m Info  [0m] Post: (height(res14._1) ≤ height(t))
falttened Body: ((res14 == ifres) && ((ci && (ci == t.isInstanceOf[Leaf]) && (ifres == tp) && (cc == Leaf()) && (tp == (cc, ifres1)) && (((1 >= 1) && (ifres1 == 1)) || ((1 < 1) && (ifres1 == 1)))) || (!(ci1) && (ci1 == t.isInstanceOf[Leaf]) && (ifres == tp1) && (tp1 == (relse, ifres2)) && (((cs < elem) && (cs == t.value) && (ifres3 == tp2) && (tp2 == (rthen1, ifres4)) && (((2 >= dthen1) && (ifres4 == 2)) || ((2 < dthen1) && (ifres4 == dthen1))) && (dthen1 == (1 + ifres5)) && (d6 == (2 + d9)) && (tres == r122) && (cs1 == t.right) && (r122 == remove(elem, cs1)) && (e == ts) && (ts == tres._1) && (((1 >= d6) && (ifres5 == 1)) || ((1 < d6) && (ifres5 == d6))) && (rthen1 == cc1) && (cs2 == t.left) && (cs3 == t.value) && (cc1 == Node(cs2, cs3, r13)) && (r13 == e) && (d9 == ts1) && (ts1 == tres._2)) || ((cs4 >= elem) && (cs4 == t.value) && (ifres3 == tp3) && (tp3 == (relse1, ifres6)) && (((cs5 > elem) && (cs5 == t.value) && (ifres7 == tp4) && (tp4 == (rthen2, ifres8)) && (dthen2 == (1 + ifres9)) && (rthen2 == cc2) && (cs6 == t.value) && (cs7 == t.right) && (cc2 == Node(r22, cs6, cs7)) && (tres1 == r123) && (cs8 == t.left) && (r123 == remove(elem, cs8)) && (r22 == e1) && (((2 >= dthen2) && (ifres8 == 2)) || ((2 < dthen2) && (ifres8 == dthen2))) && (d16 == (2 + d23)) && (d23 == ts2) && (ts2 == tres1._2) && (((ifres10 >= 1) && (((d16 >= 1) && (ifres10 == d16)) || ((d16 < 1) && (ifres10 == 1))) && (ifres9 == ifres11) && (((d16 >= 1) && (ifres11 == d16)) || ((d16 < 1) && (ifres11 == 1)))) || ((ifres12 < 1) && (((d16 >= 1) && (ifres12 == d16)) || ((d16 < 1) && (ifres12 == 1))) && (ifres9 == 1))) && (e1 == ts3) && (ts3 == tres1._1)) || ((cs9 <= elem) && (cs9 == t.value) && (ifres7 == tp5) && (tp5 == (relse2, ifres13)) && ((ci2 && (ci2 == t.isInstanceOf[Node]) && ci3 && (cs10 == t.left) && (ci3 == cs10.isInstanceOf[Leaf]) && ci4 && (cs11 == t.right) && (ci4 == cs11.isInstanceOf[Leaf]) && (ifres14 == tp6) && (cc3 == Leaf()) && (tp6 == (cc3, ifres15)) && (((3 >= 1) && (ifres15 == 3)) || ((3 < 1) && (ifres15 == 1)))) || (((!(ci5) && (ci5 == t.isInstanceOf[Node])) || (!(ci6) && (cs12 == t.left) && (ci6 == cs12.isInstanceOf[Leaf])) || (!(ci7) && (cs13 == t.right) && (ci7 == cs13.isInstanceOf[Leaf]))) && (ifres14 == tp7) && (tp7 == (relse3, ifres16)) && ((ci8 && (ci8 == t.isInstanceOf[Node]) && ci9 && (cs14 == t.left) && (ci9 == cs14.isInstanceOf[Leaf]) && ci10 && (cs15 == t.right) && (ci10 == cs15.isInstanceOf[Node]) && (ifres17 == tp8) && (tp8 == (rthen4, ifres18)) && (((2 >= d43) && (ifres19 == 2)) || ((2 < d43) && (ifres19 == d43))) && (dthen4 == (1 + ifres19)) && (r48 == e2) && (rthen4 == cc5) && (cc4 == Leaf()) && (cs16 == t.right) && (cs17 == cs16.value) && (cc5 == Node(cc4, cs17, r48)) && (((3 >= dthen4) && (ifres18 == 3)) || ((3 < dthen4) && (ifres18 == dthen4))) && (d46 == ts4) && (ts4 == tres2._2) && (tres2 == r124) && (cs18 == t.right) && (cs19 == cs18.value) && (cs20 == t.right) && (r124 == remove(cs19, cs20)) && (d43 == (3 + d46)) && (e2 == ts5) && (ts5 == tres2._1)) || (((!(ci11) && (ci11 == t.isInstanceOf[Node])) || (!(ci12) && (cs21 == t.left) && (ci12 == cs21.isInstanceOf[Leaf])) || (!(ci13) && (cs22 == t.right) && (ci13 == cs22.isInstanceOf[Node]))) && (ifres17 == tp9) && (tp9 == (relse4, ifres20)) && ((ci14 && (ci14 == t.isInstanceOf[Node]) && ci15 && (cs23 == t.left) && (ci15 == cs23.isInstanceOf[Node]) && (ifres21 == tp10) && (tp10 == (rthen5, ifres22)) && (d65 == ts6) && (ts6 == tres3._2) && (r61 == e3) && (((3 >= dthen5) && (ifres22 == 3)) || ((3 < dthen5) && (ifres22 == dthen5))) && (rthen5 == cc6) && (cs24 == t.left) && (cs25 == cs24.value) && (cs26 == t.right) && (cc6 == Node(r61, cs25, cs26)) && (((ifres24 >= 1) && (((d57 >= 2) && (ifres24 == d57)) || ((d57 < 2) && (ifres24 == 2))) && (ifres23 == ifres25) && (((d57 >= 2) && (ifres25 == d57)) || ((d57 < 2) && (ifres25 == 2)))) || ((ifres26 < 1) && (((d57 >= 2) && (ifres26 == d57)) || ((d57 < 2) && (ifres26 == 2))) && (ifres23 == 1))) && (tres3 == r125) && (cs27 == t.left) && (cs28 == cs27.value) && (cs29 == t.left) && (r125 == remove(cs28, cs29)) && (d57 == (3 + d65)) && (e3 == ts7) && (ts7 == tres3._1) && (dthen5 == (1 + ifres23))) || (((!(ci16) && (ci16 == t.isInstanceOf[Node])) || (!(ci17) && (cs30 == t.left) && (ci17 == cs30.isInstanceOf[Node]))) && (ifres21 == tp11) && (cc7 == Leaf()) && (tp11 == (cc7, ifres27)) && (((3 >= 1) && (ifres27 == 3)) || ((3 < 1) && (ifres27 == 1))))) && (relse4 == ts8) && (ts8 == ifres21._1) && (delse4 == ts9) && (ts9 == ifres21._2) && (((3 >= delse4) && (ifres20 == 3)) || ((3 < delse4) && (ifres20 == delse4))))) && (relse3 == ts10) && (ts10 == ifres17._1) && (delse3 == ts11) && (ts11 == ifres17._2) && (((3 >= delse3) && (ifres16 == 3)) || ((3 < delse3) && (ifres16 == delse3))))) && (relse2 == ts12) && (ts12 == ifres14._1) && (delse2 == ts13) && (ts13 == ifres14._2) && (((2 >= delse2) && (ifres13 == 2)) || ((2 < delse2) && (ifres13 == delse2))))) && (relse1 == ts14) && (ts14 == ifres7._1) && (delse1 == ts15) && (ts15 == ifres7._2) && (((2 >= delse1) && (ifres6 == 2)) || ((2 < delse1) && (ifres6 == delse1))))) && (relse == ts16) && (ts16 == ifres3._1) && (delse == ts17) && (ts17 == ifres3._2) && (((1 >= delse) && (ifres2 == 1)) || ((1 < delse) && (ifres2 == delse))))))
Flattened Post: (((r126 > r127) && (ts18 == res14._1) && (r126 == height(ts18)) && (r127 == height(t))) || ((ts19 > ((a?2 * r128) + b?2)) && (ts19 == res14._2) && (r128 == height(t))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
remove-->((((1 * res14._2) + (0 * height(t))) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 259
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 16 + 0
solving...
solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/15
Unrolled calls: Set((r131 == height(ts21)), (r128 == height(t)), (r132 == height(cs29)))
Creating VC for height
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function height : (((a?6 * #res) + a?5) ≤ 0)
Unrolling (r131 == height(ts21))
Unrolling (r128 == height(t))
Unrolling (r132 == height(cs29))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
remove-->((((0 * height(t)) + (1 * res14._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 246
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 21 + 0
solving...
solved... in 0.01s
candidate Invariants
remove-->((((16 * res14._2) + (-2 * height(t))) + -8) ≤ 0)
height-->(((0 * #res) + 47) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 8 + 21
solving...
solved... in 0.009s
candidate Invariants
remove-->((((1 * res14._2) + (-7 * height(t))) + 1) ≤ 0)
height-->(((0 * #res) + -1) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 15 + 29
solving...
solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/24
Unrolled calls: Set((r149 == height(cs20)), (r148 == height(cs1)), (r133 == height(ts22)), (r134 == height(cs1)), (r136 == height(cs20)), (r135 == height(ts23)))
Unrolling (r148 == height(cs1))
Unrolling (r136 == height(cs20))
Unrolling (r135 == height(ts23))
Unrolling (r149 == height(cs20))
Unrolling (r134 == height(cs1))
Unrolling (r133 == height(ts22))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
remove-->((((1 * res14._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 73
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 19 + 0
solving...
solved... in 0.007s
candidate Invariants
remove-->((((16 * res14._2) + (-2 * height(t))) + -8) ≤ 0)
height-->(((-36 * #res) + 1272) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 408
[[34m Info  [0m] Number of equal calls: 35
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 51 + 19
solving...
solved... in 0.026s
candidate Invariants
remove-->((((1 * res14._2) + (-5 * height(t))) + -5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 146
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 17 + 70
solving...
solved... in 0.02s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/30
Unrolled calls: Set((r147 == height(cs29)), (r126 == height(ts18)), (r127 == height(t)))
Unrolling (r147 == height(cs29))
Unrolling (r126 == height(ts18))
Unrolling (r127 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
remove-->((((0 * height(t)) + (1 * res14._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 466
[[34m Info  [0m] Number of equal calls: 40
# of atomic predicates: 44 + 0
solving...
solved... in 0.012s
candidate Invariants
remove-->((((2 * res14._2) + (-10 * height(t))) + -1) ≤ 0)
height-->(((4 * #res) + 8) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 180
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 53 + 44
solving...
solved... in 0.05s
candidate Invariants
remove-->((((-5 * height(t)) + (1 * res14._2)) + 9) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 26 + 97
solving...
solved... in 0.043s
candidate Invariants
remove-->((((1 * res14._2) + (-5 * height(t))) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 5
Found new upper bound: 1
Found new upper bound: -1
Found new upper bound: -3
Found new upper bound: -7
Found new upper bound: -15
Found new upper bound: -31
Found new upper bound: -63
Found new upper bound: -127
Found new upper bound: -255
Found new upper bound: -511
Found new upper bound: -1023
Found new upper bound: -2047
Found new upper bound: -4095
Found new upper bound: -8191
Found new upper bound: -16383
Found new upper bound: -32767
Minimizing variable: b?2 Initial upperbound: -1/2
Found new upper bound: -2
Found new upper bound: -5
Found new upper bound: -11
Found new upper bound: -23
Found new upper bound: -47
Found new upper bound: -95
Found new upper bound: -191
Found new upper bound: -383
Found new upper bound: -767
Found new upper bound: -1535
Found new upper bound: -3071
Found new upper bound: -6143
Found new upper bound: -12287
Found new upper bound: -24575
Found new upper bound: -49151
Found new upper bound: -98303
Minimization complete...
candidate Invariants
remove-->((((32767 * height(t)) + (1 * res14._2)) + 98303) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 123
solving...
solved... in 0.042s
candidate Invariants
remove-->((((1 * res14._2) + (-5 * height(t))) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: b?2 Initial upperbound: 1
Found new upper bound: 0
Found new upper bound: -5/4
Found new lower bound: -3
Minimization complete...
candidate Invariants
remove-->((((4 * res14._2) + (-16 * height(t))) + 5) ≤ 0)
height-->(((-8 * #res) + -1) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 73
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 19 + 131
solving...
solved... in 0.046s
candidate Invariants
remove-->((((-5 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: b?2 Initial upperbound: 1
Found new upper bound: -1/4
Found new upper bound: -1
Found new lower bound: -2
Minimization complete...
candidate Invariants
remove-->((((1 * res14._2) + (-4 * height(t))) + 1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 150
solving...
solved... in 0.04s
candidate Invariants
remove-->((((1 * res14._2) + (-5 * height(t))) + -1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: b?2 Initial upperbound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: remove --> ((((-4 * height(t)) + (1 * res14._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function removeAll...
[[34m Info  [0m] Body: if (l.isInstanceOf[Nil])
            (t, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse6,delse6 := (let (r74,d71 := (let (e5,d75 := remove(l.head, t)) in
              (e5, (2 + d75)))) in
              (let (e4,d72 := removeAll(l.tail, r74)) in
                (e4, ((1 + d72) + if ((1 ≥ d71))
                  1
                else
                  d71))))) in
              (relse6, if ((1 ≥ delse6))
                1
              else
                delse6))
[[34m Info  [0m] Post: true
falttened Body: ((res15 == ifres54) && ((ci44 && (ci44 == l.isInstanceOf[Nil]) && (ifres54 == tp12) && (tp12 == (t, ifres55)) && (((1 >= 0) && (ifres55 == 1)) || ((1 < 0) && (ifres55 == 0)))) || (!(ci45) && (ci45 == l.isInstanceOf[Nil]) && (ifres54 == tp13) && (tp13 == (relse6, ifres56)) && (tres4 == r185) && (cs57 == l.tail) && (r185 == removeAll(cs57, r74)) && (d71 == (2 + d75)) && (((1 >= delse6) && (ifres56 == 1)) || ((1 < delse6) && (ifres56 == delse6))) && (relse6 == e4) && (delse6 == ((1 + d72) + ifres57)) && (((1 >= d71) && (ifres57 == 1)) || ((1 < d71) && (ifres57 == d71))) && (e5 == ts46) && (ts46 == tres5._1) && (d72 == ts47) && (ts47 == tres4._2) && (d75 == ts48) && (ts48 == tres5._2) && (tres5 == r186) && (cs58 == l.head) && (r186 == remove(cs58, t)) && (e4 == ts49) && (ts49 == tres4._1) && (r74 == e5))))
Flattened Post: ((ts50 > (((a?3 * r189) + (b?3 * r190)) + c?2)) && (r187 == listSize(l)) && (r188 == height(t)) && (ts50 == res15._2) && (r189 == mult(r187, r188)) && (r190 == listSize(l)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeAll-->(((((0 * mult(listSize(l), height(t))) + (0 * listSize(l))) + (1 * res15._2)) + 0) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 26
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 11 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/8
Unrolled calls: Set((r187 == listSize(l)), (r188 == height(t)), (r189 == mult(r187, r188)), (r190 == listSize(l)), (r192 == height(t)), (r191 == height(ts51)), (r186 == remove(cs58, t)))
Inlining (r189 == mult(r187, r188))
Creating VC for height
Unrolling (r192 == height(t))
Creating VC for remove
Unrolling (r186 == remove(cs58, t))
Creating VC for listSize
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function listSize : (((a?8 * #res) + a?7) ≤ 0)
Unrolling (r187 == listSize(l))
Unrolling (r190 == listSize(l))
Unrolling (r188 == height(t))
Unrolling (r191 == height(ts51))
[[34m Info  [0m] Number of axiom instances: 8
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeAll-->(((((0 * mult(listSize(l), height(t))) + (0 * listSize(l))) + (1 * res15._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 277
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 39
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 259
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 27 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 12/44
Unrolled calls: Set((r244 == height(t)), (r211 == height(t)), (r248 == listSize(cs57)), (r245 == listSize(cs57)), (r239 == pmult(px1, arg)), (r227 == height(ts90)), (r246 == height(r74)), (r198 == pmult(px1, py1)), (r238 == height(cs95)), (r228 == height(cs89)), (r247 == mult(r245, r246)), (r237 == height(ts95)))
Unrolling (r245 == listSize(cs57))
Unrolling (r239 == pmult(px1, arg))
Unrolling (r227 == height(ts90))
Unrolling (r248 == listSize(cs57))
Unrolling (r238 == height(cs95))
Unrolling (r246 == height(r74))
Unrolling (r244 == height(t))
Inlining (r247 == mult(r245, r246))
Unrolling (r237 == height(ts95))
Unrolling (r228 == height(cs89))
Unrolling (r211 == height(t))
Unrolling (r198 == pmult(px1, py1))
[[34m Info  [0m] Number of axiom instances: 162
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeAll-->(((((1 * res15._2) + (0 * mult(listSize(l), height(t)))) + (0 * listSize(l))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 22 + 0
solving...
solved... in 0.006s
candidate Invariants
removeAll-->(((((0 * listSize(l)) + (2 * res15._2)) + (0 * mult(listSize(l), height(t)))) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 19) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 22
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/63
Unrolled calls: Set((r229 == height(ts91)), (r230 == height(cs66)), (r279 == height(cs66)))
Unrolling (r229 == height(ts91))
Unrolling (r230 == height(cs66))
Unrolling (r279 == height(cs66))
[[34m Info  [0m] Number of axiom instances: 338
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
removeAll-->(((((0 * listSize(l)) + (0 * mult(listSize(l), height(t)))) + (1 * res15._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 6
[[34m Info  [0m] Number of equal calls: 3
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 180
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 37 + 0
solving...
solved... in 0.01s
candidate Invariants
removeAll-->(((((2 * res15._2) + (0 * mult(listSize(l), height(t)))) + (0 * listSize(l))) + 1) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + 7) ≤ 0)
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 37
solving...
solved... in 0.008s
candidate Invariants
removeAll-->(((((0 * mult(listSize(l), height(t))) + (0 * listSize(l))) + (1 * res15._2)) + -5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 836
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 66
Function: remove--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 180
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 102 + 45
solving...
solved... in 0.021s
candidate Invariants
removeAll-->(((((-9 * listSize(l)) + (-1 * mult(listSize(l), height(t)))) + (1 * res15._2)) + -2) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((-1 * #res) + -2) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 511
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 52
# of atomic predicates: 86 + 147
solving...
solved... in 0.09s
candidate Invariants
removeAll-->(((((8 * res15._2) + (-8 * mult(listSize(l), height(t)))) + (1 * listSize(l))) + -16) ≤ 0)
height-->(((-4 * #res) + 1) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 834
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 64
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 104 + 233
solving...
solved... in 0.331s
candidate Invariants
removeAll-->(((((-14 * mult(listSize(l), height(t))) + (-1 * listSize(l))) + (2 * res15._2)) + -4) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
Function: removeAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 100
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 50 + 337
solving...
solved... in 0.357s
candidate Invariants
removeAll-->(((((-5 * mult(listSize(l), height(t))) + (-5 * listSize(l))) + (1 * res15._2)) + -2) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
remove-->((((-4 * height(t)) + (1 * res14._2)) + -1) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?3-->3
Nesting level: b?3-->1
Nesting level: c?2-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: b?3 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: c?2 Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: removeAll --> (((((-4 * (listSize(l) * height(t))) + (1 * res15._2)) + (-4 * listSize(l))) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: remove --> ((((-4 * height(t)) + (1 * res14._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[31m Error [0m] - Unable to prove or disprove invariant, the invariant is probably true
[[34m Info  [0m] - considering function insert...
[[34m Info  [0m] Body: if (t.isInstanceOf[Leaf])
            (Node(Leaf(), elem, Leaf()), if ((1 ≥ 2))
              1
            else
              2)
          else
            (let (relse7,delse7 := if ((t.value ≤ elem))
              (let (rthen8,dthen8 := (let (r88,d87 := (let (e6,d90 := insert(elem, t.right)) in
                (e6, (2 + d90)))) in
                (Node(t.left, t.value, r88), (1 + if ((1 ≥ d87))
                  1
                else
                  d87)))) in
                (rthen8, if ((2 ≥ dthen8))
                  2
                else
                  dthen8))
            else
              (let (relse8,delse8 := (let (r94,d94 := (let (e7,d101 := insert(elem, t.left)) in
                (e7, (2 + d101)))) in
                (Node(r94, t.value, t.right), (1 + if ((if ((d94 ≥ 1))
                  d94
                else
                  1 ≥ 1))
                  if ((d94 ≥ 1))
                    d94
                  else
                    1
                else
                  1)))) in
                (relse8, if ((2 ≥ delse8))
                  2
                else
                  delse8))) in
              (relse7, if ((1 ≥ delse7))
                1
              else
                delse7))
[[34m Info  [0m] Post: (height(res13._1) ≤ (height(t) + 1))
falttened Body: ((res13 == ifres155) && ((ci120 && (ci120 == t.isInstanceOf[Leaf]) && (ifres155 == tp38) && (cc24 == Leaf()) && (cc25 == Leaf()) && (cc26 == Node(cc24, elem, cc25)) && (tp38 == (cc26, ifres156)) && (((1 >= 2) && (ifres156 == 1)) || ((1 < 2) && (ifres156 == 2)))) || (!(ci121) && (ci121 == t.isInstanceOf[Leaf]) && (ifres155 == tp39) && (tp39 == (relse7, ifres157)) && (((cs154 <= elem) && (cs154 == t.value) && (ifres158 == tp40) && (tp40 == (rthen8, ifres159)) && (rthen8 == cc27) && (cs155 == t.left) && (cs156 == t.value) && (cc27 == Node(cs155, cs156, r88)) && (((1 >= d87) && (ifres160 == 1)) || ((1 < d87) && (ifres160 == d87))) && (e6 == ts130) && (ts130 == tres14._1) && (dthen8 == (1 + ifres160)) && (d87 == (2 + d90)) && (tres14 == r346) && (cs157 == t.right) && (r346 == insert(elem, cs157)) && (((2 >= dthen8) && (ifres159 == 2)) || ((2 < dthen8) && (ifres159 == dthen8))) && (r88 == e6) && (d90 == ts131) && (ts131 == tres14._2)) || ((cs158 > elem) && (cs158 == t.value) && (ifres158 == tp41) && (tp41 == (relse8, ifres161)) && (e7 == ts132) && (ts132 == tres15._1) && (((ifres163 >= 1) && (((d94 >= 1) && (ifres163 == d94)) || ((d94 < 1) && (ifres163 == 1))) && (ifres162 == ifres164) && (((d94 >= 1) && (ifres164 == d94)) || ((d94 < 1) && (ifres164 == 1)))) || ((ifres165 < 1) && (((d94 >= 1) && (ifres165 == d94)) || ((d94 < 1) && (ifres165 == 1))) && (ifres162 == 1))) && (((2 >= delse8) && (ifres161 == 2)) || ((2 < delse8) && (ifres161 == delse8))) && (d94 == (2 + d101)) && (relse8 == cc28) && (cs159 == t.value) && (cs160 == t.right) && (cc28 == Node(r94, cs159, cs160)) && (r94 == e7) && (tres15 == r347) && (cs161 == t.left) && (r347 == insert(elem, cs161)) && (d101 == ts133) && (ts133 == tres15._2) && (delse8 == (1 + ifres162)))) && (relse7 == ts134) && (ts134 == ifres158._1) && (delse7 == ts135) && (ts135 == ifres158._2) && (((1 >= delse7) && (ifres157 == 1)) || ((1 < delse7) && (ifres157 == delse7))))))
Flattened Post: (((r348 > (r349 + 1)) && (ts136 == res13._1) && (r348 == height(ts136)) && (r349 == height(t))) || ((ts137 > ((a? * r350) + b?)) && (ts137 == res13._2) && (r350 == height(t))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((0 * height(t)) + (1 * res13._2)) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 0 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/9
Unrolled calls: Set((r348 == height(ts136)), (r349 == height(t)))
Creating VC for height
Unrolling (r348 == height(ts136))
Unrolling (r349 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((1 * res13._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 15 + 0
solving...
solved... in 0.005s
candidate Invariants
insert-->((((8 * res13._2) + (0 * height(t))) + -1) ≤ 0)
height-->(((0 * #res) + 5) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 8 + 15
solving...
solved... in 0.006s
candidate Invariants
insert-->((((0 * height(t)) + (2 * res13._2)) + 13) ≤ 0)
height-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 14 + 23
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/15
Unrolled calls: Set((r363 == height(cs161)), (r354 == height(cs161)), (r350 == height(t)), (r353 == height(ts139)))
Unrolling (r363 == height(cs161))
Unrolling (r354 == height(cs161))
Unrolling (r350 == height(t))
Unrolling (r353 == height(ts139))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
insert-->((((0 * height(t)) + (1 * res13._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 21 + 0
solving...
solved... in 0.006s
candidate Invariants
insert-->((((-1 * height(t)) + (2 * res13._2)) + 1) ≤ 0)
height-->(((0 * #res) + 11) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 21
solving...
solved... in 0.006s
candidate Invariants
insert-->((((1 * res13._2) + (-9 * height(t))) + 1) ≤ 0)
height-->(((0 * #res) + -1) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 72
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 19 + 29
solving...
solved... in 0.027s
candidate Invariants
insert-->((((-4 * height(t)) + (1 * res13._2)) + -3) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: b?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimizing variable: b? Initial upperbound: 1/4
Found new upper bound: -1/8
Found new upper bound: -1
Found new lower bound: -2
Minimization complete...
candidate Invariants
insert-->((((-3 * height(t)) + (1 * res13._2)) + 1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 10 + 48
solving...
solved... in 0.018s
candidate Invariants
insert-->((((-4 * height(t)) + (1 * res13._2)) + -3) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->1
Nesting level: b?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimizing variable: b? Initial upperbound: 7
Found new upper bound: 2
Found new lower bound: 1
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: insert --> ((((-3 * height(t)) + (1 * res13._2)) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function addAll...
[[34m Info  [0m] Body: if (l.isInstanceOf[Nil])
            (t, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse12,delse12 := (let (vr,vd := (let (e10,d121 := insert(l.head, t)) in
              (e10, (2 + d121)))) in
              (let (br,bd := (let (e11,d125 := addAll(l.tail, vr)) in
                (e11, ((1 + d125) + if ((1 ≥ vd))
                  1
                else
                  vd)))) in
                (br, (bd + 1))))) in
              (relse12, if ((1 ≥ delse12))
                1
              else
                delse12))
[[34m Info  [0m] Post: true
falttened Body: ((res11 == ifres180) && ((ci136 && (ci136 == l.isInstanceOf[Nil]) && (ifres180 == tp42) && (tp42 == (t, ifres181)) && (((1 >= 0) && (ifres181 == 1)) || ((1 < 0) && (ifres181 == 0)))) || (!(ci137) && (ci137 == l.isInstanceOf[Nil]) && (ifres180 == tp43) && (tp43 == (relse12, ifres182)) && (vr == e10) && (delse12 == (bd + 1)) && (tres16 == r382) && (cs176 == l.tail) && (r382 == addAll(cs176, vr)) && (((1 >= vd) && (ifres183 == 1)) || ((1 < vd) && (ifres183 == vd))) && (relse12 == br) && (d121 == ts153) && (ts153 == tres17._2) && (vd == (2 + d121)) && (e10 == ts154) && (ts154 == tres17._1) && (((1 >= delse12) && (ifres182 == 1)) || ((1 < delse12) && (ifres182 == delse12))) && (d125 == ts155) && (ts155 == tres16._2) && (br == e11) && (bd == ((1 + d125) + ifres183)) && (e11 == ts156) && (ts156 == tres16._1) && (tres17 == r383) && (cs177 == l.head) && (r383 == insert(cs177, t)))))
Flattened Post: ((ts157 > (((a?1 * r387) + (b?1 * r388)) + c?)) && (ts157 == res11._2) && (arg11 == (r385 + r386)) && (r387 == mult(r384, arg11)) && (r386 == listSize(l)) && (r384 == listSize(l)) && (r385 == height(t)) && (r388 == listSize(l)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
addAll-->(((((0 * mult(listSize(l), (height(t) + listSize(l)))) + (0 * listSize(l))) + (1 * res11._2)) + 0) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 9
# of atomic predicates: 11 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/9
Unrolled calls: Set((r383 == insert(cs177, t)), (r387 == mult(r384, arg11)), (r389 == height(ts158)), (r386 == listSize(l)), (r384 == listSize(l)), (r385 == height(t)), (r388 == listSize(l)), (r390 == height(t)))
Inlining (r387 == mult(r384, arg11))
Creating VC for height
Unrolling (r389 == height(ts158))
Creating VC for listSize
Unrolling (r386 == listSize(l))
Unrolling (r384 == listSize(l))
Unrolling (r385 == height(t))
Creating VC for insert
Unrolling (r383 == insert(cs177, t))
Unrolling (r390 == height(t))
Unrolling (r388 == listSize(l))
[[34m Info  [0m] Number of axiom instances: 8
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
addAll-->(((((0 * listSize(l)) + (1 * res11._2)) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 302
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 44
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 41
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 31 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 13/34
Unrolled calls: Set((r432 == listSize(cs176)), (r421 == height(cs190)), (r397 == pmult(px3, py3)), (r428 == listSize(cs176)), (r422 == height(ts174)), (r431 == mult(r428, arg14)), (r419 == pmult(px3, arg13)), (r430 == listSize(cs176)), (r433 == height(t)), (r423 == height(cs200)), (r411 == height(t)), (r420 == height(ts173)), (r429 == height(vr)))
Unrolling (r432 == listSize(cs176))
Inlining (r431 == mult(r428, arg14))
Unrolling (r397 == pmult(px3, py3))
Unrolling (r422 == height(ts174))
Unrolling (r428 == listSize(cs176))
Unrolling (r419 == pmult(px3, arg13))
Unrolling (r423 == height(cs200))
Unrolling (r411 == height(t))
Unrolling (r421 == height(cs190))
Unrolling (r430 == listSize(cs176))
Unrolling (r420 == height(ts173))
Unrolling (r429 == height(vr))
Unrolling (r433 == height(t))
[[34m Info  [0m] Number of axiom instances: 162
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
addAll-->(((((1 * res11._2) + (0 * listSize(l))) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
listSize-->(((0 * #res) + 0) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 8
[[34m Info  [0m] Number of equal calls: 4
Function: insert--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 29 + 0
solving...
solved... in 0.007s
candidate Invariants
addAll-->(((((0 * mult(listSize(l), (height(t) + listSize(l)))) + (1 * res11._2)) + (0 * listSize(l))) + 1) ≤ 0)
height-->(((-1 * #res) + 1) ≤ 0)
listSize-->(((0 * #res) + 4) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 29
solving...
solved... in 0.007s
candidate Invariants
addAll-->(((((1 * res11._2) + (0 * listSize(l))) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + -6) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((0 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 635
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 57
# of atomic predicates: 57 + 45
solving...
solved... in 0.013s
candidate Invariants
addAll-->(((((-1 * mult(listSize(l), (height(t) + listSize(l)))) + (1 * res11._2)) + (-11 * listSize(l))) + -2) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-1 * #res) + -8) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 58
# of atomic predicates: 78 + 102
solving...
solved... in 0.184s
candidate Invariants
addAll-->(((((4 * res11._2) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + (1 * listSize(l))) + -8) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 223
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 37
# of atomic predicates: 61 + 180
solving...
solved... in 0.271s
candidate Invariants
addAll-->(((((-7 * listSize(l)) + (1 * res11._2)) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + -24) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((1 * #res) + -2) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 649
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 56
Function: listSize--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 87 + 241
solving...
solved... in 0.18s
candidate Invariants
addAll-->(((((4 * res11._2) + (-1 * listSize(l))) + (32 * mult(listSize(l), (height(t) + listSize(l))))) + -8) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 526
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 57
# of atomic predicates: 74 + 328
solving...
solved... in 0.256s
candidate Invariants
addAll-->(((((2 * res11._2) + (-10 * mult(listSize(l), (height(t) + listSize(l))))) + (1 * listSize(l))) + -2) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 193
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 35
# of atomic predicates: 46 + 402
solving...
solved... in 0.275s
candidate Invariants
addAll-->(((((1 * listSize(l)) + (8 * res11._2)) + (-64 * mult(listSize(l), (height(t) + listSize(l))))) + -16) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-8 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Nesting level: a?1-->4
Nesting level: b?1-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 8
Found new upper bound: 7/2
Found new upper bound: 1
Found new upper bound: 0
Found new lower bound: -1
Minimizing variable: b?1 Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimizing variable: c? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
candidate Invariants
addAll-->(((((0 * mult(listSize(l), (height(t) + listSize(l)))) + (1 * res11._2)) + (-6 * listSize(l))) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-1 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 493
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
[[34m Info  [0m] Number of equal calls: 54
# of atomic predicates: 64 + 448
solving...
solved... in 0.38s
candidate Invariants
addAll-->(((((-1 * listSize(l)) + (-56 * mult(listSize(l), (height(t) + listSize(l))))) + (8 * res11._2)) + -8) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-4 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Nesting level: a?1-->4
Nesting level: b?1-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 7
Found new upper bound: 5/2
Found new upper bound: 1
Found new upper bound: 0
Found new lower bound: -1
Minimizing variable: b?1 Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimizing variable: c? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
candidate Invariants
addAll-->(((((-6 * listSize(l)) + (0 * mult(listSize(l), (height(t) + listSize(l))))) + (1 * res11._2)) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-2 * #res) + -1) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Function: addAll--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 505
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 54
# of atomic predicates: 74 + 512
solving...
solved... in 0.623s
candidate Invariants
addAll-->(((((8 * res11._2) + (1 * listSize(l))) + (-64 * mult(listSize(l), (height(t) + listSize(l))))) + -16) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
listSize-->(((-1 * #res) + 0) ≤ 0)
insert-->((((-3 * height(t)) + (1 * res13._2)) + -2) ≤ 0)
Nesting level: a?1-->4
Nesting level: b?1-->1
Nesting level: c?-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 8
Found new upper bound: 7/2
Found new lower bound: 1
Found new lower bound: 2
Minimizing variable: b?1 Initial upperbound: 3
Found new lower bound: 1
Found new lower bound: 2
Minimizing variable: c? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: addAll --> (((((-6 * listSize(l)) + (2 * res11._2)) + (-7 * (listSize(l) * (height(t) + listSize(l))))) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-4 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: listSize --> (((-1 * #res) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: insert --> ((((-3 * height(t)) + (1 * res13._2)) + -2) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[31m Error [0m] - Unable to prove or disprove invariant, the invariant is probably true
[[34m Info  [0m] - considering function contains...
[[34m Info  [0m] Body: if (t.isInstanceOf[Leaf])
            (false, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse9,delse9 := if ((t.value == elem))
              (true, if ((2 ≥ 0))
                2
              else
                0)
            else
              (let (relse10,delse10 := if ((t.value < elem))
                (let (rthen11,dthen11 := (let (e8,d112 := contains(elem, t.right)) in
                  (e8, (2 + d112)))) in
                  (rthen11, if ((2 ≥ dthen11))
                    2
                  else
                    dthen11))
              else
                (let (relse11,delse11 := (let (e9,d116 := contains(elem, t.left)) in
                  (e9, (2 + d116)))) in
                  (relse11, if ((2 ≥ delse11))
                    2
                  else
                    delse11))) in
                (relse10, if ((2 ≥ delse10))
                  2
                else
                  delse10))) in
              (relse9, if ((1 ≥ delse9))
                1
              else
                delse9))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres243) && ((ci178 && (ci178 == t.isInstanceOf[Leaf]) && (ifres243 == tp52) && !(arg36) && (tp52 == (arg36, ifres244)) && (((1 >= 0) && (ifres244 == 1)) || ((1 < 0) && (ifres244 == 0)))) || (!(ci179) && (ci179 == t.isInstanceOf[Leaf]) && (ifres243 == tp53) && (tp53 == (relse9, ifres245)) && (((cs223 == elem) && (cs223 == t.value) && (ifres246 == tp54) && arg37 && (tp54 == (arg37, ifres247)) && (((2 >= 0) && (ifres247 == 2)) || ((2 < 0) && (ifres247 == 0)))) || ((((cs224 < elem) && (cs224 == t.value)) || ((cs225 > elem) && (cs225 == t.value))) && (ifres246 == tp55) && (tp55 == (relse10, ifres248)) && (((cs226 < elem) && (cs226 == t.value) && (ifres249 == tp56) && (tp56 == (rthen11, ifres250)) && (!(rthen11) || e8) && (!(e8) || rthen11) && (d112 == ts213) && (ts213 == tres22._2) && (tres22 == r553) && (cs227 == t.right) && (r553 == contains(elem, cs227)) && (((2 >= dthen11) && (ifres250 == 2)) || ((2 < dthen11) && (ifres250 == dthen11))) && (dthen11 == (2 + d112)) && (!(e8) || (ts214 && (ts214 == tres22._1))) && ((!(ts215) && (ts215 == tres22._1)) || e8)) || ((cs228 >= elem) && (cs228 == t.value) && (ifres249 == tp57) && (tp57 == (relse11, ifres251)) && (tres23 == r554) && (cs229 == t.left) && (r554 == contains(elem, cs229)) && (d116 == ts216) && (ts216 == tres23._2) && (!(e9) || (ts217 && (ts217 == tres23._1))) && ((!(ts218) && (ts218 == tres23._1)) || e9) && (((2 >= delse11) && (ifres251 == 2)) || ((2 < delse11) && (ifres251 == delse11))) && (!(relse11) || e9) && (!(e9) || relse11) && (delse11 == (2 + d116)))) && (!(relse10) || (ts219 && (ts219 == ifres249._1))) && ((!(ts220) && (ts220 == ifres249._1)) || relse10) && (delse10 == ts221) && (ts221 == ifres249._2) && (((2 >= delse10) && (ifres248 == 2)) || ((2 < delse10) && (ifres248 == delse10))))) && (!(relse9) || (ts222 && (ts222 == ifres246._1))) && ((!(ts223) && (ts223 == ifres246._1)) || relse9) && (delse9 == ts224) && (ts224 == ifres246._2) && (((1 >= delse9) && (ifres245 == 1)) || ((1 < delse9) && (ifres245 == delse9))))))
Flattened Post: ((ts225 > ((a?4 * r555) + b?4)) && (ts225 == res12._2) && (r555 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
contains-->((((1 * res12._2) + (0 * height(t))) + 0) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 48
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 11 + 0
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/3
Unrolled calls: Set((r555 == height(t)))
Creating VC for height
Unrolling (r555 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
contains-->((((0 * height(t)) + (1 * res12._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 16 + 0
solving...
solved... in 0.005s
candidate Invariants
contains-->((((1 * height(t)) + (2 * res12._2)) + 1) ≤ 0)
height-->(((1 * #res) + 9) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 15
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 25 + 16
solving...
solved... in 0.011s
candidate Invariants
contains-->((((1 * res12._2) + (-3 * height(t))) + -4) ≤ 0)
height-->(((-3 * #res) + -1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 8 + 41
solving...
solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/8
Unrolled calls: Set((r561 == height(cs227)), (r562 == height(cs229)))
Unrolling (r561 == height(cs227))
Unrolling (r562 == height(cs229))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
contains-->((((0 * height(t)) + (1 * res12._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 91
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 22 + 0
solving...
solved... in 0.006s
candidate Invariants
contains-->((((-12 * height(t)) + (2 * res12._2)) + 1) ≤ 0)
height-->(((-12 * #res) + -1) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 22
solving...
solved... in 0.007s
candidate Invariants
contains-->((((2 * res12._2) + (-12 * height(t))) + 1) ≤ 0)
height-->(((-2 * #res) + 1) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 32
solving...
solved... in 0.007s
candidate Invariants
contains-->((((1 * res12._2) + (-6 * height(t))) + -2) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?4-->1
Nesting level: b?4-->0
minimizing...
Minimizing variable: a?4 Initial upperbound: 6
Found new upper bound: 11/4
Found new upper bound: 1
Found new upper bound: 0
Found new upper bound: -1
Found new upper bound: -2
Found new upper bound: -9/2
Found new upper bound: -19/2
Found new upper bound: -39/2
Found new upper bound: -79/2
Found new upper bound: -159/2
Found new upper bound: -319/2
Found new upper bound: -639/2
Found new upper bound: -1279/2
Found new upper bound: -2559/2
Found new upper bound: -5119/2
Found new upper bound: -10239/2
Minimizing variable: b?4 Initial upperbound: 5122
Found new upper bound: 2560
Found new upper bound: 1279
Found new upper bound: 638
Found new upper bound: 318
Found new upper bound: 158
Found new upper bound: 78
Found new upper bound: 38
Found new upper bound: 18
Found new upper bound: 8
Found new upper bound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimization complete...
candidate Invariants
contains-->((((2 * res12._2) + (10239 * height(t))) + -4) ≤ 0)
height-->(((1 * #res) + 0) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 91
[[34m Info  [0m] Number of equal calls: 15
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 35 + 40
solving...
solved... in 0.017s
candidate Invariants
contains-->((((2 * res12._2) + (-6 * height(t))) + -7) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?4-->1
Nesting level: b?4-->0
minimizing...
Minimizing variable: a?4 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: b?4 Initial upperbound: 5
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
candidate Invariants
contains-->((((1 * res12._2) + (-2 * height(t))) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: contains--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 91
[[34m Info  [0m] Number of equal calls: 15
# of atomic predicates: 21 + 75
solving...
solved... in 0.017s
candidate Invariants
contains-->((((-6 * height(t)) + (2 * res12._2)) + -7) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?4-->1
Nesting level: b?4-->0
minimizing...
Minimizing variable: a?4 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: b?4 Initial upperbound: 3
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: contains --> ((((-2 * height(t)) + (1 * res12._2)) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-4 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
