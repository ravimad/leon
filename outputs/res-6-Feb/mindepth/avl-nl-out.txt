After Depth Instrumentation: 
object AVLTree {
  sealed abstract class Tree

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class None() extends OptionInt

  sealed abstract class OptionInt

  case class Some(i: Int) extends OptionInt

  case class Leaf() extends Tree

  def rotateRight(t : Tree) : (Tree, Int) = {locally {
    val dcond3 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
      locally {
        val (rthen3: Node, dthen3: Int) = locally {
          val (vr3: Int, vd2: Int) = locally {
            val (r58: Int, d56: Int) = locally {
              val (r60: Int, d58: Int) = locally {
                val (e14: Int, d65: Int) = rank(t.left.right)
                (e14, (3 + d65))
              }
              
              locally {
                val (r61: Int, d59: Int) = locally {
                  val (e13: Int, d62: Int) = rank(t.right)
                  (e13, (2 + d62))
                }
                
                locally {
                  val (e12: Int, d60: Int) = max(r60, r61)
                  (e12, ((1 + d60) + if ((d58 >= d59)) {
                    d58
                  } else {
                    d59
                  }))
                }
                
              }
              
            }
            
            ((r58 + 1), (1 + if ((d56 >= 0)) {
              d56
            } else {
              0
            }))
          }
          
          locally {
            val (br2: Node, bd2: Int) = locally {
              val (r70: Int, d71: Int) = locally {
                val (r71: Int, d72: Int) = locally {
                  val (r73: Int, d74: Int) = locally {
                    val (e16: Int, d78: Int) = rank(t.left.left)
                    (e16, (3 + d78))
                  }
                  
                  locally {
                    val (e15: Int, d76: Int) = max(r73, vr3)
                    (e15, ((1 + d76) + if ((d74 >= vd2)) {
                      d74
                    } else {
                      vd2
                    }))
                  }
                  
                }
                
                ((r71 + 1), (1 + if ((d72 >= 0)) {
                  d72
                } else {
                  0
                }))
              }
              
              (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              } >= d71)) {
                if ((2 >= (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                }))) {
                  2
                } else {
                  (1 + if ((2 >= vd2)) {
                    2
                  } else {
                    vd2
                  })
                }
              } else {
                d71
              }))
            }
            
            (br2, (bd2 + 1))
          }
          
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      (t, if ((dcond3 >= 0)) {
        dcond3
      } else {
        0
      })
    }
  }
  }

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond7 >= 1)) {
        dcond7
      } else {
        1
      })
    } else {
      locally {
        val (relse7: Tree, delse7: Int) = locally {
          val dcond8 = 2
          if ((e == t.value)) {
            locally {
              val (rthen8: Tree, dthen8: Int) = locally {
                val dcond9 = 2
                if ((t.left == Leaf())) {
                  (t.right, if ((dcond9 >= 1)) {
                    dcond9
                  } else {
                    1
                  })
                } else {
                  locally {
                    val (relse8: Tree, delse8: Int) = locally {
                      val dcond10 = 2
                      if ((t.right == Leaf())) {
                        (t.left, if ((dcond10 >= 1)) {
                          dcond10
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse9: Tree, delse9: Int) = locally {
                            val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                              val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                                val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                                (e28, (2 + d169))
                              }
                              
                              ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                                (1 + vd5)
                              } else {
                                (1 + vd5)
                              }))
                            }
                            
                            locally {
                              val (br4: Tree, bd4: Int) = locally {
                                val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                                locally {
                                  val (br6: Tree, bd6: Int) = locally {
                                    val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                                    locally {
                                      val (br7: Tree, bd7: Int) = locally {
                                        val dcond11 = (1 + vd7)
                                        if (vr8.isInstanceOf[None]) {
                                          (t, if ((dcond11 >= 0)) {
                                            dcond11
                                          } else {
                                            0
                                          })
                                        } else {
                                          locally {
                                            val (relse10: Node, delse10: Int) = locally {
                                              val (r166: Int, d181: Int) = locally {
                                                val (r167: Int, d182: Int) = locally {
                                                  val (r169: Int, d184: Int) = locally {
                                                    val (e31: Int, d191: Int) = rank(vr7)
                                                    (e31, ((1 + d191) + vd6))
                                                  }
                                                  
                                                  locally {
                                                    val (r170: Int, d185: Int) = locally {
                                                      val (e30: Int, d188: Int) = rank(t.right)
                                                      (e30, (2 + d188))
                                                    }
                                                    
                                                    locally {
                                                      val (e29: Int, d186: Int) = max(r169, r170)
                                                      (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                        d184
                                                      } else {
                                                        d185
                                                      }))
                                                    }
                                                    
                                                  }
                                                  
                                                }
                                                
                                                ((r167 + 1), (1 + if ((d182 >= 0)) {
                                                  d182
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                                vd6
                                              } else {
                                                (1 + vd7)
                                              } >= 1)) {
                                                if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                }
                                              } else {
                                                1
                                              } >= d181)) {
                                                if ((if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                } >= 1)) {
                                                  if ((vd6 >= (1 + vd7))) {
                                                    vd6
                                                  } else {
                                                    (1 + vd7)
                                                  }
                                                } else {
                                                  1
                                                }
                                              } else {
                                                d181
                                              }))
                                            }
                                            
                                            (relse10, if ((dcond11 >= delse10)) {
                                              dcond11
                                            } else {
                                              delse10
                                            })
                                          }
                                          
                                        }
                                      }
                                      
                                      (br7, (bd7 + 1))
                                    }
                                    
                                  }
                                  
                                  (br6, (bd6 + 1))
                                }
                                
                              }
                              
                              (br4, (bd4 + 1))
                            }
                            
                          }
                          
                          (relse9, if ((dcond10 >= delse9)) {
                            dcond10
                          } else {
                            delse9
                          })
                        }
                        
                      }
                    }
                    
                    (relse8, if ((dcond9 >= delse8)) {
                      dcond9
                    } else {
                      delse8
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse11: Node, delse11: Int) = locally {
                val dcond12 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen12: Node, dthen12: Int) = locally {
                      val (vr9: Tree, vd8: Int) = locally {
                        val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                        (e32, (2 + d199))
                      }
                      
                      locally {
                        val (br8: Node, bd8: Int) = locally {
                          val (r185: Int, d204: Int) = locally {
                            val (r186: Int, d205: Int) = locally {
                              val (r188: Int, d207: Int) = locally {
                                val (e35: Int, d214: Int) = rank(vr9)
                                (e35, ((1 + d214) + vd8))
                              }
                              
                              locally {
                                val (r189: Int, d208: Int) = locally {
                                  val (e34: Int, d211: Int) = rank(t.right)
                                  (e34, (2 + d211))
                                }
                                
                                locally {
                                  val (e33: Int, d209: Int) = max(r188, r189)
                                  (e33, ((1 + d209) + if ((d207 >= d208)) {
                                    d207
                                  } else {
                                    d208
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r186 + 1), (1 + if ((d205 >= 0)) {
                              d205
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                            vd8
                          } else {
                            1
                          } >= 1)) {
                            if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d204)) {
                            if ((if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            } >= 1)) {
                              if ((vd8 >= 1)) {
                                vd8
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d204
                          }))
                        }
                        
                        (br8, (bd8 + 1))
                      }
                      
                    }
                    
                    (rthen12, if ((dcond12 >= dthen12)) {
                      dcond12
                    } else {
                      dthen12
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: Node, delse12: Int) = locally {
                      val (vr10: Tree, vd9: Int) = locally {
                        val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                        (e36, (2 + d219))
                      }
                      
                      locally {
                        val (br9: Node, bd9: Int) = locally {
                          val (r201: Int, d224: Int) = locally {
                            val (r202: Int, d225: Int) = locally {
                              val (r204: Int, d227: Int) = locally {
                                val (e39: Int, d233: Int) = rank(t.left)
                                (e39, (2 + d233))
                              }
                              
                              locally {
                                val (r205: Int, d228: Int) = locally {
                                  val (e38: Int, d231: Int) = rank(vr10)
                                  (e38, ((1 + d231) + vd9))
                                }
                                
                                locally {
                                  val (e37: Int, d229: Int) = max(r204, r205)
                                  (e37, ((1 + d229) + if ((d227 >= d228)) {
                                    d227
                                  } else {
                                    d228
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r202 + 1), (1 + if ((d225 >= 0)) {
                              d225
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                            1
                          } else {
                            vd9
                          } >= d224)) {
                            if ((1 >= vd9)) {
                              1
                            } else {
                              vd9
                            }
                          } else {
                            d224
                          }))
                        }
                        
                        (br9, (bd9 + 1))
                      }
                      
                    }
                    
                    (relse12, if ((dcond12 >= delse12)) {
                      dcond12
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (relse11, if ((dcond8 >= delse11)) {
                dcond8
              } else {
                delse11
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  }

  def balance(t : Tree) : (Tree, Int) = {locally {
    val dcond14 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond14 >= 1)) {
        dcond14
      } else {
        1
      })
    } else {
      locally {
        val (relse14: Tree, delse14: Int) = locally {
          val (vr11: Int, vd10: Int) = locally {
            val (e40: Int, d241: Int) = balanceFactor(t)
            (e40, (1 + d241))
          }
          
          locally {
            val (br10: Tree, bd10: Int) = locally {
              val dcond15 = (1 + if ((vd10 >= 0)) {
                vd10
              } else {
                0
              })
              if ((vr11 > 1)) {
                locally {
                  val (rthen15: Tree, dthen15: Int) = locally {
                    val (vr12: Tree, vd11: Int) = locally {
                      val (rcond16: Boolean, dcond16: Int) = locally {
                        val (r217: Int, d244: Int) = locally {
                          val (e41: Int, d247: Int) = balanceFactor(t.left)
                          (e41, (2 + d247))
                        }
                        
                        ((r217 < 0), (1 + if ((d244 >= 0)) {
                          d244
                        } else {
                          0
                        }))
                      }
                      
                      if (rcond16) {
                        locally {
                          val (rthen16: Tree, dthen16: Int) = locally {
                            val (e42: Tree, d250: Int) = rotateLeft(t.left)
                            (e42, (2 + d250))
                          }
                          
                          (rthen16, if ((dcond16 >= dthen16)) {
                            dcond16
                          } else {
                            dthen16
                          })
                        }
                        
                      } else {
                        (t.left, if ((dcond16 >= 1)) {
                          dcond16
                        } else {
                          1
                        })
                      }
                    }
                    
                    locally {
                      val (br11: Tree, bd11: Int) = locally {
                        val (r224: Node, d253: Int) = locally {
                          val (r228: Int, d258: Int) = locally {
                            val (r229: Int, d259: Int) = locally {
                              val (r231: Int, d261: Int) = locally {
                                val (e46: Int, d268: Int) = rank(vr12)
                                (e46, ((1 + d268) + vd11))
                              }
                              
                              locally {
                                val (r232: Int, d262: Int) = locally {
                                  val (e45: Int, d265: Int) = rank(t.right)
                                  (e45, (2 + d265))
                                }
                                
                                locally {
                                  val (e44: Int, d263: Int) = max(r231, r232)
                                  (e44, ((1 + d263) + if ((d261 >= d262)) {
                                    d261
                                  } else {
                                    d262
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r229 + 1), (1 + if ((d259 >= 0)) {
                              d259
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d258)) {
                            if ((if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            } >= 1)) {
                              if ((vd11 >= 1)) {
                                vd11
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d258
                          }))
                        }
                        
                        locally {
                          val (e43: Tree, d254: Int) = rotateRight(r224)
                          (e43, ((1 + d254) + d253))
                        }
                        
                      }
                      
                      (br11, (bd11 + 1))
                    }
                    
                  }
                  
                  (rthen15, if ((dcond15 >= dthen15)) {
                    dcond15
                  } else {
                    dthen15
                  })
                }
                
              } else {
                locally {
                  val (relse16: Tree, delse16: Int) = locally {
                    val dcond17 = (1 + if ((vd10 >= 0)) {
                      vd10
                    } else {
                      0
                    })
                    if ((vr11 < -1)) {
                      locally {
                        val (rthen17: Tree, dthen17: Int) = locally {
                          val (vr13: Tree, vd12: Int) = locally {
                            val (rcond18: Boolean, dcond18: Int) = locally {
                              val (r240: Int, d273: Int) = locally {
                                val (e47: Int, d276: Int) = balanceFactor(t.right)
                                (e47, (2 + d276))
                              }
                              
                              ((r240 > 0), (1 + if ((d273 >= 0)) {
                                d273
                              } else {
                                0
                              }))
                            }
                            
                            if (rcond18) {
                              locally {
                                val (rthen18: Tree, dthen18: Int) = locally {
                                  val (e48: Tree, d279: Int) = rotateRight(t.right)
                                  (e48, (2 + d279))
                                }
                                
                                (rthen18, if ((dcond18 >= dthen18)) {
                                  dcond18
                                } else {
                                  dthen18
                                })
                              }
                              
                            } else {
                              (t.right, if ((dcond18 >= 1)) {
                                dcond18
                              } else {
                                1
                              })
                            }
                          }
                          
                          locally {
                            val (br12: Tree, bd12: Int) = locally {
                              val (r247: Node, d282: Int) = locally {
                                val (r251: Int, d287: Int) = locally {
                                  val (r252: Int, d288: Int) = locally {
                                    val (r254: Int, d290: Int) = locally {
                                      val (e52: Int, d297: Int) = rank(vr13)
                                      (e52, ((1 + d297) + vd12))
                                    }
                                    
                                    locally {
                                      val (r255: Int, d291: Int) = locally {
                                        val (e51: Int, d294: Int) = rank(t.left)
                                        (e51, (2 + d294))
                                      }
                                      
                                      locally {
                                        val (e50: Int, d292: Int) = max(r254, r255)
                                        (e50, ((1 + d292) + if ((d290 >= d291)) {
                                          d290
                                        } else {
                                          d291
                                        }))
                                      }
                                      
                                    }
                                    
                                  }
                                  
                                  ((r252 + 1), (1 + if ((d288 >= 0)) {
                                    d288
                                  } else {
                                    0
                                  }))
                                }
                                
                                (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                } >= d287)) {
                                  if ((1 >= vd12)) {
                                    1
                                  } else {
                                    vd12
                                  }
                                } else {
                                  d287
                                }))
                              }
                              
                              locally {
                                val (e49: Tree, d283: Int) = rotateLeft(r247)
                                (e49, ((1 + d283) + d282))
                              }
                              
                            }
                            
                            (br12, (bd12 + 1))
                          }
                          
                        }
                        
                        (rthen17, if ((dcond17 >= dthen17)) {
                          dcond17
                        } else {
                          dthen17
                        })
                      }
                      
                    } else {
                      (t, if ((dcond17 >= 0)) {
                        dcond17
                      } else {
                        0
                      })
                    }
                  }
                  
                  (relse16, if ((dcond15 >= delse16)) {
                    dcond15
                  } else {
                    delse16
                  })
                }
                
              }
            }
            
            (br10, (bd10 + 1))
          }
          
        }
        
        (relse14, if ((dcond14 >= delse14)) {
          dcond14
        } else {
          delse14
        })
      }
      
    }
  }
  }

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), e, Leaf(), 1), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((e == t.value)) {
            (t, if ((dcond1 >= 0)) {
              dcond1
            } else {
              0
            })
          } else {
            locally {
              val (relse1: Node, delse1: Int) = locally {
                val dcond2 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (vr1: Tree, vd: Int) = locally {
                        val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                        (e4, (2 + d13))
                      }
                      
                      locally {
                        val (br: Node, bd: Int) = locally {
                          val (r27: Int, d18: Int) = locally {
                            val (r28: Int, d19: Int) = locally {
                              val (r30: Int, d21: Int) = locally {
                                val (e7: Int, d28: Int) = rank(vr1)
                                (e7, ((1 + d28) + vd))
                              }
                              
                              locally {
                                val (r31: Int, d22: Int) = locally {
                                  val (e6: Int, d25: Int) = rank(t.right)
                                  (e6, (2 + d25))
                                }
                                
                                locally {
                                  val (e5: Int, d23: Int) = max(r30, r31)
                                  (e5, ((1 + d23) + if ((d21 >= d22)) {
                                    d21
                                  } else {
                                    d22
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r28 + 1), (1 + if ((d19 >= 0)) {
                              d19
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                            vd
                          } else {
                            1
                          } >= 1)) {
                            if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d18)) {
                            if ((if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            } >= 1)) {
                              if ((vd >= 1)) {
                                vd
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d18
                          }))
                        }
                        
                        (br, (bd + 1))
                      }
                      
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Node, delse2: Int) = locally {
                      val (vr2: Tree, vd1: Int) = locally {
                        val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                        (e8, (2 + d33))
                      }
                      
                      locally {
                        val (br1: Node, bd1: Int) = locally {
                          val (r43: Int, d38: Int) = locally {
                            val (r44: Int, d39: Int) = locally {
                              val (r46: Int, d41: Int) = locally {
                                val (e11: Int, d47: Int) = rank(t.left)
                                (e11, (2 + d47))
                              }
                              
                              locally {
                                val (r47: Int, d42: Int) = locally {
                                  val (e10: Int, d45: Int) = rank(vr2)
                                  (e10, ((1 + d45) + vd1))
                                }
                                
                                locally {
                                  val (e9: Int, d43: Int) = max(r46, r47)
                                  (e9, ((1 + d43) + if ((d41 >= d42)) {
                                    d41
                                  } else {
                                    d42
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r44 + 1), (1 + if ((d39 >= 0)) {
                              d39
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                            1
                          } else {
                            vd1
                          } >= d38)) {
                            if ((1 >= vd1)) {
                              1
                            } else {
                              vd1
                            }
                          } else {
                            d38
                          }))
                        }
                        
                        (br1, (bd1 + 1))
                      }
                      
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  }

  def balanceFactor(t : Tree) : (Int, Int) = {locally {
    val dcond6 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Int, delse6: Int) = locally {
          val (r136: Int, d148: Int) = locally {
            val (e27: Int, d154: Int) = rank(t.left)
            (e27, (2 + d154))
          }
          
          locally {
            val (r137: Int, d149: Int) = locally {
              val (e26: Int, d151: Int) = rank(t.right)
              (e26, (2 + d151))
            }
            
            ((r136 - r137), (1 + if ((d148 >= d149)) {
              d148
            } else {
              d149
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  }

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr)._1 + 1)
        }
        
      }
      
  })}

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {locally {
    val dcond19 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
      ((Leaf(), Some(t.value)), if ((dcond19 >= 3)) {
        dcond19
      } else {
        3
      })
    } else {
      locally {
        val (relse19: (Tree, OptionInt), delse19: Int) = locally {
          val dcond20 = 3
          if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
            locally {
              val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
                val (vr14: (Tree, OptionInt), vd13: Int) = locally {
                  val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                    val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                    (e53, (2 + d318))
                  }
                  
                  ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                    (1 + vd14)
                  } else {
                    (1 + vd14)
                  }))
                }
                
                locally {
                  val (br13: (Tree, OptionInt), bd13: Int) = locally {
                    val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                    locally {
                      val (br15: (Tree, OptionInt), bd15: Int) = locally {
                        val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                        locally {
                          val (br16: (Tree, OptionInt), bd16: Int) = locally {
                            val dcond21 = (1 + vd16)
                            if (vr17.isInstanceOf[None]) {
                              ((t, None()), if ((dcond21 >= 2)) {
                                dcond21
                              } else {
                                2
                              })
                            } else {
                              locally {
                                val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                                  val (vr18: Tree, vd17: Int) = locally {
                                    val (r289: Node, d329: Int) = locally {
                                      val (r293: Int, d334: Int) = locally {
                                        val (r294: Int, d335: Int) = locally {
                                          val (e55: Int, d338: Int) = rank(vr16)
                                          (e55, ((1 + d338) + vd15))
                                        }
                                        
                                        ((r294 + 1), (1 + if ((d335 >= 0)) {
                                          d335
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      } >= 1)) {
                                        if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        }
                                      } else {
                                        1
                                      } >= d334)) {
                                        if ((if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        } >= 1)) {
                                          if ((vd15 >= (1 + vd16))) {
                                            vd15
                                          } else {
                                            (1 + vd16)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d334
                                      }))
                                    }
                                    
                                    locally {
                                      val (e54: Tree, d330: Int) = balance(r289)
                                      (e54, ((1 + d330) + d329))
                                    }
                                    
                                  }
                                  
                                  ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                    vd17
                                  } else {
                                    2
                                  }))
                                }
                                
                                (relse20, if ((dcond21 >= delse20)) {
                                  dcond21
                                } else {
                                  delse20
                                })
                              }
                              
                            }
                          }
                          
                          (br16, (bd16 + 1))
                        }
                        
                      }
                      
                      (br15, (bd15 + 1))
                    }
                    
                  }
                  
                  (br13, (bd13 + 1))
                }
                
              }
              
              (rthen20, if ((dcond20 >= dthen20)) {
                dcond20
              } else {
                dthen20
              })
            }
            
          } else {
            locally {
              val (relse21: (Tree, OptionInt), delse21: Int) = locally {
                val dcond22 = 1
                if (t.isInstanceOf[Node]) {
                  locally {
                    val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                      val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                      (e56, (2 + d346))
                    }
                    
                    (rthen22, if ((dcond22 >= dthen22)) {
                      dcond22
                    } else {
                      dthen22
                    })
                  }
                  
                } else {
                  ((t, None()), if ((dcond22 >= 2)) {
                    dcond22
                  } else {
                    2
                  })
                }
              }
              
              (relse21, if ((dcond20 >= delse21)) {
                dcond20
              } else {
                delse21
              })
            }
            
          }
        }
        
        (relse19, if ((dcond19 >= delse19)) {
          dcond19
        } else {
          delse19
        })
      }
      
    }
  }
  } ensuring(res => true)

  def rank(t : Tree) : (Int, Int) = {locally {
    val dcond13 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      (t.rank, if ((dcond13 >= 1)) {
        dcond13
      } else {
        1
      })
    }
  }
  }

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res => true)

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {locally {
    val dcond4 = 1
    if ((i1 >= i2)) {
      (i1, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      (i2, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    }
  }
  }

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res => true)

  def rotateLeft(t : Tree) : (Tree, Int) = {locally {
    val dcond5 = 3
    if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
      locally {
        val (rthen5: Node, dthen5: Int) = locally {
          val (vr4: Int, vd3: Int) = locally {
            val (r103: Int, d110: Int) = locally {
              val (r105: Int, d112: Int) = locally {
                val (e23: Int, d120: Int) = rank(t.left)
                (e23, (2 + d120))
              }
              
              locally {
                val (r106: Int, d113: Int) = locally {
                  val (e22: Int, d116: Int) = rank(t.right.left)
                  (e22, (3 + d116))
                }
                
                locally {
                  val (e21: Int, d114: Int) = max(r105, r106)
                  (e21, ((1 + d114) + if ((d112 >= d113)) {
                    d112
                  } else {
                    d113
                  }))
                }
                
              }
              
            }
            
            ((r103 + 1), (1 + if ((d110 >= 0)) {
              d110
            } else {
              0
            }))
          }
          
          locally {
            val (br3: Node, bd3: Int) = locally {
              val (r115: Int, d125: Int) = locally {
                val (r116: Int, d126: Int) = locally {
                  val (r119: Int, d129: Int) = locally {
                    val (e25: Int, d132: Int) = rank(t.right.right)
                    (e25, (3 + d132))
                  }
                  
                  locally {
                    val (e24: Int, d130: Int) = max(vr4, r119)
                    (e24, ((1 + d130) + if ((vd3 >= d129)) {
                      vd3
                    } else {
                      d129
                    }))
                  }
                  
                }
                
                ((r116 + 1), (1 + if ((d126 >= 0)) {
                  d126
                } else {
                  0
                }))
              }
              
              (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              } >= d125)) {
                if ((if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                } >= 2)) {
                  if (((1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  }) >= 2)) {
                    (1 + if ((2 >= vd3)) {
                      2
                    } else {
                      vd3
                    })
                  } else {
                    2
                  }
                } else {
                  2
                }
              } else {
                d125
              }))
            }
            
            (br3, (bd3 + 1))
          }
          
        }
        
        (rthen5, if ((dcond5 >= dthen5)) {
          dcond5
        } else {
          dthen5
        })
      }
      
    } else {
      (t, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: rotateRight
Defined fun: unbalancedDelete
Defined fun: balance
Defined fun: unbalancedInsert
Defined fun: balanceFactor
Defined fun: height
Defined fun: deleteMax
Defined fun: rank
Defined fun: avlInsert
Defined fun: rankHeight
Defined fun: max
Defined fun: min
Defined fun: avlDelete
Defined fun: size
Defined fun: rotateLeft
Defined fun: max
FunMap: Map(unbalancedInsert -> unbalancedInsert, rank -> rank, avlDelete -> avlDelete, balance -> balance, deleteMax -> deleteMax, max -> max, size -> size, rotateLeft -> rotateLeft, rankHeight -> rankHeight, height -> height, rotateRight -> rotateRight, max -> max, avlInsert -> avlInsert, balanceFactor -> balanceFactor, min -> min, unbalancedDelete -> unbalancedDelete)
After Time Instrumentation: 
object AVLTree {
  sealed abstract class Tree

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class None() extends OptionInt

  sealed abstract class OptionInt

  case class Some(i: Int) extends OptionInt

  case class Leaf() extends Tree

  def rotateRight(t : Tree) : (Tree, Int) = {locally {
    val dcond3 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
      locally {
        val (rthen3: Node, dthen3: Int) = locally {
          val (vr3: Int, vd2: Int) = locally {
            val (r58: Int, d56: Int) = locally {
              val (r60: Int, d58: Int) = locally {
                val (e14: Int, d65: Int) = rank(t.left.right)
                (e14, (3 + d65))
              }
              
              locally {
                val (r61: Int, d59: Int) = locally {
                  val (e13: Int, d62: Int) = rank(t.right)
                  (e13, (2 + d62))
                }
                
                locally {
                  val (e12: Int, d60: Int) = max(r60, r61)
                  (e12, ((1 + d60) + if ((d58 >= d59)) {
                    d58
                  } else {
                    d59
                  }))
                }
                
              }
              
            }
            
            ((r58 + 1), (1 + if ((d56 >= 0)) {
              d56
            } else {
              0
            }))
          }
          
          locally {
            val (br2: Node, bd2: Int) = locally {
              val (r70: Int, d71: Int) = locally {
                val (r71: Int, d72: Int) = locally {
                  val (r73: Int, d74: Int) = locally {
                    val (e16: Int, d78: Int) = rank(t.left.left)
                    (e16, (3 + d78))
                  }
                  
                  locally {
                    val (e15: Int, d76: Int) = max(r73, vr3)
                    (e15, ((1 + d76) + if ((d74 >= vd2)) {
                      d74
                    } else {
                      vd2
                    }))
                  }
                  
                }
                
                ((r71 + 1), (1 + if ((d72 >= 0)) {
                  d72
                } else {
                  0
                }))
              }
              
              (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              } >= d71)) {
                if ((2 >= (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                }))) {
                  2
                } else {
                  (1 + if ((2 >= vd2)) {
                    2
                  } else {
                    vd2
                  })
                }
              } else {
                d71
              }))
            }
            
            (br2, (bd2 + 1))
          }
          
        }
        
        (rthen3, if ((dcond3 >= dthen3)) {
          dcond3
        } else {
          dthen3
        })
      }
      
    } else {
      (t, if ((dcond3 >= 0)) {
        dcond3
      } else {
        0
      })
    }
  }
  }

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond7 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond7 >= 1)) {
        dcond7
      } else {
        1
      })
    } else {
      locally {
        val (relse7: Tree, delse7: Int) = locally {
          val dcond8 = 2
          if ((e == t.value)) {
            locally {
              val (rthen8: Tree, dthen8: Int) = locally {
                val dcond9 = 2
                if ((t.left == Leaf())) {
                  (t.right, if ((dcond9 >= 1)) {
                    dcond9
                  } else {
                    1
                  })
                } else {
                  locally {
                    val (relse8: Tree, delse8: Int) = locally {
                      val dcond10 = 2
                      if ((t.right == Leaf())) {
                        (t.left, if ((dcond10 >= 1)) {
                          dcond10
                        } else {
                          1
                        })
                      } else {
                        locally {
                          val (relse9: Tree, delse9: Int) = locally {
                            val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                              val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                                val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                                (e28, (2 + d169))
                              }
                              
                              ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                                (1 + vd5)
                              } else {
                                (1 + vd5)
                              }))
                            }
                            
                            locally {
                              val (br4: Tree, bd4: Int) = locally {
                                val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                                locally {
                                  val (br6: Tree, bd6: Int) = locally {
                                    val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                                    locally {
                                      val (br7: Tree, bd7: Int) = locally {
                                        val dcond11 = (1 + vd7)
                                        if (vr8.isInstanceOf[None]) {
                                          (t, if ((dcond11 >= 0)) {
                                            dcond11
                                          } else {
                                            0
                                          })
                                        } else {
                                          locally {
                                            val (relse10: Node, delse10: Int) = locally {
                                              val (r166: Int, d181: Int) = locally {
                                                val (r167: Int, d182: Int) = locally {
                                                  val (r169: Int, d184: Int) = locally {
                                                    val (e31: Int, d191: Int) = rank(vr7)
                                                    (e31, ((1 + d191) + vd6))
                                                  }
                                                  
                                                  locally {
                                                    val (r170: Int, d185: Int) = locally {
                                                      val (e30: Int, d188: Int) = rank(t.right)
                                                      (e30, (2 + d188))
                                                    }
                                                    
                                                    locally {
                                                      val (e29: Int, d186: Int) = max(r169, r170)
                                                      (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                        d184
                                                      } else {
                                                        d185
                                                      }))
                                                    }
                                                    
                                                  }
                                                  
                                                }
                                                
                                                ((r167 + 1), (1 + if ((d182 >= 0)) {
                                                  d182
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                                vd6
                                              } else {
                                                (1 + vd7)
                                              } >= 1)) {
                                                if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                }
                                              } else {
                                                1
                                              } >= d181)) {
                                                if ((if ((vd6 >= (1 + vd7))) {
                                                  vd6
                                                } else {
                                                  (1 + vd7)
                                                } >= 1)) {
                                                  if ((vd6 >= (1 + vd7))) {
                                                    vd6
                                                  } else {
                                                    (1 + vd7)
                                                  }
                                                } else {
                                                  1
                                                }
                                              } else {
                                                d181
                                              }))
                                            }
                                            
                                            (relse10, if ((dcond11 >= delse10)) {
                                              dcond11
                                            } else {
                                              delse10
                                            })
                                          }
                                          
                                        }
                                      }
                                      
                                      (br7, (bd7 + 1))
                                    }
                                    
                                  }
                                  
                                  (br6, (bd6 + 1))
                                }
                                
                              }
                              
                              (br4, (bd4 + 1))
                            }
                            
                          }
                          
                          (relse9, if ((dcond10 >= delse9)) {
                            dcond10
                          } else {
                            delse9
                          })
                        }
                        
                      }
                    }
                    
                    (relse8, if ((dcond9 >= delse8)) {
                      dcond9
                    } else {
                      delse8
                    })
                  }
                  
                }
              }
              
              (rthen8, if ((dcond8 >= dthen8)) {
                dcond8
              } else {
                dthen8
              })
            }
            
          } else {
            locally {
              val (relse11: Node, delse11: Int) = locally {
                val dcond12 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen12: Node, dthen12: Int) = locally {
                      val (vr9: Tree, vd8: Int) = locally {
                        val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                        (e32, (2 + d199))
                      }
                      
                      locally {
                        val (br8: Node, bd8: Int) = locally {
                          val (r185: Int, d204: Int) = locally {
                            val (r186: Int, d205: Int) = locally {
                              val (r188: Int, d207: Int) = locally {
                                val (e35: Int, d214: Int) = rank(vr9)
                                (e35, ((1 + d214) + vd8))
                              }
                              
                              locally {
                                val (r189: Int, d208: Int) = locally {
                                  val (e34: Int, d211: Int) = rank(t.right)
                                  (e34, (2 + d211))
                                }
                                
                                locally {
                                  val (e33: Int, d209: Int) = max(r188, r189)
                                  (e33, ((1 + d209) + if ((d207 >= d208)) {
                                    d207
                                  } else {
                                    d208
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r186 + 1), (1 + if ((d205 >= 0)) {
                              d205
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                            vd8
                          } else {
                            1
                          } >= 1)) {
                            if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d204)) {
                            if ((if ((vd8 >= 1)) {
                              vd8
                            } else {
                              1
                            } >= 1)) {
                              if ((vd8 >= 1)) {
                                vd8
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d204
                          }))
                        }
                        
                        (br8, (bd8 + 1))
                      }
                      
                    }
                    
                    (rthen12, if ((dcond12 >= dthen12)) {
                      dcond12
                    } else {
                      dthen12
                    })
                  }
                  
                } else {
                  locally {
                    val (relse12: Node, delse12: Int) = locally {
                      val (vr10: Tree, vd9: Int) = locally {
                        val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                        (e36, (2 + d219))
                      }
                      
                      locally {
                        val (br9: Node, bd9: Int) = locally {
                          val (r201: Int, d224: Int) = locally {
                            val (r202: Int, d225: Int) = locally {
                              val (r204: Int, d227: Int) = locally {
                                val (e39: Int, d233: Int) = rank(t.left)
                                (e39, (2 + d233))
                              }
                              
                              locally {
                                val (r205: Int, d228: Int) = locally {
                                  val (e38: Int, d231: Int) = rank(vr10)
                                  (e38, ((1 + d231) + vd9))
                                }
                                
                                locally {
                                  val (e37: Int, d229: Int) = max(r204, r205)
                                  (e37, ((1 + d229) + if ((d227 >= d228)) {
                                    d227
                                  } else {
                                    d228
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r202 + 1), (1 + if ((d225 >= 0)) {
                              d225
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                            1
                          } else {
                            vd9
                          } >= d224)) {
                            if ((1 >= vd9)) {
                              1
                            } else {
                              vd9
                            }
                          } else {
                            d224
                          }))
                        }
                        
                        (br9, (bd9 + 1))
                      }
                      
                    }
                    
                    (relse12, if ((dcond12 >= delse12)) {
                      dcond12
                    } else {
                      delse12
                    })
                  }
                  
                }
              }
              
              (relse11, if ((dcond8 >= delse11)) {
                dcond8
              } else {
                delse11
              })
            }
            
          }
        }
        
        (relse7, if ((dcond7 >= delse7)) {
          dcond7
        } else {
          delse7
        })
      }
      
    }
  }
  }

  def balance(t : Tree) : (Tree, Int) = {locally {
    val dcond14 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), if ((dcond14 >= 1)) {
        dcond14
      } else {
        1
      })
    } else {
      locally {
        val (relse14: Tree, delse14: Int) = locally {
          val (vr11: Int, vd10: Int) = locally {
            val (e40: Int, d241: Int) = balanceFactor(t)
            (e40, (1 + d241))
          }
          
          locally {
            val (br10: Tree, bd10: Int) = locally {
              val dcond15 = (1 + if ((vd10 >= 0)) {
                vd10
              } else {
                0
              })
              if ((vr11 > 1)) {
                locally {
                  val (rthen15: Tree, dthen15: Int) = locally {
                    val (vr12: Tree, vd11: Int) = locally {
                      val (rcond16: Boolean, dcond16: Int) = locally {
                        val (r217: Int, d244: Int) = locally {
                          val (e41: Int, d247: Int) = balanceFactor(t.left)
                          (e41, (2 + d247))
                        }
                        
                        ((r217 < 0), (1 + if ((d244 >= 0)) {
                          d244
                        } else {
                          0
                        }))
                      }
                      
                      if (rcond16) {
                        locally {
                          val (rthen16: Tree, dthen16: Int) = locally {
                            val (e42: Tree, d250: Int) = rotateLeft(t.left)
                            (e42, (2 + d250))
                          }
                          
                          (rthen16, if ((dcond16 >= dthen16)) {
                            dcond16
                          } else {
                            dthen16
                          })
                        }
                        
                      } else {
                        (t.left, if ((dcond16 >= 1)) {
                          dcond16
                        } else {
                          1
                        })
                      }
                    }
                    
                    locally {
                      val (br11: Tree, bd11: Int) = locally {
                        val (r224: Node, d253: Int) = locally {
                          val (r228: Int, d258: Int) = locally {
                            val (r229: Int, d259: Int) = locally {
                              val (r231: Int, d261: Int) = locally {
                                val (e46: Int, d268: Int) = rank(vr12)
                                (e46, ((1 + d268) + vd11))
                              }
                              
                              locally {
                                val (r232: Int, d262: Int) = locally {
                                  val (e45: Int, d265: Int) = rank(t.right)
                                  (e45, (2 + d265))
                                }
                                
                                locally {
                                  val (e44: Int, d263: Int) = max(r231, r232)
                                  (e44, ((1 + d263) + if ((d261 >= d262)) {
                                    d261
                                  } else {
                                    d262
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r229 + 1), (1 + if ((d259 >= 0)) {
                              d259
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d258)) {
                            if ((if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            } >= 1)) {
                              if ((vd11 >= 1)) {
                                vd11
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d258
                          }))
                        }
                        
                        locally {
                          val (e43: Tree, d254: Int) = rotateRight(r224)
                          (e43, ((1 + d254) + d253))
                        }
                        
                      }
                      
                      (br11, (bd11 + 1))
                    }
                    
                  }
                  
                  (rthen15, if ((dcond15 >= dthen15)) {
                    dcond15
                  } else {
                    dthen15
                  })
                }
                
              } else {
                locally {
                  val (relse16: Tree, delse16: Int) = locally {
                    val dcond17 = (1 + if ((vd10 >= 0)) {
                      vd10
                    } else {
                      0
                    })
                    if ((vr11 < -1)) {
                      locally {
                        val (rthen17: Tree, dthen17: Int) = locally {
                          val (vr13: Tree, vd12: Int) = locally {
                            val (rcond18: Boolean, dcond18: Int) = locally {
                              val (r240: Int, d273: Int) = locally {
                                val (e47: Int, d276: Int) = balanceFactor(t.right)
                                (e47, (2 + d276))
                              }
                              
                              ((r240 > 0), (1 + if ((d273 >= 0)) {
                                d273
                              } else {
                                0
                              }))
                            }
                            
                            if (rcond18) {
                              locally {
                                val (rthen18: Tree, dthen18: Int) = locally {
                                  val (e48: Tree, d279: Int) = rotateRight(t.right)
                                  (e48, (2 + d279))
                                }
                                
                                (rthen18, if ((dcond18 >= dthen18)) {
                                  dcond18
                                } else {
                                  dthen18
                                })
                              }
                              
                            } else {
                              (t.right, if ((dcond18 >= 1)) {
                                dcond18
                              } else {
                                1
                              })
                            }
                          }
                          
                          locally {
                            val (br12: Tree, bd12: Int) = locally {
                              val (r247: Node, d282: Int) = locally {
                                val (r251: Int, d287: Int) = locally {
                                  val (r252: Int, d288: Int) = locally {
                                    val (r254: Int, d290: Int) = locally {
                                      val (e52: Int, d297: Int) = rank(vr13)
                                      (e52, ((1 + d297) + vd12))
                                    }
                                    
                                    locally {
                                      val (r255: Int, d291: Int) = locally {
                                        val (e51: Int, d294: Int) = rank(t.left)
                                        (e51, (2 + d294))
                                      }
                                      
                                      locally {
                                        val (e50: Int, d292: Int) = max(r254, r255)
                                        (e50, ((1 + d292) + if ((d290 >= d291)) {
                                          d290
                                        } else {
                                          d291
                                        }))
                                      }
                                      
                                    }
                                    
                                  }
                                  
                                  ((r252 + 1), (1 + if ((d288 >= 0)) {
                                    d288
                                  } else {
                                    0
                                  }))
                                }
                                
                                (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                } >= d287)) {
                                  if ((1 >= vd12)) {
                                    1
                                  } else {
                                    vd12
                                  }
                                } else {
                                  d287
                                }))
                              }
                              
                              locally {
                                val (e49: Tree, d283: Int) = rotateLeft(r247)
                                (e49, ((1 + d283) + d282))
                              }
                              
                            }
                            
                            (br12, (bd12 + 1))
                          }
                          
                        }
                        
                        (rthen17, if ((dcond17 >= dthen17)) {
                          dcond17
                        } else {
                          dthen17
                        })
                      }
                      
                    } else {
                      (t, if ((dcond17 >= 0)) {
                        dcond17
                      } else {
                        0
                      })
                    }
                  }
                  
                  (relse16, if ((dcond15 >= delse16)) {
                    dcond15
                  } else {
                    delse16
                  })
                }
                
              }
            }
            
            (br10, (bd10 + 1))
          }
          
        }
        
        (relse14, if ((dcond14 >= delse14)) {
          dcond14
        } else {
          delse14
        })
      }
      
    }
  }
  }

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val dcond = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), e, Leaf(), 1), if ((dcond >= 2)) {
        dcond
      } else {
        2
      })
    } else {
      locally {
        val (relse: Tree, delse: Int) = locally {
          val dcond1 = 2
          if ((e == t.value)) {
            (t, if ((dcond1 >= 0)) {
              dcond1
            } else {
              0
            })
          } else {
            locally {
              val (relse1: Node, delse1: Int) = locally {
                val dcond2 = 2
                if ((e < t.value)) {
                  locally {
                    val (rthen2: Node, dthen2: Int) = locally {
                      val (vr1: Tree, vd: Int) = locally {
                        val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                        (e4, (2 + d13))
                      }
                      
                      locally {
                        val (br: Node, bd: Int) = locally {
                          val (r27: Int, d18: Int) = locally {
                            val (r28: Int, d19: Int) = locally {
                              val (r30: Int, d21: Int) = locally {
                                val (e7: Int, d28: Int) = rank(vr1)
                                (e7, ((1 + d28) + vd))
                              }
                              
                              locally {
                                val (r31: Int, d22: Int) = locally {
                                  val (e6: Int, d25: Int) = rank(t.right)
                                  (e6, (2 + d25))
                                }
                                
                                locally {
                                  val (e5: Int, d23: Int) = max(r30, r31)
                                  (e5, ((1 + d23) + if ((d21 >= d22)) {
                                    d21
                                  } else {
                                    d22
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r28 + 1), (1 + if ((d19 >= 0)) {
                              d19
                            } else {
                              0
                            }))
                          }
                          
                          (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                            vd
                          } else {
                            1
                          } >= 1)) {
                            if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            }
                          } else {
                            1
                          } >= d18)) {
                            if ((if ((vd >= 1)) {
                              vd
                            } else {
                              1
                            } >= 1)) {
                              if ((vd >= 1)) {
                                vd
                              } else {
                                1
                              }
                            } else {
                              1
                            }
                          } else {
                            d18
                          }))
                        }
                        
                        (br, (bd + 1))
                      }
                      
                    }
                    
                    (rthen2, if ((dcond2 >= dthen2)) {
                      dcond2
                    } else {
                      dthen2
                    })
                  }
                  
                } else {
                  locally {
                    val (relse2: Node, delse2: Int) = locally {
                      val (vr2: Tree, vd1: Int) = locally {
                        val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                        (e8, (2 + d33))
                      }
                      
                      locally {
                        val (br1: Node, bd1: Int) = locally {
                          val (r43: Int, d38: Int) = locally {
                            val (r44: Int, d39: Int) = locally {
                              val (r46: Int, d41: Int) = locally {
                                val (e11: Int, d47: Int) = rank(t.left)
                                (e11, (2 + d47))
                              }
                              
                              locally {
                                val (r47: Int, d42: Int) = locally {
                                  val (e10: Int, d45: Int) = rank(vr2)
                                  (e10, ((1 + d45) + vd1))
                                }
                                
                                locally {
                                  val (e9: Int, d43: Int) = max(r46, r47)
                                  (e9, ((1 + d43) + if ((d41 >= d42)) {
                                    d41
                                  } else {
                                    d42
                                  }))
                                }
                                
                              }
                              
                            }
                            
                            ((r44 + 1), (1 + if ((d39 >= 0)) {
                              d39
                            } else {
                              0
                            }))
                          }
                          
                          (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                            1
                          } else {
                            vd1
                          } >= d38)) {
                            if ((1 >= vd1)) {
                              1
                            } else {
                              vd1
                            }
                          } else {
                            d38
                          }))
                        }
                        
                        (br1, (bd1 + 1))
                      }
                      
                    }
                    
                    (relse2, if ((dcond2 >= delse2)) {
                      dcond2
                    } else {
                      delse2
                    })
                  }
                  
                }
              }
              
              (relse1, if ((dcond1 >= delse1)) {
                dcond1
              } else {
                delse1
              })
            }
            
          }
        }
        
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  }

  def balanceFactor(t : Tree) : (Int, Int) = {locally {
    val dcond6 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond6 >= 0)) {
        dcond6
      } else {
        0
      })
    } else {
      locally {
        val (relse6: Int, delse6: Int) = locally {
          val (r136: Int, d148: Int) = locally {
            val (e27: Int, d154: Int) = rank(t.left)
            (e27, (2 + d154))
          }
          
          locally {
            val (r137: Int, d149: Int) = locally {
              val (e26: Int, d151: Int) = rank(t.right)
              (e26, (2 + d151))
            }
            
            ((r136 - r137), (1 + if ((d148 >= d149)) {
              d148
            } else {
              d149
            }))
          }
          
        }
        
        (relse6, if ((dcond6 >= delse6)) {
          dcond6
        } else {
          delse6
        })
      }
      
    }
  }
  }

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr)._1 + 1)
        }
        
      }
      
  })}

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {locally {
    val dcond19 = 3
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
      ((Leaf(), Some(t.value)), if ((dcond19 >= 3)) {
        dcond19
      } else {
        3
      })
    } else {
      locally {
        val (relse19: (Tree, OptionInt), delse19: Int) = locally {
          val dcond20 = 3
          if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
            locally {
              val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
                val (vr14: (Tree, OptionInt), vd13: Int) = locally {
                  val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                    val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                    (e53, (2 + d318))
                  }
                  
                  ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                    (1 + vd14)
                  } else {
                    (1 + vd14)
                  }))
                }
                
                locally {
                  val (br13: (Tree, OptionInt), bd13: Int) = locally {
                    val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                    locally {
                      val (br15: (Tree, OptionInt), bd15: Int) = locally {
                        val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                        locally {
                          val (br16: (Tree, OptionInt), bd16: Int) = locally {
                            val dcond21 = (1 + vd16)
                            if (vr17.isInstanceOf[None]) {
                              ((t, None()), if ((dcond21 >= 2)) {
                                dcond21
                              } else {
                                2
                              })
                            } else {
                              locally {
                                val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                                  val (vr18: Tree, vd17: Int) = locally {
                                    val (r289: Node, d329: Int) = locally {
                                      val (r293: Int, d334: Int) = locally {
                                        val (r294: Int, d335: Int) = locally {
                                          val (e55: Int, d338: Int) = rank(vr16)
                                          (e55, ((1 + d338) + vd15))
                                        }
                                        
                                        ((r294 + 1), (1 + if ((d335 >= 0)) {
                                          d335
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      } >= 1)) {
                                        if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        }
                                      } else {
                                        1
                                      } >= d334)) {
                                        if ((if ((vd15 >= (1 + vd16))) {
                                          vd15
                                        } else {
                                          (1 + vd16)
                                        } >= 1)) {
                                          if ((vd15 >= (1 + vd16))) {
                                            vd15
                                          } else {
                                            (1 + vd16)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d334
                                      }))
                                    }
                                    
                                    locally {
                                      val (e54: Tree, d330: Int) = balance(r289)
                                      (e54, ((1 + d330) + d329))
                                    }
                                    
                                  }
                                  
                                  ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                    vd17
                                  } else {
                                    2
                                  }))
                                }
                                
                                (relse20, if ((dcond21 >= delse20)) {
                                  dcond21
                                } else {
                                  delse20
                                })
                              }
                              
                            }
                          }
                          
                          (br16, (bd16 + 1))
                        }
                        
                      }
                      
                      (br15, (bd15 + 1))
                    }
                    
                  }
                  
                  (br13, (bd13 + 1))
                }
                
              }
              
              (rthen20, if ((dcond20 >= dthen20)) {
                dcond20
              } else {
                dthen20
              })
            }
            
          } else {
            locally {
              val (relse21: (Tree, OptionInt), delse21: Int) = locally {
                val dcond22 = 1
                if (t.isInstanceOf[Node]) {
                  locally {
                    val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                      val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                      (e56, (2 + d346))
                    }
                    
                    (rthen22, if ((dcond22 >= dthen22)) {
                      dcond22
                    } else {
                      dthen22
                    })
                  }
                  
                } else {
                  ((t, None()), if ((dcond22 >= 2)) {
                    dcond22
                  } else {
                    2
                  })
                }
              }
              
              (relse21, if ((dcond20 >= delse21)) {
                dcond20
              } else {
                delse21
              })
            }
            
          }
        }
        
        (relse19, if ((dcond19 >= delse19)) {
          dcond19
        } else {
          delse19
        })
      }
      
    }
  }
  } ensuring(res10 => true)

  def rank(t : Tree) : (Int, Int) = {locally {
    val dcond13 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      (t.rank, if ((dcond13 >= 1)) {
        dcond13
      } else {
        1
      })
    }
  }
  }

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res12 => true)

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {locally {
    val dcond4 = 1
    if ((i1 >= i2)) {
      (i1, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    } else {
      (i2, if ((dcond4 >= 0)) {
        dcond4
      } else {
        0
      })
    }
  }
  }

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res9 => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res11 => true)

  def rotateLeft(t : Tree) : (Tree, Int) = {locally {
    val dcond5 = 3
    if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
      locally {
        val (rthen5: Node, dthen5: Int) = locally {
          val (vr4: Int, vd3: Int) = locally {
            val (r103: Int, d110: Int) = locally {
              val (r105: Int, d112: Int) = locally {
                val (e23: Int, d120: Int) = rank(t.left)
                (e23, (2 + d120))
              }
              
              locally {
                val (r106: Int, d113: Int) = locally {
                  val (e22: Int, d116: Int) = rank(t.right.left)
                  (e22, (3 + d116))
                }
                
                locally {
                  val (e21: Int, d114: Int) = max(r105, r106)
                  (e21, ((1 + d114) + if ((d112 >= d113)) {
                    d112
                  } else {
                    d113
                  }))
                }
                
              }
              
            }
            
            ((r103 + 1), (1 + if ((d110 >= 0)) {
              d110
            } else {
              0
            }))
          }
          
          locally {
            val (br3: Node, bd3: Int) = locally {
              val (r115: Int, d125: Int) = locally {
                val (r116: Int, d126: Int) = locally {
                  val (r119: Int, d129: Int) = locally {
                    val (e25: Int, d132: Int) = rank(t.right.right)
                    (e25, (3 + d132))
                  }
                  
                  locally {
                    val (e24: Int, d130: Int) = max(vr4, r119)
                    (e24, ((1 + d130) + if ((vd3 >= d129)) {
                      vd3
                    } else {
                      d129
                    }))
                  }
                  
                }
                
                ((r116 + 1), (1 + if ((d126 >= 0)) {
                  d126
                } else {
                  0
                }))
              }
              
              (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              } >= d125)) {
                if ((if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                } >= 2)) {
                  if (((1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  }) >= 2)) {
                    (1 + if ((2 >= vd3)) {
                      2
                    } else {
                      vd3
                    })
                  } else {
                    2
                  }
                } else {
                  2
                }
              } else {
                d125
              }))
            }
            
            (br3, (bd3 + 1))
          }
          
        }
        
        (rthen5, if ((dcond5 >= dthen5)) {
          dcond5
        } else {
          dthen5
        })
      }
      
    } else {
      (t, if ((dcond5 >= 0)) {
        dcond5
      } else {
        0
      })
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object AVLTree {
  sealed abstract class Tree

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class None() extends OptionInt

  sealed abstract class OptionInt

  case class Some(i: Int) extends OptionInt

  case class Leaf() extends Tree

  def rotateRight(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
    locally {
      val (rthen3: Node, dthen3: Int) = locally {
        val (vr3: Int, vd2: Int) = locally {
          val (r58: Int, d56: Int) = locally {
            val (r60: Int, d58: Int) = locally {
              val (e14: Int, d65: Int) = rank(t.left.right)
              (e14, (3 + d65))
            }
            
            locally {
              val (r61: Int, d59: Int) = locally {
                val (e13: Int, d62: Int) = rank(t.right)
                (e13, (2 + d62))
              }
              
              locally {
                val (e12: Int, d60: Int) = max(r60, r61)
                (e12, ((1 + d60) + if ((d58 >= d59)) {
                  d58
                } else {
                  d59
                }))
              }
              
            }
            
          }
          
          ((r58 + 1), (1 + if ((d56 >= 0)) {
            d56
          } else {
            0
          }))
        }
        
        locally {
          val (br2: Node, bd2: Int) = locally {
            val (r70: Int, d71: Int) = locally {
              val (r71: Int, d72: Int) = locally {
                val (r73: Int, d74: Int) = locally {
                  val (e16: Int, d78: Int) = rank(t.left.left)
                  (e16, (3 + d78))
                }
                
                locally {
                  val (e15: Int, d76: Int) = max(r73, vr3)
                  (e15, ((1 + d76) + if ((d74 >= vd2)) {
                    d74
                  } else {
                    vd2
                  }))
                }
                
              }
              
              ((r71 + 1), (1 + if ((d72 >= 0)) {
                d72
              } else {
                0
              }))
            }
            
            (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, vr3), r70), (1 + if ((if ((2 >= (1 + if ((2 >= vd2)) {
              2
            } else {
              vd2
            }))) {
              2
            } else {
              (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              })
            } >= d71)) {
              if ((2 >= (1 + if ((2 >= vd2)) {
                2
              } else {
                vd2
              }))) {
                2
              } else {
                (1 + if ((2 >= vd2)) {
                  2
                } else {
                  vd2
                })
              }
            } else {
              d71
            }))
          }
          
          (br2, (bd2 + 1))
        }
        
      }
      
      (rthen3, if ((3 >= dthen3)) {
        3
      } else {
        dthen3
      })
    }
    
  } else {
    (t, if ((3 >= 0)) {
      3
    } else {
      0
    })
  }}

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse7: Tree, delse7: Int) = if ((e == t.value)) {
        locally {
          val (rthen8: Tree, dthen8: Int) = if ((t.left == Leaf())) {
            (t.right, if ((2 >= 1)) {
              2
            } else {
              1
            })
          } else {
            locally {
              val (relse8: Tree, delse8: Int) = if ((t.right == Leaf())) {
                (t.left, if ((2 >= 1)) {
                  2
                } else {
                  1
                })
              } else {
                locally {
                  val (relse9: Tree, delse9: Int) = locally {
                    val (vr5: (Tree, OptionInt), vd4: Int) = locally {
                      val (vr6: (Tree, OptionInt), vd5: Int) = locally {
                        val (e28: (Tree, OptionInt), d169: Int) = deleteMax(t.left)
                        (e28, (2 + d169))
                      }
                      
                      ((vr6._1, vr6._2), (2 + if (((1 + vd5) >= (1 + vd5))) {
                        (1 + vd5)
                      } else {
                        (1 + vd5)
                      }))
                    }
                    
                    locally {
                      val (br4: Tree, bd4: Int) = locally {
                        val (vr7: Tree, vd6: Int) = (vr5._1, (1 + vd4))
                        locally {
                          val (br6: Tree, bd6: Int) = locally {
                            val (vr8: OptionInt, vd7: Int) = (vr5._2, (1 + vd4))
                            locally {
                              val (br7: Tree, bd7: Int) = locally {
                                val dcond11 = (1 + vd7)
                                if (vr8.isInstanceOf[None]) {
                                  (t, if ((dcond11 >= 0)) {
                                    dcond11
                                  } else {
                                    0
                                  })
                                } else {
                                  locally {
                                    val (relse10: Node, delse10: Int) = locally {
                                      val (r166: Int, d181: Int) = locally {
                                        val (r167: Int, d182: Int) = locally {
                                          val (r169: Int, d184: Int) = locally {
                                            val (e31: Int, d191: Int) = rank(vr7)
                                            (e31, ((1 + d191) + vd6))
                                          }
                                          
                                          locally {
                                            val (r170: Int, d185: Int) = locally {
                                              val (e30: Int, d188: Int) = rank(t.right)
                                              (e30, (2 + d188))
                                            }
                                            
                                            locally {
                                              val (e29: Int, d186: Int) = max(r169, r170)
                                              (e29, ((1 + d186) + if ((d184 >= d185)) {
                                                d184
                                              } else {
                                                d185
                                              }))
                                            }
                                            
                                          }
                                          
                                        }
                                        
                                        ((r167 + 1), (1 + if ((d182 >= 0)) {
                                          d182
                                        } else {
                                          0
                                        }))
                                      }
                                      
                                      (Node(vr7, vr8.i, t.right, r166), (1 + if ((if ((if ((vd6 >= (1 + vd7))) {
                                        vd6
                                      } else {
                                        (1 + vd7)
                                      } >= 1)) {
                                        if ((vd6 >= (1 + vd7))) {
                                          vd6
                                        } else {
                                          (1 + vd7)
                                        }
                                      } else {
                                        1
                                      } >= d181)) {
                                        if ((if ((vd6 >= (1 + vd7))) {
                                          vd6
                                        } else {
                                          (1 + vd7)
                                        } >= 1)) {
                                          if ((vd6 >= (1 + vd7))) {
                                            vd6
                                          } else {
                                            (1 + vd7)
                                          }
                                        } else {
                                          1
                                        }
                                      } else {
                                        d181
                                      }))
                                    }
                                    
                                    (relse10, if ((dcond11 >= delse10)) {
                                      dcond11
                                    } else {
                                      delse10
                                    })
                                  }
                                  
                                }
                              }
                              
                              (br7, (bd7 + 1))
                            }
                            
                          }
                          
                          (br6, (bd6 + 1))
                        }
                        
                      }
                      
                      (br4, (bd4 + 1))
                    }
                    
                  }
                  
                  (relse9, if ((2 >= delse9)) {
                    2
                  } else {
                    delse9
                  })
                }
                
              }
              (relse8, if ((2 >= delse8)) {
                2
              } else {
                delse8
              })
            }
            
          }
          (rthen8, if ((2 >= dthen8)) {
            2
          } else {
            dthen8
          })
        }
        
      } else {
        locally {
          val (relse11: Node, delse11: Int) = if ((e < t.value)) {
            locally {
              val (rthen12: Node, dthen12: Int) = locally {
                val (vr9: Tree, vd8: Int) = locally {
                  val (e32: Tree, d199: Int) = avlDelete(t.left, e)
                  (e32, (2 + d199))
                }
                
                locally {
                  val (br8: Node, bd8: Int) = locally {
                    val (r185: Int, d204: Int) = locally {
                      val (r186: Int, d205: Int) = locally {
                        val (r188: Int, d207: Int) = locally {
                          val (e35: Int, d214: Int) = rank(vr9)
                          (e35, ((1 + d214) + vd8))
                        }
                        
                        locally {
                          val (r189: Int, d208: Int) = locally {
                            val (e34: Int, d211: Int) = rank(t.right)
                            (e34, (2 + d211))
                          }
                          
                          locally {
                            val (e33: Int, d209: Int) = max(r188, r189)
                            (e33, ((1 + d209) + if ((d207 >= d208)) {
                              d207
                            } else {
                              d208
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r186 + 1), (1 + if ((d205 >= 0)) {
                        d205
                      } else {
                        0
                      }))
                    }
                    
                    (Node(vr9, t.value, t.right, r185), (1 + if ((if ((if ((vd8 >= 1)) {
                      vd8
                    } else {
                      1
                    } >= 1)) {
                      if ((vd8 >= 1)) {
                        vd8
                      } else {
                        1
                      }
                    } else {
                      1
                    } >= d204)) {
                      if ((if ((vd8 >= 1)) {
                        vd8
                      } else {
                        1
                      } >= 1)) {
                        if ((vd8 >= 1)) {
                          vd8
                        } else {
                          1
                        }
                      } else {
                        1
                      }
                    } else {
                      d204
                    }))
                  }
                  
                  (br8, (bd8 + 1))
                }
                
              }
              
              (rthen12, if ((2 >= dthen12)) {
                2
              } else {
                dthen12
              })
            }
            
          } else {
            locally {
              val (relse12: Node, delse12: Int) = locally {
                val (vr10: Tree, vd9: Int) = locally {
                  val (e36: Tree, d219: Int) = avlDelete(t.right, e)
                  (e36, (2 + d219))
                }
                
                locally {
                  val (br9: Node, bd9: Int) = locally {
                    val (r201: Int, d224: Int) = locally {
                      val (r202: Int, d225: Int) = locally {
                        val (r204: Int, d227: Int) = locally {
                          val (e39: Int, d233: Int) = rank(t.left)
                          (e39, (2 + d233))
                        }
                        
                        locally {
                          val (r205: Int, d228: Int) = locally {
                            val (e38: Int, d231: Int) = rank(vr10)
                            (e38, ((1 + d231) + vd9))
                          }
                          
                          locally {
                            val (e37: Int, d229: Int) = max(r204, r205)
                            (e37, ((1 + d229) + if ((d227 >= d228)) {
                              d227
                            } else {
                              d228
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r202 + 1), (1 + if ((d225 >= 0)) {
                        d225
                      } else {
                        0
                      }))
                    }
                    
                    (Node(t.left, t.value, vr10, r201), (1 + if ((if ((1 >= vd9)) {
                      1
                    } else {
                      vd9
                    } >= d224)) {
                      if ((1 >= vd9)) {
                        1
                      } else {
                        vd9
                      }
                    } else {
                      d224
                    }))
                  }
                  
                  (br9, (bd9 + 1))
                }
                
              }
              
              (relse12, if ((2 >= delse12)) {
                2
              } else {
                delse12
              })
            }
            
          }
          (relse11, if ((2 >= delse11)) {
            2
          } else {
            delse11
          })
        }
        
      }
      (relse7, if ((1 >= delse7)) {
        1
      } else {
        delse7
      })
    }
    
  }}

  def balance(t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), if ((1 >= 1)) {
      1
    } else {
      1
    })
  } else {
    locally {
      val (relse14: Tree, delse14: Int) = locally {
        val (vr11: Int, vd10: Int) = locally {
          val (e40: Int, d241: Int) = balanceFactor(t)
          (e40, (1 + d241))
        }
        
        locally {
          val (br10: Tree, bd10: Int) = locally {
            val dcond15 = (1 + if ((vd10 >= 0)) {
              vd10
            } else {
              0
            })
            if ((vr11 > 1)) {
              locally {
                val (rthen15: Tree, dthen15: Int) = locally {
                  val (vr12: Tree, vd11: Int) = locally {
                    val (rcond16: Boolean, dcond16: Int) = locally {
                      val (r217: Int, d244: Int) = locally {
                        val (e41: Int, d247: Int) = balanceFactor(t.left)
                        (e41, (2 + d247))
                      }
                      
                      ((r217 < 0), (1 + if ((d244 >= 0)) {
                        d244
                      } else {
                        0
                      }))
                    }
                    
                    if (rcond16) {
                      locally {
                        val (rthen16: Tree, dthen16: Int) = locally {
                          val (e42: Tree, d250: Int) = rotateLeft(t.left)
                          (e42, (2 + d250))
                        }
                        
                        (rthen16, if ((dcond16 >= dthen16)) {
                          dcond16
                        } else {
                          dthen16
                        })
                      }
                      
                    } else {
                      (t.left, if ((dcond16 >= 1)) {
                        dcond16
                      } else {
                        1
                      })
                    }
                  }
                  
                  locally {
                    val (br11: Tree, bd11: Int) = locally {
                      val (r224: Node, d253: Int) = locally {
                        val (r228: Int, d258: Int) = locally {
                          val (r229: Int, d259: Int) = locally {
                            val (r231: Int, d261: Int) = locally {
                              val (e46: Int, d268: Int) = rank(vr12)
                              (e46, ((1 + d268) + vd11))
                            }
                            
                            locally {
                              val (r232: Int, d262: Int) = locally {
                                val (e45: Int, d265: Int) = rank(t.right)
                                (e45, (2 + d265))
                              }
                              
                              locally {
                                val (e44: Int, d263: Int) = max(r231, r232)
                                (e44, ((1 + d263) + if ((d261 >= d262)) {
                                  d261
                                } else {
                                  d262
                                }))
                              }
                              
                            }
                            
                          }
                          
                          ((r229 + 1), (1 + if ((d259 >= 0)) {
                            d259
                          } else {
                            0
                          }))
                        }
                        
                        (Node(vr12, t.value, t.right, r228), (1 + if ((if ((if ((vd11 >= 1)) {
                          vd11
                        } else {
                          1
                        } >= 1)) {
                          if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          }
                        } else {
                          1
                        } >= d258)) {
                          if ((if ((vd11 >= 1)) {
                            vd11
                          } else {
                            1
                          } >= 1)) {
                            if ((vd11 >= 1)) {
                              vd11
                            } else {
                              1
                            }
                          } else {
                            1
                          }
                        } else {
                          d258
                        }))
                      }
                      
                      locally {
                        val (e43: Tree, d254: Int) = rotateRight(r224)
                        (e43, ((1 + d254) + d253))
                      }
                      
                    }
                    
                    (br11, (bd11 + 1))
                  }
                  
                }
                
                (rthen15, if ((dcond15 >= dthen15)) {
                  dcond15
                } else {
                  dthen15
                })
              }
              
            } else {
              locally {
                val (relse16: Tree, delse16: Int) = locally {
                  val dcond17 = (1 + if ((vd10 >= 0)) {
                    vd10
                  } else {
                    0
                  })
                  if ((vr11 < -1)) {
                    locally {
                      val (rthen17: Tree, dthen17: Int) = locally {
                        val (vr13: Tree, vd12: Int) = locally {
                          val (rcond18: Boolean, dcond18: Int) = locally {
                            val (r240: Int, d273: Int) = locally {
                              val (e47: Int, d276: Int) = balanceFactor(t.right)
                              (e47, (2 + d276))
                            }
                            
                            ((r240 > 0), (1 + if ((d273 >= 0)) {
                              d273
                            } else {
                              0
                            }))
                          }
                          
                          if (rcond18) {
                            locally {
                              val (rthen18: Tree, dthen18: Int) = locally {
                                val (e48: Tree, d279: Int) = rotateRight(t.right)
                                (e48, (2 + d279))
                              }
                              
                              (rthen18, if ((dcond18 >= dthen18)) {
                                dcond18
                              } else {
                                dthen18
                              })
                            }
                            
                          } else {
                            (t.right, if ((dcond18 >= 1)) {
                              dcond18
                            } else {
                              1
                            })
                          }
                        }
                        
                        locally {
                          val (br12: Tree, bd12: Int) = locally {
                            val (r247: Node, d282: Int) = locally {
                              val (r251: Int, d287: Int) = locally {
                                val (r252: Int, d288: Int) = locally {
                                  val (r254: Int, d290: Int) = locally {
                                    val (e52: Int, d297: Int) = rank(vr13)
                                    (e52, ((1 + d297) + vd12))
                                  }
                                  
                                  locally {
                                    val (r255: Int, d291: Int) = locally {
                                      val (e51: Int, d294: Int) = rank(t.left)
                                      (e51, (2 + d294))
                                    }
                                    
                                    locally {
                                      val (e50: Int, d292: Int) = max(r254, r255)
                                      (e50, ((1 + d292) + if ((d290 >= d291)) {
                                        d290
                                      } else {
                                        d291
                                      }))
                                    }
                                    
                                  }
                                  
                                }
                                
                                ((r252 + 1), (1 + if ((d288 >= 0)) {
                                  d288
                                } else {
                                  0
                                }))
                              }
                              
                              (Node(t.left, t.value, vr13, r251), (1 + if ((if ((1 >= vd12)) {
                                1
                              } else {
                                vd12
                              } >= d287)) {
                                if ((1 >= vd12)) {
                                  1
                                } else {
                                  vd12
                                }
                              } else {
                                d287
                              }))
                            }
                            
                            locally {
                              val (e49: Tree, d283: Int) = rotateLeft(r247)
                              (e49, ((1 + d283) + d282))
                            }
                            
                          }
                          
                          (br12, (bd12 + 1))
                        }
                        
                      }
                      
                      (rthen17, if ((dcond17 >= dthen17)) {
                        dcond17
                      } else {
                        dthen17
                      })
                    }
                    
                  } else {
                    (t, if ((dcond17 >= 0)) {
                      dcond17
                    } else {
                      0
                    })
                  }
                }
                
                (relse16, if ((dcond15 >= delse16)) {
                  dcond15
                } else {
                  delse16
                })
              }
              
            }
          }
          
          (br10, (bd10 + 1))
        }
        
      }
      
      (relse14, if ((1 >= delse14)) {
        1
      } else {
        delse14
      })
    }
    
  }}

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Node(Leaf(), e, Leaf(), 1), if ((1 >= 2)) {
      1
    } else {
      2
    })
  } else {
    locally {
      val (relse: Tree, delse: Int) = if ((e == t.value)) {
        (t, if ((2 >= 0)) {
          2
        } else {
          0
        })
      } else {
        locally {
          val (relse1: Node, delse1: Int) = if ((e < t.value)) {
            locally {
              val (rthen2: Node, dthen2: Int) = locally {
                val (vr1: Tree, vd: Int) = locally {
                  val (e4: Tree, d13: Int) = avlInsert(t.left, e)
                  (e4, (2 + d13))
                }
                
                locally {
                  val (br: Node, bd: Int) = locally {
                    val (r27: Int, d18: Int) = locally {
                      val (r28: Int, d19: Int) = locally {
                        val (r30: Int, d21: Int) = locally {
                          val (e7: Int, d28: Int) = rank(vr1)
                          (e7, ((1 + d28) + vd))
                        }
                        
                        locally {
                          val (r31: Int, d22: Int) = locally {
                            val (e6: Int, d25: Int) = rank(t.right)
                            (e6, (2 + d25))
                          }
                          
                          locally {
                            val (e5: Int, d23: Int) = max(r30, r31)
                            (e5, ((1 + d23) + if ((d21 >= d22)) {
                              d21
                            } else {
                              d22
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r28 + 1), (1 + if ((d19 >= 0)) {
                        d19
                      } else {
                        0
                      }))
                    }
                    
                    (Node(vr1, t.value, t.right, r27), (1 + if ((if ((if ((vd >= 1)) {
                      vd
                    } else {
                      1
                    } >= 1)) {
                      if ((vd >= 1)) {
                        vd
                      } else {
                        1
                      }
                    } else {
                      1
                    } >= d18)) {
                      if ((if ((vd >= 1)) {
                        vd
                      } else {
                        1
                      } >= 1)) {
                        if ((vd >= 1)) {
                          vd
                        } else {
                          1
                        }
                      } else {
                        1
                      }
                    } else {
                      d18
                    }))
                  }
                  
                  (br, (bd + 1))
                }
                
              }
              
              (rthen2, if ((2 >= dthen2)) {
                2
              } else {
                dthen2
              })
            }
            
          } else {
            locally {
              val (relse2: Node, delse2: Int) = locally {
                val (vr2: Tree, vd1: Int) = locally {
                  val (e8: Tree, d33: Int) = avlInsert(t.right, e)
                  (e8, (2 + d33))
                }
                
                locally {
                  val (br1: Node, bd1: Int) = locally {
                    val (r43: Int, d38: Int) = locally {
                      val (r44: Int, d39: Int) = locally {
                        val (r46: Int, d41: Int) = locally {
                          val (e11: Int, d47: Int) = rank(t.left)
                          (e11, (2 + d47))
                        }
                        
                        locally {
                          val (r47: Int, d42: Int) = locally {
                            val (e10: Int, d45: Int) = rank(vr2)
                            (e10, ((1 + d45) + vd1))
                          }
                          
                          locally {
                            val (e9: Int, d43: Int) = max(r46, r47)
                            (e9, ((1 + d43) + if ((d41 >= d42)) {
                              d41
                            } else {
                              d42
                            }))
                          }
                          
                        }
                        
                      }
                      
                      ((r44 + 1), (1 + if ((d39 >= 0)) {
                        d39
                      } else {
                        0
                      }))
                    }
                    
                    (Node(t.left, t.value, vr2, r43), (1 + if ((if ((1 >= vd1)) {
                      1
                    } else {
                      vd1
                    } >= d38)) {
                      if ((1 >= vd1)) {
                        1
                      } else {
                        vd1
                      }
                    } else {
                      d38
                    }))
                  }
                  
                  (br1, (bd1 + 1))
                }
                
              }
              
              (relse2, if ((2 >= delse2)) {
                2
              } else {
                delse2
              })
            }
            
          }
          (relse1, if ((2 >= delse1)) {
            2
          } else {
            delse1
          })
        }
        
      }
      (relse, if ((1 >= delse)) {
        1
      } else {
        delse
      })
    }
    
  }}

  def balanceFactor(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse6: Int, delse6: Int) = locally {
        val (r136: Int, d148: Int) = locally {
          val (e27: Int, d154: Int) = rank(t.left)
          (e27, (2 + d154))
        }
        
        locally {
          val (r137: Int, d149: Int) = locally {
            val (e26: Int, d151: Int) = rank(t.right)
            (e26, (2 + d151))
          }
          
          ((r136 - r137), (1 + if ((d148 >= d149)) {
            d148
          } else {
            d149
          }))
        }
        
      }
      
      (relse6, if ((1 >= delse6)) {
        1
      } else {
        delse6
      })
    }
    
  }}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      (max(height(l), height(r))._1 + 1)
  })}

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
    ((Leaf(), Some(t.value)), if ((3 >= 3)) {
      3
    } else {
      3
    })
  } else {
    locally {
      val (relse19: (Tree, OptionInt), delse19: Int) = if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
        locally {
          val (rthen20: (Tree, OptionInt), dthen20: Int) = locally {
            val (vr14: (Tree, OptionInt), vd13: Int) = locally {
              val (vr15: (Tree, OptionInt), vd14: Int) = locally {
                val (e53: (Tree, OptionInt), d318: Int) = deleteMax(t.left)
                (e53, (2 + d318))
              }
              
              ((vr15._1, vr15._2), (2 + if (((1 + vd14) >= (1 + vd14))) {
                (1 + vd14)
              } else {
                (1 + vd14)
              }))
            }
            
            locally {
              val (br13: (Tree, OptionInt), bd13: Int) = locally {
                val (vr16: Tree, vd15: Int) = (vr14._1, (1 + vd13))
                locally {
                  val (br15: (Tree, OptionInt), bd15: Int) = locally {
                    val (vr17: OptionInt, vd16: Int) = (vr14._2, (1 + vd13))
                    locally {
                      val (br16: (Tree, OptionInt), bd16: Int) = locally {
                        val dcond21 = (1 + vd16)
                        if (vr17.isInstanceOf[None]) {
                          ((t, None()), if ((dcond21 >= 2)) {
                            dcond21
                          } else {
                            2
                          })
                        } else {
                          locally {
                            val (relse20: (Tree, OptionInt), delse20: Int) = locally {
                              val (vr18: Tree, vd17: Int) = locally {
                                val (r289: Node, d329: Int) = locally {
                                  val (r293: Int, d334: Int) = locally {
                                    val (r294: Int, d335: Int) = locally {
                                      val (e55: Int, d338: Int) = rank(vr16)
                                      (e55, ((1 + d338) + vd15))
                                    }
                                    
                                    ((r294 + 1), (1 + if ((d335 >= 0)) {
                                      d335
                                    } else {
                                      0
                                    }))
                                  }
                                  
                                  (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 >= (1 + vd16))) {
                                    vd15
                                  } else {
                                    (1 + vd16)
                                  } >= 1)) {
                                    if ((vd15 >= (1 + vd16))) {
                                      vd15
                                    } else {
                                      (1 + vd16)
                                    }
                                  } else {
                                    1
                                  } >= d334)) {
                                    if ((if ((vd15 >= (1 + vd16))) {
                                      vd15
                                    } else {
                                      (1 + vd16)
                                    } >= 1)) {
                                      if ((vd15 >= (1 + vd16))) {
                                        vd15
                                      } else {
                                        (1 + vd16)
                                      }
                                    } else {
                                      1
                                    }
                                  } else {
                                    d334
                                  }))
                                }
                                
                                locally {
                                  val (e54: Tree, d330: Int) = balance(r289)
                                  (e54, ((1 + d330) + d329))
                                }
                                
                              }
                              
                              ((vr18, Some(t.value)), (2 + if ((vd17 >= 2)) {
                                vd17
                              } else {
                                2
                              }))
                            }
                            
                            (relse20, if ((dcond21 >= delse20)) {
                              dcond21
                            } else {
                              delse20
                            })
                          }
                          
                        }
                      }
                      
                      (br16, (bd16 + 1))
                    }
                    
                  }
                  
                  (br15, (bd15 + 1))
                }
                
              }
              
              (br13, (bd13 + 1))
            }
            
          }
          
          (rthen20, if ((3 >= dthen20)) {
            3
          } else {
            dthen20
          })
        }
        
      } else {
        locally {
          val (relse21: (Tree, OptionInt), delse21: Int) = if (t.isInstanceOf[Node]) {
            locally {
              val (rthen22: (Tree, OptionInt), dthen22: Int) = locally {
                val (e56: (Tree, OptionInt), d346: Int) = deleteMax(t.right)
                (e56, (2 + d346))
              }
              
              (rthen22, if ((1 >= dthen22)) {
                1
              } else {
                dthen22
              })
            }
            
          } else {
            ((t, None()), if ((1 >= 2)) {
              1
            } else {
              2
            })
          }
          (relse21, if ((3 >= delse21)) {
            3
          } else {
            delse21
          })
        }
        
      }
      (relse19, if ((3 >= delse19)) {
        3
      } else {
        delse19
      })
    }
    
  }} ensuring(res10 => true)

  def rank(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    (t.rank, if ((1 >= 1)) {
      1
    } else {
      1
    })
  }}

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r95: Tree, d100: Int) = locally {
      val (e20: Tree, d104: Int) = unbalancedInsert(t, e)
      (e20, (1 + d104))
    }
    
    locally {
      val (e19: Tree, d101: Int) = balance(r95)
      (e19, ((1 + d101) + d100))
    }
    
  }
  } ensuring(res12 => true)

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {if ((i1 >= i2)) {
    (i1, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    (i2, if ((1 >= 0)) {
      1
    } else {
      0
    })
  }}

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (r92: Tree, d95: Int) = locally {
      val (e18: Tree, d99: Int) = unbalancedDelete(t, e)
      (e18, (1 + d99))
    }
    
    locally {
      val (e17: Tree, d96: Int) = balance(r92)
      (e17, ((1 + d96) + d95))
    }
    
  }
  } ensuring(res9 => true)

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res11 => true)

  def rotateLeft(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
    locally {
      val (rthen5: Node, dthen5: Int) = locally {
        val (vr4: Int, vd3: Int) = locally {
          val (r103: Int, d110: Int) = locally {
            val (r105: Int, d112: Int) = locally {
              val (e23: Int, d120: Int) = rank(t.left)
              (e23, (2 + d120))
            }
            
            locally {
              val (r106: Int, d113: Int) = locally {
                val (e22: Int, d116: Int) = rank(t.right.left)
                (e22, (3 + d116))
              }
              
              locally {
                val (e21: Int, d114: Int) = max(r105, r106)
                (e21, ((1 + d114) + if ((d112 >= d113)) {
                  d112
                } else {
                  d113
                }))
              }
              
            }
            
          }
          
          ((r103 + 1), (1 + if ((d110 >= 0)) {
            d110
          } else {
            0
          }))
        }
        
        locally {
          val (br3: Node, bd3: Int) = locally {
            val (r115: Int, d125: Int) = locally {
              val (r116: Int, d126: Int) = locally {
                val (r119: Int, d129: Int) = locally {
                  val (e25: Int, d132: Int) = rank(t.right.right)
                  (e25, (3 + d132))
                }
                
                locally {
                  val (e24: Int, d130: Int) = max(vr4, r119)
                  (e24, ((1 + d130) + if ((vd3 >= d129)) {
                    vd3
                  } else {
                    d129
                  }))
                }
                
              }
              
              ((r116 + 1), (1 + if ((d126 >= 0)) {
                d126
              } else {
                0
              }))
            }
            
            (Node(Node(t.left, t.value, t.right.left, vr4), t.right.value, t.right.right, r115), (1 + if ((if ((if (((1 + if ((2 >= vd3)) {
              2
            } else {
              vd3
            }) >= 2)) {
              (1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              })
            } else {
              2
            } >= 2)) {
              if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              }
            } else {
              2
            } >= d125)) {
              if ((if (((1 + if ((2 >= vd3)) {
                2
              } else {
                vd3
              }) >= 2)) {
                (1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                })
              } else {
                2
              } >= 2)) {
                if (((1 + if ((2 >= vd3)) {
                  2
                } else {
                  vd3
                }) >= 2)) {
                  (1 + if ((2 >= vd3)) {
                    2
                  } else {
                    vd3
                  })
                } else {
                  2
                }
              } else {
                2
              }
            } else {
              d125
            }))
          }
          
          (br3, (bd3 + 1))
        }
        
      }
      
      (rthen5, if ((3 >= dthen5)) {
        3
      } else {
        dthen5
      })
    }
    
  } else {
    (t, if ((3 >= 0)) {
      3
    } else {
      0
    })
  }}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: deleteMax template --> (res10._2 ≤ ((a?2 * height(t)) + b?2))
Function: avlInsert template --> (res12._2 ≤ ((a?1 * height(t)) + b?1))
Function: avlDelete template --> (res9._2 ≤ ((a?3 * height(t)) + b?3))
Function: size template --> (height(t) ≤ ((a? * res11) + b?))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(rotateRight, height, balanceFactor, rotateLeft, balance, deleteMax, avlDelete, unbalancedDelete, size, rankHeight, unbalancedInsert, avlInsert)
[[34m Info  [0m] - considering function deleteMax...
[[34m Info  [0m] Body: if ((t.isInstanceOf[Node] ∧ t.left.isInstanceOf[Leaf] ∧ t.right.isInstanceOf[Leaf]))
            ((Leaf(), Some(t.value)), if ((3 ≥ 3))
              3
            else
              3)
          else
            (let (relse19,delse19 := if ((t.isInstanceOf[Node] ∧ t.right.isInstanceOf[Leaf]))
              (let (rthen20,dthen20 := (let (vr14,vd13 := (let (vr15,vd14 := (let (e53,d318 := deleteMax(t.left)) in
                (e53, (2 + d318)))) in
                ((vr15._1, vr15._2), (2 + if (((1 + vd14) ≥ (1 + vd14)))
                  (1 + vd14)
                else
                  (1 + vd14))))) in
                (let (br13,bd13 := (let (vr16,vd15 := (vr14._1, (1 + vd13))) in
                  (let (br15,bd15 := (let (vr17,vd16 := (vr14._2, (1 + vd13))) in
                    (let (br16,bd16 := (let (dcond21 := (1 + vd16)) in
                      if (vr17.isInstanceOf[None])
                        ((t, None()), if ((dcond21 ≥ 2))
                          dcond21
                        else
                          2)
                      else
                        (let (relse20,delse20 := (let (vr18,vd17 := (let (r289,d329 := (let (r293,d334 := (let (r294,d335 := (let (e55,d338 := rank(vr16)) in
                          (e55, ((1 + d338) + vd15)))) in
                          ((r294 + 1), (1 + if ((d335 ≥ 0))
                            d335
                          else
                            0)))) in
                          (Node(vr16, vr17.i, Leaf(), r293), (1 + if ((if ((if ((vd15 ≥ (1 + vd16)))
                            vd15
                          else
                            (1 + vd16) ≥ 1))
                            if ((vd15 ≥ (1 + vd16)))
                              vd15
                            else
                              (1 + vd16)
                          else
                            1 ≥ d334))
                            if ((if ((vd15 ≥ (1 + vd16)))
                              vd15
                            else
                              (1 + vd16) ≥ 1))
                              if ((vd15 ≥ (1 + vd16)))
                                vd15
                              else
                                (1 + vd16)
                            else
                              1
                          else
                            d334)))) in
                          (let (e54,d330 := balance(r289)) in
                            (e54, ((1 + d330) + d329))))) in
                          ((vr18, Some(t.value)), (2 + if ((vd17 ≥ 2))
                            vd17
                          else
                            2)))) in
                          (relse20, if ((dcond21 ≥ delse20))
                            dcond21
                          else
                            delse20)))) in
                      (br16, (bd16 + 1))))) in
                    (br15, (bd15 + 1))))) in
                  (br13, (bd13 + 1))))) in
                (rthen20, if ((3 ≥ dthen20))
                  3
                else
                  dthen20))
            else
              (let (relse21,delse21 := if (t.isInstanceOf[Node])
                (let (rthen22,dthen22 := (let (e56,d346 := deleteMax(t.right)) in
                  (e56, (2 + d346)))) in
                  (rthen22, if ((1 ≥ dthen22))
                    1
                  else
                    dthen22))
              else
                ((t, None()), if ((1 ≥ 2))
                  1
                else
                  2)) in
                (relse21, if ((3 ≥ delse21))
                  3
                else
                  delse21))) in
              (relse19, if ((3 ≥ delse19))
                3
              else
                delse19))
[[34m Info  [0m] Post: true
falttened Body: ((res10 == ifres) && ((ci && (ci == t.isInstanceOf[Node]) && ci1 && (cs == t.left) && (ci1 == cs.isInstanceOf[Leaf]) && ci2 && (cs1 == t.right) && (ci2 == cs1.isInstanceOf[Leaf]) && (ifres == tp1) && (cc1 == Some(cs2)) && (cs2 == t.value) && (cc == Leaf()) && (tp == (cc, cc1)) && (tp1 == (tp, ifres1)) && (((3 >= 3) && (ifres1 == 3)) || ((3 < 3) && (ifres1 == 3)))) || (((!(ci3) && (ci3 == t.isInstanceOf[Node])) || (!(ci4) && (cs3 == t.left) && (ci4 == cs3.isInstanceOf[Leaf])) || (!(ci5) && (cs4 == t.right) && (ci5 == cs4.isInstanceOf[Leaf]))) && (ifres == tp2) && (tp2 == (relse19, ifres2)) && ((ci6 && (ci6 == t.isInstanceOf[Node]) && ci7 && (cs5 == t.right) && (ci7 == cs5.isInstanceOf[Leaf]) && (ifres3 == tp3) && (tp3 == (rthen20, ifres4)) && (vd15 == (1 + vd13)) && (vr14 == tp4) && (ts == vr15._1) && (ts1 == vr15._2) && (tp4 == (ts, ts1)) && (bd16 == ts2) && (ts2 == ifres5._2) && (bd13 == (bd15 + 1)) && (d318 == ts3) && (ts3 == tres2._2) && (((3 >= dthen20) && (ifres4 == 3)) || ((3 < dthen20) && (ifres4 == dthen20))) && (e53 == ts4) && (ts4 == tres2._1) && (vr15 == e53) && (bd15 == (bd16 + 1)) && (tres2 == r307) && (cs6 == t.left) && (r307 == deleteMax(cs6)) && ((((1 + vd14) >= (1 + vd14)) && (ifres23 == (1 + vd14))) || (((1 + vd14) < (1 + vd14)) && (ifres23 == (1 + vd14)))) && (vr16 == ts5) && (ts5 == vr14._1) && (vd14 == (2 + d318)) && (vd16 == (1 + vd13)) && (dcond21 == (1 + vd16)) && (rthen20 == br13) && (vd13 == (2 + ifres23)) && (br13 == br15) && (dthen20 == (bd13 + 1)) && (br16 == ts6) && (ts6 == ifres5._1) && (br15 == br16) && ((ci8 && (ci8 == vr17.isInstanceOf[None]) && (ifres5 == tp6) && (cc2 == None()) && (tp5 == (t, cc2)) && (tp6 == (tp5, ifres6)) && (((dcond21 >= 2) && (ifres6 == dcond21)) || ((dcond21 < 2) && (ifres6 == 2)))) || (!(ci9) && (ci9 == vr17.isInstanceOf[None]) && (ifres5 == tp7) && (tp7 == (relse20, ifres7)) && (relse20 == tp8) && (cs7 == t.value) && (cc3 == Some(cs7)) && (tp8 == (vr18, cc3)) && (((dcond21 >= delse20) && (ifres7 == dcond21)) || ((dcond21 < delse20) && (ifres7 == delse20))) && (d330 == ts7) && (ts7 == tres._2) && (d335 == ((1 + d338) + vd15)) && (e55 == ts8) && (ts8 == tres1._1) && (((ifres10 >= d334) && (((ifres11 >= 1) && (((vd15 >= (1 + vd16)) && (ifres11 == vd15)) || ((vd15 < (1 + vd16)) && (ifres11 == (1 + vd16)))) && (ifres10 == ifres12) && (((vd15 >= (1 + vd16)) && (ifres12 == vd15)) || ((vd15 < (1 + vd16)) && (ifres12 == (1 + vd16))))) || ((ifres13 < 1) && (((vd15 >= (1 + vd16)) && (ifres13 == vd15)) || ((vd15 < (1 + vd16)) && (ifres13 == (1 + vd16)))) && (ifres10 == 1))) && (ifres9 == ifres14) && (((ifres15 >= 1) && (((vd15 >= (1 + vd16)) && (ifres15 == vd15)) || ((vd15 < (1 + vd16)) && (ifres15 == (1 + vd16)))) && (ifres14 == ifres16) && (((vd15 >= (1 + vd16)) && (ifres16 == vd15)) || ((vd15 < (1 + vd16)) && (ifres16 == (1 + vd16))))) || ((ifres17 < 1) && (((vd15 >= (1 + vd16)) && (ifres17 == vd15)) || ((vd15 < (1 + vd16)) && (ifres17 == (1 + vd16)))) && (ifres14 == 1)))) || ((ifres18 < d334) && (((ifres19 >= 1) && (((vd15 >= (1 + vd16)) && (ifres19 == vd15)) || ((vd15 < (1 + vd16)) && (ifres19 == (1 + vd16)))) && (ifres18 == ifres20) && (((vd15 >= (1 + vd16)) && (ifres20 == vd15)) || ((vd15 < (1 + vd16)) && (ifres20 == (1 + vd16))))) || ((ifres21 < 1) && (((vd15 >= (1 + vd16)) && (ifres21 == vd15)) || ((vd15 < (1 + vd16)) && (ifres21 == (1 + vd16)))) && (ifres18 == 1))) && (ifres9 == d334))) && (((d335 >= 0) && (ifres22 == d335)) || ((d335 < 0) && (ifres22 == 0))) && (d334 == (1 + ifres22)) && (vr18 == e54) && (d329 == (1 + ifres9)) && (r289 == cc5) && (cs8 == vr17.i) && (cc4 == Leaf()) && (cc5 == Node(vr16, cs8, cc4, r293)) && (tres1 == r308) && (r308 == rank(vr16)) && (tres == r309) && (r309 == balance(r289)) && (d338 == ts9) && (ts9 == tres1._2) && (r293 == (r294 + 1)) && (r294 == e55) && (delse20 == (2 + ifres8)) && (e54 == ts10) && (ts10 == tres._1) && (vd17 == ((1 + d330) + d329)) && (((vd17 >= 2) && (ifres8 == vd17)) || ((vd17 < 2) && (ifres8 == 2))))) && (vr17 == ts11) && (ts11 == vr14._2)) || (((!(ci10) && (ci10 == t.isInstanceOf[Node])) || (!(ci11) && (cs9 == t.right) && (ci11 == cs9.isInstanceOf[Leaf]))) && (ifres3 == tp9) && (tp9 == (relse21, ifres24)) && ((ci12 && (ci12 == t.isInstanceOf[Node]) && (ifres25 == tp10) && (tp10 == (rthen22, ifres26)) && (((1 >= dthen22) && (ifres26 == 1)) || ((1 < dthen22) && (ifres26 == dthen22))) && (e56 == ts12) && (ts12 == tres3._1) && (tres3 == r310) && (cs10 == t.right) && (r310 == deleteMax(cs10)) && (d346 == ts13) && (ts13 == tres3._2) && (rthen22 == e56) && (dthen22 == (2 + d346))) || (!(ci13) && (ci13 == t.isInstanceOf[Node]) && (ifres25 == tp12) && (cc6 == None()) && (tp11 == (t, cc6)) && (tp12 == (tp11, ifres27)) && (((1 >= 2) && (ifres27 == 1)) || ((1 < 2) && (ifres27 == 2))))) && (relse21 == ts14) && (ts14 == ifres25._1) && (delse21 == ts15) && (ts15 == ifres25._2) && (((3 >= delse21) && (ifres24 == 3)) || ((3 < delse21) && (ifres24 == delse21))))) && (relse19 == ts16) && (ts16 == ifres3._1) && (delse19 == ts17) && (ts17 == ifres3._2) && (((3 >= delse19) && (ifres2 == 3)) || ((3 < delse19) && (ifres2 == delse19))))))
Flattened Post: ((ts18 > ((a?2 * r311) + b?2)) && (ts18 == res10._2) && (r311 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 48
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 11 + 0
solving...
solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/5
Unrolled calls: Set((r311 == height(t)))
Creating VC for height
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function height : (((a?5 * #res) + a?4) ≤ 0)
Unrolling (r311 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 14 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((16 * res10._2) + (-8 * height(t))) + -2) ≤ 0)
height-->(((-8 * #res) + 78) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 14
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 23 + 14
solving...
solved... in 0.01s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/12
Unrolled calls: Set((r318 == max(r316, r317)), (r319 == height(cs10)))
Inlining (r318 == max(r316, r317))
Unrolling (r319 == height(cs10))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 105
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 24 + 0
solving...
solved... in 0.009s
candidate Invariants
deleteMax-->((((-1 * height(t)) + (1 * res10._2)) + 1) ≤ 0)
height-->(((-4 * #res) + 50) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 95
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 29 + 24
solving...
solved... in 0.037s
candidate Invariants
deleteMax-->((((-3 * height(t)) + (1 * res10._2)) + -8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 105
[[34m Info  [0m] Number of equal calls: 21
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 36 + 53
solving...
solved... in 0.026s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/13
Unrolled calls: Set((r309 == balance(r289)), (r315 == max(r313, r314)), (r308 == rank(vr16)), (r325 == max(r323, r324)), (r320 == height(cs6)))
Inlining (r309 == balance(r289))
Inlining (r325 == max(r323, r324))
Inlining (r315 == max(r313, r314))
Inlining (r308 == rank(vr16))
Unrolling (r320 == height(cs6))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 110
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 23 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((2 * res10._2) + (4 * height(t))) + 1) ≤ 0)
height-->(((128 * #res) + 664) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 23
solving...
solved... in 0.027s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-3 * height(t))) + -3) ≤ 0)
height-->(((-4 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 110
[[34m Info  [0m] Number of equal calls: 21
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 31 + 64
solving...
solved... in 0.033s
candidate Invariants
deleteMax-->((((2 * res10._2) + (-12 * height(t))) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 110
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 24 + 95
solving...
solved... in 0.038s
candidate Invariants
deleteMax-->((((-11 * height(t)) + (1 * res10._2)) + 5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 15 + 119
solving...
solved... in 0.035s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-11 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 110
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 23 + 134
solving...
solved... in 0.045s
candidate Invariants
deleteMax-->((((-11 * height(t)) + (1 * res10._2)) + -6) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 388
[[34m Info  [0m] Number of equal calls: 43
# of atomic predicates: 35 + 157
solving...
solved... in 0.053s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/24
Unrolled calls: Set((r343 == balanceFactor(cs19)), (r344 == rank(cs20)), (r342 == rotateRight(r334)), (r347 == rank(vr19)), (r341 == balanceFactor(r289)), (r356 == max(r354, r355)), (r345 == max(r331, r330)))
Inlining (r341 == balanceFactor(r289))
Inlining (r342 == rotateRight(r334))
Inlining (r347 == rank(vr19))
Inlining (r356 == max(r354, r355))
Inlining (r345 == max(r331, r330))
Inlining (r343 == balanceFactor(cs19))
Inlining (r344 == rank(cs20))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 15 + 0
solving...
solved... in 0.007s
candidate Invariants
deleteMax-->((((16 * res10._2) + (6 * height(t))) + -8) ≤ 0)
height-->(((12 * #res) + 152) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 15
solving...
solved... in 0.051s
candidate Invariants
deleteMax-->((((-8 * height(t)) + (2 * res10._2)) + 1) ≤ 0)
height-->(((-2 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 39 + 56
solving...
solved... in 0.025s
candidate Invariants
deleteMax-->((((-6 * height(t)) + (1 * res10._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 95
solving...
solved... in 0.031s
candidate Invariants
deleteMax-->((((-11 * height(t)) + (1 * res10._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 604
[[34m Info  [0m] Number of equal calls: 56
# of atomic predicates: 49 + 126
solving...
solved... in 0.058s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/26
Unrolled calls: Set((r351 == rotateRight(cs24)), (r353 == rank(vr20)), (r366 == rank(cs32)), (r348 == rotateLeft(r340)), (r352 == balanceFactor(cs26)), (r350 == rank(cs23)), (r367 == rank(cs33)), (r349 == max(r337, r336)))
Inlining (r353 == rank(vr20))
Inlining (r348 == rotateLeft(r340))
Inlining (r349 == max(r337, r336))
Inlining (r352 == balanceFactor(cs26))
Inlining (r366 == rank(cs32))
Inlining (r350 == rank(cs23))
Inlining (r367 == rank(cs33))
Inlining (r351 == rotateRight(cs24))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((16 * res10._2) + (-2 * height(t))) + 8) ≤ 0)
height-->(((-1024 * #res) + 68656) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 35 + 31
solving...
solved... in 0.044s
candidate Invariants
deleteMax-->((((-3 * height(t)) + (1 * res10._2)) + -5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 66
solving...
solved... in 0.079s
candidate Invariants
deleteMax-->((((-24 * height(t)) + (4 * res10._2)) + 21) ≤ 0)
height-->(((-8 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 43
# of atomic predicates: 39 + 97
solving...
solved... in 0.088s
candidate Invariants
deleteMax-->((((-6 * height(t)) + (1 * res10._2)) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 136
solving...
solved... in 0.1s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-11 * height(t))) + 5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1772
[[34m Info  [0m] Number of equal calls: 95
# of atomic predicates: 78 + 167
solving...
solved... in 0.154s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/30
Unrolled calls: Set((r381 == rank(cs50)), (r382 == rank(cs51)), (r375 == max(r371, vr22)), (r378 == max(r369, r368)), (r376 == rank(cs37)), (r374 == rank(cs35)), (r377 == rank(cs47)))
Inlining (r381 == rank(cs50))
Inlining (r375 == max(r371, vr22))
Inlining (r374 == rank(cs35))
Inlining (r376 == rank(cs37))
Inlining (r382 == rank(cs51))
Inlining (r378 == max(r369, r368))
Inlining (r377 == rank(cs47))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((0 * height(t)) + (1 * res10._2)) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.008s
candidate Invariants
deleteMax-->((((16 * res10._2) + (-2 * height(t))) + 8) ≤ 0)
height-->(((-1024 * #res) + 68656) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 18
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 35 + 31
solving...
solved... in 0.041s
candidate Invariants
deleteMax-->((((-3 * height(t)) + (1 * res10._2)) + -5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 66
solving...
solved... in 0.077s
candidate Invariants
deleteMax-->((((4 * res10._2) + (-24 * height(t))) + 21) ≤ 0)
height-->(((-8 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 301
[[34m Info  [0m] Number of equal calls: 43
# of atomic predicates: 42 + 97
solving...
solved... in 0.082s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-6 * height(t))) + 3) ≤ 0)
height-->(((-2 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 38 + 139
solving...
solved... in 0.11s
candidate Invariants
deleteMax-->((((-13 * height(t)) + (1 * res10._2)) + 21) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 301
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 42 + 177
solving...
solved... in 0.127s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-13 * height(t))) + 8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2270
[[34m Info  [0m] Number of equal calls: 92
# of atomic predicates: 86 + 219
solving...
solved... in 0.214s
candidate Invariants
deleteMax-->((((-23 * height(t)) + (1 * res10._2)) + 17) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1039
[[34m Info  [0m] Number of equal calls: 68
# of atomic predicates: 44 + 305
solving...
solved... in 0.299s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/23
Unrolled calls: Set((r346 == rotateLeft(cs21)))
Inlining (r346 == rotateLeft(cs21))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 15 + 0
solving...
solved... in 0.005s
candidate Invariants
deleteMax-->((((6 * height(t)) + (16 * res10._2)) + -8) ≤ 0)
height-->(((12 * #res) + 152) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 41 + 15
solving...
solved... in 0.036s
candidate Invariants
deleteMax-->((((4 * res10._2) + (-16 * height(t))) + -1) ≤ 0)
height-->(((-2 * #res) + 1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 42 + 56
solving...
solved... in 0.023s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-3 * height(t))) + -14) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 98
solving...
solved... in 0.037s
candidate Invariants
deleteMax-->((((-6 * height(t)) + (1 * res10._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 67
# of atomic predicates: 34 + 129
solving...
solved... in 0.042s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-6 * height(t))) + -8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 324
[[34m Info  [0m] Number of equal calls: 41
# of atomic predicates: 39 + 163
solving...
solved... in 0.061s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-13 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3598
[[34m Info  [0m] Number of equal calls: 122
# of atomic predicates: 108 + 202
solving...
timed out... in 20.21s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 67
# of atomic predicates: 33 + 202
solving...
solved... in 0.088s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-33 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3598
[[34m Info  [0m] Number of equal calls: 122
# of atomic predicates: 91 + 235
solving...
solved... in 0.174s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/27
Unrolled calls: Set((r438 == rank(cs107)), (r435 == max(r429, r428)), (r437 == max(vr25, r431)), (r436 == rank(cs97)), (r434 == rank(cs96)))
Inlining (r435 == max(r429, r428))
Inlining (r438 == rank(cs107))
Inlining (r436 == rank(cs97))
Inlining (r437 == max(vr25, r431))
Inlining (r434 == rank(cs96))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
deleteMax-->((((1 * res10._2) + (0 * height(t))) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 31 + 0
solving...
solved... in 0.009s
candidate Invariants
deleteMax-->((((-2 * height(t)) + (16 * res10._2)) + 8) ≤ 0)
height-->(((-1024 * #res) + 68656) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 98
[[34m Info  [0m] Number of equal calls: 17
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 36 + 31
solving...
solved... in 0.043s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-3 * height(t))) + -5) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 22
# of atomic predicates: 30 + 67
solving...
solved... in 0.069s
candidate Invariants
deleteMax-->((((-11 * height(t)) + (1 * res10._2)) + 17) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 301
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 33 + 97
solving...
solved... in 0.094s
candidate Invariants
deleteMax-->((((-13 * height(t)) + (1 * res10._2)) + 21) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 67
# of atomic predicates: 39 + 130
solving...
solved... in 0.119s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-13 * height(t))) + 14) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 39 + 169
solving...
solved... in 0.132s
candidate Invariants
deleteMax-->((((-13 * height(t)) + (1 * res10._2)) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 793
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 34 + 208
solving...
solved... in 0.164s
candidate Invariants
deleteMax-->((((-17 * height(t)) + (1 * res10._2)) + 8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2164
[[34m Info  [0m] Number of equal calls: 103
# of atomic predicates: 49 + 242
solving...
solved... in 1.042s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-34 * height(t))) + 8) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 28
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 10 + 291
solving...
solved... in 0.515s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-34 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4077
[[34m Info  [0m] Number of equal calls: 135
# of atomic predicates: 35 + 301
solving...
solved... in 0.486s
candidate Invariants
deleteMax-->((((-34 * height(t)) + (1 * res10._2)) + -10) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2164
[[34m Info  [0m] Number of equal calls: 103
# of atomic predicates: 49 + 336
solving...
solved... in 0.485s
candidate Invariants
deleteMax-->((((-45 * height(t)) + (1 * res10._2)) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4018
[[34m Info  [0m] Number of equal calls: 132
# of atomic predicates: 38 + 385
solving...
solved... in 0.526s
candidate Invariants
deleteMax-->((((1 * res10._2) + (-52 * height(t))) + -4) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 52
Found new lower bound: 26
Found new lower bound: 39
Found new lower bound: 45
Found new lower bound: 48
Found new lower bound: 50
Found new upper bound: 51
Minimizing variable: b?2 Initial upperbound: 4
Found new lower bound: 2
Found new upper bound: 3
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: deleteMax --> ((((1 * res10._2) + (-51 * height(t))) + -3) <= 0)
[[34m Info  [0m] - Found inductive invariant: height --> (((-2 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function avlDelete...
[[34m Info  [0m] Body: (let (r92,d95 := (let (e18,d99 := unbalancedDelete(t, e)) in
            (e18, (1 + d99)))) in
            (let (e17,d96 := balance(r92)) in
              (e17, ((1 + d96) + d95))))
[[34m Info  [0m] Post: true
falttened Body: ((res9 == tp87) && (arg18 == ((1 + d96) + d95)) && (tp87 == (e17, arg18)) && (tres44 == r461) && (r461 == unbalancedDelete(t, e)) && (d96 == ts165) && (ts165 == tres43._2) && (tres43 == r462) && (r462 == balance(r92)) && (d99 == ts166) && (ts166 == tres44._2) && (e18 == ts167) && (ts167 == tres44._1) && (r92 == e18) && (e17 == ts168) && (ts168 == tres43._1) && (d95 == (1 + d99)))
Flattened Post: ((ts169 > ((a?3 * r463) + b?3)) && (ts169 == res9._2) && (r463 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 3
# of atomic predicates: 9 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/3
Unrolled calls: Set((r461 == unbalancedDelete(t, e)), (r462 == balance(r92)), (r463 == height(t)))
Creating VC for unbalancedDelete
[[34m Info  [0m] - Number of new terms enumerated: 3
[[34m Info  [0m] - Template generated for function unbalancedDelete : (((a?7 * e) + a?6) ≤ 0)
Unrolling (r461 == unbalancedDelete(t, e))
Inlining (r462 == balance(r92))
Creating VC for height
Unrolling (r463 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 308
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 29 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((1 * height(t)) + (2 * res9._2)) + 2) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((2 * #res) + -1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 73
[[34m Info  [0m] Number of equal calls: 15
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 18 + 29
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 10/43
Unrolled calls: Set((r510 == max(r498, r497)), (r512 == rank(cs157)), (r487 == avlDelete(cs132, e)), (r540 == max(r538, r539)), (r543 == max(r541, r542)), (r488 == max(r474, r473)), (r509 == rank(vr37)), (r486 == rank(cs131)), (r485 == rank(vr31)), (r537 == balanceFactor(r92)))
Inlining (r485 == rank(vr31))
Inlining (r486 == rank(cs131))
Inlining (r540 == max(r538, r539))
Inlining (r543 == max(r541, r542))
Inlining (r537 == balanceFactor(r92))
Inlining (r512 == rank(cs157))
Inlining (r509 == rank(vr37))
Inlining (r488 == max(r474, r473))
Inlining (r510 == max(r498, r497))
Unrolling (r487 == avlDelete(cs132, e))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 251
[[34m Info  [0m] Number of equal calls: 26
# of atomic predicates: 26 + 0
solving...
solved... in 0.007s
candidate Invariants
avlDelete-->((((-2 * height(t)) + (2 * res9._2)) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 5) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 26
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((1 * height(t)) + (2 * res9._2)) + 2) ≤ 0)
unbalancedDelete-->(((0 * e) + 7) ≤ 0)
height-->(((0 * #res) + -1) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 96
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 8 + 34
solving...
solved... in 0.012s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-8 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + -1) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 251
[[34m Info  [0m] Number of equal calls: 26
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
# of atomic predicates: 39 + 42
solving...
solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/41
Unrolled calls: Set((r477 == deleteMax(cs119)), (r549 == rank(cs177)), (r548 == rank(cs176)))
Creating VC for deleteMax
Unrolling (r477 == deleteMax(cs119))
Inlining (r549 == rank(cs177))
Inlining (r548 == rank(cs176))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 480
[[34m Info  [0m] Number of equal calls: 42
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 48
[[34m Info  [0m] Number of equal calls: 10
# of atomic predicates: 43 + 0
solving...
solved... in 0.005s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/49
Unrolled calls: Set((r554 == height(cs149)), (r506 == rank(vr36)), (r508 == rank(cs152)), (r568 == height(t)), (r505 == max(r494, r493)))
Inlining (r506 == rank(vr36))
Unrolling (r554 == height(cs149))
Unrolling (r568 == height(t))
Inlining (r508 == rank(cs152))
Inlining (r505 == max(r494, r493))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 71
[[34m Info  [0m] Number of equal calls: 14
# of atomic predicates: 34 + 0
solving...
solved... in 0.008s
candidate Invariants
avlDelete-->((((-8 * height(t)) + (8 * res9._2)) + -175) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 230
[[34m Info  [0m] Number of equal calls: 37
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 34
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/54
Unrolled calls: Set((r479 == rank(vr28)), (r585 == max(r583, r584)), (r478 == rank(cs122)), (r586 == height(cs201)), (r480 == max(r466, r465)), (r576 == height(cs119)), (r589 == height(cs190)))
Unrolling (r589 == height(cs190))
Inlining (r585 == max(r583, r584))
Unrolling (r576 == height(cs119))
Inlining (r479 == rank(vr28))
Unrolling (r586 == height(cs201))
Inlining (r478 == rank(cs122))
Inlining (r480 == max(r466, r465))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 36 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-32 * height(t))) + -175) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 105
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 17 + 36
solving...
solved... in 0.012s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (1 * res9._2)) + -23) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 53
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/56
Unrolled calls: Set((r564 == balance(r563)), (r587 == height(cs188)), (r565 == rank(vr44)))
Inlining (r564 == balance(r563))
Unrolling (r587 == height(cs188))
Inlining (r565 == rank(vr44))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 196
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 42 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-4 * height(t))) + -17) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + 2) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 638
[[34m Info  [0m] Number of equal calls: 43
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 196
[[34m Info  [0m] Number of equal calls: 32
# of atomic predicates: 54 + 42
solving...
solved... in 0.015s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/69
Unrolled calls: Set((r531 == rank(vr39)), (r536 == rank(cs169)), (r636 == max(r634, r635)), (r633 == balanceFactor(r563)), (r535 == balanceFactor(cs168)), (r534 == max(r521, r520)), (r533 == rotateRight(cs164)), (r532 == rotateLeft(r524)))
Inlining (r536 == rank(cs169))
Inlining (r534 == max(r521, r520))
Inlining (r533 == rotateRight(cs164))
Inlining (r535 == balanceFactor(cs168))
Inlining (r636 == max(r634, r635))
Inlining (r532 == rotateLeft(r524))
Inlining (r531 == rank(vr39))
Inlining (r633 == balanceFactor(r563))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 603
[[34m Info  [0m] Number of equal calls: 46
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 63 + 0
solving...
solved... in 0.012s
candidate Invariants
avlDelete-->((((4 * height(t)) + (32 * res9._2)) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 2) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 82
[[34m Info  [0m] Number of equal calls: 18
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 283
[[34m Info  [0m] Number of equal calls: 38
# of atomic predicates: 48 + 63
solving...
solved... in 0.022s
candidate Invariants
avlDelete-->((((2 * res9._2) + (-1 * height(t))) + 2) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 111
solving...
solved... in 0.03s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 12/75
Unrolled calls: Set((r526 == rank(vr38)), (r528 == balanceFactor(cs159)), (r670 == rank(cs268)), (r669 == rank(cs267)), (r525 == rotateRight(r518)), (r481 == max(r470, r469)), (r483 == avlDelete(cs129, e)), (r555 == height(cs129)), (r530 == max(r515, r514)), (r527 == rank(cs158)), (r484 == rank(vr30)), (r482 == rank(cs128)))
Inlining (r525 == rotateRight(r518))
Inlining (r670 == rank(cs268))
Unrolling (r555 == height(cs129))
Inlining (r481 == max(r470, r469))
Unrolling (r483 == avlDelete(cs129, e))
Inlining (r484 == rank(vr30))
Inlining (r530 == max(r515, r514))
Inlining (r669 == rank(cs267))
Inlining (r528 == balanceFactor(cs159))
Inlining (r527 == rank(cs158))
Inlining (r526 == rank(vr38))
Inlining (r482 == rank(cs128))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 623
[[34m Info  [0m] Number of equal calls: 50
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 66 + 0
solving...
solved... in 0.013s
candidate Invariants
avlDelete-->((((-20 * height(t)) + (4 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 20) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 210
[[34m Info  [0m] Number of equal calls: 25
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 602
[[34m Info  [0m] Number of equal calls: 56
# of atomic predicates: 49 + 66
solving...
solved... in 0.037s
candidate Invariants
avlDelete-->((((-2 * height(t)) + (1 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 115
solving...
solved... in 0.033s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/75
Unrolled calls: Set((r625 == max(r611, r610)), (r690 == max(r688, r689)), (r582 == max(r580, r581)), (r693 == balance(r691)), (r621 == rotateRight(r614)), (r623 == rank(vr51)), (r626 == balanceFactor(cs221)), (r622 == rank(cs218)))
Inlining (r690 == max(r688, r689))
Inlining (r623 == rank(vr51))
Inlining (r622 == rank(cs218))
Inlining (r625 == max(r611, r610))
Inlining (r626 == balanceFactor(cs221))
Inlining (r582 == max(r580, r581))
Inlining (r621 == rotateRight(r614))
Inlining (r693 == balance(r691))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 667
[[34m Info  [0m] Number of equal calls: 58
# of atomic predicates: 61 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((16 * res9._2) + (-8 * height(t))) + -362) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((1 * #res) + 8) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 638
[[34m Info  [0m] Number of equal calls: 57
# of atomic predicates: 87 + 61
solving...
solved... in 0.041s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-1 * height(t))) + -72) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 148
solving...
solved... in 0.035s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/87
Unrolled calls: Set((r632 == rotateRight(cs228)), (r631 == max(r617, r616)), (r629 == rank(cs225)), (r630 == rotateLeft(r620)), (r627 == balanceFactor(cs224)), (r628 == rank(vr52)))
Inlining (r629 == rank(cs225))
Inlining (r630 == rotateLeft(r620))
Inlining (r627 == balanceFactor(cs224))
Inlining (r632 == rotateRight(cs228))
Inlining (r628 == rank(vr52))
Inlining (r631 == max(r617, r616))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 15
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 35 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-32 * height(t)) + (8 * res9._2)) + -159) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 362
[[34m Info  [0m] Number of equal calls: 47
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 929
[[34m Info  [0m] Number of equal calls: 66
# of atomic predicates: 70 + 35
solving...
solved... in 0.029s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (1 * res9._2)) + -19) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 105
solving...
solved... in 0.03s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 5/93
Unrolled calls: Set((r706 == rank(cs296)), (r602 == max(r600, r601)), (r624 == rotateLeft(cs219)), (r599 == max(r597, r598)), (r707 == rank(cs297)))
Inlining (r602 == max(r600, r601))
Inlining (r624 == rotateLeft(cs219))
Inlining (r707 == rank(cs297))
Inlining (r706 == rank(cs296))
Inlining (r599 == max(r597, r598))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 95
[[34m Info  [0m] Number of equal calls: 16
# of atomic predicates: 44 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-32 * height(t))) + -159) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 50
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1934
[[34m Info  [0m] Number of equal calls: 93
# of atomic predicates: 111 + 44
solving...
solved... in 0.042s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/93
Unrolled calls: Set((r715 == rank(cs307)), (r596 == max(r594, r595)), (r714 == max(r709, r708)), (r717 == rank(cs309)), (r716 == max(r711, vr57)), (r718 == rank(cs311)))
Inlining (r714 == max(r709, r708))
Inlining (r716 == max(r711, vr57))
Inlining (r715 == rank(cs307))
Inlining (r596 == max(r594, r595))
Inlining (r718 == rank(cs311))
Inlining (r717 == rank(cs309))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3655
[[34m Info  [0m] Number of equal calls: 121
# of atomic predicates: 111 + 0
solving...
solved... in 0.03s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (8 * res9._2)) + -205) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((4 * #res) + -8) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3
[[34m Info  [0m] Number of equal calls: 2
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3655
[[34m Info  [0m] Number of equal calls: 120
# of atomic predicates: 111 + 111
solving...
solved... in 0.049s
candidate Invariants
avlDelete-->((((2 * height(t)) + (2 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3598
[[34m Info  [0m] Number of equal calls: 122
# of atomic predicates: 77 + 222
solving...
solved... in 0.128s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/87
Unrolled calls: Set((r791 == rank(cs372)), (r790 == max(r783, r782)), (r792 == max(vr63, r785)), (r553 == height(cs156)), (r789 == rank(cs370)), (r788 == rank(cs361)))
Inlining (r790 == max(r783, r782))
Inlining (r789 == rank(cs370))
Inlining (r791 == rank(cs372))
Unrolling (r553 == height(cs156))
Inlining (r792 == max(vr63, r785))
Inlining (r788 == rank(cs361))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 29
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 45 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-40 * height(t)) + (8 * res9._2)) + -135) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 33 + 45
solving...
solved... in 0.022s
candidate Invariants
avlDelete-->((((8 * res9._2) + (2 * height(t))) + -4) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 78
solving...
solved... in 0.068s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-10 * height(t))) + 7) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1765
[[34m Info  [0m] Number of equal calls: 93
# of atomic predicates: 91 + 86
solving...
solved... in 0.622s
candidate Invariants
avlDelete-->((((8 * res9._2) + (8 * height(t))) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((0 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 8 + 177
solving...
solved... in 0.402s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 9/84
Unrolled calls: Set((r684 == rank(cs270)), (r696 == rank(cs289)), (r683 == max(r678, r677)), (r686 == rank(cs272)), (r577 == height(cs145)), (r687 == rank(cs282)), (r685 == max(r680, vr56)), (r504 == deleteMax(cs145)), (r697 == rank(cs290)))
Inlining (r683 == max(r678, r677))
Inlining (r687 == rank(cs282))
Inlining (r697 == rank(cs290))
Inlining (r684 == rank(cs270))
Unrolling (r504 == deleteMax(cs145))
Unrolling (r577 == height(cs145))
Inlining (r685 == max(r680, vr56))
Inlining (r696 == rank(cs289))
Inlining (r686 == rank(cs272))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 28
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 52 + 0
solving...
solved... in 0.011s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-40 * height(t))) + -175) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 623
[[34m Info  [0m] Number of equal calls: 50
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 57 + 52
solving...
solved... in 0.027s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-1 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 109
solving...
solved... in 0.159s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-19 * height(t))) + 5) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 623
[[34m Info  [0m] Number of equal calls: 50
# of atomic predicates: 42 + 117
solving...
solved... in 0.09s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-19 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1143
[[34m Info  [0m] Number of equal calls: 75
# of atomic predicates: 35 + 159
solving...
solved... in 0.099s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res9._2)) + -8) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1256
[[34m Info  [0m] Number of equal calls: 89
# of atomic predicates: 47 + 194
solving...
solved... in 0.335s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-52 * height(t))) + 25) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1575
[[34m Info  [0m] Number of equal calls: 76
# of atomic predicates: 59 + 241
solving...
solved... in 5.203s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/82
Unrolled calls: Set((r501 == rank(cs142)), (r805 == max(r803, r804)), (r502 == rank(vr34)), (r825 == max(r823, r824)), (r529 == rotateLeft(cs162)), (r503 == max(r490, r489)))
Inlining (r825 == max(r823, r824))
Inlining (r805 == max(r803, r804))
Inlining (r501 == rank(cs142))
Inlining (r503 == max(r490, r489))
Inlining (r529 == rotateLeft(cs162))
Inlining (r502 == rank(vr34))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 33
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 50 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-40 * height(t)) + (8 * res9._2)) + -23) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 57 + 50
solving...
solved... in 0.023s
candidate Invariants
avlDelete-->((((-2 * height(t)) + (8 * res9._2)) + -4) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 107
solving...
solved... in 0.043s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res9._2)) + 42) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2400
[[34m Info  [0m] Number of equal calls: 104
# of atomic predicates: 98 + 115
solving...
solved... in 0.463s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/83
Unrolled calls: Set((r654 == rank(cs249)), (r655 == rank(cs250)), (r665 == rank(cs256)), (r666 == max(r657, r656)), (r664 == rank(cs254)), (r662 == rank(cs253)), (r663 == max(vr55, r659)))
Inlining (r654 == rank(cs249))
Inlining (r664 == rank(cs254))
Inlining (r666 == max(r657, r656))
Inlining (r665 == rank(cs256))
Inlining (r655 == rank(cs250))
Inlining (r663 == max(vr55, r659))
Inlining (r662 == rank(cs253))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 50
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 70 + 0
solving...
solved... in 0.015s
candidate Invariants
avlDelete-->((((-1 * height(t)) + (8 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 167) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
# of atomic predicates: 8 + 70
solving...
solved... in 0.036s
candidate Invariants
avlDelete-->((((-152 * height(t)) + (8 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2931
[[34m Info  [0m] Number of equal calls: 117
# of atomic predicates: 36 + 78
solving...
solved... in 0.046s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-19 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-2 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 829
[[34m Info  [0m] Number of equal calls: 72
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 59 + 114
solving...
solved... in 0.164s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-52 * height(t))) + 65) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2025
[[34m Info  [0m] Number of equal calls: 90
# of atomic predicates: 25 + 173
solving...
solved... in 0.295s
candidate Invariants
avlDelete-->((((-52 * height(t)) + (1 * res9._2)) + 19) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1354
[[34m Info  [0m] Number of equal calls: 93
# of atomic predicates: 29 + 198
solving...
solved... in 5.349s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-52 * height(t))) + 15) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3248
[[34m Info  [0m] Number of equal calls: 112
# of atomic predicates: 76 + 227
solving...
solved... in 5.413s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/76
Unrolled calls: Set((r647 == max(r644, vr54)), (r851 == height(cs397)), (r649 == max(r642, r641)), (r650 == rank(cs238)), (r648 == rank(cs236)), (r651 == rank(cs247)))
Inlining (r650 == rank(cs238))
Unrolling (r851 == height(cs397))
Inlining (r648 == rank(cs236))
Inlining (r647 == max(r644, vr54))
Inlining (r649 == max(r642, r641))
Inlining (r651 == rank(cs247))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((1 * res9._2) + (0 * height(t))) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 29
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 41 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-32 * height(t)) + (8 * res9._2)) + -159) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 49 + 41
solving...
solved... in 0.02s
candidate Invariants
avlDelete-->((((8 * res9._2) + (-1 * height(t))) + 8) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-8 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 90
solving...
solved... in 0.054s
candidate Invariants
avlDelete-->((((1 * res9._2) + (-19 * height(t))) + 24) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 23 + 106
solving...
solved... in 0.103s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res9._2)) + 7) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 22 + 129
solving...
solved... in 0.1s
candidate Invariants
avlDelete-->((((-19 * height(t)) + (1 * res9._2)) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 682
[[34m Info  [0m] Number of equal calls: 63
# of atomic predicates: 43 + 151
solving...
solved... in 0.138s
candidate Invariants
avlDelete-->((((-208 * height(t)) + (4 * res9._2)) + -1) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 12 + 194
solving...
solved... in 0.135s
candidate Invariants
avlDelete-->((((-52 * height(t)) + (1 * res9._2)) + -5) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 285
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 19 + 206
solving...
solved... in 0.143s
candidate Invariants
avlDelete-->((((-52 * height(t)) + (1 * res9._2)) + -12) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4308
[[34m Info  [0m] Number of equal calls: 129
# of atomic predicates: 107 + 225
solving...
solved... in 0.374s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/73
Unrolled calls: Set((r848 == rank(cs413)), (r847 == max(vr69, r843)), (r846 == max(r841, r840)), (r849 == rank(cs414)), (r850 == rank(cs416)), (r877 == max(r875, r876)))
Inlining (r850 == rank(cs416))
Inlining (r846 == max(r841, r840))
Inlining (r847 == max(vr69, r843))
Inlining (r849 == rank(cs414))
Inlining (r848 == rank(cs413))
Inlining (r877 == max(r875, r876))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
avlDelete-->((((0 * height(t)) + (1 * res9._2)) + 0) ≤ 0)
unbalancedDelete-->(((0 * e) + 0) ≤ 0)
height-->(((0 * #res) + 0) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 34
Function: deleteMax--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 113
[[34m Info  [0m] Number of equal calls: 20
# of atomic predicates: 39 + 0
solving...
solved... in 0.009s
candidate Invariants
avlDelete-->((((-32 * height(t)) + (8 * res9._2)) + -71) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-4 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 666
[[34m Info  [0m] Number of equal calls: 63
# of atomic predicates: 40 + 39
solving...
solved... in 0.022s
candidate Invariants
avlDelete-->((((2 * res9._2) + (2 * height(t))) + 1) ≤ 0)
unbalancedDelete-->(((0 * e) + 1) ≤ 0)
height-->(((-1 * #res) + 1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: unbalancedDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 52
[[34m Info  [0m] Number of equal calls: 13
Function: height--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 16 + 79
solving...
solved... in 0.042s
candidate Invariants
avlDelete-->((((-52 * height(t)) + (1 * res9._2)) + 74) ≤ 0)
unbalancedDelete-->(((0 * e) + -1) ≤ 0)
height-->(((-1 * #res) + -1) ≤ 0)
deleteMax-->((((1 * res10._2) + (-51 * height(t))) + -3) ≤ 0)
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 22 + 95
solving...
timed out... in 20.071s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 12 + 95
solving...
timed out... in 20.062s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 34
# of atomic predicates: 17 + 95
solving...
timed out... in 20.066s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 106
[[34m Info  [0m] Number of equal calls: 18
# of atomic predicates: 17 + 95
solving...
timed out... in 20.065s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 32 + 95
solving...
timed out... in 20.077s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2140
[[34m Info  [0m] Number of equal calls: 97
# of atomic predicates: 36 + 95
solving...
timed out... in 20.082s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 23 + 95
solving...
timed out... in 20.076s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 50 + 95
solving...
timed out... in 20.093s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 358
[[34m Info  [0m] Number of equal calls: 34
# of atomic predicates: 17 + 95
solving...
timed out... in 20.068s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 709
[[34m Info  [0m] Number of equal calls: 54
# of atomic predicates: 17 + 95
solving...
timed out... in 20.068s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 666
[[34m Info  [0m] Number of equal calls: 64
# of atomic predicates: 38 + 95
solving...
timed out... in 20.09s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2717
[[34m Info  [0m] Number of equal calls: 114
# of atomic predicates: 24 + 95
solving...
timed out... in 20.077s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 83
# of atomic predicates: 43 + 95
solving...
timed out... in 20.091s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 637
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 21 + 95
solving...
timed out... in 20.071s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 726
[[34m Info  [0m] Number of equal calls: 55
# of atomic predicates: 22 + 95
solving...
timed out... in 20.075s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 644
[[34m Info  [0m] Number of equal calls: 51
# of atomic predicates: 46 + 95
solving...
timed out... in 20.09s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1137
[[34m Info  [0m] Number of equal calls: 74
# of atomic predicates: 22 + 95
solving...
timed out... in 20.073s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 30 + 95
solving...
timed out... in 20.078s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2058
[[34m Info  [0m] Number of equal calls: 91
# of atomic predicates: 27 + 95
solving...
timed out... in 20.075s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2097
[[34m Info  [0m] Number of equal calls: 93
# of atomic predicates: 43 + 95
solving...
timed out... in 20.081s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1056
[[34m Info  [0m] Number of equal calls: 72
# of atomic predicates: 22 + 95
solving...
timed out... in 20.074s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 666
[[34m Info  [0m] Number of equal calls: 65
# of atomic predicates: 40 + 95
solving...
timed out... in 20.089s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 39 + 95
solving...
timed out... in 20.089s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 32 + 95
solving...
timed out... in 20.079s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2717
[[34m Info  [0m] Number of equal calls: 111
# of atomic predicates: 26 + 95
solving...
timed out... in 20.078s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 29 + 95
solving...
timed out... in 20.076s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2269
[[34m Info  [0m] Number of equal calls: 99
# of atomic predicates: 25 + 95
solving...
timed out... in 20.075s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2065
[[34m Info  [0m] Number of equal calls: 98
# of atomic predicates: 24 + 95
solving...
timed out... in 20.077s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 29 + 95
solving...
timed out... in 20.078s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2140
[[34m Info  [0m] Number of equal calls: 98
# of atomic predicates: 24 + 95
solving...
timed out... in 20.072s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3727
[[34m Info  [0m] Number of equal calls: 147
# of atomic predicates: 72 + 95
solving...
timed out... in 20.107s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1354
[[34m Info  [0m] Number of equal calls: 93
# of atomic predicates: 33 + 95
solving...
timed out... in 20.082s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 56 + 95
solving...
timed out... in 20.098s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 57 + 95
solving...
timed out... in 20.1s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1663
[[34m Info  [0m] Number of equal calls: 107
# of atomic predicates: 44 + 95
solving...
timed out... in 20.09s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 55 + 95
solving...
timed out... in 20.101s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1566
[[34m Info  [0m] Number of equal calls: 100
# of atomic predicates: 47 + 95
solving...
timed out... in 20.093s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 50 + 95
solving...
timed out... in 20.097s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1663
[[34m Info  [0m] Number of equal calls: 106
# of atomic predicates: 44 + 95
solving...
timed out... in 20.086s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 84
# of atomic predicates: 40 + 95
solving...
timed out... in 20.089s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 758
[[34m Info  [0m] Number of equal calls: 68
# of atomic predicates: 37 + 95
solving...
timed out... in 20.081s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 31 + 95
solving...
timed out... in 20.079s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3914
[[34m Info  [0m] Number of equal calls: 123
# of atomic predicates: 33 + 95
solving...
timed out... in 20.075s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3676
[[34m Info  [0m] Number of equal calls: 147
# of atomic predicates: 79 + 95
solving...
timed out... in 20.114s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3105
[[34m Info  [0m] Number of equal calls: 117
# of atomic predicates: 35 + 95
solving...
timed out... in 20.081s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 57 + 95
solving...
timed out... in 20.093s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 83
# of atomic predicates: 50 + 95
solving...
timed out... in 20.091s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 64 + 95
solving...
timed out... in 20.101s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1663
[[34m Info  [0m] Number of equal calls: 107
# of atomic predicates: 44 + 95
solving...
timed out... in 20.088s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1137
[[34m Info  [0m] Number of equal calls: 74
# of atomic predicates: 24 + 95
solving...
timed out... in 20.077s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1875
[[34m Info  [0m] Number of equal calls: 89
# of atomic predicates: 24 + 95
solving...
timed out... in 20.07s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1912
[[34m Info  [0m] Number of equal calls: 92
# of atomic predicates: 23 + 95
solving...
timed out... in 20.074s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3798
[[34m Info  [0m] Number of equal calls: 121
# of atomic predicates: 35 + 95
solving...
timed out... in 20.082s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 758
[[34m Info  [0m] Number of equal calls: 69
# of atomic predicates: 36 + 95
solving...
timed out... in 20.08s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 25 + 95
solving...
timed out... in 20.074s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2802
[[34m Info  [0m] Number of equal calls: 113
# of atomic predicates: 26 + 95
solving...
timed out... in 20.074s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 561
[[34m Info  [0m] Number of equal calls: 49
# of atomic predicates: 29 + 95
solving...
timed out... in 20.07s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1663
[[34m Info  [0m] Number of equal calls: 107
# of atomic predicates: 46 + 95
solving...
timed out... in 20.092s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1948
[[34m Info  [0m] Number of equal calls: 88
# of atomic predicates: 42 + 95
solving...
timed out... in 20.079s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 4756
[[34m Info  [0m] Number of equal calls: 137
# of atomic predicates: 58 + 95
solving...
timed out... in 20.091s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 534
[[34m Info  [0m] Number of equal calls: 48
# of atomic predicates: 28 + 95
solving...
timed out... in 20.082s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 3832
[[34m Info  [0m] Number of equal calls: 151
# of atomic predicates: 45 + 95
solving...
timed out... in 20.087s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2923
[[34m Info  [0m] Number of equal calls: 115
# of atomic predicates: 77 + 95
solving...
timed out... in 20.123s
[[34m Info  [0m] NLsolver timed-out on the disjunct... blocking this disjunct...
Function: avlDelete--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1060
[[34m Info  [0m] Number of equal calls: 82
# of atomic predicates: 54 + 95
solving...
