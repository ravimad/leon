After Depth Instrumentation: 
object SpeedBenchmarks {
  case class Cons(head: Int, tail: List) extends List

  case class Chunk(str: List, next: StringBuffer) extends StringBuffer

  case class Nil() extends List

  case class Empty() extends StringBuffer

  sealed abstract class StringBuffer

  sealed abstract class List

  def sizeBound(sb : StringBuffer, k : Int) : Boolean = {(sb match {
    case Chunk(str, next) =>
      ((size(str) <= k) && sizeBound(next, k))
    case _ =>
      (0 <= k)
  })}

  def size(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + size(t))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def length(sb : StringBuffer) : Int = {(sb match {
    case Chunk(_, next) =>
      (1 + length(next))
    case _ =>
      0
  })}

  def Dis1(x : Int, y : Int, n : Int, m : Int) : (Int, Int) = {locally {
    val dcond13 = 1
    if ((x >= n)) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      locally {
        val (relse13: Int, delse13: Int) = locally {
          val dcond14 = 1
          if ((y < m)) {
            locally {
              val (rthen14: Int, dthen14: Int) = locally {
                val (e10: Int, d157: Int) = Dis1(x, (y + 1), n, m)
                (e10, (2 + d157))
              }
              
              (rthen14, if ((dcond14 >= dthen14)) {
                dcond14
              } else {
                dthen14
              })
            }
            
          } else {
            locally {
              val (relse14: Int, delse14: Int) = locally {
                val (e11: Int, d164: Int) = Dis1((x + 1), y, n, m)
                (e11, (2 + d164))
              }
              
              (relse14, if ((dcond14 >= delse14)) {
                dcond14
              } else {
                delse14
              })
            }
            
          }
        }
        
        (relse13, if ((dcond13 >= delse13)) {
          dcond13
        } else {
          delse13
        })
      }
      
    }
  }
  } ensuring(res => true)

  def Dis2(x : Int, z : Int, n : Int) : (Int, Int) = {locally {
    val dcond15 = 1
    if ((x >= n)) {
      (0, if ((dcond15 >= 0)) {
        dcond15
      } else {
        0
      })
    } else {
      locally {
        val (relse15: Int, delse15: Int) = locally {
          val dcond16 = 1
          if ((z > x)) {
            locally {
              val (rthen16: Int, dthen16: Int) = locally {
                val (e12: Int, d174: Int) = Dis2((x + 1), z, n)
                (e12, (2 + d174))
              }
              
              (rthen16, if ((dcond16 >= dthen16)) {
                dcond16
              } else {
                dthen16
              })
            }
            
          } else {
            locally {
              val (relse16: Int, delse16: Int) = locally {
                val (e13: Int, d180: Int) = Dis2(x, (z + 1), n)
                (e13, (2 + d180))
              }
              
              (relse16, if ((dcond16 >= delse16)) {
                dcond16
              } else {
                delse16
              })
            }
            
          }
        }
        
        (relse15, if ((dcond15 >= delse15)) {
          dcond15
        } else {
          delse15
        })
      }
      
    }
  }
  } ensuring(res => true)

  def Dis4(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {locally {
    val dcond2 = 2
    if (((x > n) || (x < 0))) {
      (0, if ((dcond2 >= 0)) {
        dcond2
      } else {
        0
      })
    } else {
      locally {
        val (relse2: Int, delse2: Int) = if (b) {
          locally {
            val (rthen3: Int, dthen3: Int) = locally {
              val (e2: Int, d30: Int) = Dis4((x + t), b, t, n)
              (e2, (2 + d30))
            }
            
            (rthen3, if ((0 >= dthen3)) {
              0
            } else {
              dthen3
            })
          }
          
        } else {
          locally {
            val (relse3: Int, delse3: Int) = locally {
              val (e3: Int, d37: Int) = Dis4((x - t), b, t, n)
              (e3, (2 + d37))
            }
            
            (relse3, if ((0 >= delse3)) {
              0
            } else {
              delse3
            })
          }
          
        }
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res => true)

  def Dis3(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {    require(((b && (t == 1)) || (!(b) && (t == -1))));
locally {
    val dcond = 2
    if (((x > n) || (x < 0))) {
      (0, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    } else {
      locally {
        val (relse: Int, delse: Int) = if (b) {
          locally {
            val (rthen1: Int, dthen1: Int) = locally {
              val (e: Int, d10: Int) = Dis3((x + t), b, t, n)
              (e, (2 + d10))
            }
            
            (rthen1, if ((0 >= dthen1)) {
              0
            } else {
              dthen1
            })
          }
          
        } else {
          locally {
            val (relse1: Int, delse1: Int) = locally {
              val (e1: Int, d17: Int) = Dis3((x - t), b, t, n)
              (e1, (2 + d17))
            }
            
            (relse1, if ((0 >= delse1)) {
              0
            } else {
              delse1
            })
          }
          
        }
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res => true)

  def Equals(str1 : List, str2 : List, s1 : StringBuffer, s2 : StringBuffer, k : Int) : (Boolean, Int) = {    require((sizeBound(s1, k) && sizeBound(s2, k) && (size(str1) <= k) && (size(str2) <= k) && (k >= 0)));
locally {
    val (vr: (List, List), vd: Int) = ((str1, str2), 1)
    locally {
      val (br: Boolean, bd: Int) = locally {
        val dcond4 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
          (1 + (1 + vd))
        } else {
          (1 + (1 + vd))
        })
        if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Cons])) {
          locally {
            val (rthen4: Boolean, dthen4: Int) = locally {
              val dcond5 = (1 + (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                (1 + (1 + vd))
              } else {
                (1 + (1 + vd))
              }))
              if ((vr._1.head != vr._2.head)) {
                (false, if ((dcond5 >= 0)) {
                  dcond5
                } else {
                  0
                })
              } else {
                locally {
                  val (relse4: Boolean, delse4: Int) = locally {
                    val (e4: Boolean, d60: Int) = Equals(vr._1.tail, vr._2.tail, s1, s2, k)
                    (e4, ((1 + d60) + if ((if ((if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                      (1 + (1 + vd))
                    } else {
                      (1 + (1 + vd))
                    } >= 0)) {
                      if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      } >= 0)) {
                        if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      } >= 0)) {
                        if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        }
                      } else {
                        0
                      } >= 0)) {
                        if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        } >= 0)) {
                          if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                            (1 + (1 + vd))
                          } else {
                            (1 + (1 + vd))
                          }
                        } else {
                          0
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    }))
                  }
                  
                  (relse4, if ((dcond5 >= delse4)) {
                    dcond5
                  } else {
                    delse4
                  })
                }
                
              }
            }
            
            (rthen4, if ((dcond4 >= dthen4)) {
              dcond4
            } else {
              dthen4
            })
          }
          
        } else {
          locally {
            val (relse5: Boolean, delse5: Int) = locally {
              val dcond6 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                (1 + (1 + vd))
              } else {
                (1 + (1 + vd))
              })
              if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Nil])) {
                locally {
                  val (rthen6: Boolean, dthen6: Int) = locally {
                    val dcond7 = 1
                    if (s2.isInstanceOf[Chunk]) {
                      locally {
                        val (rthen7: Boolean, dthen7: Int) = locally {
                          val (e5: Boolean, d77: Int) = Equals(str1, s2.str, s1, s2.next, k)
                          (e5, (2 + d77))
                        }
                        
                        (rthen7, if ((dcond7 >= dthen7)) {
                          dcond7
                        } else {
                          dthen7
                        })
                      }
                      
                    } else {
                      (false, if ((dcond7 >= 0)) {
                        dcond7
                      } else {
                        0
                      })
                    }
                  }
                  
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                locally {
                  val (relse7: Boolean, delse7: Int) = locally {
                    val dcond8 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                      (1 + (1 + vd))
                    } else {
                      (1 + (1 + vd))
                    })
                    if ((vr._1.isInstanceOf[Nil] && vr._2.isInstanceOf[Cons])) {
                      locally {
                        val (rthen8: Boolean, dthen8: Int) = locally {
                          val dcond9 = 1
                          if (s1.isInstanceOf[Chunk]) {
                            locally {
                              val (rthen9: Boolean, dthen9: Int) = locally {
                                val (e6: Boolean, d92: Int) = Equals(s1.str, str2, s1.next, s2, k)
                                (e6, (2 + d92))
                              }
                              
                              (rthen9, if ((dcond9 >= dthen9)) {
                                dcond9
                              } else {
                                dthen9
                              })
                            }
                            
                          } else {
                            (false, if ((dcond9 >= 0)) {
                              dcond9
                            } else {
                              0
                            })
                          }
                        }
                        
                        (rthen8, if ((dcond8 >= dthen8)) {
                          dcond8
                        } else {
                          dthen8
                        })
                      }
                      
                    } else {
                      locally {
                        val (relse9: Boolean, delse9: Int) = locally {
                          val (vr1: (StringBuffer, StringBuffer), vd1: Int) = ((s1, s2), 1)
                          locally {
                            val (br1: Boolean, bd1: Int) = locally {
                              val dcond10 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                (1 + (1 + vd1))
                              } else {
                                (1 + (1 + vd1))
                              })
                              if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Chunk])) {
                                locally {
                                  val (rthen10: Boolean, dthen10: Int) = locally {
                                    val (e7: Boolean, d108: Int) = Equals(vr1._1.str, vr1._2.str, vr1._1.next, vr1._2.next, k)
                                    (e7, ((1 + d108) + if ((if ((if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                      (1 + (1 + vd1))
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= (1 + (1 + vd1)))) {
                                      if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= (1 + (1 + vd1)))) {
                                      if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= 0)) {
                                      if ((if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        } >= (1 + (1 + vd1)))) {
                                          if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                            (1 + (1 + vd1))
                                          } else {
                                            (1 + (1 + vd1))
                                          }
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      0
                                    }))
                                  }
                                  
                                  (rthen10, if ((dcond10 >= dthen10)) {
                                    dcond10
                                  } else {
                                    dthen10
                                  })
                                }
                                
                              } else {
                                locally {
                                  val (relse10: Boolean, delse10: Int) = locally {
                                    val dcond11 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                      (1 + (1 + vd1))
                                    } else {
                                      (1 + (1 + vd1))
                                    })
                                    if ((vr1._1.isInstanceOf[Empty] && vr1._2.isInstanceOf[Chunk])) {
                                      locally {
                                        val (rthen11: Boolean, dthen11: Int) = locally {
                                          val (e8: Boolean, d128: Int) = Equals(str1, vr1._2.str, s1, vr1._2.next, k)
                                          (e8, ((1 + d128) + if ((if ((if ((if ((0 >= (1 + (1 + vd1)))) {
                                            0
                                          } else {
                                            (1 + (1 + vd1))
                                          } >= 0)) {
                                            if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            }
                                          } else {
                                            0
                                          } >= (1 + (1 + vd1)))) {
                                            if ((if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              }
                                            } else {
                                              0
                                            }
                                          } else {
                                            (1 + (1 + vd1))
                                          } >= 0)) {
                                            if ((if ((if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              }
                                            } else {
                                              0
                                            } >= (1 + (1 + vd1)))) {
                                              if ((if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              } >= 0)) {
                                                if ((0 >= (1 + (1 + vd1)))) {
                                                  0
                                                } else {
                                                  (1 + (1 + vd1))
                                                }
                                              } else {
                                                0
                                              }
                                            } else {
                                              (1 + (1 + vd1))
                                            }
                                          } else {
                                            0
                                          }))
                                        }
                                        
                                        (rthen11, if ((dcond11 >= dthen11)) {
                                          dcond11
                                        } else {
                                          dthen11
                                        })
                                      }
                                      
                                    } else {
                                      locally {
                                        val (relse11: Boolean, delse11: Int) = locally {
                                          val dcond12 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                            (1 + (1 + vd1))
                                          } else {
                                            (1 + (1 + vd1))
                                          })
                                          if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Empty])) {
                                            locally {
                                              val (rthen12: Boolean, dthen12: Int) = locally {
                                                val (e9: Boolean, d144: Int) = Equals(vr1._1.str, str2, vr1._1.next, s2, k)
                                                (e9, ((1 + d144) + if ((if ((if ((if (((1 + (1 + vd1)) >= 0)) {
                                                  (1 + (1 + vd1))
                                                } else {
                                                  0
                                                } >= (1 + (1 + vd1)))) {
                                                  if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  (1 + (1 + vd1))
                                                } >= 0)) {
                                                  if ((if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + vd1)))) {
                                                    if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + vd1))
                                                  }
                                                } else {
                                                  0
                                                } >= 0)) {
                                                  if ((if ((if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + vd1)))) {
                                                    if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + vd1))
                                                  } >= 0)) {
                                                    if ((if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    } >= (1 + (1 + vd1)))) {
                                                      if (((1 + (1 + vd1)) >= 0)) {
                                                        (1 + (1 + vd1))
                                                      } else {
                                                        0
                                                      }
                                                    } else {
                                                      (1 + (1 + vd1))
                                                    }
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (rthen12, if ((dcond12 >= dthen12)) {
                                                dcond12
                                              } else {
                                                dthen12
                                              })
                                            }
                                            
                                          } else {
                                            (true, if ((dcond12 >= 0)) {
                                              dcond12
                                            } else {
                                              0
                                            })
                                          }
                                        }
                                        
                                        (relse11, if ((dcond11 >= delse11)) {
                                          dcond11
                                        } else {
                                          delse11
                                        })
                                      }
                                      
                                    }
                                  }
                                  
                                  (relse10, if ((dcond10 >= delse10)) {
                                    dcond10
                                  } else {
                                    delse10
                                  })
                                }
                                
                              }
                            }
                            
                            (br1, (bd1 + 1))
                          }
                          
                        }
                        
                        (relse9, if ((dcond8 >= delse9)) {
                          dcond8
                        } else {
                          delse9
                        })
                      }
                      
                    }
                  }
                  
                  (relse7, if ((dcond6 >= delse7)) {
                    dcond6
                  } else {
                    delse7
                  })
                }
                
              }
            }
            
            (relse5, if ((dcond4 >= delse5)) {
              dcond4
            } else {
              delse5
            })
          }
          
        }
      }
      
      (br, (bd + 1))
    }
    
  }
  } ensuring(res => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: sizeBound
Defined fun: size
Defined fun: max
Defined fun: length
Defined fun: Dis1
Defined fun: Dis2
Defined fun: Dis4
Defined fun: Dis3
Defined fun: Equals
Defined fun: max
FunMap: Map(Equals -> Equals, Dis1 -> Dis1, sizeBound -> sizeBound, Dis3 -> Dis3, length -> length, max -> max, size -> size, Dis4 -> Dis4, max -> max, Dis2 -> Dis2)
After Time Instrumentation: 
object SpeedBenchmarks {
  case class Cons(head: Int, tail: List) extends List

  case class Chunk(str: List, next: StringBuffer) extends StringBuffer

  case class Nil() extends List

  case class Empty() extends StringBuffer

  sealed abstract class StringBuffer

  sealed abstract class List

  def sizeBound(sb : StringBuffer, k : Int) : Boolean = {(sb match {
    case Chunk(str, next) =>
      ((size(str) <= k) && sizeBound(next, k))
    case _ =>
      (0 <= k)
  })}

  def size(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + size(t))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def length(sb : StringBuffer) : Int = {(sb match {
    case Chunk(_, next) =>
      (1 + length(next))
    case _ =>
      0
  })}

  def Dis1(x : Int, y : Int, n : Int, m : Int) : (Int, Int) = {locally {
    val dcond13 = 1
    if ((x >= n)) {
      (0, if ((dcond13 >= 0)) {
        dcond13
      } else {
        0
      })
    } else {
      locally {
        val (relse13: Int, delse13: Int) = locally {
          val dcond14 = 1
          if ((y < m)) {
            locally {
              val (rthen14: Int, dthen14: Int) = locally {
                val (e10: Int, d157: Int) = Dis1(x, (y + 1), n, m)
                (e10, (2 + d157))
              }
              
              (rthen14, if ((dcond14 >= dthen14)) {
                dcond14
              } else {
                dthen14
              })
            }
            
          } else {
            locally {
              val (relse14: Int, delse14: Int) = locally {
                val (e11: Int, d164: Int) = Dis1((x + 1), y, n, m)
                (e11, (2 + d164))
              }
              
              (relse14, if ((dcond14 >= delse14)) {
                dcond14
              } else {
                delse14
              })
            }
            
          }
        }
        
        (relse13, if ((dcond13 >= delse13)) {
          dcond13
        } else {
          delse13
        })
      }
      
    }
  }
  } ensuring(res12 => true)

  def Dis2(x : Int, z : Int, n : Int) : (Int, Int) = {locally {
    val dcond15 = 1
    if ((x >= n)) {
      (0, if ((dcond15 >= 0)) {
        dcond15
      } else {
        0
      })
    } else {
      locally {
        val (relse15: Int, delse15: Int) = locally {
          val dcond16 = 1
          if ((z > x)) {
            locally {
              val (rthen16: Int, dthen16: Int) = locally {
                val (e12: Int, d174: Int) = Dis2((x + 1), z, n)
                (e12, (2 + d174))
              }
              
              (rthen16, if ((dcond16 >= dthen16)) {
                dcond16
              } else {
                dthen16
              })
            }
            
          } else {
            locally {
              val (relse16: Int, delse16: Int) = locally {
                val (e13: Int, d180: Int) = Dis2(x, (z + 1), n)
                (e13, (2 + d180))
              }
              
              (relse16, if ((dcond16 >= delse16)) {
                dcond16
              } else {
                delse16
              })
            }
            
          }
        }
        
        (relse15, if ((dcond15 >= delse15)) {
          dcond15
        } else {
          delse15
        })
      }
      
    }
  }
  } ensuring(res15 => true)

  def Dis4(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {locally {
    val dcond2 = 2
    if (((x > n) || (x < 0))) {
      (0, if ((dcond2 >= 0)) {
        dcond2
      } else {
        0
      })
    } else {
      locally {
        val (relse2: Int, delse2: Int) = if (b) {
          locally {
            val (rthen3: Int, dthen3: Int) = locally {
              val (e2: Int, d30: Int) = Dis4((x + t), b, t, n)
              (e2, (2 + d30))
            }
            
            (rthen3, if ((0 >= dthen3)) {
              0
            } else {
              dthen3
            })
          }
          
        } else {
          locally {
            val (relse3: Int, delse3: Int) = locally {
              val (e3: Int, d37: Int) = Dis4((x - t), b, t, n)
              (e3, (2 + d37))
            }
            
            (relse3, if ((0 >= delse3)) {
              0
            } else {
              delse3
            })
          }
          
        }
        (relse2, if ((dcond2 >= delse2)) {
          dcond2
        } else {
          delse2
        })
      }
      
    }
  }
  } ensuring(res14 => true)

  def Dis3(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {    require(((b && (t == 1)) || (!(b) && (t == -1))));
locally {
    val dcond = 2
    if (((x > n) || (x < 0))) {
      (0, if ((dcond >= 0)) {
        dcond
      } else {
        0
      })
    } else {
      locally {
        val (relse: Int, delse: Int) = if (b) {
          locally {
            val (rthen1: Int, dthen1: Int) = locally {
              val (e: Int, d10: Int) = Dis3((x + t), b, t, n)
              (e, (2 + d10))
            }
            
            (rthen1, if ((0 >= dthen1)) {
              0
            } else {
              dthen1
            })
          }
          
        } else {
          locally {
            val (relse1: Int, delse1: Int) = locally {
              val (e1: Int, d17: Int) = Dis3((x - t), b, t, n)
              (e1, (2 + d17))
            }
            
            (relse1, if ((0 >= delse1)) {
              0
            } else {
              delse1
            })
          }
          
        }
        (relse, if ((dcond >= delse)) {
          dcond
        } else {
          delse
        })
      }
      
    }
  }
  } ensuring(res13 => true)

  def Equals(str1 : List, str2 : List, s1 : StringBuffer, s2 : StringBuffer, k : Int) : (Boolean, Int) = {    require((sizeBound(s1, k) && sizeBound(s2, k) && (size(str1) <= k) && (size(str2) <= k) && (k >= 0)));
locally {
    val (vr: (List, List), vd: Int) = ((str1, str2), 1)
    locally {
      val (br: Boolean, bd: Int) = locally {
        val dcond4 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
          (1 + (1 + vd))
        } else {
          (1 + (1 + vd))
        })
        if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Cons])) {
          locally {
            val (rthen4: Boolean, dthen4: Int) = locally {
              val dcond5 = (1 + (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                (1 + (1 + vd))
              } else {
                (1 + (1 + vd))
              }))
              if ((vr._1.head != vr._2.head)) {
                (false, if ((dcond5 >= 0)) {
                  dcond5
                } else {
                  0
                })
              } else {
                locally {
                  val (relse4: Boolean, delse4: Int) = locally {
                    val (e4: Boolean, d60: Int) = Equals(vr._1.tail, vr._2.tail, s1, s2, k)
                    (e4, ((1 + d60) + if ((if ((if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                      (1 + (1 + vd))
                    } else {
                      (1 + (1 + vd))
                    } >= 0)) {
                      if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      } >= 0)) {
                        if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                        (1 + (1 + vd))
                      } else {
                        (1 + (1 + vd))
                      } >= 0)) {
                        if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        }
                      } else {
                        0
                      } >= 0)) {
                        if ((if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                          (1 + (1 + vd))
                        } else {
                          (1 + (1 + vd))
                        } >= 0)) {
                          if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                            (1 + (1 + vd))
                          } else {
                            (1 + (1 + vd))
                          }
                        } else {
                          0
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    }))
                  }
                  
                  (relse4, if ((dcond5 >= delse4)) {
                    dcond5
                  } else {
                    delse4
                  })
                }
                
              }
            }
            
            (rthen4, if ((dcond4 >= dthen4)) {
              dcond4
            } else {
              dthen4
            })
          }
          
        } else {
          locally {
            val (relse5: Boolean, delse5: Int) = locally {
              val dcond6 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                (1 + (1 + vd))
              } else {
                (1 + (1 + vd))
              })
              if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Nil])) {
                locally {
                  val (rthen6: Boolean, dthen6: Int) = locally {
                    val dcond7 = 1
                    if (s2.isInstanceOf[Chunk]) {
                      locally {
                        val (rthen7: Boolean, dthen7: Int) = locally {
                          val (e5: Boolean, d77: Int) = Equals(str1, s2.str, s1, s2.next, k)
                          (e5, (2 + d77))
                        }
                        
                        (rthen7, if ((dcond7 >= dthen7)) {
                          dcond7
                        } else {
                          dthen7
                        })
                      }
                      
                    } else {
                      (false, if ((dcond7 >= 0)) {
                        dcond7
                      } else {
                        0
                      })
                    }
                  }
                  
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                locally {
                  val (relse7: Boolean, delse7: Int) = locally {
                    val dcond8 = (1 + if (((1 + (1 + vd)) >= (1 + (1 + vd)))) {
                      (1 + (1 + vd))
                    } else {
                      (1 + (1 + vd))
                    })
                    if ((vr._1.isInstanceOf[Nil] && vr._2.isInstanceOf[Cons])) {
                      locally {
                        val (rthen8: Boolean, dthen8: Int) = locally {
                          val dcond9 = 1
                          if (s1.isInstanceOf[Chunk]) {
                            locally {
                              val (rthen9: Boolean, dthen9: Int) = locally {
                                val (e6: Boolean, d92: Int) = Equals(s1.str, str2, s1.next, s2, k)
                                (e6, (2 + d92))
                              }
                              
                              (rthen9, if ((dcond9 >= dthen9)) {
                                dcond9
                              } else {
                                dthen9
                              })
                            }
                            
                          } else {
                            (false, if ((dcond9 >= 0)) {
                              dcond9
                            } else {
                              0
                            })
                          }
                        }
                        
                        (rthen8, if ((dcond8 >= dthen8)) {
                          dcond8
                        } else {
                          dthen8
                        })
                      }
                      
                    } else {
                      locally {
                        val (relse9: Boolean, delse9: Int) = locally {
                          val (vr1: (StringBuffer, StringBuffer), vd1: Int) = ((s1, s2), 1)
                          locally {
                            val (br1: Boolean, bd1: Int) = locally {
                              val dcond10 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                (1 + (1 + vd1))
                              } else {
                                (1 + (1 + vd1))
                              })
                              if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Chunk])) {
                                locally {
                                  val (rthen10: Boolean, dthen10: Int) = locally {
                                    val (e7: Boolean, d108: Int) = Equals(vr1._1.str, vr1._2.str, vr1._1.next, vr1._2.next, k)
                                    (e7, ((1 + d108) + if ((if ((if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                      (1 + (1 + vd1))
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= (1 + (1 + vd1)))) {
                                      if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= (1 + (1 + vd1)))) {
                                      if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      (1 + (1 + vd1))
                                    } >= 0)) {
                                      if ((if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                        (1 + (1 + vd1))
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      } >= (1 + (1 + vd1)))) {
                                        if ((if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                          (1 + (1 + vd1))
                                        } else {
                                          (1 + (1 + vd1))
                                        } >= (1 + (1 + vd1)))) {
                                          if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                            (1 + (1 + vd1))
                                          } else {
                                            (1 + (1 + vd1))
                                          }
                                        } else {
                                          (1 + (1 + vd1))
                                        }
                                      } else {
                                        (1 + (1 + vd1))
                                      }
                                    } else {
                                      0
                                    }))
                                  }
                                  
                                  (rthen10, if ((dcond10 >= dthen10)) {
                                    dcond10
                                  } else {
                                    dthen10
                                  })
                                }
                                
                              } else {
                                locally {
                                  val (relse10: Boolean, delse10: Int) = locally {
                                    val dcond11 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                      (1 + (1 + vd1))
                                    } else {
                                      (1 + (1 + vd1))
                                    })
                                    if ((vr1._1.isInstanceOf[Empty] && vr1._2.isInstanceOf[Chunk])) {
                                      locally {
                                        val (rthen11: Boolean, dthen11: Int) = locally {
                                          val (e8: Boolean, d128: Int) = Equals(str1, vr1._2.str, s1, vr1._2.next, k)
                                          (e8, ((1 + d128) + if ((if ((if ((if ((0 >= (1 + (1 + vd1)))) {
                                            0
                                          } else {
                                            (1 + (1 + vd1))
                                          } >= 0)) {
                                            if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            }
                                          } else {
                                            0
                                          } >= (1 + (1 + vd1)))) {
                                            if ((if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              }
                                            } else {
                                              0
                                            }
                                          } else {
                                            (1 + (1 + vd1))
                                          } >= 0)) {
                                            if ((if ((if ((0 >= (1 + (1 + vd1)))) {
                                              0
                                            } else {
                                              (1 + (1 + vd1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              }
                                            } else {
                                              0
                                            } >= (1 + (1 + vd1)))) {
                                              if ((if ((0 >= (1 + (1 + vd1)))) {
                                                0
                                              } else {
                                                (1 + (1 + vd1))
                                              } >= 0)) {
                                                if ((0 >= (1 + (1 + vd1)))) {
                                                  0
                                                } else {
                                                  (1 + (1 + vd1))
                                                }
                                              } else {
                                                0
                                              }
                                            } else {
                                              (1 + (1 + vd1))
                                            }
                                          } else {
                                            0
                                          }))
                                        }
                                        
                                        (rthen11, if ((dcond11 >= dthen11)) {
                                          dcond11
                                        } else {
                                          dthen11
                                        })
                                      }
                                      
                                    } else {
                                      locally {
                                        val (relse11: Boolean, delse11: Int) = locally {
                                          val dcond12 = (1 + if (((1 + (1 + vd1)) >= (1 + (1 + vd1)))) {
                                            (1 + (1 + vd1))
                                          } else {
                                            (1 + (1 + vd1))
                                          })
                                          if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Empty])) {
                                            locally {
                                              val (rthen12: Boolean, dthen12: Int) = locally {
                                                val (e9: Boolean, d144: Int) = Equals(vr1._1.str, str2, vr1._1.next, s2, k)
                                                (e9, ((1 + d144) + if ((if ((if ((if (((1 + (1 + vd1)) >= 0)) {
                                                  (1 + (1 + vd1))
                                                } else {
                                                  0
                                                } >= (1 + (1 + vd1)))) {
                                                  if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  (1 + (1 + vd1))
                                                } >= 0)) {
                                                  if ((if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + vd1)))) {
                                                    if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + vd1))
                                                  }
                                                } else {
                                                  0
                                                } >= 0)) {
                                                  if ((if ((if (((1 + (1 + vd1)) >= 0)) {
                                                    (1 + (1 + vd1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + vd1)))) {
                                                    if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + vd1))
                                                  } >= 0)) {
                                                    if ((if (((1 + (1 + vd1)) >= 0)) {
                                                      (1 + (1 + vd1))
                                                    } else {
                                                      0
                                                    } >= (1 + (1 + vd1)))) {
                                                      if (((1 + (1 + vd1)) >= 0)) {
                                                        (1 + (1 + vd1))
                                                      } else {
                                                        0
                                                      }
                                                    } else {
                                                      (1 + (1 + vd1))
                                                    }
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (rthen12, if ((dcond12 >= dthen12)) {
                                                dcond12
                                              } else {
                                                dthen12
                                              })
                                            }
                                            
                                          } else {
                                            (true, if ((dcond12 >= 0)) {
                                              dcond12
                                            } else {
                                              0
                                            })
                                          }
                                        }
                                        
                                        (relse11, if ((dcond11 >= delse11)) {
                                          dcond11
                                        } else {
                                          delse11
                                        })
                                      }
                                      
                                    }
                                  }
                                  
                                  (relse10, if ((dcond10 >= delse10)) {
                                    dcond10
                                  } else {
                                    delse10
                                  })
                                }
                                
                              }
                            }
                            
                            (br1, (bd1 + 1))
                          }
                          
                        }
                        
                        (relse9, if ((dcond8 >= delse9)) {
                          dcond8
                        } else {
                          delse9
                        })
                      }
                      
                    }
                  }
                  
                  (relse7, if ((dcond6 >= delse7)) {
                    dcond6
                  } else {
                    delse7
                  })
                }
                
              }
            }
            
            (relse5, if ((dcond4 >= delse5)) {
              dcond4
            } else {
              delse5
            })
          }
          
        }
      }
      
      (br, (bd + 1))
    }
    
  }
  } ensuring(res11 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object SpeedBenchmarks {
  case class Cons(head: Int, tail: List) extends List

  case class Chunk(str: List, next: StringBuffer) extends StringBuffer

  case class Nil() extends List

  case class Empty() extends StringBuffer

  sealed abstract class StringBuffer

  sealed abstract class List

  def sizeBound(sb : StringBuffer, k : Int) : Boolean = {(sb match {
    case Chunk(str, next) =>
      ((size(str) <= k) && sizeBound(next, k))
    case _ =>
      (0 <= k)
  })}

  def size(l : List) : Int = {(l match {
    case Nil() =>
      0
    case Cons(_, t) =>
      (1 + size(t))
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def length(sb : StringBuffer) : Int = {(sb match {
    case Chunk(_, next) =>
      (1 + length(next))
    case _ =>
      0
  })}

  def Dis1(x : Int, y : Int, n : Int, m : Int) : (Int, Int) = {if ((x >= n)) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse13: Int, delse13: Int) = if ((y < m)) {
        locally {
          val (rthen14: Int, dthen14: Int) = locally {
            val (e10: Int, d157: Int) = Dis1(x, (y + 1), n, m)
            (e10, (2 + d157))
          }
          
          (rthen14, if ((1 >= dthen14)) {
            1
          } else {
            dthen14
          })
        }
        
      } else {
        locally {
          val (relse14: Int, delse14: Int) = locally {
            val (e11: Int, d164: Int) = Dis1((x + 1), y, n, m)
            (e11, (2 + d164))
          }
          
          (relse14, if ((1 >= delse14)) {
            1
          } else {
            delse14
          })
        }
        
      }
      (relse13, if ((1 >= delse13)) {
        1
      } else {
        delse13
      })
    }
    
  }} ensuring(res12 => true)

  def Dis2(x : Int, z : Int, n : Int) : (Int, Int) = {if ((x >= n)) {
    (0, if ((1 >= 0)) {
      1
    } else {
      0
    })
  } else {
    locally {
      val (relse15: Int, delse15: Int) = if ((z > x)) {
        locally {
          val (rthen16: Int, dthen16: Int) = locally {
            val (e12: Int, d174: Int) = Dis2((x + 1), z, n)
            (e12, (2 + d174))
          }
          
          (rthen16, if ((1 >= dthen16)) {
            1
          } else {
            dthen16
          })
        }
        
      } else {
        locally {
          val (relse16: Int, delse16: Int) = locally {
            val (e13: Int, d180: Int) = Dis2(x, (z + 1), n)
            (e13, (2 + d180))
          }
          
          (relse16, if ((1 >= delse16)) {
            1
          } else {
            delse16
          })
        }
        
      }
      (relse15, if ((1 >= delse15)) {
        1
      } else {
        delse15
      })
    }
    
  }} ensuring(res15 => true)

  def Dis4(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {if (((x > n) || (x < 0))) {
    (0, if ((2 >= 0)) {
      2
    } else {
      0
    })
  } else {
    locally {
      val (relse2: Int, delse2: Int) = if (b) {
        locally {
          val (rthen3: Int, dthen3: Int) = locally {
            val (e2: Int, d30: Int) = Dis4((x + t), b, t, n)
            (e2, (2 + d30))
          }
          
          (rthen3, if ((0 >= dthen3)) {
            0
          } else {
            dthen3
          })
        }
        
      } else {
        locally {
          val (relse3: Int, delse3: Int) = locally {
            val (e3: Int, d37: Int) = Dis4((x - t), b, t, n)
            (e3, (2 + d37))
          }
          
          (relse3, if ((0 >= delse3)) {
            0
          } else {
            delse3
          })
        }
        
      }
      (relse2, if ((2 >= delse2)) {
        2
      } else {
        delse2
      })
    }
    
  }} ensuring(res14 => true)

  def Dis3(x : Int, b : Boolean, t : Int, n : Int) : (Int, Int) = {    require(((b && (t == 1)) || (!(b) && (t == -1))));
if (((x > n) || (x < 0))) {
    (0, if ((2 >= 0)) {
      2
    } else {
      0
    })
  } else {
    locally {
      val (relse: Int, delse: Int) = if (b) {
        locally {
          val (rthen1: Int, dthen1: Int) = locally {
            val (e: Int, d10: Int) = Dis3((x + t), b, t, n)
            (e, (2 + d10))
          }
          
          (rthen1, if ((0 >= dthen1)) {
            0
          } else {
            dthen1
          })
        }
        
      } else {
        locally {
          val (relse1: Int, delse1: Int) = locally {
            val (e1: Int, d17: Int) = Dis3((x - t), b, t, n)
            (e1, (2 + d17))
          }
          
          (relse1, if ((0 >= delse1)) {
            0
          } else {
            delse1
          })
        }
        
      }
      (relse, if ((2 >= delse)) {
        2
      } else {
        delse
      })
    }
    
  }} ensuring(res13 => true)

  def Equals(str1 : List, str2 : List, s1 : StringBuffer, s2 : StringBuffer, k : Int) : (Boolean, Int) = {    require((sizeBound(s1, k) && sizeBound(s2, k) && (size(str1) <= k) && (size(str2) <= k) && (k >= 0)));
locally {
    val vr = (str1, str2)
    locally {
      val (br: Boolean, bd: Int) = locally {
        val dcond4 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
          (1 + (1 + 1))
        } else {
          (1 + (1 + 1))
        })
        if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Cons])) {
          locally {
            val (rthen4: Boolean, dthen4: Int) = locally {
              val dcond5 = (1 + (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                (1 + (1 + 1))
              } else {
                (1 + (1 + 1))
              }))
              if ((vr._1.head != vr._2.head)) {
                (false, if ((dcond5 >= 0)) {
                  dcond5
                } else {
                  0
                })
              } else {
                locally {
                  val (relse4: Boolean, delse4: Int) = locally {
                    val (e4: Boolean, d60: Int) = Equals(vr._1.tail, vr._2.tail, s1, s2, k)
                    (e4, ((1 + d60) + if ((if ((if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                      (1 + (1 + 1))
                    } else {
                      (1 + (1 + 1))
                    } >= 0)) {
                      if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                        (1 + (1 + 1))
                      } else {
                        (1 + (1 + 1))
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                        (1 + (1 + 1))
                      } else {
                        (1 + (1 + 1))
                      } >= 0)) {
                        if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                          (1 + (1 + 1))
                        } else {
                          (1 + (1 + 1))
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    } >= 0)) {
                      if ((if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                        (1 + (1 + 1))
                      } else {
                        (1 + (1 + 1))
                      } >= 0)) {
                        if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                          (1 + (1 + 1))
                        } else {
                          (1 + (1 + 1))
                        }
                      } else {
                        0
                      } >= 0)) {
                        if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                          (1 + (1 + 1))
                        } else {
                          (1 + (1 + 1))
                        } >= 0)) {
                          if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                            (1 + (1 + 1))
                          } else {
                            (1 + (1 + 1))
                          }
                        } else {
                          0
                        }
                      } else {
                        0
                      }
                    } else {
                      0
                    }))
                  }
                  
                  (relse4, if ((dcond5 >= delse4)) {
                    dcond5
                  } else {
                    delse4
                  })
                }
                
              }
            }
            
            (rthen4, if ((dcond4 >= dthen4)) {
              dcond4
            } else {
              dthen4
            })
          }
          
        } else {
          locally {
            val (relse5: Boolean, delse5: Int) = locally {
              val dcond6 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                (1 + (1 + 1))
              } else {
                (1 + (1 + 1))
              })
              if ((vr._1.isInstanceOf[Cons] && vr._2.isInstanceOf[Nil])) {
                locally {
                  val (rthen6: Boolean, dthen6: Int) = if (s2.isInstanceOf[Chunk]) {
                    locally {
                      val (rthen7: Boolean, dthen7: Int) = locally {
                        val (e5: Boolean, d77: Int) = Equals(str1, s2.str, s1, s2.next, k)
                        (e5, (2 + d77))
                      }
                      
                      (rthen7, if ((1 >= dthen7)) {
                        1
                      } else {
                        dthen7
                      })
                    }
                    
                  } else {
                    (false, if ((1 >= 0)) {
                      1
                    } else {
                      0
                    })
                  }
                  (rthen6, if ((dcond6 >= dthen6)) {
                    dcond6
                  } else {
                    dthen6
                  })
                }
                
              } else {
                locally {
                  val (relse7: Boolean, delse7: Int) = locally {
                    val dcond8 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                      (1 + (1 + 1))
                    } else {
                      (1 + (1 + 1))
                    })
                    if ((vr._1.isInstanceOf[Nil] && vr._2.isInstanceOf[Cons])) {
                      locally {
                        val (rthen8: Boolean, dthen8: Int) = if (s1.isInstanceOf[Chunk]) {
                          locally {
                            val (rthen9: Boolean, dthen9: Int) = locally {
                              val (e6: Boolean, d92: Int) = Equals(s1.str, str2, s1.next, s2, k)
                              (e6, (2 + d92))
                            }
                            
                            (rthen9, if ((1 >= dthen9)) {
                              1
                            } else {
                              dthen9
                            })
                          }
                          
                        } else {
                          (false, if ((1 >= 0)) {
                            1
                          } else {
                            0
                          })
                        }
                        (rthen8, if ((dcond8 >= dthen8)) {
                          dcond8
                        } else {
                          dthen8
                        })
                      }
                      
                    } else {
                      locally {
                        val (relse9: Boolean, delse9: Int) = locally {
                          val vr1 = (s1, s2)
                          locally {
                            val (br1: Boolean, bd1: Int) = locally {
                              val dcond10 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                (1 + (1 + 1))
                              } else {
                                (1 + (1 + 1))
                              })
                              if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Chunk])) {
                                locally {
                                  val (rthen10: Boolean, dthen10: Int) = locally {
                                    val (e7: Boolean, d108: Int) = Equals(vr1._1.str, vr1._2.str, vr1._1.next, vr1._2.next, k)
                                    (e7, ((1 + d108) + if ((if ((if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                      (1 + (1 + 1))
                                    } else {
                                      (1 + (1 + 1))
                                    } >= (1 + (1 + 1)))) {
                                      if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                        (1 + (1 + 1))
                                      } else {
                                        (1 + (1 + 1))
                                      }
                                    } else {
                                      (1 + (1 + 1))
                                    } >= (1 + (1 + 1)))) {
                                      if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                        (1 + (1 + 1))
                                      } else {
                                        (1 + (1 + 1))
                                      } >= (1 + (1 + 1)))) {
                                        if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                          (1 + (1 + 1))
                                        } else {
                                          (1 + (1 + 1))
                                        }
                                      } else {
                                        (1 + (1 + 1))
                                      }
                                    } else {
                                      (1 + (1 + 1))
                                    } >= 0)) {
                                      if ((if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                        (1 + (1 + 1))
                                      } else {
                                        (1 + (1 + 1))
                                      } >= (1 + (1 + 1)))) {
                                        if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                          (1 + (1 + 1))
                                        } else {
                                          (1 + (1 + 1))
                                        }
                                      } else {
                                        (1 + (1 + 1))
                                      } >= (1 + (1 + 1)))) {
                                        if ((if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                          (1 + (1 + 1))
                                        } else {
                                          (1 + (1 + 1))
                                        } >= (1 + (1 + 1)))) {
                                          if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                            (1 + (1 + 1))
                                          } else {
                                            (1 + (1 + 1))
                                          }
                                        } else {
                                          (1 + (1 + 1))
                                        }
                                      } else {
                                        (1 + (1 + 1))
                                      }
                                    } else {
                                      0
                                    }))
                                  }
                                  
                                  (rthen10, if ((dcond10 >= dthen10)) {
                                    dcond10
                                  } else {
                                    dthen10
                                  })
                                }
                                
                              } else {
                                locally {
                                  val (relse10: Boolean, delse10: Int) = locally {
                                    val dcond11 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                      (1 + (1 + 1))
                                    } else {
                                      (1 + (1 + 1))
                                    })
                                    if ((vr1._1.isInstanceOf[Empty] && vr1._2.isInstanceOf[Chunk])) {
                                      locally {
                                        val (rthen11: Boolean, dthen11: Int) = locally {
                                          val (e8: Boolean, d128: Int) = Equals(str1, vr1._2.str, s1, vr1._2.next, k)
                                          (e8, ((1 + d128) + if ((if ((if ((if ((0 >= (1 + (1 + 1)))) {
                                            0
                                          } else {
                                            (1 + (1 + 1))
                                          } >= 0)) {
                                            if ((0 >= (1 + (1 + 1)))) {
                                              0
                                            } else {
                                              (1 + (1 + 1))
                                            }
                                          } else {
                                            0
                                          } >= (1 + (1 + 1)))) {
                                            if ((if ((0 >= (1 + (1 + 1)))) {
                                              0
                                            } else {
                                              (1 + (1 + 1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + 1)))) {
                                                0
                                              } else {
                                                (1 + (1 + 1))
                                              }
                                            } else {
                                              0
                                            }
                                          } else {
                                            (1 + (1 + 1))
                                          } >= 0)) {
                                            if ((if ((if ((0 >= (1 + (1 + 1)))) {
                                              0
                                            } else {
                                              (1 + (1 + 1))
                                            } >= 0)) {
                                              if ((0 >= (1 + (1 + 1)))) {
                                                0
                                              } else {
                                                (1 + (1 + 1))
                                              }
                                            } else {
                                              0
                                            } >= (1 + (1 + 1)))) {
                                              if ((if ((0 >= (1 + (1 + 1)))) {
                                                0
                                              } else {
                                                (1 + (1 + 1))
                                              } >= 0)) {
                                                if ((0 >= (1 + (1 + 1)))) {
                                                  0
                                                } else {
                                                  (1 + (1 + 1))
                                                }
                                              } else {
                                                0
                                              }
                                            } else {
                                              (1 + (1 + 1))
                                            }
                                          } else {
                                            0
                                          }))
                                        }
                                        
                                        (rthen11, if ((dcond11 >= dthen11)) {
                                          dcond11
                                        } else {
                                          dthen11
                                        })
                                      }
                                      
                                    } else {
                                      locally {
                                        val (relse11: Boolean, delse11: Int) = locally {
                                          val dcond12 = (1 + if (((1 + (1 + 1)) >= (1 + (1 + 1)))) {
                                            (1 + (1 + 1))
                                          } else {
                                            (1 + (1 + 1))
                                          })
                                          if ((vr1._1.isInstanceOf[Chunk] && vr1._2.isInstanceOf[Empty])) {
                                            locally {
                                              val (rthen12: Boolean, dthen12: Int) = locally {
                                                val (e9: Boolean, d144: Int) = Equals(vr1._1.str, str2, vr1._1.next, s2, k)
                                                (e9, ((1 + d144) + if ((if ((if ((if (((1 + (1 + 1)) >= 0)) {
                                                  (1 + (1 + 1))
                                                } else {
                                                  0
                                                } >= (1 + (1 + 1)))) {
                                                  if (((1 + (1 + 1)) >= 0)) {
                                                    (1 + (1 + 1))
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  (1 + (1 + 1))
                                                } >= 0)) {
                                                  if ((if (((1 + (1 + 1)) >= 0)) {
                                                    (1 + (1 + 1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + 1)))) {
                                                    if (((1 + (1 + 1)) >= 0)) {
                                                      (1 + (1 + 1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + 1))
                                                  }
                                                } else {
                                                  0
                                                } >= 0)) {
                                                  if ((if ((if (((1 + (1 + 1)) >= 0)) {
                                                    (1 + (1 + 1))
                                                  } else {
                                                    0
                                                  } >= (1 + (1 + 1)))) {
                                                    if (((1 + (1 + 1)) >= 0)) {
                                                      (1 + (1 + 1))
                                                    } else {
                                                      0
                                                    }
                                                  } else {
                                                    (1 + (1 + 1))
                                                  } >= 0)) {
                                                    if ((if (((1 + (1 + 1)) >= 0)) {
                                                      (1 + (1 + 1))
                                                    } else {
                                                      0
                                                    } >= (1 + (1 + 1)))) {
                                                      if (((1 + (1 + 1)) >= 0)) {
                                                        (1 + (1 + 1))
                                                      } else {
                                                        0
                                                      }
                                                    } else {
                                                      (1 + (1 + 1))
                                                    }
                                                  } else {
                                                    0
                                                  }
                                                } else {
                                                  0
                                                }))
                                              }
                                              
                                              (rthen12, if ((dcond12 >= dthen12)) {
                                                dcond12
                                              } else {
                                                dthen12
                                              })
                                            }
                                            
                                          } else {
                                            (true, if ((dcond12 >= 0)) {
                                              dcond12
                                            } else {
                                              0
                                            })
                                          }
                                        }
                                        
                                        (relse11, if ((dcond11 >= delse11)) {
                                          dcond11
                                        } else {
                                          delse11
                                        })
                                      }
                                      
                                    }
                                  }
                                  
                                  (relse10, if ((dcond10 >= delse10)) {
                                    dcond10
                                  } else {
                                    delse10
                                  })
                                }
                                
                              }
                            }
                            
                            (br1, (bd1 + 1))
                          }
                          
                        }
                        
                        (relse9, if ((dcond8 >= delse9)) {
                          dcond8
                        } else {
                          delse9
                        })
                      }
                      
                    }
                  }
                  
                  (relse7, if ((dcond6 >= delse7)) {
                    dcond6
                  } else {
                    delse7
                  })
                }
                
              }
            }
            
            (relse5, if ((dcond4 >= delse5)) {
              dcond4
            } else {
              delse5
            })
          }
          
        }
      }
      
      (br, (bd + 1))
    }
    
  }
  } ensuring(res11 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}

  def mult(x : Int, y : Int) : Int = {locally {
    val r = locally {
      val px = if ((x < 0)) {
        -(x)
      } else {
        x
      }
      locally {
        val py = if ((y < 0)) {
          -(y)
        } else {
          y
        }
        pmult(px, py)
      }
      
    }
    
    if ((((x >= 0) && (y >= 0)) || ((x < 0) && (y < 0)))) {
      r
    } else {
      -(r)
    }
  }
  }

  def pmult(x : Int, y : Int) : Int = {if (((x == 0) || (y == 0))) {
    0
  } else {
    (pmult((x - 1), y) + y)
  }} ensuring(res => ((res >= 0) && (((x == 0) || (y == 0)) || (res == (pmult(x, (y - 1)) + x)))))
}

Function: Dis1 template --> (res12._2 ≤ (((a?1 * max(0, (n - x))) + (b?1 * max(0, (m - y)))) + c?1))
Function: Dis2 template --> (res15._2 ≤ (((a?2 * max(0, (n - x))) + (b?2 * max(0, (n - z)))) + c?2))
Function: Dis4 template --> ((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ (res14._2 ≤ ((a?4 * max(0, (n - x))) + c?4))) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ (res14._2 ≤ ((d?1 * max(0, x)) + e?1))))
Function: Dis3 template --> (res13._2 ≤ ((a?3 * max(0, (n - x))) + c?3))
Function: Equals template --> (res11._2 ≤ (((a? * mult((k + 1), (length(s1) + length(s2)))) + (b? * size(str1))) + e?))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(pmult, size, Dis4, mult, Dis2, length, sizeBound, Equals, Dis1, Dis3)
[[34m Info  [0m] - considering function Dis4...
[[34m Info  [0m] Body: if (((x > n) ∨ (x < 0)))
            (0, if ((2 ≥ 0))
              2
            else
              0)
          else
            (let (relse2,delse2 := if (b)
              (let (rthen3,dthen3 := (let (e2,d30 := Dis4((x + t), b, t, n)) in
                (e2, (2 + d30)))) in
                (rthen3, if ((0 ≥ dthen3))
                  0
                else
                  dthen3))
            else
              (let (relse3,delse3 := (let (e3,d37 := Dis4((x - t), b, t, n)) in
                (e3, (2 + d37)))) in
                (relse3, if ((0 ≥ delse3))
                  0
                else
                  delse3))) in
              (relse2, if ((2 ≥ delse2))
                2
              else
                delse2))
[[34m Info  [0m] Post: true
falttened Body: ((res14 == ifres) && ((((x > n) || (x < 0)) && (ifres == tp) && (arg == 0) && (tp == (arg, ifres1)) && (((2 >= 0) && (ifres1 == 2)) || ((2 < 0) && (ifres1 == 0)))) || ((x <= n) && (x >= 0) && (ifres == tp1) && (tp1 == (relse2, ifres2)) && ((b && (ifres3 == tp2) && (tp2 == (rthen3, ifres4)) && (d30 == ts) && (ts == tres._2) && (rthen3 == e2) && (dthen3 == (2 + d30)) && (e2 == ts1) && (ts1 == tres._1) && (((0 >= dthen3) && (ifres4 == 0)) || ((0 < dthen3) && (ifres4 == dthen3))) && (tres == r170) && (arg1 == (x + t)) && (r170 == Dis4(arg1, b, t, n))) || (!(b) && (ifres3 == tp3) && (tp3 == (relse3, ifres5)) && (relse3 == e3) && (tres1 == r171) && (arg2 == (x - t)) && (r171 == Dis4(arg2, b, t, n)) && (e3 == ts2) && (ts2 == tres1._1) && (((0 >= delse3) && (ifres5 == 0)) || ((0 < delse3) && (ifres5 == delse3))) && (d37 == ts3) && (ts3 == tres1._2) && (delse3 == (2 + d37)))) && (relse2 == ts4) && (ts4 == ifres3._1) && (delse2 == ts5) && (ts5 == ifres3._2) && (((2 >= delse2) && (ifres2 == 2)) || ((2 < delse2) && (ifres2 == delse2))))))
Flattened Post: ((((!(b) || (t < 0)) && (b || (t >= 0))) || ((ts6 > ((a?4 * r172) + c?4)) && (ts6 == res14._2) && (arg3 == 0) && (arg4 == (n - x)) && (r172 == max(arg3, arg4)))) && (((b || (t < 0)) && (!(b) || (t >= 0))) || ((ts7 > ((d?1 * r173) + e?1)) && (ts7 == res14._2) && (arg5 == 0) && (r173 == max(arg5, x)))))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 0
solving...
solved... in 0.014s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + -4) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 21
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 11 + 9
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/4
Unrolled calls: Set((r172 == max(arg3, arg4)))
Inlining (r172 == max(arg3, arg4))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((0 * max(0, x)) + (1 * res14._2)) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + -4) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 15 + 9
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/7
Unrolled calls: Set((r173 == max(arg5, x)), (r179 == max(arg14, arg1)))
Inlining (r173 == max(arg5, x))
Inlining (r179 == max(arg14, arg1))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 19 + 0
solving...
solved... in 0.009s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (-2 * max(0, (n - x)))) + -4) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 17 + 19
solving...
solved... in 0.014s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/5
Unrolled calls: Set((r180 == max(arg15, arg16)))
Inlining (r180 == max(arg15, arg16))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-1 * max(0, x)) + (1 * res14._2)) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 21 + 10
solving...
solved... in 0.01s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, (n - x)))) + -2) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-1 * max(0, x))) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 21 + 31
solving...
solved... in 0.011s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((-24 * max(0, (n - x))) + (8 * res14._2)) + -1) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-1 * max(0, x)) + (1 * res14._2)) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 23 + 52
solving...
solved... in 0.023s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/4
Unrolled calls: Set((r171 == Dis4(arg2, b, t, n)))
Unrolling (r171 == Dis4(arg2, b, t, n))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.008s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-1 * max(0, x))) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 17 + 10
solving...
solved... in 0.008s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((8 * res14._2) + (-24 * max(0, x))) + -1) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 17 + 27
solving...
solved... in 0.01s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((8 * res14._2) + (-40 * max(0, x))) + -1) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 44
solving...
solved... in 0.01s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 22 + 53
solving...
solved... in 0.013s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 21 + 75
solving...
solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/5
Unrolled calls: Set((r181 == max(arg17, arg2)))
Inlining (r181 == max(arg17, arg2))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((0 * max(0, x)) + (1 * res14._2)) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.009s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-1 * max(0, x)) + (1 * res14._2)) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 17 + 10
solving...
solved... in 0.007s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((8 * res14._2) + (-24 * max(0, x))) + -1) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 27
solving...
solved... in 0.01s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-4 * max(0, x)) + (1 * res14._2)) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 23 + 36
solving...
solved... in 0.011s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-4 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 21 + 59
solving...
solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/8
Unrolled calls: Set((r170 == Dis4(arg1, b, t, n)))
Unrolling (r170 == Dis4(arg1, b, t, n))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((0 * max(0, x)) + (1 * res14._2)) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-1 * max(0, x)) + (1 * res14._2)) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 24 + 10
solving...
solved... in 0.009s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-1 * max(0, x)) + (8 * res14._2)) + -16) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 17 + 34
solving...
solved... in 0.014s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-16 * max(0, x)) + (128 * res14._2)) + -248) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 23 + 51
solving...
solved... in 0.019s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-3 * max(0, x)) + (1 * res14._2)) + -2) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 23 + 74
solving...
solved... in 0.021s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 97
solving...
solved... in 0.022s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + -4) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 23 + 106
solving...
solved... in 0.029s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (2 * res14._2)) + -5) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 22 + 129
solving...
solved... in 0.028s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/9
Unrolled calls: Set((r178 == max(arg12, arg13)))
Inlining (r178 == max(arg12, arg13))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, x))) + 0) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-1 * max(0, x))) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 30 + 10
solving...
solved... in 0.012s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-4 * max(0, x)) + (1 * res14._2)) + 1) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 40
solving...
solved... in 0.014s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((0 * max(0, x)) + (2 * res14._2)) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 30 + 49
solving...
solved... in 0.021s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -3) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 23 + 79
solving...
solved... in 0.026s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + 0) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 102
solving...
solved... in 0.026s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((0 * max(0, (n - x))) + (1 * res14._2)) + -4) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-3 * max(0, x)) + (1 * res14._2)) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 12
# of atomic predicates: 29 + 111
solving...
solved... in 0.039s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((8 * res14._2) + (0 * max(0, (n - x)))) + -17) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 33 + 140
solving...
solved... in 0.049s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, (n - x)))) + -3) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, x))) + -5) ≤ 0)))
Function: Dis4--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 22 + 173
solving...
solved... in 0.055s
candidate Invariants
Dis4-->((((b ∧ (t ≥ 0)) ∨ (¬(b) ∧ (t < 0))) ∧ ((((1 * res14._2) + (-3 * max(0, (n - x)))) + -5) ≤ 0)) ∨ (((¬(b) ∧ (t ≥ 0)) ∨ (b ∧ (t < 0))) ∧ ((((-3 * max(0, x)) + (1 * res14._2)) + -5) ≤ 0)))
Nesting level: a?4-->1
Nesting level: c?4-->0
Nesting level: d?1-->1
Nesting level: e?1-->0
minimizing...
Minimizing variable: a?4 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: d?1 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: c?4 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimizing variable: e?1 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: Dis4 --> ((((b && (t >= 0)) || (!(b) && (t < 0))) && ((((-2 * max(0, (n - x))) + (1 * res14._2)) + -4) <= 0)) || (((!(b) && (t >= 0)) || (b && (t < 0))) && ((((1 * res14._2) + (-2 * max(0, x))) + -4) <= 0)))
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function Dis2...
[[34m Info  [0m] Body: if ((x ≥ n))
            (0, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse15,delse15 := if ((z > x))
              (let (rthen16,dthen16 := (let (e12,d174 := Dis2((x + 1), z, n)) in
                (e12, (2 + d174)))) in
                (rthen16, if ((1 ≥ dthen16))
                  1
                else
                  dthen16))
            else
              (let (relse16,delse16 := (let (e13,d180 := Dis2(x, (z + 1), n)) in
                (e13, (2 + d180)))) in
                (relse16, if ((1 ≥ delse16))
                  1
                else
                  delse16))) in
              (relse15, if ((1 ≥ delse15))
                1
              else
                delse15))
[[34m Info  [0m] Post: true
falttened Body: ((res15 == ifres24) && (((x >= n) && (ifres24 == tp12) && (arg150 == 0) && (tp12 == (arg150, ifres25)) && (((1 >= 0) && (ifres25 == 1)) || ((1 < 0) && (ifres25 == 0)))) || ((x < n) && (ifres24 == tp13) && (tp13 == (relse15, ifres26)) && (((z > x) && (ifres27 == tp14) && (tp14 == (rthen16, ifres28)) && (dthen16 == (2 + d174)) && (e12 == ts112) && (ts112 == tres6._1) && (d174 == ts113) && (ts113 == tres6._2) && (((1 >= dthen16) && (ifres28 == 1)) || ((1 < dthen16) && (ifres28 == dthen16))) && (tres6 == r270) && (arg151 == (x + 1)) && (r270 == Dis2(arg151, z, n)) && (rthen16 == e12)) || ((z <= x) && (ifres27 == tp15) && (tp15 == (relse16, ifres29)) && (e13 == ts114) && (ts114 == tres7._1) && (delse16 == (2 + d180)) && (relse16 == e13) && (d180 == ts115) && (ts115 == tres7._2) && (((1 >= delse16) && (ifres29 == 1)) || ((1 < delse16) && (ifres29 == delse16))) && (tres7 == r271) && (arg152 == (z + 1)) && (r271 == Dis2(x, arg152, n)))) && (relse15 == ts116) && (ts116 == ifres27._1) && (delse15 == ts117) && (ts117 == ifres27._2) && (((1 >= delse15) && (ifres26 == 1)) || ((1 < delse15) && (ifres26 == delse15))))))
Flattened Post: ((ts118 > (((a?2 * r272) + (b?2 * r273)) + c?2)) && (arg155 == 0) && (arg154 == (n - x)) && (r272 == max(arg153, arg154)) && (r273 == max(arg155, arg156)) && (arg153 == 0) && (arg156 == (n - z)) && (ts118 == res15._2))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis2-->(((((1 * res15._2) + (0 * max(0, (n - z)))) + (0 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis2-->(((((0 * max(0, (n - z))) + (0 * max(0, (n - x)))) + (1 * res15._2)) + -3) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 22
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 11 + 10
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/4
Unrolled calls: Set((r272 == max(arg153, arg154)), (r273 == max(arg155, arg156)))
Inlining (r272 == max(arg153, arg154))
Inlining (r273 == max(arg155, arg156))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis2-->(((((1 * res15._2) + (0 * max(0, (n - x)))) + (0 * max(0, (n - z)))) + 0) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 20 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis2-->(((((0 * max(0, (n - x))) + (1 * max(0, (n - z)))) + (1 * res15._2)) + 4) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 20
solving...
solved... in 0.01s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/6
Unrolled calls: Set((r279 == max(arg167, arg168)), (r278 == max(arg165, arg166)))
Inlining (r279 == max(arg167, arg168))
Inlining (r278 == max(arg165, arg166))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis2-->(((((0 * max(0, (n - x))) + (1 * res15._2)) + (0 * max(0, (n - z)))) + 0) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 0
solving...
solved... in 0.007s
candidate Invariants
Dis2-->(((((0 * max(0, (n - z))) + (1 * max(0, (n - x)))) + (1 * res15._2)) + 4) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 22 + 21
solving...
solved... in 0.013s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/4
Unrolled calls: Set((r280 == max(arg169, arg170)), (r281 == max(arg171, arg172)))
Inlining (r280 == max(arg169, arg170))
Inlining (r281 == max(arg171, arg172))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis2-->(((((1 * res15._2) + (0 * max(0, (n - z)))) + (0 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 24 + 0
solving...
solved... in 0.008s
candidate Invariants
Dis2-->(((((1 * res15._2) + (1 * max(0, (n - x)))) + (-4 * max(0, (n - z)))) + -1) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 21 + 24
solving...
solved... in 0.012s
candidate Invariants
Dis2-->(((((2 * max(0, (n - z))) + (-1 * max(0, (n - x)))) + (2 * res15._2)) + 8) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 22 + 45
solving...
solved... in 0.019s
candidate Invariants
Dis2-->(((((-3 * max(0, (n - z))) + (-3 * max(0, (n - x)))) + (1 * res15._2)) + 8) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 8
# of atomic predicates: 19 + 67
solving...
solved... in 0.019s
candidate Invariants
Dis2-->(((((-3 * max(0, (n - z))) + (-3 * max(0, (n - x)))) + (1 * res15._2)) + 3) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 86
solving...
solved... in 0.02s
candidate Invariants
Dis2-->(((((-3 * max(0, (n - z))) + (-3 * max(0, (n - x)))) + (1 * res15._2)) + 1) ≤ 0)
Function: Dis2--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 97
solving...
solved... in 0.021s
candidate Invariants
Dis2-->(((((-3 * max(0, (n - x))) + (-3 * max(0, (n - z)))) + (1 * res15._2)) + -2) ≤ 0)
Nesting level: a?2-->1
Nesting level: b?2-->1
Nesting level: c?2-->0
minimizing...
Minimizing variable: a?2 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: b?2 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: c?2 Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: Dis2 --> (((((-2 * max(0, (n - z))) + (1 * res15._2)) + (-2 * max(0, (n - x)))) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function Equals...
[[34m Info  [0m] Body: (let (vr := (str1, str2)) in
            (let (br,bd := (let (dcond4 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
              (1 + (1 + 1))
            else
              (1 + (1 + 1)))) in
              if ((vr._1.isInstanceOf[Cons] ∧ vr._2.isInstanceOf[Cons]))
                (let (rthen4,dthen4 := (let (dcond5 := (1 + (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                  (1 + (1 + 1))
                else
                  (1 + (1 + 1))))) in
                  if ((vr._1.head ≠ vr._2.head))
                    (false, if ((dcond5 ≥ 0))
                      dcond5
                    else
                      0)
                  else
                    (let (relse4,delse4 := (let (e4,d60 := Equals(vr._1.tail, vr._2.tail, s1, s2, k)) in
                      (e4, ((1 + d60) + if ((if ((if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                        (1 + (1 + 1))
                      else
                        (1 + (1 + 1)) ≥ 0))
                        if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                          (1 + (1 + 1))
                        else
                          (1 + (1 + 1))
                      else
                        0 ≥ 0))
                        if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                          (1 + (1 + 1))
                        else
                          (1 + (1 + 1)) ≥ 0))
                          if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                            (1 + (1 + 1))
                          else
                            (1 + (1 + 1))
                        else
                          0
                      else
                        0 ≥ 0))
                        if ((if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                          (1 + (1 + 1))
                        else
                          (1 + (1 + 1)) ≥ 0))
                          if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                            (1 + (1 + 1))
                          else
                            (1 + (1 + 1))
                        else
                          0 ≥ 0))
                          if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                            (1 + (1 + 1))
                          else
                            (1 + (1 + 1)) ≥ 0))
                            if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                              (1 + (1 + 1))
                            else
                              (1 + (1 + 1))
                          else
                            0
                        else
                          0
                      else
                        0)))) in
                      (relse4, if ((dcond5 ≥ delse4))
                        dcond5
                      else
                        delse4)))) in
                  (rthen4, if ((dcond4 ≥ dthen4))
                    dcond4
                  else
                    dthen4))
              else
                (let (relse5,delse5 := (let (dcond6 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                  (1 + (1 + 1))
                else
                  (1 + (1 + 1)))) in
                  if ((vr._1.isInstanceOf[Cons] ∧ vr._2.isInstanceOf[Nil]))
                    (let (rthen6,dthen6 := if (s2.isInstanceOf[Chunk])
                      (let (rthen7,dthen7 := (let (e5,d77 := Equals(str1, s2.str, s1, s2.next, k)) in
                        (e5, (2 + d77)))) in
                        (rthen7, if ((1 ≥ dthen7))
                          1
                        else
                          dthen7))
                    else
                      (false, if ((1 ≥ 0))
                        1
                      else
                        0)) in
                      (rthen6, if ((dcond6 ≥ dthen6))
                        dcond6
                      else
                        dthen6))
                  else
                    (let (relse7,delse7 := (let (dcond8 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                      (1 + (1 + 1))
                    else
                      (1 + (1 + 1)))) in
                      if ((vr._1.isInstanceOf[Nil] ∧ vr._2.isInstanceOf[Cons]))
                        (let (rthen8,dthen8 := if (s1.isInstanceOf[Chunk])
                          (let (rthen9,dthen9 := (let (e6,d92 := Equals(s1.str, str2, s1.next, s2, k)) in
                            (e6, (2 + d92)))) in
                            (rthen9, if ((1 ≥ dthen9))
                              1
                            else
                              dthen9))
                        else
                          (false, if ((1 ≥ 0))
                            1
                          else
                            0)) in
                          (rthen8, if ((dcond8 ≥ dthen8))
                            dcond8
                          else
                            dthen8))
                      else
                        (let (relse9,delse9 := (let (vr1 := (s1, s2)) in
                          (let (br1,bd1 := (let (dcond10 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                            (1 + (1 + 1))
                          else
                            (1 + (1 + 1)))) in
                            if ((vr1._1.isInstanceOf[Chunk] ∧ vr1._2.isInstanceOf[Chunk]))
                              (let (rthen10,dthen10 := (let (e7,d108 := Equals(vr1._1.str, vr1._2.str, vr1._1.next, vr1._2.next, k)) in
                                (e7, ((1 + d108) + if ((if ((if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                  (1 + (1 + 1))
                                else
                                  (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                  if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1))
                                else
                                  (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                  if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                      (1 + (1 + 1))
                                    else
                                      (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1))
                                else
                                  (1 + (1 + 1)) ≥ 0))
                                  if ((if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                      (1 + (1 + 1))
                                    else
                                      (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    if ((if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                      (1 + (1 + 1))
                                    else
                                      (1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                      if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                        (1 + (1 + 1))
                                      else
                                        (1 + (1 + 1))
                                    else
                                      (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1))
                                else
                                  0)))) in
                                (rthen10, if ((dcond10 ≥ dthen10))
                                  dcond10
                                else
                                  dthen10))
                            else
                              (let (relse10,delse10 := (let (dcond11 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                (1 + (1 + 1))
                              else
                                (1 + (1 + 1)))) in
                                if ((vr1._1.isInstanceOf[Empty] ∧ vr1._2.isInstanceOf[Chunk]))
                                  (let (rthen11,dthen11 := (let (e8,d128 := Equals(str1, vr1._2.str, s1, vr1._2.next, k)) in
                                    (e8, ((1 + d128) + if ((if ((if ((if ((0 ≥ (1 + (1 + 1))))
                                      0
                                    else
                                      (1 + (1 + 1)) ≥ 0))
                                      if ((0 ≥ (1 + (1 + 1))))
                                        0
                                      else
                                        (1 + (1 + 1))
                                    else
                                      0 ≥ (1 + (1 + 1))))
                                      if ((if ((0 ≥ (1 + (1 + 1))))
                                        0
                                      else
                                        (1 + (1 + 1)) ≥ 0))
                                        if ((0 ≥ (1 + (1 + 1))))
                                          0
                                        else
                                          (1 + (1 + 1))
                                      else
                                        0
                                    else
                                      (1 + (1 + 1)) ≥ 0))
                                      if ((if ((if ((0 ≥ (1 + (1 + 1))))
                                        0
                                      else
                                        (1 + (1 + 1)) ≥ 0))
                                        if ((0 ≥ (1 + (1 + 1))))
                                          0
                                        else
                                          (1 + (1 + 1))
                                      else
                                        0 ≥ (1 + (1 + 1))))
                                        if ((if ((0 ≥ (1 + (1 + 1))))
                                          0
                                        else
                                          (1 + (1 + 1)) ≥ 0))
                                          if ((0 ≥ (1 + (1 + 1))))
                                            0
                                          else
                                            (1 + (1 + 1))
                                        else
                                          0
                                      else
                                        (1 + (1 + 1))
                                    else
                                      0)))) in
                                    (rthen11, if ((dcond11 ≥ dthen11))
                                      dcond11
                                    else
                                      dthen11))
                                else
                                  (let (relse11,delse11 := (let (dcond12 := (1 + if (((1 + (1 + 1)) ≥ (1 + (1 + 1))))
                                    (1 + (1 + 1))
                                  else
                                    (1 + (1 + 1)))) in
                                    if ((vr1._1.isInstanceOf[Chunk] ∧ vr1._2.isInstanceOf[Empty]))
                                      (let (rthen12,dthen12 := (let (e9,d144 := Equals(vr1._1.str, str2, vr1._1.next, s2, k)) in
                                        (e9, ((1 + d144) + if ((if ((if ((if (((1 + (1 + 1)) ≥ 0))
                                          (1 + (1 + 1))
                                        else
                                          0 ≥ (1 + (1 + 1))))
                                          if (((1 + (1 + 1)) ≥ 0))
                                            (1 + (1 + 1))
                                          else
                                            0
                                        else
                                          (1 + (1 + 1)) ≥ 0))
                                          if ((if (((1 + (1 + 1)) ≥ 0))
                                            (1 + (1 + 1))
                                          else
                                            0 ≥ (1 + (1 + 1))))
                                            if (((1 + (1 + 1)) ≥ 0))
                                              (1 + (1 + 1))
                                            else
                                              0
                                          else
                                            (1 + (1 + 1))
                                        else
                                          0 ≥ 0))
                                          if ((if ((if (((1 + (1 + 1)) ≥ 0))
                                            (1 + (1 + 1))
                                          else
                                            0 ≥ (1 + (1 + 1))))
                                            if (((1 + (1 + 1)) ≥ 0))
                                              (1 + (1 + 1))
                                            else
                                              0
                                          else
                                            (1 + (1 + 1)) ≥ 0))
                                            if ((if (((1 + (1 + 1)) ≥ 0))
                                              (1 + (1 + 1))
                                            else
                                              0 ≥ (1 + (1 + 1))))
                                              if (((1 + (1 + 1)) ≥ 0))
                                                (1 + (1 + 1))
                                              else
                                                0
                                            else
                                              (1 + (1 + 1))
                                          else
                                            0
                                        else
                                          0)))) in
                                        (rthen12, if ((dcond12 ≥ dthen12))
                                          dcond12
                                        else
                                          dthen12))
                                    else
                                      (true, if ((dcond12 ≥ 0))
                                        dcond12
                                      else
                                        0))) in
                                    (relse11, if ((dcond11 ≥ delse11))
                                      dcond11
                                    else
                                      delse11)))) in
                                (relse10, if ((dcond10 ≥ delse10))
                                  dcond10
                                else
                                  delse10)))) in
                            (br1, (bd1 + 1))))) in
                          (relse9, if ((dcond8 ≥ delse9))
                            dcond8
                          else
                            delse9)))) in
                      (relse7, if ((dcond6 ≥ delse7))
                        dcond6
                      else
                        delse7)))) in
                  (relse5, if ((dcond4 ≥ delse5))
                    dcond4
                  else
                    delse5)))) in
              (br, (bd + 1))))
[[34m Info  [0m] Post: true
falttened Body: (r306 && (r306 == sizeBound(s1, k)) && r307 && (r307 == sizeBound(s2, k)) && (r308 <= k) && (r308 == size(str1)) && (r309 <= k) && (r309 == size(str2)) && (k >= 0) && (res11 == tp16) && (arg221 == (bd + 1)) && (tp16 == (br, arg221)) && (bd == ts135) && (ts135 == ifres36._2) && (!(br) || (ts136 && (ts136 == ifres36._1))) && ((!(ts137) && (ts137 == ifres36._1)) || br) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres229 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres229 == (1 + (1 + 1))))) && (dcond4 == (1 + ifres229)) && (vr == tp17) && (tp17 == (str1, str2)) && ((ci && (ts138 == vr._1) && (ci == ts138.isInstanceOf[Cons]) && ci1 && (ts139 == vr._2) && (ci1 == ts139.isInstanceOf[Cons]) && (ifres36 == tp18) && (tp18 == (rthen4, ifres37)) && (!(rthen4) || (ts140 && (ts140 == ifres38._1))) && ((!(ts141) && (ts141 == ifres38._1)) || rthen4) && (dthen4 == ts142) && (ts142 == ifres38._2) && (dcond5 == (1 + (1 + ifres81))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres81 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres81 == (1 + (1 + 1))))) && (((dcond4 >= dthen4) && (ifres37 == dcond4)) || ((dcond4 < dthen4) && (ifres37 == dthen4))) && (((((cs < cs1) && (ts143 == vr._1) && (cs == ts143.head) && (ts144 == vr._2) && (cs1 == ts144.head)) || ((cs2 > cs3) && (ts145 == vr._1) && (cs2 == ts145.head) && (ts146 == vr._2) && (cs3 == ts146.head))) && (ifres38 == tp19) && !(arg222) && (tp19 == (arg222, ifres39)) && (((dcond5 >= 0) && (ifres39 == dcond5)) || ((dcond5 < 0) && (ifres39 == 0)))) || ((cs4 == cs5) && (ts147 == vr._1) && (cs4 == ts147.head) && (ts148 == vr._2) && (cs5 == ts148.head) && (ifres38 == tp20) && (tp20 == (relse4, ifres40)) && (d60 == ts149) && (ts149 == tres8._2) && (((ifres42 >= 0) && (((ifres43 >= 0) && (((ifres44 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres44 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres44 == (1 + (1 + 1))))) && (ifres43 == ifres45) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres45 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres45 == (1 + (1 + 1)))))) || ((ifres46 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres46 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres46 == (1 + (1 + 1))))) && (ifres43 == 0))) && (ifres42 == ifres47) && (((ifres48 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres48 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres48 == (1 + (1 + 1))))) && (ifres47 == ifres49) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres49 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres49 == (1 + (1 + 1)))))) || ((ifres50 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres50 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres50 == (1 + (1 + 1))))) && (ifres47 == 0)))) || ((ifres51 < 0) && (((ifres52 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres52 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres52 == (1 + (1 + 1))))) && (ifres51 == ifres53) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres53 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres53 == (1 + (1 + 1)))))) || ((ifres54 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres54 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres54 == (1 + (1 + 1))))) && (ifres51 == 0))) && (ifres42 == 0))) && (ifres41 == ifres55) && (((ifres56 >= 0) && (((ifres57 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres57 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres57 == (1 + (1 + 1))))) && (ifres56 == ifres58) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres58 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres58 == (1 + (1 + 1)))))) || ((ifres59 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres59 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres59 == (1 + (1 + 1))))) && (ifres56 == 0))) && (ifres55 == ifres60) && (((ifres61 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres61 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres61 == (1 + (1 + 1))))) && (ifres60 == ifres62) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres62 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres62 == (1 + (1 + 1)))))) || ((ifres63 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres63 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres63 == (1 + (1 + 1))))) && (ifres60 == 0)))) || ((ifres64 < 0) && (((ifres65 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres65 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres65 == (1 + (1 + 1))))) && (ifres64 == ifres66) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres66 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres66 == (1 + (1 + 1)))))) || ((ifres67 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres67 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres67 == (1 + (1 + 1))))) && (ifres64 == 0))) && (ifres55 == 0)))) || ((ifres68 < 0) && (((ifres69 >= 0) && (((ifres70 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres70 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres70 == (1 + (1 + 1))))) && (ifres69 == ifres71) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres71 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres71 == (1 + (1 + 1)))))) || ((ifres72 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres72 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres72 == (1 + (1 + 1))))) && (ifres69 == 0))) && (ifres68 == ifres73) && (((ifres74 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres74 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres74 == (1 + (1 + 1))))) && (ifres73 == ifres75) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres75 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres75 == (1 + (1 + 1)))))) || ((ifres76 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres76 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres76 == (1 + (1 + 1))))) && (ifres73 == 0)))) || ((ifres77 < 0) && (((ifres78 >= 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres78 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres78 == (1 + (1 + 1))))) && (ifres77 == ifres79) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres79 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres79 == (1 + (1 + 1)))))) || ((ifres80 < 0) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres80 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres80 == (1 + (1 + 1))))) && (ifres77 == 0))) && (ifres68 == 0))) && (ifres41 == 0))) && (((dcond5 >= delse4) && (ifres40 == dcond5)) || ((dcond5 < delse4) && (ifres40 == delse4))) && (tres8 == r310) && (r310 == Equals(cs6, cs7, s1, s2, k)) && (cs7 == ts151.tail) && (ts151 == vr._2) && (ts150 == vr._1) && (cs6 == ts150.tail) && (delse4 == ((1 + d60) + ifres41)) && (!(relse4) || e4) && (!(e4) || relse4) && (!(e4) || (ts152 && (ts152 == tres8._1))) && ((!(ts153) && (ts153 == tres8._1)) || e4)))) || (((!(ci2) && (ts154 == vr._1) && (ci2 == ts154.isInstanceOf[Cons])) || (!(ci3) && (ts155 == vr._2) && (ci3 == ts155.isInstanceOf[Cons]))) && (ifres36 == tp21) && (tp21 == (relse5, ifres82)) && (dcond6 == (1 + ifres228)) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres228 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres228 == (1 + (1 + 1))))) && (((dcond4 >= delse5) && (ifres82 == dcond4)) || ((dcond4 < delse5) && (ifres82 == delse5))) && (!(relse5) || (ts156 && (ts156 == ifres83._1))) && ((!(ts157) && (ts157 == ifres83._1)) || relse5) && ((ci4 && (ts158 == vr._1) && (ci4 == ts158.isInstanceOf[Cons]) && ci5 && (ts159 == vr._2) && (ci5 == ts159.isInstanceOf[Nil]) && (ifres83 == tp22) && (tp22 == (rthen6, ifres84)) && ((ci6 && (ci6 == s2.isInstanceOf[Chunk]) && (ifres85 == tp23) && (tp23 == (rthen7, ifres86)) && (dthen7 == (2 + d77)) && (((1 >= dthen7) && (ifres86 == 1)) || ((1 < dthen7) && (ifres86 == dthen7))) && (tres9 == r311) && (cs8 == s2.str) && (cs9 == s2.next) && (r311 == Equals(str1, cs8, s1, cs9, k)) && (!(rthen7) || e5) && (!(e5) || rthen7) && (d77 == ts160) && (ts160 == tres9._2) && (!(e5) || (ts161 && (ts161 == tres9._1))) && ((!(ts162) && (ts162 == tres9._1)) || e5)) || (!(ci7) && (ci7 == s2.isInstanceOf[Chunk]) && (ifres85 == tp24) && !(arg223) && (tp24 == (arg223, ifres87)) && (((1 >= 0) && (ifres87 == 1)) || ((1 < 0) && (ifres87 == 0))))) && (!(rthen6) || (ts163 && (ts163 == ifres85._1))) && ((!(ts164) && (ts164 == ifres85._1)) || rthen6) && (dthen6 == ts165) && (ts165 == ifres85._2) && (((dcond6 >= dthen6) && (ifres84 == dcond6)) || ((dcond6 < dthen6) && (ifres84 == dthen6)))) || (((!(ci8) && (ts166 == vr._1) && (ci8 == ts166.isInstanceOf[Cons])) || (!(ci9) && (ts167 == vr._2) && (ci9 == ts167.isInstanceOf[Nil]))) && (ifres83 == tp25) && (tp25 == (relse7, ifres88)) && ((ci10 && (ts168 == vr._1) && (ci10 == ts168.isInstanceOf[Nil]) && ci11 && (ts169 == vr._2) && (ci11 == ts169.isInstanceOf[Cons]) && (ifres89 == tp26) && (tp26 == (rthen8, ifres90)) && ((ci12 && (ci12 == s1.isInstanceOf[Chunk]) && (ifres91 == tp27) && (tp27 == (rthen9, ifres92)) && (tres10 == r312) && (cs10 == s1.str) && (cs11 == s1.next) && (r312 == Equals(cs10, str2, cs11, s2, k)) && (((1 >= dthen9) && (ifres92 == 1)) || ((1 < dthen9) && (ifres92 == dthen9))) && (!(rthen9) || e6) && (!(e6) || rthen9) && (!(e6) || (ts170 && (ts170 == tres10._1))) && ((!(ts171) && (ts171 == tres10._1)) || e6) && (dthen9 == (2 + d92)) && (d92 == ts172) && (ts172 == tres10._2)) || (!(ci13) && (ci13 == s1.isInstanceOf[Chunk]) && (ifres91 == tp28) && !(arg224) && (tp28 == (arg224, ifres93)) && (((1 >= 0) && (ifres93 == 1)) || ((1 < 0) && (ifres93 == 0))))) && (!(rthen8) || (ts173 && (ts173 == ifres91._1))) && ((!(ts174) && (ts174 == ifres91._1)) || rthen8) && (dthen8 == ts175) && (ts175 == ifres91._2) && (((dcond8 >= dthen8) && (ifres90 == dcond8)) || ((dcond8 < dthen8) && (ifres90 == dthen8)))) || (((!(ci14) && (ts176 == vr._1) && (ci14 == ts176.isInstanceOf[Nil])) || (!(ci15) && (ts177 == vr._2) && (ci15 == ts177.isInstanceOf[Cons]))) && (ifres89 == tp29) && (tp29 == (relse9, ifres94)) && (vr1 == tp30) && (tp30 == (s1, s2)) && (dcond10 == (1 + ifres226)) && (!(relse9) || br1) && (!(br1) || relse9) && (!(br1) || (ts178 && (ts178 == ifres95._1))) && ((!(ts179) && (ts179 == ifres95._1)) || br1) && ((ci16 && (ts180 == vr1._1) && (ci16 == ts180.isInstanceOf[Chunk]) && ci17 && (ts181 == vr1._2) && (ci17 == ts181.isInstanceOf[Chunk]) && (ifres95 == tp31) && (tp31 == (rthen10, ifres96)) && (d108 == ts182) && (ts182 == tres11._2) && (dthen10 == ((1 + d108) + ifres97)) && (((ifres98 >= 0) && (((ifres99 >= (1 + (1 + 1))) && (((ifres100 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres100 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres100 == (1 + (1 + 1))))) && (ifres99 == ifres101) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres101 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres101 == (1 + (1 + 1)))))) || ((ifres102 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres102 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres102 == (1 + (1 + 1))))) && (ifres99 == (1 + (1 + 1))))) && (ifres98 == ifres103) && (((ifres104 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres104 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres104 == (1 + (1 + 1))))) && (ifres103 == ifres105) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres105 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres105 == (1 + (1 + 1)))))) || ((ifres106 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres106 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres106 == (1 + (1 + 1))))) && (ifres103 == (1 + (1 + 1)))))) || ((ifres107 < (1 + (1 + 1))) && (((ifres108 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres108 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres108 == (1 + (1 + 1))))) && (ifres107 == ifres109) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres109 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres109 == (1 + (1 + 1)))))) || ((ifres110 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres110 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres110 == (1 + (1 + 1))))) && (ifres107 == (1 + (1 + 1))))) && (ifres98 == (1 + (1 + 1))))) && (ifres97 == ifres111) && (((ifres112 >= (1 + (1 + 1))) && (((ifres113 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres113 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres113 == (1 + (1 + 1))))) && (ifres112 == ifres114) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres114 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres114 == (1 + (1 + 1)))))) || ((ifres115 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres115 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres115 == (1 + (1 + 1))))) && (ifres112 == (1 + (1 + 1))))) && (ifres111 == ifres116) && (((ifres117 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres117 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres117 == (1 + (1 + 1))))) && (ifres116 == ifres118) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres118 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres118 == (1 + (1 + 1)))))) || ((ifres119 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres119 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres119 == (1 + (1 + 1))))) && (ifres116 == (1 + (1 + 1)))))) || ((ifres120 < (1 + (1 + 1))) && (((ifres121 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres121 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres121 == (1 + (1 + 1))))) && (ifres120 == ifres122) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres122 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres122 == (1 + (1 + 1)))))) || ((ifres123 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres123 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres123 == (1 + (1 + 1))))) && (ifres120 == (1 + (1 + 1))))) && (ifres111 == (1 + (1 + 1)))))) || ((ifres124 < 0) && (((ifres125 >= (1 + (1 + 1))) && (((ifres126 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres126 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres126 == (1 + (1 + 1))))) && (ifres125 == ifres127) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres127 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres127 == (1 + (1 + 1)))))) || ((ifres128 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres128 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres128 == (1 + (1 + 1))))) && (ifres125 == (1 + (1 + 1))))) && (ifres124 == ifres129) && (((ifres130 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres130 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres130 == (1 + (1 + 1))))) && (ifres129 == ifres131) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres131 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres131 == (1 + (1 + 1)))))) || ((ifres132 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres132 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres132 == (1 + (1 + 1))))) && (ifres129 == (1 + (1 + 1)))))) || ((ifres133 < (1 + (1 + 1))) && (((ifres134 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres134 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres134 == (1 + (1 + 1))))) && (ifres133 == ifres135) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres135 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres135 == (1 + (1 + 1)))))) || ((ifres136 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres136 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres136 == (1 + (1 + 1))))) && (ifres133 == (1 + (1 + 1))))) && (ifres124 == (1 + (1 + 1))))) && (ifres97 == 0))) && (!(e7) || (ts183 && (ts183 == tres11._1))) && ((!(ts184) && (ts184 == tres11._1)) || e7) && (tres11 == r313) && (ts185 == vr1._1) && (cs15 == ts188.next) && (ts188 == vr1._2) && (cs14 == ts187.next) && (r313 == Equals(cs12, cs13, cs14, cs15, k)) && (cs12 == ts185.str) && (ts187 == vr1._1) && (cs13 == ts186.str) && (ts186 == vr1._2) && (((dcond10 >= dthen10) && (ifres96 == dcond10)) || ((dcond10 < dthen10) && (ifres96 == dthen10))) && (!(rthen10) || e7) && (!(e7) || rthen10)) || (((!(ci18) && (ts189 == vr1._1) && (ci18 == ts189.isInstanceOf[Chunk])) || (!(ci19) && (ts190 == vr1._2) && (ci19 == ts190.isInstanceOf[Chunk]))) && (ifres95 == tp32) && (tp32 == (relse10, ifres137)) && (!(relse10) || (ts191 && (ts191 == ifres138._1))) && ((!(ts192) && (ts192 == ifres138._1)) || relse10) && (dcond11 == (1 + ifres225)) && (delse10 == ts193) && (ts193 == ifres138._2) && ((ci20 && (ts194 == vr1._1) && (ci20 == ts194.isInstanceOf[Empty]) && ci21 && (ts195 == vr1._2) && (ci21 == ts195.isInstanceOf[Chunk]) && (ifres138 == tp33) && (tp33 == (rthen11, ifres139)) && (dthen11 == ((1 + d128) + ifres140)) && (!(e8) || (ts196 && (ts196 == tres12._1))) && ((!(ts197) && (ts197 == tres12._1)) || e8) && (((ifres141 >= 0) && (((ifres142 >= (1 + (1 + 1))) && (((ifres143 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres143 == 0)) || ((0 < (1 + (1 + 1))) && (ifres143 == (1 + (1 + 1))))) && (ifres142 == ifres144) && (((0 >= (1 + (1 + 1))) && (ifres144 == 0)) || ((0 < (1 + (1 + 1))) && (ifres144 == (1 + (1 + 1)))))) || ((ifres145 < 0) && (((0 >= (1 + (1 + 1))) && (ifres145 == 0)) || ((0 < (1 + (1 + 1))) && (ifres145 == (1 + (1 + 1))))) && (ifres142 == 0))) && (ifres141 == ifres146) && (((ifres147 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres147 == 0)) || ((0 < (1 + (1 + 1))) && (ifres147 == (1 + (1 + 1))))) && (ifres146 == ifres148) && (((0 >= (1 + (1 + 1))) && (ifres148 == 0)) || ((0 < (1 + (1 + 1))) && (ifres148 == (1 + (1 + 1)))))) || ((ifres149 < 0) && (((0 >= (1 + (1 + 1))) && (ifres149 == 0)) || ((0 < (1 + (1 + 1))) && (ifres149 == (1 + (1 + 1))))) && (ifres146 == 0)))) || ((ifres150 < (1 + (1 + 1))) && (((ifres151 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres151 == 0)) || ((0 < (1 + (1 + 1))) && (ifres151 == (1 + (1 + 1))))) && (ifres150 == ifres152) && (((0 >= (1 + (1 + 1))) && (ifres152 == 0)) || ((0 < (1 + (1 + 1))) && (ifres152 == (1 + (1 + 1)))))) || ((ifres153 < 0) && (((0 >= (1 + (1 + 1))) && (ifres153 == 0)) || ((0 < (1 + (1 + 1))) && (ifres153 == (1 + (1 + 1))))) && (ifres150 == 0))) && (ifres141 == (1 + (1 + 1))))) && (ifres140 == ifres154) && (((ifres155 >= (1 + (1 + 1))) && (((ifres156 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres156 == 0)) || ((0 < (1 + (1 + 1))) && (ifres156 == (1 + (1 + 1))))) && (ifres155 == ifres157) && (((0 >= (1 + (1 + 1))) && (ifres157 == 0)) || ((0 < (1 + (1 + 1))) && (ifres157 == (1 + (1 + 1)))))) || ((ifres158 < 0) && (((0 >= (1 + (1 + 1))) && (ifres158 == 0)) || ((0 < (1 + (1 + 1))) && (ifres158 == (1 + (1 + 1))))) && (ifres155 == 0))) && (ifres154 == ifres159) && (((ifres160 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres160 == 0)) || ((0 < (1 + (1 + 1))) && (ifres160 == (1 + (1 + 1))))) && (ifres159 == ifres161) && (((0 >= (1 + (1 + 1))) && (ifres161 == 0)) || ((0 < (1 + (1 + 1))) && (ifres161 == (1 + (1 + 1)))))) || ((ifres162 < 0) && (((0 >= (1 + (1 + 1))) && (ifres162 == 0)) || ((0 < (1 + (1 + 1))) && (ifres162 == (1 + (1 + 1))))) && (ifres159 == 0)))) || ((ifres163 < (1 + (1 + 1))) && (((ifres164 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres164 == 0)) || ((0 < (1 + (1 + 1))) && (ifres164 == (1 + (1 + 1))))) && (ifres163 == ifres165) && (((0 >= (1 + (1 + 1))) && (ifres165 == 0)) || ((0 < (1 + (1 + 1))) && (ifres165 == (1 + (1 + 1)))))) || ((ifres166 < 0) && (((0 >= (1 + (1 + 1))) && (ifres166 == 0)) || ((0 < (1 + (1 + 1))) && (ifres166 == (1 + (1 + 1))))) && (ifres163 == 0))) && (ifres154 == (1 + (1 + 1)))))) || ((ifres167 < 0) && (((ifres168 >= (1 + (1 + 1))) && (((ifres169 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres169 == 0)) || ((0 < (1 + (1 + 1))) && (ifres169 == (1 + (1 + 1))))) && (ifres168 == ifres170) && (((0 >= (1 + (1 + 1))) && (ifres170 == 0)) || ((0 < (1 + (1 + 1))) && (ifres170 == (1 + (1 + 1)))))) || ((ifres171 < 0) && (((0 >= (1 + (1 + 1))) && (ifres171 == 0)) || ((0 < (1 + (1 + 1))) && (ifres171 == (1 + (1 + 1))))) && (ifres168 == 0))) && (ifres167 == ifres172) && (((ifres173 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres173 == 0)) || ((0 < (1 + (1 + 1))) && (ifres173 == (1 + (1 + 1))))) && (ifres172 == ifres174) && (((0 >= (1 + (1 + 1))) && (ifres174 == 0)) || ((0 < (1 + (1 + 1))) && (ifres174 == (1 + (1 + 1)))))) || ((ifres175 < 0) && (((0 >= (1 + (1 + 1))) && (ifres175 == 0)) || ((0 < (1 + (1 + 1))) && (ifres175 == (1 + (1 + 1))))) && (ifres172 == 0)))) || ((ifres176 < (1 + (1 + 1))) && (((ifres177 >= 0) && (((0 >= (1 + (1 + 1))) && (ifres177 == 0)) || ((0 < (1 + (1 + 1))) && (ifres177 == (1 + (1 + 1))))) && (ifres176 == ifres178) && (((0 >= (1 + (1 + 1))) && (ifres178 == 0)) || ((0 < (1 + (1 + 1))) && (ifres178 == (1 + (1 + 1)))))) || ((ifres179 < 0) && (((0 >= (1 + (1 + 1))) && (ifres179 == 0)) || ((0 < (1 + (1 + 1))) && (ifres179 == (1 + (1 + 1))))) && (ifres176 == 0))) && (ifres167 == (1 + (1 + 1))))) && (ifres140 == 0))) && (d128 == ts198) && (ts198 == tres12._2) && (((dcond11 >= dthen11) && (ifres139 == dcond11)) || ((dcond11 < dthen11) && (ifres139 == dthen11))) && (tres12 == r314) && (ts199 == vr1._2) && (cs16 == ts199.str) && (cs17 == ts200.next) && (r314 == Equals(str1, cs16, s1, cs17, k)) && (ts200 == vr1._2) && (!(rthen11) || e8) && (!(e8) || rthen11)) || (((!(ci22) && (ts201 == vr1._1) && (ci22 == ts201.isInstanceOf[Empty])) || (!(ci23) && (ts202 == vr1._2) && (ci23 == ts202.isInstanceOf[Chunk]))) && (ifres138 == tp34) && (tp34 == (relse11, ifres180)) && (((dcond11 >= delse11) && (ifres180 == dcond11)) || ((dcond11 < delse11) && (ifres180 == delse11))) && (dcond12 == (1 + ifres224)) && (!(relse11) || (ts203 && (ts203 == ifres181._1))) && ((!(ts204) && (ts204 == ifres181._1)) || relse11) && (delse11 == ts205) && (ts205 == ifres181._2) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres224 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres224 == (1 + (1 + 1))))) && ((ci24 && (ts206 == vr1._1) && (ci24 == ts206.isInstanceOf[Chunk]) && ci25 && (ts207 == vr1._2) && (ci25 == ts207.isInstanceOf[Empty]) && (ifres181 == tp35) && (tp35 == (rthen12, ifres182)) && (dthen12 == ((1 + d144) + ifres183)) && (((dcond12 >= dthen12) && (ifres182 == dcond12)) || ((dcond12 < dthen12) && (ifres182 == dthen12))) && (tres13 == r315) && (r315 == Equals(cs18, str2, cs19, s2, k)) && (cs19 == ts209.next) && (ts209 == vr1._1) && (ts208 == vr1._1) && (cs18 == ts208.str) && (!(e9) || (ts210 && (ts210 == tres13._1))) && ((!(ts211) && (ts211 == tres13._1)) || e9) && (((ifres184 >= 0) && (((ifres185 >= 0) && (((ifres186 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres186 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres186 == 0))) && (ifres185 == ifres187) && ((((1 + (1 + 1)) >= 0) && (ifres187 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres187 == 0)))) || ((ifres188 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres188 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres188 == 0))) && (ifres185 == (1 + (1 + 1))))) && (ifres184 == ifres189) && (((ifres190 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres190 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres190 == 0))) && (ifres189 == ifres191) && ((((1 + (1 + 1)) >= 0) && (ifres191 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres191 == 0)))) || ((ifres192 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres192 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres192 == 0))) && (ifres189 == (1 + (1 + 1)))))) || ((ifres193 < 0) && (((ifres194 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres194 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres194 == 0))) && (ifres193 == ifres195) && ((((1 + (1 + 1)) >= 0) && (ifres195 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres195 == 0)))) || ((ifres196 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres196 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres196 == 0))) && (ifres193 == (1 + (1 + 1))))) && (ifres184 == 0))) && (ifres183 == ifres197) && (((ifres198 >= 0) && (((ifres199 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres199 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres199 == 0))) && (ifres198 == ifres200) && ((((1 + (1 + 1)) >= 0) && (ifres200 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres200 == 0)))) || ((ifres201 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres201 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres201 == 0))) && (ifres198 == (1 + (1 + 1))))) && (ifres197 == ifres202) && (((ifres203 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres203 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres203 == 0))) && (ifres202 == ifres204) && ((((1 + (1 + 1)) >= 0) && (ifres204 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres204 == 0)))) || ((ifres205 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres205 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres205 == 0))) && (ifres202 == (1 + (1 + 1)))))) || ((ifres206 < 0) && (((ifres207 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres207 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres207 == 0))) && (ifres206 == ifres208) && ((((1 + (1 + 1)) >= 0) && (ifres208 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres208 == 0)))) || ((ifres209 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres209 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres209 == 0))) && (ifres206 == (1 + (1 + 1))))) && (ifres197 == 0)))) || ((ifres210 < 0) && (((ifres211 >= 0) && (((ifres212 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres212 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres212 == 0))) && (ifres211 == ifres213) && ((((1 + (1 + 1)) >= 0) && (ifres213 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres213 == 0)))) || ((ifres214 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres214 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres214 == 0))) && (ifres211 == (1 + (1 + 1))))) && (ifres210 == ifres215) && (((ifres216 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres216 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres216 == 0))) && (ifres215 == ifres217) && ((((1 + (1 + 1)) >= 0) && (ifres217 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres217 == 0)))) || ((ifres218 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres218 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres218 == 0))) && (ifres215 == (1 + (1 + 1)))))) || ((ifres219 < 0) && (((ifres220 >= (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres220 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres220 == 0))) && (ifres219 == ifres221) && ((((1 + (1 + 1)) >= 0) && (ifres221 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres221 == 0)))) || ((ifres222 < (1 + (1 + 1))) && ((((1 + (1 + 1)) >= 0) && (ifres222 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < 0) && (ifres222 == 0))) && (ifres219 == (1 + (1 + 1))))) && (ifres210 == 0))) && (ifres183 == 0))) && (d144 == ts212) && (ts212 == tres13._2) && (!(rthen12) || e9) && (!(e9) || rthen12)) || (((!(ci26) && (ts213 == vr1._1) && (ci26 == ts213.isInstanceOf[Chunk])) || (!(ci27) && (ts214 == vr1._2) && (ci27 == ts214.isInstanceOf[Empty]))) && (ifres181 == tp36) && arg225 && (tp36 == (arg225, ifres223)) && (((dcond12 >= 0) && (ifres223 == dcond12)) || ((dcond12 < 0) && (ifres223 == 0))))))) && (((dcond10 >= delse10) && (ifres137 == dcond10)) || ((dcond10 < delse10) && (ifres137 == delse10))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres225 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres225 == (1 + (1 + 1))))))) && (delse9 == (bd1 + 1)) && (((dcond8 >= delse9) && (ifres94 == dcond8)) || ((dcond8 < delse9) && (ifres94 == delse9))) && (bd1 == ts215) && (ts215 == ifres95._2) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres226 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres226 == (1 + (1 + 1))))))) && ((((1 + (1 + 1)) >= (1 + (1 + 1))) && (ifres227 == (1 + (1 + 1)))) || (((1 + (1 + 1)) < (1 + (1 + 1))) && (ifres227 == (1 + (1 + 1))))) && (!(relse7) || (ts216 && (ts216 == ifres89._1))) && ((!(ts217) && (ts217 == ifres89._1)) || relse7) && (((dcond6 >= delse7) && (ifres88 == dcond6)) || ((dcond6 < delse7) && (ifres88 == delse7))) && (delse7 == ts218) && (ts218 == ifres89._2) && (dcond8 == (1 + ifres227)))) && (delse5 == ts219) && (ts219 == ifres83._2))))
Flattened Post: ((ts220 > (((a? * r318) + (b? * r319)) + e?)) && (arg227 == (r316 + r317)) && (r317 == length(s2)) && (r316 == length(s1)) && (ts220 == res11._2) && (arg226 == (k + 1)) && (r319 == size(str1)) && (r318 == mult(arg226, arg227)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 136
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 12 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/14
Unrolled calls: Set((r317 == length(s2)), (r307 <=> sizeBound(s2, k)), (r316 == length(s1)), (r308 == size(str1)), (r319 == size(str1)), (r306 <=> sizeBound(s1, k)), (r318 == mult(arg226, arg227)), (r309 == size(str2)))
Creating VC for sizeBound
[[34m Info  [0m] - Number of new terms enumerated: 3
[[34m Info  [0m] - Template generated for function sizeBound : (((a?6 * k) + a?5) ≤ 0)
Unrolling (r306 <=> sizeBound(s1, k))
Creating VC for size
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function size : (((a?8 * #res) + a?7) ≤ 0)
Unrolling (r309 == size(str2))
Inlining (r318 == mult(arg226, arg227))
Unrolling (r319 == size(str1))
Unrolling (r308 == size(str1))
Creating VC for length
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function length : (((a?10 * #res) + a?9) ≤ 0)
Unrolling (r316 == length(s1))
Unrolling (r317 == length(s2))
Unrolling (r307 <=> sizeBound(s2, k))
[[34m Info  [0m] Number of axiom instances: 8
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (0 * size(str1))) + (1 * res11._2)) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 143
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 33
# of atomic predicates: 38 + 0
solving...
solved... in 0.009s
candidate Invariants
Equals-->(((((8 * res11._2) + (4 * size(str1))) + (-8 * mult((k + 1), (length(s1) + length(s2))))) + -2) ≤ 0)
sizeBound-->(((3 * k) + -1) ≤ 0)
size-->(((-8 * #res) + 2) ≤ 0)
length-->(((64 * #res) + 211) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 24 + 38
solving...
solved... in 0.012s
candidate Invariants
Equals-->(((((-4 * mult((k + 1), (length(s1) + length(s2)))) + (0 * size(str1))) + (4 * res11._2)) + -59) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((0 * #res) + -1) ≤ 0)
length-->(((2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 142
[[34m Info  [0m] Number of equal calls: 28
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 46 + 62
solving...
solved... in 0.05s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/75
Unrolled calls: Set((r352 == mult(arg231, arg232)), (r351 == length(s2)), (r328 == size(cs24)), (r345 == pmult(px1, arg230)), (r341 == size(cs35)), (r350 == length(s1)), (r353 == size(cs6)), (r335 == pmult(px1, py1)))
Unrolling (r341 == size(cs35))
Unrolling (r335 == pmult(px1, py1))
Unrolling (r351 == length(s2))
Unrolling (r345 == pmult(px1, arg230))
Unrolling (r328 == size(cs24))
Unrolling (r353 == size(cs6))
Unrolling (r350 == length(s1))
Inlining (r352 == mult(arg231, arg232))
[[34m Info  [0m] Number of axiom instances: 162
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((1 * res11._2) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (0 * size(str1))) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 33 + 0
solving...
solved... in 0.011s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (2 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -2) ≤ 0)
sizeBound-->(((6 * k) + -1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((0 * #res) + 39) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 27 + 33
solving...
solved... in 0.01s
candidate Invariants
Equals-->(((((1 * size(str1)) + (2 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -22) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-2 * #res) + 1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 18
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 51 + 60
solving...
solved... in 0.027s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 141
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 41 + 111
solving...
solved... in 0.049s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 152
[[34m Info  [0m] Number of equal calls: 24
# of atomic predicates: 45 + 152
solving...
solved... in 0.162s
candidate Invariants
Equals-->(((((1 * res11._2) + (-6 * size(str1))) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -4) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
length-->(((-29 * #res) + -2) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 207
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 63 + 197
solving...
solved... in 0.806s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/79
Unrolled calls: Set((r375 == length(cs9)), (r417 == pmult(px1, arg253)), (r414 == pmult(px2, py2)), (r374 == length(s1)), (r377 == size(str1)), (r376 == mult(arg237, arg238)))
Unrolling (r374 == length(s1))
Unrolling (r375 == length(cs9))
Inlining (r376 == mult(arg237, arg238))
Unrolling (r417 == pmult(px1, arg253))
Unrolling (r414 == pmult(px2, py2))
Unrolling (r377 == size(str1))
[[34m Info  [0m] Number of axiom instances: 722
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((1 * res11._2) + (0 * size(str1))) + (0 * mult((k + 1), (length(s1) + length(s2))))) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 34 + 0
solving...
solved... in 0.008s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (4 * size(str1))) + (2 * res11._2)) + 1) ≤ 0)
sizeBound-->(((6 * k) + 1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((0 * #res) + 53) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 27 + 34
solving...
solved... in 0.009s
candidate Invariants
Equals-->(((((-4 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -6) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-8 * #res) + 1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 141
[[34m Info  [0m] Number of equal calls: 29
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 67 + 61
solving...
solved... in 0.055s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -11) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 245
[[34m Info  [0m] Number of equal calls: 34
# of atomic predicates: 49 + 128
solving...
solved... in 0.043s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -4) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
length-->(((-43 * #res) + -4) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 172
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 51 + 177
solving...
solved... in 0.08s
candidate Invariants
Equals-->(((((-15 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 248
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 34
# of atomic predicates: 49 + 228
solving...
solved... in 0.167s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + 0) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 165
Axiom pre2 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 29
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 61 + 277
solving...
solved... in 0.44s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 6/86
Unrolled calls: Set((r446 == pmult(px3, py3)), (r452 == pmult(px3, arg271)), (r359 == length(cs17)), (r360 == mult(arg233, arg234)), (r361 == size(str1)), (r358 == length(s1)))
Unrolling (r361 == size(str1))
Inlining (r360 == mult(arg233, arg234))
Unrolling (r359 == length(cs17))
Unrolling (r446 == pmult(px3, py3))
Unrolling (r452 == pmult(px3, arg271))
Unrolling (r358 == length(s1))
[[34m Info  [0m] Number of axiom instances: 2048
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * size(str1)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 34 + 0
solving...
solved... in 0.008s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (2 * res11._2)) + (4 * size(str1))) + 1) ≤ 0)
sizeBound-->(((6 * k) + 1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((0 * #res) + 53) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 27 + 34
solving...
solved... in 0.012s
candidate Invariants
Equals-->(((((-4 * size(str1)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -6) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-8 * #res) + 1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 141
[[34m Info  [0m] Number of equal calls: 29
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 65 + 61
solving...
solved... in 0.053s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -11) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 185
[[34m Info  [0m] Number of equal calls: 28
# of atomic predicates: 49 + 126
solving...
solved... in 0.437s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (-6 * size(str1))) + -2) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-8 * #res) + -1) ≤ 0)
length-->(((-71 * #res) + -8) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 198
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 55 + 175
solving...
solved... in 0.178s
candidate Invariants
Equals-->(((((1 * res11._2) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (-6 * size(str1))) + -1) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 172
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 28
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 67 + 230
solving...
solved... in 0.901s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 4/96
Unrolled calls: Set((r393 == size(cs10)), (r392 == mult(arg241, arg242)), (r391 == length(s2)), (r390 == length(cs11)))
Unrolling (r393 == size(cs10))
Inlining (r392 == mult(arg241, arg242))
Unrolling (r391 == length(s2))
Unrolling (r390 == length(cs11))
[[34m Info  [0m] Number of axiom instances: 3872
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * size(str1)) + (1 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 34 + 0
solving...
solved... in 0.008s
candidate Invariants
Equals-->(((((2 * res11._2) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (4 * size(str1))) + 1) ≤ 0)
sizeBound-->(((6 * k) + 1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((0 * #res) + 53) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 27 + 34
solving...
solved... in 0.009s
candidate Invariants
Equals-->(((((-4 * size(str1)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -6) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-8 * #res) + 1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 183
[[34m Info  [0m] Number of equal calls: 32
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 77 + 61
solving...
solved... in 0.021s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (8 * res11._2)) + (-1 * size(str1))) + -72) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-215 * #res) + -16) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 158
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 54 + 138
solving...
solved... in 0.035s
candidate Invariants
Equals-->(((((-157 * mult((k + 1), (length(s1) + length(s2)))) + (-8 * size(str1))) + (8 * res11._2)) + -56) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-8 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 178
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 36
# of atomic predicates: 54 + 192
solving...
solved... in 0.149s
candidate Invariants
Equals-->(((((-59 * mult((k + 1), (length(s1) + length(s2)))) + (2 * res11._2)) + (-12 * size(str1))) + -14) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 325
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 40
# of atomic predicates: 49 + 246
solving...
solved... in 0.162s
candidate Invariants
Equals-->(((((-1 * mult((k + 1), (length(s1) + length(s2)))) + (-48 * size(str1))) + (8 * res11._2)) + -56) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 258
Axiom pre2 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 35
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 60 + 295
solving...
solved... in 0.502s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/107
Unrolled calls: Set((r367 == length(s2)), (r369 == size(cs18)), (r487 == pmult(px4, py4)), (r500 == pmult(px4, arg300)), (r366 == length(cs19)), (r418 == pmult(px2, arg254)), (r368 == mult(arg235, arg236)))
Unrolling (r500 == pmult(px4, arg300))
Unrolling (r369 == size(cs18))
Inlining (r368 == mult(arg235, arg236))
Unrolling (r487 == pmult(px4, py4))
Unrolling (r366 == length(cs19))
Unrolling (r418 == pmult(px2, arg254))
Unrolling (r367 == length(s2))
[[34m Info  [0m] Number of axiom instances: 7938
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (0 * size(str1))) + (1 * res11._2)) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 74
[[34m Info  [0m] Number of equal calls: 17
# of atomic predicates: 33 + 0
solving...
solved... in 0.007s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (2 * res11._2)) + (0 * mult((k + 1), (length(s1) + length(s2))))) + -2) ≤ 0)
sizeBound-->(((6 * k) + -1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((0 * #res) + 39) ≤ 0)
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 27 + 33
solving...
solved... in 0.009s
candidate Invariants
Equals-->(((((2 * res11._2) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (1 * size(str1))) + -22) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-2 * #res) + 1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 18
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 51 + 60
solving...
solved... in 0.026s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (-1 * size(str1))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((0 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 158
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 54 + 111
solving...
solved... in 0.029s
candidate Invariants
Equals-->(((((4 * res11._2) + (-75 * mult((k + 1), (length(s1) + length(s2))))) + (-4 * size(str1))) + -28) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
length-->(((1 * #res) + -4) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 231
[[34m Info  [0m] Number of equal calls: 37
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 77 + 165
solving...
solved... in 0.043s
candidate Invariants
Equals-->(((((-43 * mult((k + 1), (length(s1) + length(s2)))) + (2 * res11._2)) + (-1 * size(str1))) + -14) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 178
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 34
# of atomic predicates: 54 + 242
solving...
solved... in 0.123s
candidate Invariants
Equals-->(((((-24 * size(str1)) + (-103 * mult((k + 1), (length(s1) + length(s2))))) + (4 * res11._2)) + -28) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-4 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 287
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 35
# of atomic predicates: 63 + 296
solving...
solved... in 1.394s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (1 * res11._2)) + (4 * mult((k + 1), (length(s1) + length(s2))))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-8 * #res) + -1) ≤ 0)
length-->(((-4 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 141
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 48 + 359
solving...
solved... in 0.164s
candidate Invariants
Equals-->(((((-12 * size(str1)) + (-1 * mult((k + 1), (length(s1) + length(s2))))) + (2 * res11._2)) + -8) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 207
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 29 + 407
solving...
solved... in 0.209s
candidate Invariants
Equals-->(((((-12 * size(str1)) + (-1 * mult((k + 1), (length(s1) + length(s2))))) + (2 * res11._2)) + -14) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-2 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 248
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 37
# of atomic predicates: 55 + 436
solving...
solved... in 1.581s
candidate Invariants
Equals-->(((((1 * res11._2) + (-1 * mult((k + 1), (length(s1) + length(s2))))) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 162
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 53 + 491
solving...
solved... in 0.463s
candidate Invariants
Equals-->(((((1 * res11._2) + (-6 * size(str1))) + (-3 * mult((k + 1), (length(s1) + length(s2))))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 211
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 31
# of atomic predicates: 57 + 544
solving...
solved... in 0.401s
candidate Invariants
Equals-->(((((-7 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-8 * #res) + -1) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 279
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 39
# of atomic predicates: 65 + 601
solving...
solved... in 2.627s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 7/122
Unrolled calls: Set((r382 == length(cs14)), (r496 == pmult(px1, arg296)), (r385 == size(cs12)), (r528 == pmult(px5, py5)), (r383 == length(cs15)), (r454 == pmult(px1, arg273)), (r384 == mult(arg239, arg240)))
Unrolling (r496 == pmult(px1, arg296))
Unrolling (r383 == length(cs15))
Unrolling (r528 == pmult(px5, py5))
Unrolling (r454 == pmult(px1, arg273))
Unrolling (r385 == size(cs12))
Inlining (r384 == mult(arg239, arg240))
Unrolling (r382 == length(cs14))
[[34m Info  [0m] Number of axiom instances: 14792
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (0 * size(str1))) + (1 * res11._2)) + 0) ≤ 0)
sizeBound-->(((0 * k) + 0) ≤ 0)
size-->(((0 * #res) + 0) ≤ 0)
length-->(((0 * #res) + 0) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 116
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 48 + 0
solving...
solved... in 0.008s
candidate Invariants
Equals-->(((((0 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (2 * size(str1))) + -1) ≤ 0)
sizeBound-->(((4 * k) + -1) ≤ 0)
size-->(((2 * #res) + -8) ≤ 0)
length-->(((16 * #res) + 138) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 194
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 19
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 87 + 48
solving...
solved... in 0.018s
candidate Invariants
Equals-->(((((4 * res11._2) + (-4 * size(str1))) + (32 * mult((k + 1), (length(s1) + length(s2))))) + 1) ≤ 0)
sizeBound-->(((-1 * k) + -1) ≤ 0)
size-->(((-8 * #res) + 1) ≤ 0)
length-->(((-4 * #res) + -2) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 65
[[34m Info  [0m] Number of equal calls: 18
Function: sizeBound--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
Function: size--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 51 + 135
solving...
solved... in 0.043s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (8 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -2) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 217
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 29
# of atomic predicates: 53 + 186
solving...
solved... in 0.103s
candidate Invariants
Equals-->(((((-1 * size(str1)) + (4 * mult((k + 1), (length(s1) + length(s2))))) + (4 * res11._2)) + -28) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 96
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 21
# of atomic predicates: 44 + 239
solving...
solved... in 0.097s
candidate Invariants
Equals-->(((((-8 * mult((k + 1), (length(s1) + length(s2)))) + (-2 * size(str1))) + (16 * res11._2)) + -112) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 183
[[34m Info  [0m] Number of equal calls: 30
# of atomic predicates: 59 + 283
solving...
solved... in 0.169s
candidate Invariants
Equals-->(((((-1 * mult((k + 1), (length(s1) + length(s2)))) + (-1 * size(str1))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 193
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 35
# of atomic predicates: 57 + 342
solving...
solved... in 0.799s
candidate Invariants
Equals-->(((((1 * res11._2) + (0 * mult((k + 1), (length(s1) + length(s2))))) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 294
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre2 implied 
Axiom pre2 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre2 implied 
[[34m Info  [0m] Number of equal calls: 39
# of atomic predicates: 69 + 399
solving...
solved... in 0.829s
candidate Invariants
Equals-->(((((-3 * mult((k + 1), (length(s1) + length(s2)))) + (-6 * size(str1))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 336
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 42
# of atomic predicates: 53 + 468
solving...
solved... in 0.373s
candidate Invariants
Equals-->(((((1 * res11._2) + (-6 * size(str1))) + (-7 * mult((k + 1), (length(s1) + length(s2))))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-3 * #res) + -1) ≤ 0)
Nesting level: a?-->3
Nesting level: b?-->1
Nesting level: e?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 7
Found new upper bound: 2
Found new upper bound: 0
Found new upper bound: -2
Found new upper bound: -5
Found new upper bound: -11
Found new upper bound: -23
Found new upper bound: -47
Found new upper bound: -95
Found new upper bound: -191
Found new upper bound: -383
Found new upper bound: -767
Found new upper bound: -1535
Found new upper bound: -3071
Found new upper bound: -6143
Found new upper bound: -12287
Found new upper bound: -24575
Minimizing variable: b? Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimizing variable: e? Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
candidate Invariants
Equals-->(((((1 * res11._2) + (24575 * mult((k + 1), (length(s1) + length(s2))))) + (-5 * size(str1))) + -1) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((2 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 109
[[34m Info  [0m] Number of equal calls: 18
Function: length--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 0
[[34m Info  [0m] Number of equal calls: 0
# of atomic predicates: 41 + 521
solving...
solved... in 0.5s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (1 * res11._2)) + (-7 * mult((k + 1), (length(s1) + length(s2))))) + -6) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-8 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->3
Nesting level: b?-->1
Nesting level: e?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimizing variable: b? Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimizing variable: e? Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimization complete...
candidate Invariants
Equals-->(((((1 * res11._2) + (-5 * size(str1))) + (-6 * mult((k + 1), (length(s1) + length(s2))))) + -5) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + 0) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 207
[[34m Info  [0m] Number of equal calls: 27
# of atomic predicates: 29 + 562
solving...
solved... in 0.512s
candidate Invariants
Equals-->(((((-7 * mult((k + 1), (length(s1) + length(s2)))) + (1 * res11._2)) + (-6 * size(str1))) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-2 * #res) + -1) ≤ 0)
Nesting level: a?-->3
Nesting level: b?-->1
Nesting level: e?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimizing variable: b? Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimizing variable: e? Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimization complete...
candidate Invariants
Equals-->(((((-5 * size(str1)) + (-6 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -6) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-1 * #res) + -1) ≤ 0)
length-->(((-4 * #res) + -8) ≤ 0)
Function: Equals--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 126
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre1 implied 
Axiom pre not implied 
Axiom pre1 implied 
Axiom pre1 implied 
[[34m Info  [0m] Number of equal calls: 19
# of atomic predicates: 36 + 591
solving...
solved... in 0.595s
candidate Invariants
Equals-->(((((-6 * size(str1)) + (-7 * mult((k + 1), (length(s1) + length(s2))))) + (1 * res11._2)) + -7) ≤ 0)
sizeBound-->(((0 * k) + -1) ≤ 0)
size-->(((-8 * #res) + -1) ≤ 0)
length-->(((-1 * #res) + -1) ≤ 0)
Nesting level: a?-->3
Nesting level: b?-->1
Nesting level: e?-->0
minimizing...
Minimizing variable: a? Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimizing variable: b? Initial upperbound: 6
Found new lower bound: 3
Found new lower bound: 4
Found new upper bound: 5
Minimizing variable: e? Initial upperbound: 7
Found new lower bound: 3
Found new lower bound: 5
Found new upper bound: 6
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: Equals --> (((((-5 * size(str1)) + (1 * res11._2)) + (-6 * ((k + 1) * (length(s1) + length(s2))))) + -6) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeBound --> (((0 * k) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: size --> (((-1 * #res) + -1) <= 0)
[[34m Info  [0m] - Found inductive invariant: length --> (((-8 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[33mWarning[0m] Z3 doesn't know because ??
[[31m Error [0m] - Unable to prove or disprove invariant, the invariant is probably true
[[34m Info  [0m] - considering function Dis1...
[[34m Info  [0m] Body: if ((x ≥ n))
            (0, if ((1 ≥ 0))
              1
            else
              0)
          else
            (let (relse13,delse13 := if ((y < m))
              (let (rthen14,dthen14 := (let (e10,d157 := Dis1(x, (y + 1), n, m)) in
                (e10, (2 + d157)))) in
                (rthen14, if ((1 ≥ dthen14))
                  1
                else
                  dthen14))
            else
              (let (relse14,delse14 := (let (e11,d164 := Dis1((x + 1), y, n, m)) in
                (e11, (2 + d164)))) in
                (relse14, if ((1 ≥ delse14))
                  1
                else
                  delse14))) in
              (relse13, if ((1 ≥ delse13))
                1
              else
                delse13))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres293) && (((x >= n) && (ifres293 == tp37) && (arg439 == 0) && (tp37 == (arg439, ifres294)) && (((1 >= 0) && (ifres294 == 1)) || ((1 < 0) && (ifres294 == 0)))) || ((x < n) && (ifres293 == tp38) && (tp38 == (relse13, ifres295)) && (((y < m) && (ifres296 == tp39) && (tp39 == (rthen14, ifres297)) && (d157 == ts287) && (ts287 == tres14._2) && (((1 >= dthen14) && (ifres297 == 1)) || ((1 < dthen14) && (ifres297 == dthen14))) && (tres14 == r740) && (arg440 == (y + 1)) && (r740 == Dis1(x, arg440, n, m)) && (e10 == ts288) && (ts288 == tres14._1) && (rthen14 == e10) && (dthen14 == (2 + d157))) || ((y >= m) && (ifres296 == tp40) && (tp40 == (relse14, ifres298)) && (delse14 == (2 + d164)) && (e11 == ts289) && (ts289 == tres15._1) && (((1 >= delse14) && (ifres298 == 1)) || ((1 < delse14) && (ifres298 == delse14))) && (d164 == ts290) && (ts290 == tres15._2) && (relse14 == e11) && (tres15 == r741) && (arg441 == (x + 1)) && (r741 == Dis1(arg441, y, n, m)))) && (relse13 == ts291) && (ts291 == ifres296._1) && (delse13 == ts292) && (ts292 == ifres296._2) && (((1 >= delse13) && (ifres295 == 1)) || ((1 < delse13) && (ifres295 == delse13))))))
Flattened Post: ((ts293 > (((a?1 * r742) + (b?1 * r743)) + c?1)) && (arg444 == 0) && (r742 == max(arg442, arg443)) && (ts293 == res12._2) && (arg442 == 0) && (r743 == max(arg444, arg445)) && (arg443 == (n - x)) && (arg445 == (m - y)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis1-->(((((0 * max(0, (n - x))) + (0 * max(0, (m - y)))) + (1 * res12._2)) + 0) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis1-->(((((0 * max(0, (n - x))) + (0 * max(0, (m - y)))) + (1 * res12._2)) + -3) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 22
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 11 + 10
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/4
Unrolled calls: Set((r742 == max(arg442, arg443)), (r743 == max(arg444, arg445)))
Inlining (r742 == max(arg442, arg443))
Inlining (r743 == max(arg444, arg445))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis1-->(((((1 * res12._2) + (0 * max(0, (m - y)))) + (0 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis1-->(((((2 * res12._2) + (0 * max(0, (m - y)))) + (2 * max(0, (n - x)))) + 5) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 21
solving...
solved... in 0.01s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/6
Unrolled calls: Set((r749 == max(arg456, arg457)), (r748 == max(arg454, arg455)))
Inlining (r749 == max(arg456, arg457))
Inlining (r748 == max(arg454, arg455))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis1-->(((((0 * max(0, (n - x))) + (0 * max(0, (m - y)))) + (1 * res12._2)) + 0) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 11 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis1-->(((((1 * res12._2) + (-1 * max(0, (m - y)))) + (0 * max(0, (n - x)))) + -2) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 18 + 11
solving...
solved... in 0.007s
candidate Invariants
Dis1-->(((((1 * res12._2) + (0 * max(0, (n - x)))) + (-6 * max(0, (m - y)))) + 3) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 19 + 29
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/4
Unrolled calls: Set((r751 == max(arg460, arg461)), (r750 == max(arg458, arg459)))
Inlining (r751 == max(arg460, arg461))
Inlining (r750 == max(arg458, arg459))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis1-->(((((1 * res12._2) + (0 * max(0, (m - y)))) + (0 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis1-->(((((-3 * max(0, (n - x))) + (7 * max(0, (m - y)))) + (1 * res12._2)) + 10) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 21 + 21
solving...
solved... in 0.009s
candidate Invariants
Dis1-->(((((-16 * max(0, (m - y))) + (-1 * max(0, (n - x)))) + (8 * res12._2)) + 8) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 2
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 12 + 42
solving...
solved... in 0.011s
candidate Invariants
Dis1-->(((((-1 * max(0, (n - x))) + (-24 * max(0, (m - y)))) + (8 * res12._2)) + -16) ≤ 0)
Function: Dis1--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 34
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 19 + 54
solving...
solved... in 0.013s
candidate Invariants
Dis1-->(((((1 * res12._2) + (-3 * max(0, (n - x)))) + (-3 * max(0, (m - y)))) + -2) ≤ 0)
Nesting level: a?1-->1
Nesting level: b?1-->1
Nesting level: c?1-->0
minimizing...
Minimizing variable: a?1 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: b?1 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: c?1 Initial upperbound: 2
Found new upper bound: 1
Found new lower bound: 0
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: Dis1 --> (((((-2 * max(0, (m - y))) + (1 * res12._2)) + (-2 * max(0, (n - x)))) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function Dis3...
[[34m Info  [0m] Body: if (((x > n) ∨ (x < 0)))
            (0, if ((2 ≥ 0))
              2
            else
              0)
          else
            (let (relse,delse := if (b)
              (let (rthen1,dthen1 := (let (e,d10 := Dis3((x + t), b, t, n)) in
                (e, (2 + d10)))) in
                (rthen1, if ((0 ≥ dthen1))
                  0
                else
                  dthen1))
            else
              (let (relse1,delse1 := (let (e1,d17 := Dis3((x - t), b, t, n)) in
                (e1, (2 + d17)))) in
                (relse1, if ((0 ≥ delse1))
                  0
                else
                  delse1))) in
              (relse, if ((2 ≥ delse))
                2
              else
                delse))
[[34m Info  [0m] Post: true
falttened Body: (((b && (t == 1)) || (!(b) && (t == -1))) && (res13 == ifres305) && ((((x > n) || (x < 0)) && (ifres305 == tp41) && (arg506 == 0) && (tp41 == (arg506, ifres306)) && (((2 >= 0) && (ifres306 == 2)) || ((2 < 0) && (ifres306 == 0)))) || ((x <= n) && (x >= 0) && (ifres305 == tp42) && (tp42 == (relse, ifres307)) && ((b && (ifres308 == tp43) && (tp43 == (rthen1, ifres309)) && (d10 == ts309) && (ts309 == tres16._2) && (tres16 == r774) && (arg507 == (x + t)) && (r774 == Dis3(arg507, b, t, n)) && (rthen1 == e) && (((0 >= dthen1) && (ifres309 == 0)) || ((0 < dthen1) && (ifres309 == dthen1))) && (dthen1 == (2 + d10)) && (e == ts310) && (ts310 == tres16._1)) || (!(b) && (ifres308 == tp44) && (tp44 == (relse1, ifres310)) && (tres17 == r775) && (arg508 == (x - t)) && (r775 == Dis3(arg508, b, t, n)) && (relse1 == e1) && (((0 >= delse1) && (ifres310 == 0)) || ((0 < delse1) && (ifres310 == delse1))) && (delse1 == (2 + d17)) && (e1 == ts311) && (ts311 == tres17._1) && (d17 == ts312) && (ts312 == tres17._2))) && (relse == ts313) && (ts313 == ifres308._1) && (delse == ts314) && (ts314 == ifres308._2) && (((2 >= delse) && (ifres307 == 2)) || ((2 < delse) && (ifres307 == delse))))))
Flattened Post: ((ts315 > ((a?3 * r776) + c?3)) && (ts315 == res13._2) && (arg509 == 0) && (arg510 == (n - x)) && (r776 == max(arg509, arg510)))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis3-->((((0 * max(0, (n - x))) + (1 * res13._2)) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 21
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 11 + 0
solving...
solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/3
Unrolled calls: Set((r776 == max(arg509, arg510)))
Inlining (r776 == max(arg509, arg510))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis3-->((((1 * res13._2) + (0 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 19 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis3-->((((-2 * max(0, (n - x))) + (1 * res13._2)) + -4) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 17 + 19
solving...
solved... in 0.009s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/4
Unrolled calls: Set((r779 == max(arg515, arg516)))
Inlining (r779 == max(arg515, arg516))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis3-->((((0 * max(0, (n - x))) + (1 * res13._2)) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.005s
candidate Invariants
Dis3-->((((-1 * max(0, (n - x))) + (1 * res13._2)) + -3) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 17 + 10
solving...
solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 1/3
Unrolled calls: Set((r778 == max(arg513, arg514)))
Inlining (r778 == max(arg513, arg514))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis3-->((((0 * max(0, (n - x))) + (1 * res13._2)) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 5
# of atomic predicates: 21 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis3-->((((1 * res13._2) + (-3 * max(0, (n - x)))) + -2) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 29
[[34m Info  [0m] Number of equal calls: 6
# of atomic predicates: 19 + 21
solving...
solved... in 0.008s
candidate Invariants
Dis3-->((((-6 * max(0, (n - x))) + (2 * res13._2)) + 1) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 40
solving...
solved... in 0.008s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 2/2
Unrolled calls: Set((r774 == Dis3(arg507, b, t, n)), (r775 == Dis3(arg508, b, t, n)))
Unrolling (r774 == Dis3(arg507, b, t, n))
Unrolling (r775 == Dis3(arg508, b, t, n))
[[34m Info  [0m] Number of axiom instances: 0
candidate Invariants
Dis3-->((((0 * max(0, (n - x))) + (1 * res13._2)) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 10 + 0
solving...
solved... in 0.006s
candidate Invariants
Dis3-->((((-1 * max(0, (n - x))) + (1 * res13._2)) + -3) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 93
[[34m Info  [0m] Number of equal calls: 11
# of atomic predicates: 21 + 10
solving...
solved... in 0.008s
candidate Invariants
Dis3-->((((1 * res13._2) + (-3 * max(0, (n - x)))) + 0) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 1
[[34m Info  [0m] Number of equal calls: 1
# of atomic predicates: 9 + 31
solving...
solved... in 0.008s
candidate Invariants
Dis3-->((((1 * res13._2) + (-2 * max(0, (n - x)))) + -3) ≤ 0)
Function: Dis3--Found candidate invariant is not a real invariant! 
[[34m Info  [0m] Number of compatible calls: 37
[[34m Info  [0m] Number of equal calls: 7
# of atomic predicates: 19 + 40
solving...
solved... in 0.01s
candidate Invariants
Dis3-->((((-3 * max(0, (n - x))) + (1 * res13._2)) + -5) ≤ 0)
Nesting level: a?3-->1
Nesting level: c?3-->0
minimizing...
Minimizing variable: a?3 Initial upperbound: 3
Found new lower bound: 1
Found new upper bound: 2
Minimizing variable: c?3 Initial upperbound: 5
Found new lower bound: 2
Found new lower bound: 3
Found new upper bound: 4
Minimization complete...
[[34m Info  [0m] - Found inductive invariant: Dis3 --> ((((1 * res13._2) + (-2 * max(0, (n - x)))) + -4) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
Inferrence did not succeeded for functions: List()
[[34m Info  [0m] - Dumping statistics
[[34m Info  [0m] . ┌─────────┐
          ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
          ║ └─────────┘                                                                       ║
          
          ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
          ║ total: 0      valid: 0      invalid: 0      unknown 0                       0.000 ║
          ╚═══════════════════════════════════════════════════════════════════════════════════╝
