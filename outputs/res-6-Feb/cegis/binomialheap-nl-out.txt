[[33mWarning[0m] warning: there were 2 deprecation warning(s); re-run with -deprecation for details
After Depth Instrumentation: 
object BinomialHeap {
  case class None() extends OptionalTree

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class ElementAbs

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class List

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  sealed abstract class BinomialHeap

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  sealed abstract class BinomialTree

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NilHeap() extends BinomialHeap

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : BinomialHeap = {(h1 match {
    case ConsHeap(head1, tail1) =>
      (h2 match {
        case ConsHeap(head2, tail2) =>
          if ((rank(head1) < rank(head2))) {
            ConsHeap(head1, merge(tail1, h2))
          } else {
            if ((rank(head2) < rank(head1))) {
              ConsHeap(head2, merge(h1, tail2))
            } else {
              mergeWithCarry(link(head1, head2), tail1, tail2)
            }
          }
        case NilHeap() =>
          h1
      })
    case NilHeap() =>
      h2
  })} ensuring(res => true)

  def leq(a : Element, b : Element) : Boolean = {(a match {
    case Element(a1) =>
      (b match {
        case Element(a2) =>
          if ((a1 <= a2)) {
            true
          } else {
            false
          }
      })
  })}

  def root(t : BinomialTree) : Element = {(t match {
    case Node(_, e, _) =>
      e
  })}

  def rank(t : BinomialTree) : Int = {(t match {
    case Node(r, _, _) =>
      r
  })}

  def deleteMin(h : BinomialHeap) : BinomialHeap = {locally {
    val x$2 = (removeMinTree(h) match {
      case (min, ts2) =>
        (min, ts2)
    })
    locally {
      val min = x$2._1
      locally {
        val ts2 = x$2._2
        (min match {
          case Some(Node(_, _, ts1)) =>
            merge(ts1, ts2)
          case _ =>
            h
        })
      }
      
    }
    
  }
  } ensuring(res => true)

  def minTreeChildren(h : BinomialHeap) : Int = {locally {
    val min = (removeMinTree(h) match {
      case (min, _) =>
        min
    })
    (min match {
      case None() =>
        0
      case Some(Node(_, _, ch)) =>
        treeNum(ch)
    })
  }
  }

  def insTree(t : BinomialTree, h : BinomialHeap) : BinomialHeap = {(h match {
    case ConsHeap(head, tail) =>
      if ((rank(t) < rank(head))) {
        ConsHeap(t, h)
      } else {
        if ((rank(t) > rank(head))) {
          ConsHeap(head, insTree(t, tail))
        } else {
          insTree(link(t, head), tail)
        }
      }
    case NilHeap() =>
      ConsHeap(t, NilHeap())
  })} ensuring(res => true)

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : BinomialHeap = {(t match {
    case Node(r, _, _) =>
      (h1 match {
        case ConsHeap(head1, tail1) =>
          (h2 match {
            case ConsHeap(head2, tail2) =>
              if ((rank(head1) < rank(head2))) {
                if ((rank(t) < rank(head1))) {
                  ConsHeap(t, ConsHeap(head1, merge(tail1, h2)))
                } else {
                  mergeWithCarry(link(t, head1), tail1, h2)
                }
              } else {
                if ((rank(head2) < rank(head1))) {
                  if ((rank(t) < rank(head2))) {
                    ConsHeap(t, ConsHeap(head2, merge(h1, tail2)))
                  } else {
                    mergeWithCarry(link(t, head2), h1, tail2)
                  }
                } else {
                  ConsHeap(t, mergeWithCarry(link(head1, head2), tail1, tail2))
                }
              }
            case NilHeap() =>
              insTree(t, h1)
          })
        case NilHeap() =>
          insTree(t, h2)
      })
  })} ensuring(res => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def removeMinTree(h : BinomialHeap) : (OptionalTree, BinomialHeap) = {(h match {
    case ConsHeap(head, NilHeap()) =>
      (Some(head), NilHeap())
    case ConsHeap(head1, tail1) =>
      locally {
        val x$1 = (removeMinTree(tail1) match {
          case (opthead2, tail2) =>
            (opthead2, tail2)
        })
        locally {
          val opthead2 = x$1._1
          locally {
            val tail2 = x$1._2
            (opthead2 match {
              case None() =>
                (Some(head1), tail1)
              case Some(head2) =>
                if (leq(root(head1), root(head2))) {
                  (Some(head1), tail1)
                } else {
                  (Some(head2), ConsHeap(head1, tail2))
                }
            })
          }
          
        }
        
      }
      
    case _ =>
      (None(), NilHeap())
  })} ensuring(res => (treeNum(res._2) <= treeNum(h)))

  def link(t1 : BinomialTree, t2 : BinomialTree) : BinomialTree = {(t1 match {
    case Node(r, x1, c1) =>
      (t2 match {
        case Node(_, x2, c2) =>
          if (leq(x1, x2)) {
            Node((r + 1), x1, ConsHeap(t2, c1))
          } else {
            Node((r + 1), x2, ConsHeap(t1, c2))
          }
      })
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: merge
Defined fun: leq
Defined fun: root
Defined fun: rank
Defined fun: deleteMin
Defined fun: minTreeChildren
Defined fun: insTree
Defined fun: mergeWithCarry
Defined fun: isEmpty
Defined fun: treeNum
Defined fun: removeMinTree
Defined fun: link
Defined fun: max
FunMap: Map(merge -> merge, mergeWithCarry -> mergeWithCarry, isEmpty -> isEmpty, deleteMin -> deleteMin, treeNum -> treeNum, rank -> rank, max -> max, minTreeChildren -> minTreeChildren, removeMinTree -> removeMinTree, root -> root, leq -> leq, link -> link, insTree -> insTree)
After Time Instrumentation: 
object BinomialHeap {
  case class None() extends OptionalTree

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class ElementAbs

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class List

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  sealed abstract class BinomialHeap

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  sealed abstract class BinomialTree

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NilHeap() extends BinomialHeap

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val t6 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (e2: BinomialHeap, t7: Int) = locally {
          val t8 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (e4: BinomialHeap, t9: Int) = locally {
                val (e5: Boolean, t10: Int) = locally {
                  val (e44: Int, t49: Int) = locally {
                    val (e50: Int, t55: Int) = rank(h1.head)
                    (e50, (1 + (1 + t55)))
                  }
                  
                  locally {
                    val (e45: Int, t50: Int) = locally {
                      val (e47: Int, t52: Int) = rank(h2.head)
                      (e47, (1 + (1 + t52)))
                    }
                    
                    ((e44 < e45), (t50 + (t49 + 1)))
                  }
                  
                }
                
                if (e5) {
                  locally {
                    val (e6: ConsHeap, t11: Int) = locally {
                      val (e8: BinomialHeap, t13: Int) = locally {
                        val (e11: BinomialHeap, t16: Int) = merge(h1.tail, h2)
                        (e11, (1 + (1 + t16)))
                      }
                      
                      (ConsHeap(h1.head, e8), (t13 + 2))
                    }
                    
                    (e6, (t10 + t11))
                  }
                  
                } else {
                  locally {
                    val (e14: BinomialHeap, t19: Int) = locally {
                      val (e15: Boolean, t20: Int) = locally {
                        val (e36: Int, t41: Int) = locally {
                          val (e42: Int, t47: Int) = rank(h2.head)
                          (e42, (1 + (1 + t47)))
                        }
                        
                        locally {
                          val (e37: Int, t42: Int) = locally {
                            val (e39: Int, t44: Int) = rank(h1.head)
                            (e39, (1 + (1 + t44)))
                          }
                          
                          ((e36 < e37), (t42 + (t41 + 1)))
                        }
                        
                      }
                      
                      if (e15) {
                        locally {
                          val (e16: ConsHeap, t21: Int) = locally {
                            val (e18: BinomialHeap, t23: Int) = locally {
                              val (e21: BinomialHeap, t26: Int) = merge(h1, h2.tail)
                              (e21, (1 + (1 + t26)))
                            }
                            
                            (ConsHeap(h2.head, e18), (t23 + 2))
                          }
                          
                          (e16, (t20 + t21))
                        }
                        
                      } else {
                        locally {
                          val (e24: BinomialHeap, t29: Int) = locally {
                            val (e25: BinomialTree, t30: Int) = locally {
                              val (e33: BinomialTree, t38: Int) = link(h1.head, h2.head)
                              (e33, (1 + (1 + (1 + t38))))
                            }
                            
                            locally {
                              val (e28: BinomialHeap, t33: Int) = mergeWithCarry(e25, h1.tail, h2.tail)
                              (e28, (1 + (1 + (t30 + (1 + t33)))))
                            }
                            
                          }
                          
                          (e24, (t20 + t29))
                        }
                        
                      }
                    }
                    
                    (e14, (t10 + t19))
                  }
                  
                }
              }
              
              (e4, (t8 + t9))
            }
            
          } else {
            (h1, t8)
          }
        }
        
        (e2, (t6 + t7))
      }
      
    } else {
      (h2, t6)
    }
  }
  } ensuring(res11 => true)

  def leq(a : Element, b : Element) : (Boolean, Int) = {locally {
    val t257 = 3
    if ((a.n <= b.n)) {
      (true, t257)
    } else {
      (false, t257)
    }
  }
  }

  def root(t : BinomialTree) : (ElementAbs, Int) = {(t.elem, 1)}

  def rank(t : BinomialTree) : (Int, Int) = {(t.rank, 1)}

  def deleteMin(h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val (ir: (OptionalTree, BinomialHeap), it: Int) = locally {
      val (ir1: (OptionalTree, BinomialHeap), it1: Int) = locally {
        val (e162: (OptionalTree, BinomialHeap), t169: Int) = removeMinTree(h)
        (e162, (1 + t169))
      }
      
      ((ir1._1, ir1._2), (3 + (it1 + 1)))
    }
    
    locally {
      val (r4: BinomialHeap, t166: Int) = locally {
        val ir2 = ir._1
        locally {
          val (r6: BinomialHeap, t174: Int) = locally {
            val (r7: BinomialHeap, t176: Int) = locally {
              val t178 = 4
              if ((ir2.isInstanceOf[Some] && ir2.t.isInstanceOf[Node])) {
                locally {
                  val (e170: BinomialHeap, t179: Int) = locally {
                    val (e173: BinomialHeap, t182: Int) = merge(ir2.t.children, ir._2)
                    (e173, (2 + (1 + t182)))
                  }
                  
                  (e170, (t178 + t179))
                }
                
              } else {
                (h, t178)
              }
            }
            
            (r7, (t176 + 2))
          }
          
          (r6, (t174 + 2))
        }
        
      }
      
      (r4, (t166 + (it + 1)))
    }
    
  }
  } ensuring(res13 => true)

  def minTreeChildren(h : BinomialHeap) : Int = {locally {
    val min = (removeMinTree(h)._1 match {
      case (min, _) =>
        min
    })
    (min match {
      case None() =>
        0
      case Some(Node(_, _, ch)) =>
        treeNum(ch)
    })
  }
  }

  def insTree(t : BinomialTree, h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val t292 = 1
    if (h.isInstanceOf[ConsHeap]) {
      locally {
        val (e280: BinomialHeap, t293: Int) = locally {
          val (e281: Boolean, t294: Int) = locally {
            val (e311: Int, t324: Int) = locally {
              val (e317: Int, t330: Int) = rank(t)
              (e317, (1 + t330))
            }
            
            locally {
              val (e312: Int, t325: Int) = locally {
                val (e314: Int, t327: Int) = rank(h.head)
                (e314, (1 + (1 + t327)))
              }
              
              ((e311 < e312), (t325 + (t324 + 1)))
            }
            
          }
          
          if (e281) {
            (ConsHeap(t, h), (t294 + 1))
          } else {
            locally {
              val (e285: BinomialHeap, t298: Int) = locally {
                val (e286: Boolean, t299: Int) = locally {
                  val (e304: Int, t317: Int) = locally {
                    val (e310: Int, t323: Int) = rank(t)
                    (e310, (1 + t323))
                  }
                  
                  locally {
                    val (e305: Int, t318: Int) = locally {
                      val (e307: Int, t320: Int) = rank(h.head)
                      (e307, (1 + (1 + t320)))
                    }
                    
                    ((e304 > e305), (t318 + (t317 + 1)))
                  }
                  
                }
                
                if (e286) {
                  locally {
                    val (e287: ConsHeap, t300: Int) = locally {
                      val (e289: BinomialHeap, t302: Int) = locally {
                        val (e292: BinomialHeap, t305: Int) = insTree(t, h.tail)
                        (e292, (1 + (1 + t305)))
                      }
                      
                      (ConsHeap(h.head, e289), (t302 + 2))
                    }
                    
                    (e287, (t299 + t300))
                  }
                  
                } else {
                  locally {
                    val (e295: BinomialHeap, t308: Int) = locally {
                      val (e296: BinomialTree, t309: Int) = locally {
                        val (e302: BinomialTree, t315: Int) = link(t, h.head)
                        (e302, (1 + (1 + t315)))
                      }
                      
                      locally {
                        val (e298: BinomialHeap, t311: Int) = insTree(e296, h.tail)
                        (e298, (1 + (t309 + (1 + t311))))
                      }
                      
                    }
                    
                    (e295, (t299 + t308))
                  }
                  
                }
              }
              
              (e285, (t294 + t298))
            }
            
          }
        }
        
        (e280, (t292 + t293))
      }
      
    } else {
      (ConsHeap(t, NilHeap()), (t292 + 2))
    }
  }
  } ensuring(res15 => true)

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val t61 = 1
    if (h1.isInstanceOf[ConsHeap]) {
      locally {
        val (e57: BinomialHeap, t62: Int) = locally {
          val t63 = 1
          if (h2.isInstanceOf[ConsHeap]) {
            locally {
              val (e59: BinomialHeap, t64: Int) = locally {
                val (e60: Boolean, t65: Int) = locally {
                  val (e143: Int, t148: Int) = locally {
                    val (e149: Int, t154: Int) = rank(h1.head)
                    (e149, (1 + (1 + t154)))
                  }
                  
                  locally {
                    val (e144: Int, t149: Int) = locally {
                      val (e146: Int, t151: Int) = rank(h2.head)
                      (e146, (1 + (1 + t151)))
                    }
                    
                    ((e143 < e144), (t149 + (t148 + 1)))
                  }
                  
                }
                
                if (e60) {
                  locally {
                    val (e61: BinomialHeap, t66: Int) = locally {
                      val (e62: Boolean, t67: Int) = locally {
                        val (e83: Int, t88: Int) = locally {
                          val (e89: Int, t94: Int) = rank(t)
                          (e89, (1 + t94))
                        }
                        
                        locally {
                          val (e84: Int, t89: Int) = locally {
                            val (e86: Int, t91: Int) = rank(h1.head)
                            (e86, (1 + (1 + t91)))
                          }
                          
                          ((e83 < e84), (t89 + (t88 + 1)))
                        }
                        
                      }
                      
                      if (e62) {
                        locally {
                          val (e63: ConsHeap, t68: Int) = locally {
                            val (e65: ConsHeap, t70: Int) = locally {
                              val (e67: BinomialHeap, t72: Int) = locally {
                                val (e70: BinomialHeap, t75: Int) = merge(h1.tail, h2)
                                (e70, (1 + (1 + t75)))
                              }
                              
                              (ConsHeap(h1.head, e67), (t72 + 2))
                            }
                            
                            (ConsHeap(t, e65), (t70 + 1))
                          }
                          
                          (e63, (t67 + t68))
                        }
                        
                      } else {
                        locally {
                          val (e73: BinomialHeap, t78: Int) = locally {
                            val (e74: BinomialTree, t79: Int) = locally {
                              val (e81: BinomialTree, t86: Int) = link(t, h1.head)
                              (e81, (1 + (1 + t86)))
                            }
                            
                            locally {
                              val (e77: BinomialHeap, t82: Int) = mergeWithCarry(e74, h1.tail, h2)
                              (e77, (1 + (t79 + (1 + t82))))
                            }
                            
                          }
                          
                          (e73, (t67 + t78))
                        }
                        
                      }
                    }
                    
                    (e61, (t65 + t66))
                  }
                  
                } else {
                  locally {
                    val (e90: BinomialHeap, t95: Int) = locally {
                      val (e91: Boolean, t96: Int) = locally {
                        val (e135: Int, t140: Int) = locally {
                          val (e141: Int, t146: Int) = rank(h2.head)
                          (e141, (1 + (1 + t146)))
                        }
                        
                        locally {
                          val (e136: Int, t141: Int) = locally {
                            val (e138: Int, t143: Int) = rank(h1.head)
                            (e138, (1 + (1 + t143)))
                          }
                          
                          ((e135 < e136), (t141 + (t140 + 1)))
                        }
                        
                      }
                      
                      if (e91) {
                        locally {
                          val (e92: BinomialHeap, t97: Int) = locally {
                            val (e93: Boolean, t98: Int) = locally {
                              val (e114: Int, t119: Int) = locally {
                                val (e120: Int, t125: Int) = rank(t)
                                (e120, (1 + t125))
                              }
                              
                              locally {
                                val (e115: Int, t120: Int) = locally {
                                  val (e117: Int, t122: Int) = rank(h2.head)
                                  (e117, (1 + (1 + t122)))
                                }
                                
                                ((e114 < e115), (t120 + (t119 + 1)))
                              }
                              
                            }
                            
                            if (e93) {
                              locally {
                                val (e94: ConsHeap, t99: Int) = locally {
                                  val (e96: ConsHeap, t101: Int) = locally {
                                    val (e98: BinomialHeap, t103: Int) = locally {
                                      val (e101: BinomialHeap, t106: Int) = merge(h1, h2.tail)
                                      (e101, (1 + (1 + t106)))
                                    }
                                    
                                    (ConsHeap(h2.head, e98), (t103 + 2))
                                  }
                                  
                                  (ConsHeap(t, e96), (t101 + 1))
                                }
                                
                                (e94, (t98 + t99))
                              }
                              
                            } else {
                              locally {
                                val (e104: BinomialHeap, t109: Int) = locally {
                                  val (e105: BinomialTree, t110: Int) = locally {
                                    val (e112: BinomialTree, t117: Int) = link(t, h2.head)
                                    (e112, (1 + (1 + t117)))
                                  }
                                  
                                  locally {
                                    val (e108: BinomialHeap, t113: Int) = mergeWithCarry(e105, h1, h2.tail)
                                    (e108, (1 + (t110 + (1 + t113))))
                                  }
                                  
                                }
                                
                                (e104, (t98 + t109))
                              }
                              
                            }
                          }
                          
                          (e92, (t96 + t97))
                        }
                        
                      } else {
                        locally {
                          val (e121: ConsHeap, t126: Int) = locally {
                            val (e123: BinomialHeap, t128: Int) = locally {
                              val (e124: BinomialTree, t129: Int) = locally {
                                val (e132: BinomialTree, t137: Int) = link(h1.head, h2.head)
                                (e132, (1 + (1 + (1 + t137))))
                              }
                              
                              locally {
                                val (e127: BinomialHeap, t132: Int) = mergeWithCarry(e124, h1.tail, h2.tail)
                                (e127, (1 + (1 + (t129 + (1 + t132)))))
                              }
                              
                            }
                            
                            (ConsHeap(t, e123), (t128 + 1))
                          }
                          
                          (e121, (t96 + t126))
                        }
                        
                      }
                    }
                    
                    (e90, (t65 + t95))
                  }
                  
                }
              }
              
              (e59, (t63 + t64))
            }
            
          } else {
            locally {
              val (e151: BinomialHeap, t156: Int) = locally {
                val (e154: BinomialHeap, t159: Int) = insTree(t, h1)
                (e154, (1 + t159))
              }
              
              (e151, (t63 + t156))
            }
            
          }
        }
        
        (e57, (t61 + t62))
      }
      
    } else {
      locally {
        val (e156: BinomialHeap, t161: Int) = locally {
          val (e159: BinomialHeap, t164: Int) = insTree(t, h2)
          (e159, (1 + t164))
        }
        
        (e156, (t61 + t161))
      }
      
    }
  }
  } ensuring(res12 => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def removeMinTree(h : BinomialHeap) : ((OptionalTree, BinomialHeap), Int) = {locally {
    val t192 = 4
    if ((h.isInstanceOf[ConsHeap] && h.tail.isInstanceOf[NilHeap])) {
      ((Some(h.head), NilHeap()), (t192 + 4))
    } else {
      locally {
        val (e189: (OptionalTree, BinomialHeap), t198: Int) = locally {
          val t199 = 1
          if (h.isInstanceOf[ConsHeap]) {
            locally {
              val (e191: (OptionalTree, BinomialHeap), t200: Int) = locally {
                val (ir4: (OptionalTree, BinomialHeap), it4: Int) = locally {
                  val (ir5: (OptionalTree, BinomialHeap), it5: Int) = locally {
                    val (e193: (OptionalTree, BinomialHeap), t204: Int) = removeMinTree(h.tail)
                    (e193, (1 + (1 + t204)))
                  }
                  
                  ((ir5._1, ir5._2), (3 + (it5 + 1)))
                }
                
                locally {
                  val (r8: (OptionalTree, BinomialHeap), t201: Int) = locally {
                    val ir6 = ir4._1
                    locally {
                      val (r10: (OptionalTree, BinomialHeap), t210: Int) = locally {
                        val (r11: (OptionalTree, BinomialHeap), t212: Int) = locally {
                          val t214 = 1
                          if (ir6.isInstanceOf[None]) {
                            ((Some(h.head), h.tail), (t214 + 4))
                          } else {
                            locally {
                              val (e208: (OptionalTree, BinomialHeap), t221: Int) = locally {
                                val (e209: Boolean, t222: Int) = locally {
                                  val (e224: Element, t237: Int) = locally {
                                    val (e231: Element, t244: Int) = root(h.head)
                                    (e231, (1 + (1 + t244)))
                                  }
                                  
                                  locally {
                                    val (e225: Element, t238: Int) = locally {
                                      val (e228: Element, t241: Int) = root(ir6.t)
                                      (e228, (1 + (1 + t241)))
                                    }
                                    
                                    locally {
                                      val (e226: Boolean, t239: Int) = leq(e224, e225)
                                      (e226, (t238 + (t237 + (1 + t239))))
                                    }
                                    
                                  }
                                  
                                }
                                
                                if (e209) {
                                  ((Some(h.head), h.tail), (t222 + 4))
                                } else {
                                  ((Some(ir6.t), ConsHeap(h.head, ir4._2)), (t222 + 5))
                                }
                              }
                              
                              (e208, (t214 + t221))
                            }
                            
                          }
                        }
                        
                        (r11, (t212 + 2))
                      }
                      
                      (r10, (t210 + 2))
                    }
                    
                  }
                  
                  (r8, (t201 + (it4 + 1)))
                }
                
              }
              
              (e191, (t199 + t200))
            }
            
          } else {
            ((None(), NilHeap()), (t199 + 3))
          }
        }
        
        (e189, (t192 + t198))
      }
      
    }
  }
  } ensuring(res14 => (treeNum(res14._1._2) <= treeNum(h)))

  def link(t1 : BinomialTree, t2 : BinomialTree) : (BinomialTree, Int) = {locally {
    val (e251: Boolean, t264: Int) = locally {
      val (e276: Boolean, t289: Int) = leq(t1.elem, t2.elem)
      (e276, (1 + (1 + (1 + t289))))
    }
    
    if (e251) {
      (Node((t1.rank + 1), t1.elem, ConsHeap(t2, t1.children)), (t264 + 6))
    } else {
      (Node((t1.rank + 1), t2.elem, ConsHeap(t1, t2.children)), (t264 + 6))
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object BinomialHeap {
  case class None() extends OptionalTree

  case class NodeL(head: BinomialHeap, tail: List) extends List

  sealed abstract class ElementAbs

  case class Some(t: BinomialTree) extends OptionalTree

  sealed abstract class List

  case class Node(rank: Int, elem: Element, children: BinomialHeap) extends BinomialTree

  sealed abstract class BinomialHeap

  case class Element(n: Int) extends ElementAbs

  case class ConsHeap(head: BinomialTree, tail: BinomialHeap) extends BinomialHeap

  sealed abstract class BinomialTree

  sealed abstract class OptionalTree

  case class NilL() extends List

  case class NilHeap() extends BinomialHeap

  def merge(h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {if (h1.isInstanceOf[ConsHeap]) {
    locally {
      val (e2: BinomialHeap, t7: Int) = if (h2.isInstanceOf[ConsHeap]) {
        locally {
          val (e4: BinomialHeap, t9: Int) = locally {
            val (e5: Boolean, t10: Int) = locally {
              val (e44: Int, t49: Int) = locally {
                val (e50: Int, t55: Int) = rank(h1.head)
                (e50, (1 + (1 + t55)))
              }
              
              locally {
                val (e45: Int, t50: Int) = locally {
                  val (e47: Int, t52: Int) = rank(h2.head)
                  (e47, (1 + (1 + t52)))
                }
                
                ((e44 < e45), (t50 + (t49 + 1)))
              }
              
            }
            
            if (e5) {
              locally {
                val (e6: ConsHeap, t11: Int) = locally {
                  val (e8: BinomialHeap, t13: Int) = locally {
                    val (e11: BinomialHeap, t16: Int) = merge(h1.tail, h2)
                    (e11, (1 + (1 + t16)))
                  }
                  
                  (ConsHeap(h1.head, e8), (t13 + 2))
                }
                
                (e6, (t10 + t11))
              }
              
            } else {
              locally {
                val (e14: BinomialHeap, t19: Int) = locally {
                  val (e15: Boolean, t20: Int) = locally {
                    val (e36: Int, t41: Int) = locally {
                      val (e42: Int, t47: Int) = rank(h2.head)
                      (e42, (1 + (1 + t47)))
                    }
                    
                    locally {
                      val (e37: Int, t42: Int) = locally {
                        val (e39: Int, t44: Int) = rank(h1.head)
                        (e39, (1 + (1 + t44)))
                      }
                      
                      ((e36 < e37), (t42 + (t41 + 1)))
                    }
                    
                  }
                  
                  if (e15) {
                    locally {
                      val (e16: ConsHeap, t21: Int) = locally {
                        val (e18: BinomialHeap, t23: Int) = locally {
                          val (e21: BinomialHeap, t26: Int) = merge(h1, h2.tail)
                          (e21, (1 + (1 + t26)))
                        }
                        
                        (ConsHeap(h2.head, e18), (t23 + 2))
                      }
                      
                      (e16, (t20 + t21))
                    }
                    
                  } else {
                    locally {
                      val (e24: BinomialHeap, t29: Int) = locally {
                        val (e25: BinomialTree, t30: Int) = locally {
                          val (e33: BinomialTree, t38: Int) = link(h1.head, h2.head)
                          (e33, (1 + (1 + (1 + t38))))
                        }
                        
                        locally {
                          val (e28: BinomialHeap, t33: Int) = mergeWithCarry(e25, h1.tail, h2.tail)
                          (e28, (1 + (1 + (t30 + (1 + t33)))))
                        }
                        
                      }
                      
                      (e24, (t20 + t29))
                    }
                    
                  }
                }
                
                (e14, (t10 + t19))
              }
              
            }
          }
          
          (e4, (1 + t9))
        }
        
      } else {
        (h1, 1)
      }
      (e2, (1 + t7))
    }
    
  } else {
    (h2, 1)
  }} ensuring(res11 => true)

  def leq(a : Element, b : Element) : (Boolean, Int) = {    require((a.isInstanceOf[Element] && b.isInstanceOf[Element]));
if ((a.n <= b.n)) {
    (true, 3)
  } else {
    (false, 3)
  }}

  def root(t : BinomialTree) : (ElementAbs, Int) = {(t.elem, 1)}

  def rank(t : BinomialTree) : (Int, Int) = {(t.rank, 1)}

  def deleteMin(h : BinomialHeap) : (BinomialHeap, Int) = {locally {
    val (ir: (OptionalTree, BinomialHeap), it: Int) = locally {
      val (ir1: (OptionalTree, BinomialHeap), it1: Int) = locally {
        val (e162: (OptionalTree, BinomialHeap), t169: Int) = removeMinTree(h)
        (e162, (1 + t169))
      }
      
      ((ir1._1, ir1._2), (3 + (it1 + 1)))
    }
    
    locally {
      val (r4: BinomialHeap, t166: Int) = locally {
        val ir2 = ir._1
        locally {
          val (r6: BinomialHeap, t174: Int) = locally {
            val (r7: BinomialHeap, t176: Int) = if ((ir2.isInstanceOf[Some] && ir2.t.isInstanceOf[Node])) {
              locally {
                val (e170: BinomialHeap, t179: Int) = locally {
                  val (e173: BinomialHeap, t182: Int) = merge(ir2.t.children, ir._2)
                  (e173, (2 + (1 + t182)))
                }
                
                (e170, (4 + t179))
              }
              
            } else {
              (h, 4)
            }
            (r7, (t176 + 2))
          }
          
          (r6, (t174 + 2))
        }
        
      }
      
      (r4, (t166 + (it + 1)))
    }
    
  }
  } ensuring(res13 => true)

  def minTreeChildren(h : BinomialHeap) : Int = {((removeMinTree(h)._1 match {
    case (min, _) =>
      min
  }) match {
    case None() =>
      0
    case Some(Node(_, _, ch)) =>
      treeNum(ch)
  })}

  def insTree(t : BinomialTree, h : BinomialHeap) : (BinomialHeap, Int) = {if (h.isInstanceOf[ConsHeap]) {
    locally {
      val (e280: BinomialHeap, t293: Int) = locally {
        val (e281: Boolean, t294: Int) = locally {
          val (e311: Int, t324: Int) = locally {
            val (e317: Int, t330: Int) = rank(t)
            (e317, (1 + t330))
          }
          
          locally {
            val (e312: Int, t325: Int) = locally {
              val (e314: Int, t327: Int) = rank(h.head)
              (e314, (1 + (1 + t327)))
            }
            
            ((e311 < e312), (t325 + (t324 + 1)))
          }
          
        }
        
        if (e281) {
          (ConsHeap(t, h), (t294 + 1))
        } else {
          locally {
            val (e285: BinomialHeap, t298: Int) = locally {
              val (e286: Boolean, t299: Int) = locally {
                val (e304: Int, t317: Int) = locally {
                  val (e310: Int, t323: Int) = rank(t)
                  (e310, (1 + t323))
                }
                
                locally {
                  val (e305: Int, t318: Int) = locally {
                    val (e307: Int, t320: Int) = rank(h.head)
                    (e307, (1 + (1 + t320)))
                  }
                  
                  ((e304 > e305), (t318 + (t317 + 1)))
                }
                
              }
              
              if (e286) {
                locally {
                  val (e287: ConsHeap, t300: Int) = locally {
                    val (e289: BinomialHeap, t302: Int) = locally {
                      val (e292: BinomialHeap, t305: Int) = insTree(t, h.tail)
                      (e292, (1 + (1 + t305)))
                    }
                    
                    (ConsHeap(h.head, e289), (t302 + 2))
                  }
                  
                  (e287, (t299 + t300))
                }
                
              } else {
                locally {
                  val (e295: BinomialHeap, t308: Int) = locally {
                    val (e296: BinomialTree, t309: Int) = locally {
                      val (e302: BinomialTree, t315: Int) = link(t, h.head)
                      (e302, (1 + (1 + t315)))
                    }
                    
                    locally {
                      val (e298: BinomialHeap, t311: Int) = insTree(e296, h.tail)
                      (e298, (1 + (t309 + (1 + t311))))
                    }
                    
                  }
                  
                  (e295, (t299 + t308))
                }
                
              }
            }
            
            (e285, (t294 + t298))
          }
          
        }
      }
      
      (e280, (1 + t293))
    }
    
  } else {
    (ConsHeap(t, NilHeap()), (1 + 2))
  }} ensuring(res15 => true)

  def mergeWithCarry(t : BinomialTree, h1 : BinomialHeap, h2 : BinomialHeap) : (BinomialHeap, Int) = {if (h1.isInstanceOf[ConsHeap]) {
    locally {
      val (e57: BinomialHeap, t62: Int) = if (h2.isInstanceOf[ConsHeap]) {
        locally {
          val (e59: BinomialHeap, t64: Int) = locally {
            val (e60: Boolean, t65: Int) = locally {
              val (e143: Int, t148: Int) = locally {
                val (e149: Int, t154: Int) = rank(h1.head)
                (e149, (1 + (1 + t154)))
              }
              
              locally {
                val (e144: Int, t149: Int) = locally {
                  val (e146: Int, t151: Int) = rank(h2.head)
                  (e146, (1 + (1 + t151)))
                }
                
                ((e143 < e144), (t149 + (t148 + 1)))
              }
              
            }
            
            if (e60) {
              locally {
                val (e61: BinomialHeap, t66: Int) = locally {
                  val (e62: Boolean, t67: Int) = locally {
                    val (e83: Int, t88: Int) = locally {
                      val (e89: Int, t94: Int) = rank(t)
                      (e89, (1 + t94))
                    }
                    
                    locally {
                      val (e84: Int, t89: Int) = locally {
                        val (e86: Int, t91: Int) = rank(h1.head)
                        (e86, (1 + (1 + t91)))
                      }
                      
                      ((e83 < e84), (t89 + (t88 + 1)))
                    }
                    
                  }
                  
                  if (e62) {
                    locally {
                      val (e63: ConsHeap, t68: Int) = locally {
                        val (e65: ConsHeap, t70: Int) = locally {
                          val (e67: BinomialHeap, t72: Int) = locally {
                            val (e70: BinomialHeap, t75: Int) = merge(h1.tail, h2)
                            (e70, (1 + (1 + t75)))
                          }
                          
                          (ConsHeap(h1.head, e67), (t72 + 2))
                        }
                        
                        (ConsHeap(t, e65), (t70 + 1))
                      }
                      
                      (e63, (t67 + t68))
                    }
                    
                  } else {
                    locally {
                      val (e73: BinomialHeap, t78: Int) = locally {
                        val (e74: BinomialTree, t79: Int) = locally {
                          val (e81: BinomialTree, t86: Int) = link(t, h1.head)
                          (e81, (1 + (1 + t86)))
                        }
                        
                        locally {
                          val (e77: BinomialHeap, t82: Int) = mergeWithCarry(e74, h1.tail, h2)
                          (e77, (1 + (t79 + (1 + t82))))
                        }
                        
                      }
                      
                      (e73, (t67 + t78))
                    }
                    
                  }
                }
                
                (e61, (t65 + t66))
              }
              
            } else {
              locally {
                val (e90: BinomialHeap, t95: Int) = locally {
                  val (e91: Boolean, t96: Int) = locally {
                    val (e135: Int, t140: Int) = locally {
                      val (e141: Int, t146: Int) = rank(h2.head)
                      (e141, (1 + (1 + t146)))
                    }
                    
                    locally {
                      val (e136: Int, t141: Int) = locally {
                        val (e138: Int, t143: Int) = rank(h1.head)
                        (e138, (1 + (1 + t143)))
                      }
                      
                      ((e135 < e136), (t141 + (t140 + 1)))
                    }
                    
                  }
                  
                  if (e91) {
                    locally {
                      val (e92: BinomialHeap, t97: Int) = locally {
                        val (e93: Boolean, t98: Int) = locally {
                          val (e114: Int, t119: Int) = locally {
                            val (e120: Int, t125: Int) = rank(t)
                            (e120, (1 + t125))
                          }
                          
                          locally {
                            val (e115: Int, t120: Int) = locally {
                              val (e117: Int, t122: Int) = rank(h2.head)
                              (e117, (1 + (1 + t122)))
                            }
                            
                            ((e114 < e115), (t120 + (t119 + 1)))
                          }
                          
                        }
                        
                        if (e93) {
                          locally {
                            val (e94: ConsHeap, t99: Int) = locally {
                              val (e96: ConsHeap, t101: Int) = locally {
                                val (e98: BinomialHeap, t103: Int) = locally {
                                  val (e101: BinomialHeap, t106: Int) = merge(h1, h2.tail)
                                  (e101, (1 + (1 + t106)))
                                }
                                
                                (ConsHeap(h2.head, e98), (t103 + 2))
                              }
                              
                              (ConsHeap(t, e96), (t101 + 1))
                            }
                            
                            (e94, (t98 + t99))
                          }
                          
                        } else {
                          locally {
                            val (e104: BinomialHeap, t109: Int) = locally {
                              val (e105: BinomialTree, t110: Int) = locally {
                                val (e112: BinomialTree, t117: Int) = link(t, h2.head)
                                (e112, (1 + (1 + t117)))
                              }
                              
                              locally {
                                val (e108: BinomialHeap, t113: Int) = mergeWithCarry(e105, h1, h2.tail)
                                (e108, (1 + (t110 + (1 + t113))))
                              }
                              
                            }
                            
                            (e104, (t98 + t109))
                          }
                          
                        }
                      }
                      
                      (e92, (t96 + t97))
                    }
                    
                  } else {
                    locally {
                      val (e121: ConsHeap, t126: Int) = locally {
                        val (e123: BinomialHeap, t128: Int) = locally {
                          val (e124: BinomialTree, t129: Int) = locally {
                            val (e132: BinomialTree, t137: Int) = link(h1.head, h2.head)
                            (e132, (1 + (1 + (1 + t137))))
                          }
                          
                          locally {
                            val (e127: BinomialHeap, t132: Int) = mergeWithCarry(e124, h1.tail, h2.tail)
                            (e127, (1 + (1 + (t129 + (1 + t132)))))
                          }
                          
                        }
                        
                        (ConsHeap(t, e123), (t128 + 1))
                      }
                      
                      (e121, (t96 + t126))
                    }
                    
                  }
                }
                
                (e90, (t65 + t95))
              }
              
            }
          }
          
          (e59, (1 + t64))
        }
        
      } else {
        locally {
          val (e151: BinomialHeap, t156: Int) = locally {
            val (e154: BinomialHeap, t159: Int) = insTree(t, h1)
            (e154, (1 + t159))
          }
          
          (e151, (1 + t156))
        }
        
      }
      (e57, (1 + t62))
    }
    
  } else {
    locally {
      val (e156: BinomialHeap, t161: Int) = locally {
        val (e159: BinomialHeap, t164: Int) = insTree(t, h2)
        (e159, (1 + t164))
      }
      
      (e156, (1 + t161))
    }
    
  }} ensuring(res12 => true)

  def isEmpty(t : BinomialHeap) : Boolean = {(t match {
    case ConsHeap(_, _) =>
      false
    case NilHeap() =>
      true
  })}

  def treeNum(h : BinomialHeap) : Int = {(h match {
    case ConsHeap(head, tail) =>
      (1 + treeNum(tail))
    case NilHeap() =>
      0
  })}

  def removeMinTree(h : BinomialHeap) : ((OptionalTree, BinomialHeap), Int) = {if ((h.isInstanceOf[ConsHeap] && h.tail.isInstanceOf[NilHeap])) {
    ((Some(h.head), NilHeap()), (4 + 4))
  } else {
    locally {
      val (e189: (OptionalTree, BinomialHeap), t198: Int) = if (h.isInstanceOf[ConsHeap]) {
        locally {
          val (e191: (OptionalTree, BinomialHeap), t200: Int) = locally {
            val (ir4: (OptionalTree, BinomialHeap), it4: Int) = locally {
              val (ir5: (OptionalTree, BinomialHeap), it5: Int) = locally {
                val (e193: (OptionalTree, BinomialHeap), t204: Int) = removeMinTree(h.tail)
                (e193, (1 + (1 + t204)))
              }
              
              ((ir5._1, ir5._2), (3 + (it5 + 1)))
            }
            
            locally {
              val (r8: (OptionalTree, BinomialHeap), t201: Int) = locally {
                val ir6 = ir4._1
                locally {
                  val (r10: (OptionalTree, BinomialHeap), t210: Int) = locally {
                    val (r11: (OptionalTree, BinomialHeap), t212: Int) = if (ir6.isInstanceOf[None]) {
                      ((Some(h.head), h.tail), (1 + 4))
                    } else {
                      locally {
                        val (e208: (OptionalTree, BinomialHeap), t221: Int) = locally {
                          val (e209: Boolean, t222: Int) = locally {
                            val (e224: Element, t237: Int) = locally {
                              val (e231: Element, t244: Int) = root(h.head)
                              (e231, (1 + (1 + t244)))
                            }
                            
                            locally {
                              val (e225: Element, t238: Int) = locally {
                                val (e228: Element, t241: Int) = root(ir6.t)
                                (e228, (1 + (1 + t241)))
                              }
                              
                              locally {
                                val (e226: Boolean, t239: Int) = leq(e224, e225)
                                (e226, (t238 + (t237 + (1 + t239))))
                              }
                              
                            }
                            
                          }
                          
                          if (e209) {
                            ((Some(h.head), h.tail), (t222 + 4))
                          } else {
                            ((Some(ir6.t), ConsHeap(h.head, ir4._2)), (t222 + 5))
                          }
                        }
                        
                        (e208, (1 + t221))
                      }
                      
                    }
                    (r11, (t212 + 2))
                  }
                  
                  (r10, (t210 + 2))
                }
                
              }
              
              (r8, (t201 + (it4 + 1)))
            }
            
          }
          
          (e191, (1 + t200))
        }
        
      } else {
        ((None(), NilHeap()), (1 + 3))
      }
      (e189, (4 + t198))
    }
    
  }} ensuring(res14 => (treeNum(res14._1._2) <= treeNum(h)))

  def link(t1 : BinomialTree, t2 : BinomialTree) : (BinomialTree, Int) = {locally {
    val (e251: Boolean, t264: Int) = locally {
      val (e276: Boolean, t289: Int) = leq(t1.elem, t2.elem)
      (e276, (1 + (1 + (1 + t289))))
    }
    
    if (e251) {
      (Node((t1.rank + 1), t1.elem, ConsHeap(t2, t1.children)), (t264 + 6))
    } else {
      (Node((t1.rank + 1), t2.elem, ConsHeap(t1, t2.children)), (t264 + 6))
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: merge template --> (res11._2 ≤ (((a?1 * treeNum(h1)) + (b?1 * treeNum(h2))) + c?))
Function: deleteMin template --> (res13._2 ≤ (((a?3 * minTreeChildren(h)) + (b?3 * treeNum(h))) + c?1))
Function: insTree template --> (res15._2 ≤ ((a? * treeNum(h)) + b?))
Function: mergeWithCarry template --> (res12._2 ≤ (((d? * treeNum(h1)) + (e? * treeNum(h2))) + f?))
Function: removeMinTree template --> (res14._2 ≤ ((a?2 * treeNum(h)) + b?2))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(link, treeNum, insTree, mergeWithCarry, merge, removeMinTree, minTreeChildren, deleteMin)
[[34m Info  [0m] - considering function insTree...
[[34m Info  [0m] Body: if (h.isInstanceOf[ConsHeap])
            (let (e280,t293 := (let (e281,t294 := (let (e311,t324 := (let (e317,t330 := rank(t)) in
              (e317, (1 + t330)))) in
              (let (e312,t325 := (let (e314,t327 := rank(h.head)) in
                (e314, (1 + (1 + t327))))) in
                ((e311 < e312), (t325 + (t324 + 1)))))) in
              if (e281)
                (ConsHeap(t, h), (t294 + 1))
              else
                (let (e285,t298 := (let (e286,t299 := (let (e304,t317 := (let (e310,t323 := rank(t)) in
                  (e310, (1 + t323)))) in
                  (let (e305,t318 := (let (e307,t320 := rank(h.head)) in
                    (e307, (1 + (1 + t320))))) in
                    ((e304 > e305), (t318 + (t317 + 1)))))) in
                  if (e286)
                    (let (e287,t300 := (let (e289,t302 := (let (e292,t305 := insTree(t, h.tail)) in
                      (e292, (1 + (1 + t305))))) in
                      (ConsHeap(h.head, e289), (t302 + 2)))) in
                      (e287, (t299 + t300)))
                  else
                    (let (e295,t308 := (let (e296,t309 := (let (e302,t315 := link(t, h.head)) in
                      (e302, (1 + (1 + t315))))) in
                      (let (e298,t311 := insTree(e296, h.tail)) in
                        (e298, (1 + (t309 + (1 + t311))))))) in
                      (e295, (t299 + t308))))) in
                  (e285, (t294 + t298))))) in
              (e280, (1 + t293)))
          else
            (ConsHeap(t, NilHeap()), (1 + 2))
[[34m Info  [0m] Post: true
falttened Body: ((res15 == ifres) && ((ci && (ci == h.isInstanceOf[ConsHeap]) && (ifres == tp) && (arg == (1 + t293)) && (tp == (e280, arg)) && (t293 == ts) && (ts == ifres1._2) && (t324 == (1 + t330)) && (tres6 == r12) && (r12 == rank(t)) && (e280 == ts1) && (ts1 == ifres1._1) && (e314 == ts2) && (ts2 == tres5._1) && (tres5 == r13) && (cs == h.head) && (r13 == rank(cs)) && (t294 == (t325 + (t324 + 1))) && (t330 == ts3) && (ts3 == tres6._2) && (e311 == e317) && (!(e281) || (e311 < e312)) && ((e311 >= e312) || e281) && (t327 == ts4) && (ts4 == tres5._2) && (t325 == (1 + (1 + t327))) && (e317 == ts5) && (ts5 == tres6._1) && ((e281 && (ifres1 == tp1) && (cc == ConsHeap(t, h)) && (arg1 == (t294 + 1)) && (tp1 == (cc, arg1))) || (!(e281) && (ifres1 == tp2) && (arg2 == (t294 + t298)) && (tp2 == (e285, arg2)) && (tres4 == r14) && (r14 == rank(t)) && (e307 == ts6) && (ts6 == tres3._1) && (!(e286) || (e304 > e305)) && ((e304 <= e305) || e286) && (tres3 == r15) && (cs1 == h.head) && (r15 == rank(cs1)) && (t320 == ts7) && (ts7 == tres3._2) && (t299 == (t318 + (t317 + 1))) && (t323 == ts8) && (ts8 == tres4._2) && (e285 == ts9) && (ts9 == ifres2._1) && (e310 == ts10) && (ts10 == tres4._1) && (t318 == (1 + (1 + t320))) && ((e286 && (ifres2 == tp3) && (arg3 == (t299 + t300)) && (tp3 == (e287, arg3)) && (t300 == (t302 + 2)) && (e287 == cc1) && (cs2 == h.head) && (cc1 == ConsHeap(cs2, e289)) && (tres == r16) && (cs3 == h.tail) && (r16 == insTree(t, cs3)) && (e289 == e292) && (t302 == (1 + (1 + t305))) && (t305 == ts11) && (ts11 == tres._2) && (e292 == ts12) && (ts12 == tres._1)) || (!(e286) && (ifres2 == tp4) && (arg4 == (t299 + t308)) && (tp4 == (e295, arg4)) && (e302 == ts13) && (ts13 == tres2._1) && (t309 == (1 + (1 + t315))) && (t315 == ts14) && (ts14 == tres2._2) && (t311 == ts15) && (ts15 == tres1._2) && (e298 == ts16) && (ts16 == tres1._1) && (t308 == (1 + (t309 + (1 + t311)))) && (e296 == e302) && (tres1 == r17) && (cs4 == h.tail) && (r17 == insTree(e296, cs4)) && (e295 == e298) && (tres2 == r18) && (cs5 == h.head) && (r18 == link(t, cs5)))) && (t317 == (1 + t323)) && (t298 == ts17) && (ts17 == ifres2._2) && (e305 == e307) && (e304 == e310))) && (e312 == e314)) || (!(ci1) && (ci1 == h.isInstanceOf[ConsHeap]) && (ifres == tp5) && (cc2 == NilHeap()) && (cc3 == ConsHeap(t, cc2)) && (arg5 == (1 + 2)) && (tp5 == (cc3, arg5)))))
Flattened Post: ((ts18 > ((a? * r19) + b?)) && (ts18 == res15._2) && (r19 == treeNum(h)))
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.16s
2: solved... in 0.161s
1: solved... in 0.017s
2: solved... in 0.008s
1: solved... in 0.015s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.015s
2: solved... in 0.007s
1: solved... in 0.012s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.012s
2: solved... in 0.007s
1: solved... in 0.011s
2: solved... in 0.008s
1: solved... in 0.012s
2: solved... in 0.008s
1: solved... in 0.011s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.007s
1: solved... in 0.01s
2: solved... in 0.007s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.011s
2: solved... in 0.007s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.007s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.007s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.018s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.024s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.01s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.01s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.008s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.009s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.01s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.009s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.027s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.01s
2: solved... in 0.012s
1: solved... in 0.01s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.01s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.015s
1: solved... in 0.009s
2: solved... in 0.013s
1: solved... in 0.009s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.011s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.013s
1: solved... in 0.008s
2: solved... in 0.013s
1: solved... in 0.009s
2: solved... in 0.013s
1: solved... in 0.009s
2: solved... in 0.017s
1: solved... in 0.01s
2: solved... in 0.015s
1: solved... in 0.01s
2: solved... in 0.013s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.008s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.012s
1: solved... in 0.009s
2: solved... in 0.013s
1: solved... in 0.008s
2: solved... in 0.013s
1: solved... in 0.008s
2: solved... in 0.013s
1: solved... in 0.008s
2: solved... in 0.016s
1: solved... in 0.009s
2: solved... in 0.012s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/8
Unrolled calls: Set((r19 == treeNum(h)), (r13 == rank(cs)), (r15 == rank(cs1)), (r14 == rank(t)), (r16 == insTree(t, cs3)), (r12 == rank(t)), (r18 == link(t, cs5)), (r17 == insTree(e296, cs4)))
Inlining (r13 == rank(cs))
Unrolling (r17 == insTree(e296, cs4))
Inlining (r12 == rank(t))
Inlining (r15 == rank(cs1))
Inlining (r14 == rank(t))
Inlining (r18 == link(t, cs5))
Unrolling (r16 == insTree(t, cs3))
Creating VC for treeNum
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function treeNum : (((a?185 * #res) + a?184) ≤ 0)
Unrolling (r19 == treeNum(h))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.024s
2: solved... in 0.006s
1: solved... in 0.02s
2: solved... in 0.01s
1: solved... in 0.023s
2: solved... in 0.007s
1: solved... in 0.025s
2: solved... in 0.007s
1: solved... in 0.024s
2: solved... in 0.007s
1: solved... in 0.018s
2: solved... in 0.007s
1: solved... in 0.019s
2: solved... in 0.006s
1: solved... in 0.02s
2: solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 19/19
Unrolled calls: Set((r35 == treeNum(cs30)), (r21 == rank(cs8)), (r33 == rank(t)), (r28 == rank(t)), (r37 == treeNum(cs4)), (r22 == rank(e296)), (r23 == insTree(e296, cs10)), (r29 == insTree(t, cs24)), (r30 == insTree(e356, cs26)), (r20 == rank(cs7)), (r27 == leq(cs16, cs17)), (r36 == treeNum(cs31)), (r32 == rank(cs28)), (r31 == link(t, cs27)), (r25 == link(e296, cs12)), (r38 == treeNum(cs3)), (r24 == insTree(e335, cs11)), (r34 == rank(cs29)), (r26 == rank(e296)))
Inlining (r32 == rank(cs28))
Inlining (r22 == rank(e296))
Inlining (r27 == leq(cs16, cs17))
Inlining (r31 == link(t, cs27))
Inlining (r34 == rank(cs29))
Inlining (r25 == link(e296, cs12))
Unrolling (r38 == treeNum(cs3))
Unrolling (r36 == treeNum(cs31))
Inlining (r21 == rank(cs8))
Unrolling (r37 == treeNum(cs4))
Inlining (r26 == rank(e296))
Unrolling (r35 == treeNum(cs30))
Inlining (r28 == rank(t))
Inlining (r33 == rank(t))
Inlining (r20 == rank(cs7))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.024s
2: solved... in 0.006s
1: solved... in 0.026s
2: solved... in 0.006s
1: solved... in 0.025s
2: solved... in 0.006s
1: solved... in 0.026s
2: solved... in 0.007s
1: solved... in 0.026s
2: solved... in 0.006s
1: solved... in 0.026s
2: solved... in 0.007s
1: solved... in 0.024s
2: solved... in 0.008s
1: solved... in 0.027s
2: solved... in 0.006s
1: solved... in 0.024s
2: solved... in 0.007s
1: solved... in 0.027s
2: solved... in 0.007s
1: solved... in 0.026s
2: solved... in 0.007s
1: solved... in 0.026s
2: solved... in 0.008s
1: solved... in 0.027s
2: solved... in 0.008s
1: solved... in 0.026s
2: solved... in 0.008s
1: solved... in 0.026s
2: solved... in 0.008s
1: solved... in 0.026s
2: solved... in 0.008s
1: solved... in 0.03s
2: solved... in 0.01s
1: solved... in 0.03s
2: solved... in 0.009s
1: solved... in 0.027s
2: solved... in 0.008s
1: solved... in 0.027s
2: solved... in 0.009s
1: solved... in 0.03s
2: solved... in 0.008s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.024s
2: solved... in 0.009s
1: solved... in 0.025s
2: solved... in 0.011s
1: solved... in 0.028s
2: solved... in 0.009s
1: solved... in 0.026s
2: solved... in 0.008s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.024s
2: solved... in 0.009s
1: solved... in 0.025s
2: solved... in 0.009s
1: solved... in 0.025s
2: solved... in 0.009s
1: solved... in 0.029s
2: solved... in 0.009s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.029s
2: solved... in 0.01s
1: solved... in 0.023s
2: solved... in 0.009s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.026s
2: solved... in 0.009s
1: solved... in 0.025s
2: solved... in 0.011s
1: solved... in 0.027s
2: solved... in 0.01s
1: solved... in 0.025s
2: solved... in 0.01s
1: solved... in 0.026s
2: solved... in 0.01s
1: solved... in 0.029s
2: solved... in 0.01s
1: solved... in 0.026s
2: solved... in 0.011s
1: solved... in 0.026s
2: solved... in 0.011s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.027s
2: solved... in 0.011s
1: solved... in 0.025s
2: solved... in 0.011s
1: solved... in 0.026s
2: solved... in 0.011s
1: solved... in 0.025s
2: solved... in 0.011s
1: solved... in 0.025s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.025s
2: solved... in 0.012s
1: solved... in 0.027s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.011s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.03s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.012s
1: solved... in 0.025s
2: solved... in 0.013s
1: solved... in 0.025s
2: solved... in 0.012s
1: solved... in 0.035s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.027s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.013s
1: solved... in 0.026s
2: solved... in 0.015s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.025s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.03s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.014s
1: solved... in 0.026s
2: solved... in 0.015s
1: solved... in 0.028s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.016s
1: solved... in 0.026s
2: solved... in 0.015s
1: solved... in 0.032s
2: solved... in 0.016s
1: solved... in 0.027s
2: solved... in 0.015s
1: solved... in 0.025s
2: solved... in 0.016s
1: solved... in 0.026s
2: solved... in 0.015s
1: solved... in 0.025s
2: solved... in 0.019s
1: solved... in 0.023s
2: solved... in 0.015s
1: solved... in 0.027s
2: solved... in 0.016s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.016s
1: solved... in 0.028s
2: solved... in 0.016s
1: solved... in 0.027s
2: solved... in 0.019s
1: solved... in 0.029s
2: solved... in 0.016s
1: solved... in 0.028s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.025s
2: solved... in 0.017s
1: solved... in 0.029s
2: solved... in 0.016s
1: solved... in 0.025s
2: solved... in 0.016s
1: solved... in 0.026s
2: solved... in 0.016s
1: solved... in 0.028s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.017s
1: solved... in 0.027s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.017s
1: solved... in 0.027s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.026s
2: solved... in 0.017s
1: solved... in 0.028s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.029s
2: solved... in 0.017s
1: solved... in 0.025s
2: solved... in 0.019s
1: solved... in 0.027s
2: solved... in 0.017s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.028s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.029s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.018s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.026s
2: solved... in 0.022s
1: solved... in 0.025s
2: solved... in 0.019s
1: solved... in 0.028s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.027s
2: solved... in 0.019s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.019s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.027s
2: solved... in 0.02s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.024s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.02s
1: solved... in 0.025s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.025s
2: solved... in 0.021s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.021s
1: solved... in 0.027s
2: solved... in 0.021s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.025s
2: solved... in 0.022s
1: solved... in 0.025s
2: solved... in 0.021s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.026s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.025s
1: solved... in 0.027s
2: solved... in 0.022s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.026s
2: solved... in 0.024s
1: solved... in 0.028s
2: solved... in 0.024s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.027s
2: solved... in 0.023s
1: solved... in 0.029s
2: solved... in 0.023s
1: solved... in 0.025s
2: solved... in 0.024s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.025s
2: solved... in 0.024s
1: solved... in 0.026s
2: solved... in 0.023s
1: solved... in 0.026s
2: solved... in 0.024s
1: solved... in 0.026s
2: solved... in 0.024s
1: solved... in 0.026s
2: solved... in 0.025s
1: solved... in 0.023s
2: solved... in 0.028s
1: solved... in 0.026s
2: solved... in 0.026s
1: solved... in 0.024s
2: solved... in 0.025s
1: solved... in 0.025s
2: solved... in 0.032s
1: solved... in 0.026s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.028s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.025s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.026s
1: solved... in 0.023s
2: solved... in 0.026s
1: solved... in 0.023s
2: solved... in 0.026s
1: solved... in 0.024s
2: solved... in 0.025s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.025s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.024s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.026s
1: solved... in 0.024s
2: solved... in 0.026s
1: solved... in 0.023s
2: solved... in 0.027s
1: solved... in 0.023s
2: solved... in 0.028s
1: solved... in 0.023s
2: solved... in 0.034s
1: solved... in 0.024s
2: solved... in 0.034s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.024s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.025s
2: solved... in 0.03s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.025s
2: solved... in 0.029s
1: solved... in 0.023s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.025s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.029s
1: solved... in 0.024s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.023s
2: solved... in 0.028s
1: solved... in 0.024s
2: solved... in 0.028s
1: solved... in 0.023s
2: solved... in 0.046s
1: solved... in 0.023s
2: solved... in 0.038s
1: solved... in 0.023s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.035s
1: solved... in 0.023s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.023s
2: solved... in 0.036s
1: solved... in 0.023s
2: solved... in 0.034s
1: solved... in 0.024s
2: solved... in 0.034s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.024s
2: solved... in 0.033s
1: solved... in 0.025s
2: solved... in 0.033s
1: solved... in 0.024s
2: solved... in 0.034s
1: solved... in 0.023s
2: solved... in 0.034s
1: solved... in 0.024s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.039s
1: solved... in 0.023s
2: solved... in 0.034s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.038s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.043s
1: solved... in 0.026s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.04s
1: solved... in 0.028s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.029s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.028s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.039s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.034s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.024s
2: solved... in 0.034s
1: solved... in 0.025s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.025s
2: solved... in 0.031s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.031s
1: solved... in 0.025s
2: solved... in 0.031s
1: solved... in 0.024s
2: solved... in 0.031s
1: solved... in 0.025s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.039s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.037s
1: solved... in 0.023s
2: solved... in 0.036s
1: solved... in 0.023s
2: solved... in 0.037s
1: solved... in 0.025s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.023s
2: solved... in 0.03s
1: solved... in 0.026s
2: solved... in 0.03s
1: solved... in 0.024s
2: solved... in 0.031s
1: solved... in 0.025s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.036s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.026s
2: solved... in 0.036s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.023s
2: solved... in 0.035s
1: solved... in 0.023s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.031s
1: solved... in 0.025s
2: solved... in 0.033s
1: solved... in 0.025s
2: solved... in 0.032s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.025s
2: solved... in 0.034s
1: solved... in 0.024s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.023s
2: solved... in 0.033s
1: solved... in 0.024s
2: solved... in 0.032s
1: solved... in 0.025s
2: solved... in 0.032s
1: solved... in 0.024s
2: solved... in 0.034s
1: solved... in 0.025s
2: solved... in 0.033s
1: solved... in 0.025s
2: solved... in 0.033s
1: solved... in 0.024s
2: solved... in 0.036s
1: solved... in 0.025s
2: solved... in 0.033s
1: solved... in 0.025s
2: solved... in 0.034s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.025s
2: solved... in 0.034s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.024s
2: solved... in 0.037s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.024s
2: solved... in 0.035s
1: solved... in 0.024s
2: solved... in 0.035s
1: solved... in 0.026s
2: solved... in 0.034s
1: solved... in 0.023s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.035s
1: solved... in 0.026s
2: solved... in 0.036s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.026s
2: solved... in 0.036s
1: solved... in 0.027s
2: solved... in 0.035s
1: solved... in 0.024s
2: solved... in 0.037s
1: solved... in 0.025s
2: solved... in 0.035s
1: solved... in 0.025s
2: solved... in 0.036s
1: solved... in 0.025s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.037s
1: solved... in 0.025s
2: solved... in 0.036s
1: solved... in 0.024s
2: solved... in 0.039s
1: solved... in 0.029s
2: solved... in 0.037s
1: solved... in 0.024s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.025s
2: solved... in 0.039s
1: solved... in 0.025s
2: solved... in 0.037s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.027s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.039s
1: solved... in 0.025s
2: solved... in 0.038s
1: solved... in 0.026s
2: solved... in 0.038s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.026s
2: solved... in 0.039s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.025s
2: solved... in 0.039s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.039s
1: solved... in 0.024s
2: solved... in 0.041s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.025s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.04s
1: solved... in 0.025s
2: solved... in 0.041s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.026s
2: solved... in 0.039s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.027s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.041s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.041s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.025s
2: solved... in 0.04s
1: solved... in 0.023s
2: solved... in 0.043s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.024s
2: solved... in 0.041s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.025s
2: solved... in 0.043s
1: solved... in 0.024s
2: solved... in 0.043s
1: solved... in 0.025s
2: solved... in 0.042s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.025s
2: solved... in 0.043s
1: solved... in 0.023s
2: solved... in 0.045s
1: solved... in 0.024s
2: solved... in 0.042s
1: solved... in 0.023s
2: solved... in 0.044s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.024s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.045s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.024s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.044s
1: solved... in 0.025s
2: solved... in 0.045s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.025s
2: solved... in 0.045s
1: solved... in 0.024s
2: solved... in 0.046s
1: solved... in 0.025s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.045s
1: solved... in 0.025s
2: solved... in 0.045s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.025s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.046s
1: solved... in 0.024s
2: solved... in 0.048s
1: solved... in 0.025s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.025s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.049s
1: solved... in 0.025s
2: solved... in 0.047s
1: solved... in 0.023s
2: solved... in 0.048s
1: solved... in 0.026s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.047s
1: solved... in 0.024s
2: solved... in 0.049s
1: solved... in 0.025s
2: solved... in 0.048s
1: solved... in 0.025s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.051s
1: solved... in 0.026s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.049s
1: solved... in 0.025s
2: solved... in 0.049s
1: solved... in 0.024s
2: solved... in 0.048s
1: solved... in 0.024s
2: solved... in 0.049s
1: solved... in 0.024s
2: solved... in 0.049s
1: solved... in 0.025s
2: solved... in 0.049s
1: solved... in 0.024s
2: solved... in 0.051s
1: solved... in 0.025s
2: solved... in 0.049s
1: solved... in 0.025s
2: solved... in 0.055s
1: solved... in 0.025s
2: solved... in 0.052s
1: solved... in 0.025s
2: solved... in 0.051s
1: solved... in 0.025s
2: solved... in 0.051s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.025s
2: solved... in 0.05s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.025s
2: solved... in 0.052s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.026s
2: solved... in 0.052s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.051s
1: solved... in 0.023s
2: solved... in 0.052s
1: solved... in 0.028s
2: solved... in 0.051s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.052s
1: solved... in 0.024s
2: solved... in 0.051s
1: solved... in 0.024s
2: solved... in 0.055s
1: solved... in 0.024s
2: solved... in 0.052s
1: solved... in 0.024s
2: solved... in 0.052s
1: solved... in 0.025s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.054s
1: solved... in 0.025s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.054s
1: solved... in 0.025s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.055s
1: solved... in 0.026s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.053s
1: solved... in 0.024s
2: solved... in 0.061s
1: solved... in 0.024s
2: solved... in 0.056s
1: solved... in 0.024s
2: solved... in 0.056s
1: solved... in 0.027s
2: solved... in 0.067s
1: solved... in 0.029s
2: solved... in 0.069s
1: solved... in 0.026s
2: solved... in 0.063s
1: solved... in 0.027s
2: solved... in 0.062s
1: solved... in 0.027s
2: solved... in 0.064s
1: solved... in 0.027s
2: solved... in 0.064s
1: solved... in 0.027s
2: solved... in 0.079s
1: solved... in 0.023s
2: solved... in 0.077s
1: solved... in 0.024s
2: solved... in 0.078s
1: solved... in 0.026s
2: solved... in 0.063s
1: solved... in 0.024s
2: solved... in 0.068s
1: solved... in 0.025s
2: solved... in 0.068s
1: solved... in 0.024s
2: solved... in 0.069s
1: solved... in 0.031s
2: solved... in 0.087s
1: solved... in 0.028s
2: solved... in 0.065s
1: solved... in 0.027s
2: solved... in 0.075s
1: solved... in 0.028s
2: solved... in 0.066s
1: solved... in 0.024s
2: solved... in 0.064s
1: solved... in 0.024s
2: solved... in 0.074s
1: solved... in 0.028s
2: solved... in 0.072s
1: solved... in 0.026s
2: solved... in 0.078s
1: solved... in 0.026s
2: solved... in 0.078s
1: solved... in 0.026s
2: solved... in 0.082s
1: solved... in 0.027s
2: solved... in 0.078s
1: solved... in 0.026s
2: solved... in 0.076s
1: solved... in 0.026s
2: solved... in 0.077s
1: solved... in 0.026s
2: solved... in 0.072s
1: solved... in 0.026s
2: solved... in 0.074s
1: solved... in 0.023s
2: solved... in 0.072s
1: solved... in 0.024s
2: solved... in 0.069s
1: solved... in 0.026s
2: solved... in 0.068s
1: solved... in 0.026s
2: solved... in 0.082s
1: solved... in 0.032s
2: solved... in 0.076s
1: solved... in 0.028s
2: solved... in 0.07s
1: solved... in 0.024s
2: solved... in 0.078s
1: solved... in 0.027s
2: solved... in 0.079s
1: solved... in 0.023s
2: solved... in 0.076s
1: solved... in 0.024s
2: solved... in 0.071s
1: solved... in 0.024s
2: solved... in 0.071s
1: solved... in 0.028s
2: solved... in 0.098s
1: solved... in 0.028s
2: solved... in 0.076s
1: solved... in 0.026s
2: solved... in 0.071s
1: solved... in 0.023s
2: solved... in 0.077s
1: solved... in 0.026s
2: solved... in 0.081s
1: solved... in 0.026s
2: solved... in 0.07s
1: solved... in 0.025s
2: solved... in 0.077s
1: solved... in 0.023s
2: solved... in 0.082s
1: solved... in 0.027s
2: solved... in 0.083s
1: solved... in 0.026s
2: solved... in 0.086s
1: solved... in 0.028s
2: solved... in 0.077s
1: solved... in 0.026s
2: solved... in 0.071s
1: solved... in 0.028s
2: solved... in 0.081s
1: solved... in 0.027s
2: solved... in 0.081s
1: solved... in 0.025s
2: solved... in 0.082s
1: solved... in 0.027s
2: solved... in 0.085s
1: solved... in 0.026s
2: solved... in 0.083s
1: solved... in 0.027s
2: solved... in 0.076s
1: solved... in 0.027s
2: solved... in 0.083s
1: solved... in 0.028s
2: solved... in 0.085s
1: solved... in 0.028s
2: solved... in 0.078s
1: solved... in 0.025s
2: solved... in 0.083s
1: solved... in 0.023s
2: solved... in 0.076s
1: solved... in 0.027s
2: solved... in 0.084s
1: solved... in 0.027s
2: solved... in 0.073s
1: solved... in 0.028s
2: solved... in 0.073s
1: solved... in 0.028s
2: solved... in 0.075s
1: solved... in 0.028s
2: solved... in 0.082s
1: solved... in 0.026s
2: solved... in 0.081s
1: solved... in 0.027s
2: solved... in 0.072s
1: solved... in 0.024s
2: solved... in 0.104s
1: solved... in 0.026s
2: solved... in 0.074s
1: solved... in 0.026s
2: solved... in 0.091s
1: solved... in 0.029s
2: solved... in 0.083s
1: solved... in 0.026s
2: solved... in 0.084s
1: solved... in 0.026s
2: solved... in 0.076s
1: solved... in 0.028s
2: solved... in 0.078s
1: solved... in 0.028s
2: solved... in 0.085s
1: solved... in 0.027s
2: solved... in 0.084s
1: solved... in 0.028s
2: solved... in 0.073s
1: solved... in 0.027s
2: solved... in 0.08s
1: solved... in 0.036s
2: solved... in 0.094s
1: solved... in 0.026s
2: solved... in 0.09s
1: solved... in 0.028s
2: solved... in 0.09s
1: solved... in 0.026s
2: solved... in 0.091s
1: solved... in 0.028s
2: solved... in 0.082s
1: solved... in 0.027s
2: solved... in 0.089s
1: solved... in 0.027s
2: solved... in 0.08s
1: solved... in 0.028s
2: solved... in 0.077s
1: solved... in 0.028s
2: solved... in 0.089s
1: solved... in 0.027s
2: solved... in 0.087s
1: solved... in 0.028s
2: solved... in 0.081s
1: solved... in 0.027s
2: solved... in 0.081s
1: solved... in 0.028s
2: solved... in 0.08s
1: solved... in 0.026s
2: solved... in 0.083s
1: solved... in 0.028s
2: solved... in 0.084s
1: solved... in 0.028s
2: solved... in 0.085s
1: solved... in 0.026s
2: solved... in 0.092s
1: solved... in 0.028s
2: solved... in 0.107s
1: solved... in 0.028s
2: solved... in 0.099s
1: solved... in 0.026s
2: solved... in 0.084s
1: solved... in 0.026s
2: solved... in 0.083s
1: solved... in 0.026s
2: solved... in 0.085s
1: solved... in 0.027s
2: solved... in 0.085s
1: solved... in 0.026s
2: solved... in 0.101s
1: solved... in 0.029s
2: solved... in 0.101s
1: solved... in 0.027s
2: solved... in 0.083s
1: solved... in 0.028s
2: solved... in 0.089s
1: solved... in 0.028s
2: solved... in 0.086s
1: solved... in 0.026s
2: solved... in 0.087s
1: solved... in 0.027s
2: solved... in 0.101s
1: solved... in 0.027s
2: solved... in 0.092s
1: solved... in 0.027s
2: solved... in 0.098s
1: solved... in 0.036s
2: solved... in 0.089s
1: solved... in 0.026s
2: solved... in 0.089s
1: solved... in 0.024s
2: solved... in 0.104s
1: solved... in 0.027s
2: solved... in 0.082s
1: solved... in 0.026s
2: solved... in 0.085s
1: solved... in 0.027s
2: solved... in 0.083s
1: solved... in 0.026s
2: solved... in 0.091s
1: solved... in 0.026s
2: solved... in 0.094s
1: solved... in 0.027s
2: solved... in 0.087s
1: solved... in 0.029s
2: solved... in 0.099s
1: solved... in 0.027s
2: solved... in 0.09s
1: solved... in 0.027s
2: solved... in 0.084s
1: solved... in 0.026s
2: solved... in 0.086s
1: solved... in 0.026s
2: solved... in 0.095s
1: solved... in 0.026s
2: solved... in 0.083s
1: solved... in 0.026s
2: solved... in 0.095s
1: solved... in 0.027s
2: solved... in 0.091s
1: solved... in 0.027s
2: solved... in 0.087s
1: solved... in 0.028s
2: solved... in 0.093s
1: solved... in 0.026s
2: solved... in 0.092s
1: solved... in 0.026s
2: solved... in 0.095s
1: solved... in 0.026s
2: solved... in 0.094s
1: solved... in 0.026s
2: solved... in 0.096s
1: solved... in 0.029s
2: solved... in 0.093s
1: solved... in 0.026s
2: solved... in 0.1s
1: solved... in 0.029s
2: solved... in 0.09s
1: solved... in 0.026s
2: solved... in 0.096s
1: solved... in 0.03s
2: solved... in 0.099s
1: solved... in 0.026s
2: solved... in 0.091s
1: solved... in 0.029s
2: solved... in 0.097s
1: solved... in 0.027s
2: solved... in 0.096s
1: solved... in 0.025s
2: solved... in 0.098s
1: solved... in 0.028s
2: solved... in 0.086s
1: solved... in 0.026s
2: solved... in 0.098s
1: solved... in 0.028s
2: solved... in 0.085s
1: solved... in 0.026s
2: solved... in 0.091s
1: solved... in 0.027s
2: solved... in 0.089s
1: solved... in 0.027s
2: solved... in 0.089s
1: solved... in 0.028s
2: solved... in 0.1s
1: solved... in 0.027s
2: solved... in 0.085s
1: solved... in 0.034s
2: solved... in 0.09s
1: solved... in 0.028s
2: solved... in 0.107s
1: solved... in 0.026s
2: solved... in 0.113s
1: solved... in 0.026s
2: solved... in 0.101s
1: solved... in 0.027s
2: solved... in 0.102s
1: solved... in 0.025s
2: solved... in 0.089s
1: solved... in 0.031s
2: solved... in 0.089s
1: solved... in 0.029s
2: solved... in 0.09s
1: solved... in 0.028s
2: solved... in 0.095s
1: solved... in 0.028s
2: solved... in 0.095s
1: solved... in 0.027s
2: solved... in 0.087s
1: solved... in 0.027s
2: solved... in 0.09s
1: solved... in 0.02s
[[34m Info  [0m] - Found inductive invariant: insTree --> ((((-69 * treeNum(h)) + (1 * res15._2)) + -137) <= 0)
[[34m Info  [0m] - Found inductive invariant: treeNum --> (((-80 * #res) + -80) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function mergeWithCarry...
[[34m Info  [0m] Body: if (h1.isInstanceOf[ConsHeap])
            (let (e57,t62 := if (h2.isInstanceOf[ConsHeap])
              (let (e59,t64 := (let (e60,t65 := (let (e143,t148 := (let (e149,t154 := rank(h1.head)) in
                (e149, (1 + (1 + t154))))) in
                (let (e144,t149 := (let (e146,t151 := rank(h2.head)) in
                  (e146, (1 + (1 + t151))))) in
                  ((e143 < e144), (t149 + (t148 + 1)))))) in
                if (e60)
                  (let (e61,t66 := (let (e62,t67 := (let (e83,t88 := (let (e89,t94 := rank(t)) in
                    (e89, (1 + t94)))) in
                    (let (e84,t89 := (let (e86,t91 := rank(h1.head)) in
                      (e86, (1 + (1 + t91))))) in
                      ((e83 < e84), (t89 + (t88 + 1)))))) in
                    if (e62)
                      (let (e63,t68 := (let (e65,t70 := (let (e67,t72 := (let (e70,t75 := merge(h1.tail, h2)) in
                        (e70, (1 + (1 + t75))))) in
                        (ConsHeap(h1.head, e67), (t72 + 2)))) in
                        (ConsHeap(t, e65), (t70 + 1)))) in
                        (e63, (t67 + t68)))
                    else
                      (let (e73,t78 := (let (e74,t79 := (let (e81,t86 := link(t, h1.head)) in
                        (e81, (1 + (1 + t86))))) in
                        (let (e77,t82 := mergeWithCarry(e74, h1.tail, h2)) in
                          (e77, (1 + (t79 + (1 + t82))))))) in
                        (e73, (t67 + t78))))) in
                    (e61, (t65 + t66)))
                else
                  (let (e90,t95 := (let (e91,t96 := (let (e135,t140 := (let (e141,t146 := rank(h2.head)) in
                    (e141, (1 + (1 + t146))))) in
                    (let (e136,t141 := (let (e138,t143 := rank(h1.head)) in
                      (e138, (1 + (1 + t143))))) in
                      ((e135 < e136), (t141 + (t140 + 1)))))) in
                    if (e91)
                      (let (e92,t97 := (let (e93,t98 := (let (e114,t119 := (let (e120,t125 := rank(t)) in
                        (e120, (1 + t125)))) in
                        (let (e115,t120 := (let (e117,t122 := rank(h2.head)) in
                          (e117, (1 + (1 + t122))))) in
                          ((e114 < e115), (t120 + (t119 + 1)))))) in
                        if (e93)
                          (let (e94,t99 := (let (e96,t101 := (let (e98,t103 := (let (e101,t106 := merge(h1, h2.tail)) in
                            (e101, (1 + (1 + t106))))) in
                            (ConsHeap(h2.head, e98), (t103 + 2)))) in
                            (ConsHeap(t, e96), (t101 + 1)))) in
                            (e94, (t98 + t99)))
                        else
                          (let (e104,t109 := (let (e105,t110 := (let (e112,t117 := link(t, h2.head)) in
                            (e112, (1 + (1 + t117))))) in
                            (let (e108,t113 := mergeWithCarry(e105, h1, h2.tail)) in
                              (e108, (1 + (t110 + (1 + t113))))))) in
                            (e104, (t98 + t109))))) in
                        (e92, (t96 + t97)))
                    else
                      (let (e121,t126 := (let (e123,t128 := (let (e124,t129 := (let (e132,t137 := link(h1.head, h2.head)) in
                        (e132, (1 + (1 + (1 + t137)))))) in
                        (let (e127,t132 := mergeWithCarry(e124, h1.tail, h2.tail)) in
                          (e127, (1 + (1 + (t129 + (1 + t132)))))))) in
                        (ConsHeap(t, e123), (t128 + 1)))) in
                        (e121, (t96 + t126))))) in
                    (e90, (t65 + t95))))) in
                (e59, (1 + t64)))
            else
              (let (e151,t156 := (let (e154,t159 := insTree(t, h1)) in
                (e154, (1 + t159)))) in
                (e151, (1 + t156)))) in
              (e57, (1 + t62)))
          else
            (let (e156,t161 := (let (e159,t164 := insTree(t, h2)) in
              (e159, (1 + t164)))) in
              (e156, (1 + t161)))
[[34m Info  [0m] Post: true
falttened Body: ((res12 == ifres19) && ((ci18 && (ci18 == h1.isInstanceOf[ConsHeap]) && (ifres19 == tp38) && (arg46 == (1 + t62)) && (tp38 == (e57, arg46)) && ((ci19 && (ci19 == h2.isInstanceOf[ConsHeap]) && (ifres20 == tp39) && (arg47 == (1 + t64)) && (tp39 == (e59, arg47)) && (!(e60) || (e143 < e144)) && ((e143 >= e144) || e60) && (t154 == ts71) && (ts71 == tres39._2) && (e146 == ts72) && (ts72 == tres38._1) && (t149 == (1 + (1 + t151))) && (t148 == (1 + (1 + t154))) && (t64 == ts73) && (ts73 == ifres21._2) && (e143 == e149) && (t151 == ts74) && (ts74 == tres38._2) && (e59 == ts75) && (ts75 == ifres21._1) && (t65 == (t149 + (t148 + 1))) && (tres39 == r50) && (cs64 == h1.head) && (r50 == rank(cs64)) && (e149 == ts76) && (ts76 == tres39._1) && (e144 == e146) && ((e60 && (ifres21 == tp40) && (arg48 == (t65 + t66)) && (tp40 == (e61, arg48)) && ((e62 && (ifres22 == tp41) && (arg49 == (t67 + t68)) && (tp41 == (e63, arg49)) && (t68 == (t70 + 1)) && (e63 == cc24) && (cc24 == ConsHeap(t, e65)) && (t70 == (t72 + 2)) && (e65 == cc25) && (cs65 == h1.head) && (cc25 == ConsHeap(cs65, e67)) && (t75 == ts77) && (ts77 == tres24._2) && (e67 == e70) && (tres24 == r51) && (cs66 == h1.tail) && (r51 == merge(cs66, h2)) && (e70 == ts78) && (ts78 == tres24._1) && (t72 == (1 + (1 + t75)))) || (!(e62) && (ifres22 == tp42) && (arg50 == (t67 + t78)) && (tp42 == (e73, arg50)) && (t86 == ts79) && (ts79 == tres26._2) && (t78 == (1 + (t79 + (1 + t82)))) && (e73 == e77) && (t82 == ts80) && (ts80 == tres25._2) && (e74 == e81) && (t79 == (1 + (1 + t86))) && (tres25 == r52) && (cs67 == h1.tail) && (r52 == mergeWithCarry(e74, cs67, h2)) && (e81 == ts81) && (ts81 == tres26._1) && (tres26 == r53) && (cs68 == h1.head) && (r53 == link(t, cs68)) && (e77 == ts82) && (ts82 == tres25._1))) && (t89 == (1 + (1 + t91))) && (t66 == ts83) && (ts83 == ifres22._2) && (e89 == ts84) && (ts84 == tres28._1) && (tres28 == r54) && (r54 == rank(t)) && (t67 == (t89 + (t88 + 1))) && (t88 == (1 + t94)) && (e86 == ts85) && (ts85 == tres27._1) && (t91 == ts86) && (ts86 == tres27._2) && (e84 == e86) && (e83 == e89) && (t94 == ts87) && (ts87 == tres28._2) && (tres27 == r55) && (cs69 == h1.head) && (r55 == rank(cs69)) && (e61 == ts88) && (ts88 == ifres22._1) && (!(e62) || (e83 < e84)) && ((e83 >= e84) || e62)) || (!(e60) && (ifres21 == tp43) && (arg51 == (t65 + t95)) && (tp43 == (e90, arg51)) && (tres37 == r56) && (cs70 == h2.head) && (r56 == rank(cs70)) && (e141 == ts89) && (ts89 == tres37._1) && (t143 == ts90) && (ts90 == tres36._2) && (t140 == (1 + (1 + t146))) && (e135 == e141) && (t141 == (1 + (1 + t143))) && (!(e91) || (e135 < e136)) && ((e135 >= e136) || e91) && (e138 == ts91) && (ts91 == tres36._1) && (tres36 == r57) && (cs71 == h1.head) && (r57 == rank(cs71)) && (t146 == ts92) && (ts92 == tres37._2) && (e136 == e138) && (t96 == (t141 + (t140 + 1))) && (e90 == ts93) && (ts93 == ifres23._1) && (t95 == ts94) && (ts94 == ifres23._2) && ((e91 && (ifres23 == tp44) && (arg52 == (t96 + t97)) && (tp44 == (e92, arg52)) && (t119 == (1 + t125)) && (e115 == e117) && (e114 == e120) && (t122 == ts95) && (ts95 == tres32._2) && (tres33 == r58) && (r58 == rank(t)) && (t125 == ts96) && (ts96 == tres33._2) && (t98 == (t120 + (t119 + 1))) && ((e93 && (ifres24 == tp45) && (arg53 == (t98 + t99)) && (tp45 == (e94, arg53)) && (t106 == ts97) && (ts97 == tres29._2) && (t103 == (1 + (1 + t106))) && (t99 == (t101 + 1)) && (e96 == cc26) && (cs72 == h2.head) && (cc26 == ConsHeap(cs72, e98)) && (tres29 == r59) && (cs73 == h2.tail) && (r59 == merge(h1, cs73)) && (e98 == e101) && (t101 == (t103 + 2)) && (e94 == cc27) && (cc27 == ConsHeap(t, e96)) && (e101 == ts98) && (ts98 == tres29._1)) || (!(e93) && (ifres24 == tp46) && (arg54 == (t98 + t109)) && (tp46 == (e104, arg54)) && (e104 == e108) && (t113 == ts99) && (ts99 == tres30._2) && (e112 == ts100) && (ts100 == tres31._1) && (tres30 == r60) && (cs74 == h2.tail) && (r60 == mergeWithCarry(e105, h1, cs74)) && (t117 == ts101) && (ts101 == tres31._2) && (tres31 == r61) && (cs75 == h2.head) && (r61 == link(t, cs75)) && (e105 == e112) && (t109 == (1 + (t110 + (1 + t113)))) && (e108 == ts102) && (ts102 == tres30._1) && (t110 == (1 + (1 + t117))))) && (t97 == ts103) && (ts103 == ifres24._2) && (!(e93) || (e114 < e115)) && ((e114 >= e115) || e93) && (e120 == ts104) && (ts104 == tres33._1) && (e92 == ts105) && (ts105 == ifres24._1) && (e117 == ts106) && (ts106 == tres32._1) && (t120 == (1 + (1 + t122))) && (tres32 == r62) && (cs76 == h2.head) && (r62 == rank(cs76))) || (!(e91) && (ifres23 == tp47) && (arg55 == (t96 + t126)) && (tp47 == (e121, arg55)) && (e127 == ts107) && (ts107 == tres34._1) && (e132 == ts108) && (ts108 == tres35._1) && (e121 == cc28) && (cc28 == ConsHeap(t, e123)) && (e123 == e127) && (e124 == e132) && (tres34 == r63) && (cs77 == h1.tail) && (cs78 == h2.tail) && (r63 == mergeWithCarry(e124, cs77, cs78)) && (t128 == (1 + (1 + (t129 + (1 + t132))))) && (t132 == ts109) && (ts109 == tres34._2) && (tres35 == r64) && (cs79 == h1.head) && (cs80 == h2.head) && (r64 == link(cs79, cs80)) && (t137 == ts110) && (ts110 == tres35._2) && (t129 == (1 + (1 + (1 + t137)))) && (t126 == (t128 + 1)))))) && (tres38 == r65) && (cs81 == h2.head) && (r65 == rank(cs81))) || (!(ci20) && (ci20 == h2.isInstanceOf[ConsHeap]) && (ifres20 == tp48) && (arg56 == (1 + t156)) && (tp48 == (e151, arg56)) && (e151 == e154) && (tres40 == r66) && (r66 == insTree(t, h1)) && (t159 == ts111) && (ts111 == tres40._2) && (t156 == (1 + t159)) && (e154 == ts112) && (ts112 == tres40._1))) && (e57 == ts113) && (ts113 == ifres20._1) && (t62 == ts114) && (ts114 == ifres20._2)) || (!(ci21) && (ci21 == h1.isInstanceOf[ConsHeap]) && (ifres19 == tp49) && (arg57 == (1 + t161)) && (tp49 == (e156, arg57)) && (e159 == ts115) && (ts115 == tres41._1) && (t161 == (1 + t164)) && (t164 == ts116) && (ts116 == tres41._2) && (e156 == e159) && (tres41 == r67) && (r67 == insTree(t, h2)))))
Flattened Post: ((ts117 > (((d? * r68) + (e? * r69)) + f?)) && (ts117 == res12._2) && (r68 == treeNum(h1)) && (r69 == treeNum(h2)))
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.016s
2: solved... in 0.006s
1: solved... in 0.017s
2: solved... in 0.006s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 20/20
Unrolled calls: Set((r61 == link(t, cs75)), (r68 == treeNum(h1)), (r65 == rank(cs81)), (r51 == merge(cs66, h2)), (r62 == rank(cs76)), (r53 == link(t, cs68)), (r63 == mergeWithCarry(e124, cs77, cs78)), (r57 == rank(cs71)), (r52 == mergeWithCarry(e74, cs67, h2)), (r59 == merge(h1, cs73)), (r67 == insTree(t, h2)), (r54 == rank(t)), (r50 == rank(cs64)), (r64 == link(cs79, cs80)), (r69 == treeNum(h2)), (r56 == rank(cs70)), (r66 == insTree(t, h1)), (r58 == rank(t)), (r60 == mergeWithCarry(e105, h1, cs74)), (r55 == rank(cs69)))
Inlining (r55 == rank(cs69))
Creating VC for insTree
Unrolling (r66 == insTree(t, h1))
Inlining (r50 == rank(cs64))
Inlining (r61 == link(t, cs75))
Inlining (r54 == rank(t))
Creating VC for merge
Unrolling (r51 == merge(cs66, h2))
Unrolling (r52 == mergeWithCarry(e74, cs67, h2))
Creating VC for treeNum
Unrolling (r68 == treeNum(h1))
Inlining (r62 == rank(cs76))
Inlining (r57 == rank(cs71))
Inlining (r56 == rank(cs70))
Unrolling (r69 == treeNum(h2))
Inlining (r64 == link(cs79, cs80))
Inlining (r53 == link(t, cs68))
Unrolling (r63 == mergeWithCarry(e124, cs77, cs78))
Unrolling (r67 == insTree(t, h2))
Inlining (r58 == rank(t))
Inlining (r65 == rank(cs81))
Unrolling (r60 == mergeWithCarry(e105, h1, cs74))
Unrolling (r59 == merge(h1, cs73))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.099s
2: solved... in 0.007s
1: solved... in 0.107s
2: solved... in 0.007s
1: solved... in 0.101s
2: solved... in 0.007s
1: solved... in 0.097s
2: solved... in 0.007s
1: solved... in 0.087s
2: solved... in 0.007s
1: solved... in 0.091s
2: solved... in 0.006s
1: solved... in 0.093s
2: solved... in 0.007s
1: solved... in 0.09s
2: solved... in 0.007s
1: solved... in 0.087s
2: solved... in 0.007s
1: solved... in 0.083s
2: solved... in 0.007s
1: solved... in 0.091s
2: solved... in 0.007s
1: solved... in 0.085s
2: solved... in 0.007s
1: solved... in 0.096s
2: solved... in 0.007s
1: solved... in 0.086s
2: solved... in 0.009s
1: solved... in 0.086s
2: solved... in 0.007s
1: solved... in 0.086s
2: solved... in 0.008s
1: solved... in 0.085s
2: solved... in 0.008s
1: solved... in 0.089s
2: solved... in 0.008s
1: solved... in 0.082s
2: solved... in 0.009s
1: solved... in 0.095s
2: solved... in 0.008s
1: solved... in 0.088s
2: solved... in 0.008s
1: solved... in 0.088s
2: solved... in 0.008s
1: solved... in 0.086s
2: solved... in 0.008s
1: solved... in 0.099s
2: solved... in 0.008s
1: solved... in 0.085s
2: solved... in 0.008s
1: solved... in 0.083s
2: solved... in 0.009s
1: solved... in 0.086s
2: solved... in 0.008s
1: solved... in 0.09s
2: solved... in 0.009s
1: solved... in 0.089s
2: solved... in 0.009s
1: solved... in 0.084s
2: solved... in 0.011s
1: solved... in 0.087s
2: solved... in 0.009s
1: solved... in 0.088s
2: solved... in 0.008s
1: solved... in 0.088s
2: solved... in 0.009s
1: solved... in 0.084s
2: solved... in 0.012s
1: solved... in 0.091s
2: solved... in 0.008s
1: solved... in 0.086s
2: solved... in 0.009s
1: solved... in 0.085s
2: solved... in 0.009s
1: solved... in 0.084s
2: solved... in 0.009s
1: solved... in 0.082s
2: solved... in 0.012s
1: solved... in 0.087s
2: solved... in 0.009s
1: solved... in 0.089s
2: solved... in 0.009s
1: solved... in 0.086s
2: solved... in 0.01s
1: solved... in 0.083s
2: solved... in 0.01s
1: solved... in 0.084s
2: solved... in 0.01s
1: solved... in 0.086s
2: solved... in 0.01s
1: solved... in 0.085s
2: solved... in 0.009s
1: solved... in 0.083s
2: solved... in 0.009s
1: solved... in 0.086s
2: solved... in 0.01s
1: solved... in 0.083s
2: solved... in 0.01s
1: solved... in 0.083s
2: solved... in 0.01s
1: solved... in 0.083s
2: solved... in 0.011s
1: solved... in 0.082s
2: solved... in 0.01s
1: solved... in 0.087s
2: solved... in 0.011s
1: solved... in 0.093s
2: solved... in 0.011s
1: solved... in 0.094s
2: solved... in 0.011s
1: solved... in 0.085s
2: solved... in 0.011s
1: solved... in 0.088s
2: solved... in 0.01s
1: solved... in 0.085s
2: solved... in 0.011s
1: solved... in 0.085s
2: solved... in 0.012s
1: solved... in 0.081s
2: solved... in 0.01s
1: solved... in 0.087s
2: solved... in 0.011s
1: solved... in 0.083s
2: solved... in 0.012s
1: solved... in 0.083s
2: solved... in 0.011s
1: solved... in 0.083s
2: solved... in 0.011s
1: solved... in 0.088s
2: solved... in 0.011s
1: solved... in 0.082s
2: solved... in 0.011s
1: solved... in 0.083s
2: solved... in 0.011s
1: solved... in 0.083s
2: solved... in 0.011s
1: solved... in 0.083s
2: solved... in 0.012s
1: solved... in 0.084s
2: solved... in 0.011s
1: solved... in 0.084s
2: solved... in 0.012s
1: solved... in 0.095s
2: solved... in 0.011s
1: solved... in 0.093s
2: solved... in 0.012s
1: solved... in 0.087s
2: solved... in 0.012s
1: solved... in 0.084s
2: solved... in 0.013s
1: solved... in 0.085s
2: solved... in 0.012s
1: solved... in 0.085s
2: solved... in 0.012s
1: solved... in 0.087s
2: solved... in 0.013s
1: solved... in 0.086s
2: solved... in 0.012s
1: solved... in 0.084s
2: solved... in 0.013s
1: solved... in 0.088s
2: solved... in 0.012s
1: solved... in 0.084s
2: solved... in 0.012s
1: solved... in 0.083s
2: solved... in 0.012s
1: solved... in 0.083s
2: solved... in 0.012s
1: solved... in 0.083s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.012s
1: solved... in 0.087s
2: solved... in 0.012s
1: solved... in 0.083s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.013s
1: solved... in 0.088s
2: solved... in 0.014s
1: solved... in 0.084s
2: solved... in 0.014s
1: solved... in 0.085s
2: solved... in 0.014s
1: solved... in 0.088s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.084s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.084s
2: solved... in 0.014s
1: solved... in 0.093s
2: solved... in 0.013s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.088s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.087s
2: solved... in 0.014s
1: solved... in 0.097s
2: solved... in 0.015s
1: solved... in 0.107s
2: solved... in 0.014s
1: solved... in 0.098s
2: solved... in 0.014s
1: solved... in 0.088s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.084s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.087s
2: solved... in 0.014s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.084s
2: solved... in 0.015s
1: solved... in 0.087s
2: solved... in 0.015s
1: solved... in 0.084s
2: solved... in 0.015s
1: solved... in 0.086s
2: solved... in 0.016s
1: solved... in 0.085s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.015s
1: solved... in 0.083s
2: solved... in 0.016s
1: solved... in 0.083s
2: solved... in 0.016s
1: solved... in 0.082s
2: solved... in 0.016s
1: solved... in 0.085s
2: solved... in 0.016s
1: solved... in 0.084s
2: solved... in 0.016s
1: solved... in 0.083s
2: solved... in 0.016s
1: solved... in 0.095s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.087s
2: solved... in 0.016s
1: solved... in 0.094s
2: solved... in 0.017s
1: solved... in 0.1s
2: solved... in 0.016s
1: solved... in 0.097s
2: solved... in 0.016s
1: solved... in 0.083s
2: solved... in 0.017s
1: solved... in 0.083s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.018s
1: solved... in 0.084s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.017s
1: solved... in 0.087s
2: solved... in 0.017s
1: solved... in 0.084s
2: solved... in 0.017s
1: solved... in 0.091s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.018s
1: solved... in 0.085s
2: solved... in 0.017s
1: solved... in 0.087s
2: solved... in 0.018s
1: solved... in 0.086s
2: solved... in 0.018s
1: solved... in 0.088s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.017s
1: solved... in 0.083s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.018s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.018s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.085s
2: solved... in 0.018s
1: solved... in 0.087s
2: solved... in 0.018s
1: solved... in 0.086s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.088s
2: solved... in 0.018s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.019s
1: solved... in 0.083s
2: solved... in 0.02s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.085s
2: solved... in 0.02s
1: solved... in 0.083s
2: solved... in 0.019s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.09s
2: solved... in 0.02s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.086s
2: solved... in 0.021s
1: solved... in 0.086s
2: solved... in 0.021s
1: solved... in 0.086s
2: solved... in 0.021s
1: solved... in 0.091s
2: solved... in 0.02s
1: solved... in 0.089s
2: solved... in 0.02s
1: solved... in 0.084s
2: solved... in 0.021s
1: solved... in 0.084s
2: solved... in 0.02s
1: solved... in 0.083s
2: solved... in 0.021s
1: solved... in 0.085s
2: solved... in 0.021s
1: solved... in 0.084s
2: solved... in 0.021s
1: solved... in 0.083s
2: solved... in 0.021s
1: solved... in 0.084s
2: solved... in 0.021s
1: solved... in 0.083s
2: solved... in 0.021s
1: solved... in 0.084s
2: solved... in 0.022s
1: solved... in 0.085s
2: solved... in 0.022s
1: solved... in 0.085s
2: solved... in 0.024s
1: solved... in 0.098s
2: solved... in 0.021s
1: solved... in 0.092s
2: solved... in 0.021s
1: solved... in 0.085s
2: solved... in 0.022s
1: solved... in 0.087s
2: solved... in 0.026s
1: solved... in 0.086s
2: solved... in 0.021s
1: solved... in 0.083s
2: solved... in 0.022s
1: solved... in 0.083s
2: solved... in 0.022s
1: solved... in 0.088s
2: solved... in 0.021s
1: solved... in 0.083s
2: solved... in 0.022s
1: solved... in 0.083s
2: solved... in 0.021s
1: solved... in 0.084s
2: solved... in 0.022s
1: solved... in 0.084s
2: solved... in 0.027s
1: solved... in 0.083s
2: solved... in 0.023s
1: solved... in 0.084s
2: solved... in 0.022s
1: solved... in 0.084s
2: solved... in 0.022s
1: solved... in 0.084s
2: solved... in 0.023s
1: solved... in 0.085s
2: solved... in 0.022s
1: solved... in 0.084s
2: solved... in 0.022s
1: solved... in 0.084s
2: solved... in 0.023s
1: solved... in 0.084s
2: solved... in 0.026s
1: solved... in 0.085s
2: solved... in 0.025s
1: solved... in 0.086s
2: solved... in 0.022s
1: solved... in 0.088s
2: solved... in 0.023s
1: solved... in 0.091s
2: solved... in 0.023s
1: solved... in 0.087s
2: solved... in 0.023s
1: solved... in 0.085s
2: solved... in 0.023s
1: solved... in 0.085s
2: solved... in 0.024s
1: solved... in 0.085s
2: solved... in 0.023s
1: solved... in 0.086s
2: solved... in 0.024s
1: solved... in 0.086s
2: solved... in 0.032s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 120/120
Unrolled calls: Set((r182 == treeNum(h2)), (r119 == rank(cs146)), (r149 == rank(t)), (r113 == mergeWithCarry(e491, cs67, cs139)), (r136 == link(e124, cs179)), (r150 == rank(t)), (r135 == mergeWithCarry(e545, cs77, cs178)), (r155 == link(e105, cs199)), (r99 == mergeWithCarry(e452, cs122, cs123)), (r91 == rank(cs114)), (r141 == rank(cs185)), (r175 == link(cs220, cs221)), (r90 == rank(cs113)), (r101 == rank(cs126)), (r100 == link(cs124, cs125)), (r85 == leq(cs102, cs103)), (r79 == rank(cs90)), (r102 == rank(cs127)), (r148 == rank(cs191)), (r147 == link(t, cs190)), (r152 == rank(cs195)), (r88 == link(cs109, cs110)), (r114 == rank(cs140)), (r92 == rank(cs115)), (r74 == rank(t)), (r130 == link(e124, cs173)), (r95 == treeNum(h2)), (r144 == insTree(e124, cs78)), (r110 == mergeWithCarry(e473, cs135, h2)), (r123 == treeNum(cs148)), (r97 == rank(cs119)), (r142 == rank(cs186)), (r180 == treeNum(h2)), (r156 == mergeWithCarry(e596, cs200, cs74)), (r120 == insTree(e74, cs67)), (r185 == treeNum(h2)), (r128 == merge(cs171, cs78)), (r83 == rank(t)), (r188 == treeNum(h1)), (r125 == leq(cs153, cs154)), (r177 == rank(cs224)), (r106 == rank(e74)), (r82 == insTree(e405, cs94)), (r89 == mergeWithCarry(e429, cs111, cs112)), (r126 == leq(cs167, cs168)), (r132 == rank(cs174)), (r163 == link(e105, cs206)), (r158 == rank(cs201)), (r187 == treeNum(cs74)), (r84 == rank(t)), (r108 == merge(cs132, h2)), (r75 == rank(cs88)), (r77 == treeNum(h)), (r159 == rank(e105)), (r145 == insTree(t, cs187)), (r143 == insTree(e124, cs77)), (r115 == rank(e74)), (r174 == merge(h1, cs219)), (r104 == rank(cs129)), (r169 == insTree(e105, cs74)), (r103 == rank(cs128)), (r176 == mergeWithCarry(e648, cs222, cs223)), (r140 == rank(cs184)), (r179 == treeNum(cs66)), (r139 == mergeWithCarry(e551, cs182, cs183)), (r98 == merge(cs66, cs120)), (r160 == rank(cs202)), (r138 == link(cs180, cs181)), (r153 == rank(cs196)), (r131 == rank(e124)), (r165 == link(cs209, cs210)), (r81 == link(t, cs93)), (r112 == link(e74, cs138)), (r127 == rank(cs169)), (r111 == merge(cs67, cs136)), (r166 == rank(cs211)), (r118 == rank(cs145)), (r105 == rank(cs130)), (r157 == rank(e105)), (r71 == insTree(t, cs85)), (r164 == mergeWithCarry(e620, cs207, cs208)), (r172 == merge(cs215, cs73)), (r124 == treeNum(cs152)), (r72 == link(t, cs86)), (r146 == insTree(e576, cs189)), (r116 == link(cs141, cs142)), (r107 == rank(cs131)), (r167 == rank(cs212)), (r133 == rank(cs175)), (r87 == merge(h1, cs108)), (r96 == merge(cs117, h2)), (r162 == mergeWithCarry(e614, h1, cs205)), (r121 == insTree(e74, h2)), (r161 == merge(h1, cs203)), (r137 == rank(e124)), (r170 == rank(cs213)), (r122 == treeNum(cs147)), (r184 == treeNum(cs78)), (r94 == treeNum(h1)), (r86 == merge(cs105, h2)), (r186 == treeNum(h1)), (r183 == treeNum(cs77)), (r129 == mergeWithCarry(e527, cs172, cs78)), (r134 == merge(cs77, cs177)), (r73 == insTree(e386, cs87)), (r93 == rank(cs116)), (r189 == treeNum(cs73)), (r117 == mergeWithCarry(e497, cs143, cs144)), (r173 == rank(cs217)), (r70 == rank(cs83)), (r181 == treeNum(cs67)), (r154 == merge(cs198, cs74)), (r76 == rank(t)), (r78 == rank(cs89)), (r178 == treeNum(h1)), (r168 == insTree(e105, h1)), (r151 == rank(cs192)), (r80 == insTree(t, cs91)), (r109 == link(e74, cs134)), (r171 == rank(cs214)))
Inlining (r104 == rank(cs129))
Unrolling (r120 == insTree(e74, cs67))
Unrolling (r154 == merge(cs198, cs74))
Unrolling (r189 == treeNum(cs73))
Unrolling (r134 == merge(cs77, cs177))
Inlining (r138 == link(cs180, cs181))
Inlining (r119 == rank(cs146))
Unrolling (r178 == treeNum(h1))
Inlining (r93 == rank(cs116))
Inlining (r114 == rank(cs140))
Inlining (r140 == rank(cs184))
Unrolling (r168 == insTree(e105, h1))
Unrolling (r183 == treeNum(cs77))
Inlining (r163 == link(e105, cs206))
Unrolling (r145 == insTree(t, cs187))
Inlining (r118 == rank(cs145))
Unrolling (r184 == treeNum(cs78))
Unrolling (r146 == insTree(e576, cs189))
Inlining (r76 == rank(t))
Inlining (r170 == rank(cs213))
Inlining (r132 == rank(cs174))
Inlining (r137 == rank(e124))
Unrolling (r96 == merge(cs117, h2))
Inlining (r127 == rank(cs169))
Unrolling (r176 == mergeWithCarry(e648, cs222, cs223))
Unrolling (r128 == merge(cs171, cs78))
Inlining (r131 == rank(e124))
Unrolling (r188 == treeNum(h1))
Inlining (r147 == link(t, cs190))
Unrolling (r111 == merge(cs67, cs136))
Unrolling (r71 == insTree(t, cs85))
Inlining (r109 == link(e74, cs134))
Unrolling (r82 == insTree(e405, cs94))
Inlining (r141 == rank(cs185))
Inlining (r153 == rank(cs196))
Unrolling (r143 == insTree(e124, cs77))
Inlining (r91 == rank(cs114))
Inlining (r150 == rank(t))
Unrolling (r187 == treeNum(cs74))
Inlining (r90 == rank(cs113))
Inlining (r78 == rank(cs89))
Inlining (r81 == link(t, cs93))
Inlining (r130 == link(e124, cs173))
Inlining (r72 == link(t, cs86))
Inlining (r175 == link(cs220, cs221))
Inlining (r171 == rank(cs214))
Inlining (r85 == leq(cs102, cs103))
Inlining (r75 == rank(cs88))
Unrolling (r77 == treeNum(h))
Unrolling (r182 == treeNum(h2))
Unrolling (r99 == mergeWithCarry(e452, cs122, cs123))
Inlining (r84 == rank(t))
Inlining (r83 == rank(t))
Unrolling (r122 == treeNum(cs147))
Inlining (r103 == rank(cs128))
Unrolling (r186 == treeNum(h1))
Inlining (r133 == rank(cs175))
Inlining (r70 == rank(cs83))
Unrolling (r108 == merge(cs132, h2))
Inlining (r142 == rank(cs186))
Unrolling (r87 == merge(h1, cs108))
Inlining (r101 == rank(cs126))
Inlining (r97 == rank(cs119))
Inlining (r107 == rank(cs131))
Unrolling (r95 == treeNum(h2))
Inlining (r125 == leq(cs153, cs154))
Inlining (r159 == rank(e105))
Inlining (r177 == rank(cs224))
Unrolling (r180 == treeNum(h2))
Inlining (r115 == rank(e74))
Unrolling (r172 == merge(cs215, cs73))
Unrolling (r185 == treeNum(h2))
Inlining (r105 == rank(cs130))
Inlining (r157 == rank(e105))
Unrolling (r89 == mergeWithCarry(e429, cs111, cs112))
Inlining (r167 == rank(cs212))
Inlining (r92 == rank(cs115))
Inlining (r158 == rank(cs201))
Inlining (r165 == link(cs209, cs210))
Unrolling (r169 == insTree(e105, cs74))
Inlining (r151 == rank(cs192))
Inlining (r79 == rank(cs90))
Inlining (r155 == link(e105, cs199))
Unrolling (r73 == insTree(e386, cs87))
Unrolling (r86 == merge(cs105, h2))
Unrolling (r181 == treeNum(cs67))
Inlining (r148 == rank(cs191))
Inlining (r173 == rank(cs217))
Inlining (r160 == rank(cs202))
Inlining (r74 == rank(t))
Inlining (r116 == link(cs141, cs142))
Inlining (r102 == rank(cs127))
Unrolling (r94 == treeNum(h1))
Inlining (r88 == link(cs109, cs110))
Unrolling (r124 == treeNum(cs152))
Inlining (r166 == rank(cs211))
Inlining (r152 == rank(cs195))
Unrolling (r80 == insTree(t, cs91))
Inlining (r106 == rank(e74))
Unrolling (r174 == merge(h1, cs219))
Unrolling (r98 == merge(cs66, cs120))
Inlining (r100 == link(cs124, cs125))
Unrolling (r179 == treeNum(cs66))
Unrolling (r123 == treeNum(cs148))
Inlining (r112 == link(e74, cs138))
Inlining (r136 == link(e124, cs179))
Unrolling (r144 == insTree(e124, cs78))
Inlining (r149 == rank(t))
Inlining (r126 == leq(cs167, cs168))
Unrolling (r161 == merge(h1, cs203))
Unrolling (r121 == insTree(e74, h2))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.535s
2: solved... in 0.007s
1: solved... in 0.583s
2: solved... in 0.007s
1: solved... in 0.621s
2: solved... in 0.007s
1: solved... in 0.626s
2: solved... in 0.007s
1: solved... in 0.618s
2: solved... in 0.007s
1: solved... in 0.574s
2: solved... in 0.007s
1: solved... in 0.537s
2: solved... in 0.007s
1: solved... in 0.596s
2: solved... in 0.008s
1: solved... in 0.607s
2: solved... in 0.007s
1: solved... in 0.573s
2: solved... in 0.008s
1: solved... in 0.592s
2: solved... in 0.008s
1: solved... in 0.57s
2: solved... in 0.007s
1: solved... in 0.597s
2: solved... in 0.007s
1: solved... in 0.573s
2: solved... in 0.007s
1: solved... in 0.573s
2: solved... in 0.008s
1: solved... in 0.571s
2: solved... in 0.009s
1: solved... in 0.571s
2: solved... in 0.008s
1: solved... in 0.567s
2: solved... in 0.008s
1: solved... in 0.568s
2: solved... in 0.008s
1: solved... in 0.566s
2: solved... in 0.009s
1: solved... in 0.584s
2: solved... in 0.008s
1: solved... in 0.572s
2: solved... in 0.008s
1: solved... in 0.574s
2: solved... in 0.009s
1: solved... in 0.571s
2: solved... in 0.008s
1: solved... in 0.573s
2: solved... in 0.009s
1: solved... in 0.572s
2: solved... in 0.009s
1: solved... in 0.575s
2: solved... in 0.008s
1: solved... in 0.572s
2: solved... in 0.009s
1: solved... in 0.581s
2: solved... in 0.009s
1: solved... in 0.582s
2: solved... in 0.009s
1: solved... in 0.572s
2: solved... in 0.009s
1: solved... in 0.569s
2: solved... in 0.01s
1: solved... in 0.6s
2: solved... in 0.01s
1: solved... in 0.577s
2: solved... in 0.009s
1: solved... in 0.572s
2: solved... in 0.01s
1: solved... in 0.58s
2: solved... in 0.01s
1: solved... in 0.569s
2: solved... in 0.011s
1: solved... in 0.593s
2: solved... in 0.009s
1: solved... in 0.574s
2: solved... in 0.009s
1: solved... in 0.577s
2: solved... in 0.01s
1: solved... in 0.568s
2: solved... in 0.01s
1: solved... in 0.574s
2: solved... in 0.009s
1: solved... in 0.574s
2: solved... in 0.01s
1: solved... in 0.568s
2: solved... in 0.01s
1: solved... in 0.574s
2: solved... in 0.01s
1: solved... in 0.585s
2: solved... in 0.01s
1: solved... in 0.589s
2: solved... in 0.011s
1: solved... in 0.582s
2: solved... in 0.011s
1: solved... in 0.583s
2: solved... in 0.015s
1: solved... in 0.596s
2: solved... in 0.011s
1: solved... in 0.588s
2: solved... in 0.011s
1: solved... in 0.573s
2: solved... in 0.01s
1: solved... in 0.566s
2: solved... in 0.01s
1: solved... in 0.555s
2: solved... in 0.01s
1: solved... in 0.566s
2: solved... in 0.01s
1: solved... in 0.564s
2: solved... in 0.01s
1: solved... in 0.593s
2: solved... in 0.011s
1: solved... in 0.568s
2: solved... in 0.011s
1: solved... in 0.594s
2: solved... in 0.011s
1: solved... in 0.564s
2: solved... in 0.011s
1: solved... in 0.575s
2: solved... in 0.011s
1: solved... in 0.566s
2: solved... in 0.011s
1: solved... in 0.553s
2: solved... in 0.011s
1: solved... in 0.572s
2: solved... in 0.011s
1: solved... in 0.541s
2: solved... in 0.011s
1: solved... in 0.57s
2: solved... in 0.012s
1: solved... in 0.576s
2: solved... in 0.011s
1: solved... in 0.566s
2: solved... in 0.011s
1: solved... in 0.563s
2: solved... in 0.011s
1: solved... in 0.552s
2: solved... in 0.012s
1: solved... in 0.562s
2: solved... in 0.012s
1: solved... in 0.575s
2: solved... in 0.012s
1: solved... in 0.573s
2: solved... in 0.012s
1: solved... in 0.598s
2: solved... in 0.012s
1: solved... in 0.581s
2: solved... in 0.012s
1: solved... in 0.569s
2: solved... in 0.013s
1: solved... in 0.57s
2: solved... in 0.013s
1: solved... in 0.573s
2: solved... in 0.012s
1: solved... in 0.578s
2: solved... in 0.012s
1: solved... in 0.568s
2: solved... in 0.013s
1: solved... in 0.573s
2: solved... in 0.013s
1: solved... in 0.576s
2: solved... in 0.012s
1: solved... in 0.574s
2: solved... in 0.013s
1: solved... in 0.571s
2: solved... in 0.013s
1: solved... in 0.623s
2: solved... in 0.013s
1: solved... in 0.568s
2: solved... in 0.013s
1: solved... in 0.582s
2: solved... in 0.016s
1: solved... in 0.584s
2: solved... in 0.013s
1: solved... in 0.578s
2: solved... in 0.014s
1: solved... in 0.572s
2: solved... in 0.014s
1: solved... in 0.565s
2: solved... in 0.014s
1: solved... in 0.568s
2: solved... in 0.013s
1: solved... in 0.567s
2: solved... in 0.014s
1: solved... in 0.569s
2: solved... in 0.014s
1: solved... in 0.57s
2: solved... in 0.015s
1: solved... in 0.567s
2: solved... in 0.014s
1: solved... in 0.573s
2: solved... in 0.014s
1: solved... in 0.569s
2: solved... in 0.015s
1: solved... in 0.576s
2: solved... in 0.015s
1: solved... in 0.566s
2: solved... in 0.015s
1: solved... in 0.564s
2: solved... in 0.015s
1: solved... in 0.537s
2: solved... in 0.015s
1: solved... in 0.57s
2: solved... in 0.015s
1: solved... in 0.542s
2: solved... in 0.015s
1: solved... in 0.565s
2: solved... in 0.015s
1: solved... in 0.545s
2: solved... in 0.015s
1: solved... in 0.57s
2: solved... in 0.015s
1: solved... in 0.542s
2: solved... in 0.015s
1: solved... in 0.572s
2: solved... in 0.015s
1: solved... in 0.535s
2: solved... in 0.015s
1: solved... in 0.567s
2: solved... in 0.015s
1: solved... in 0.567s
2: solved... in 0.015s
1: solved... in 0.564s
2: solved... in 0.015s
1: solved... in 0.605s
2: solved... in 0.015s
1: solved... in 0.57s
2: solved... in 0.016s
1: solved... in 0.542s
2: solved... in 0.015s
1: solved... in 0.566s
2: solved... in 0.015s
1: solved... in 0.567s
2: solved... in 0.016s
1: solved... in 0.565s
2: solved... in 0.016s
1: solved... in 0.569s
2: solved... in 0.015s
1: solved... in 0.567s
2: solved... in 0.016s
1: solved... in 0.567s
2: solved... in 0.016s
1: solved... in 0.568s
2: solved... in 0.016s
1: solved... in 0.567s
2: solved... in 0.015s
1: solved... in 0.585s
2: solved... in 0.016s
1: solved... in 0.57s
2: solved... in 0.016s
1: solved... in 0.566s
2: solved... in 0.016s
1: solved... in 0.583s
2: solved... in 0.017s
1: solved... in 0.567s
2: solved... in 0.016s
1: solved... in 0.564s
2: solved... in 0.016s
1: solved... in 0.557s
2: solved... in 0.016s
1: solved... in 0.57s
2: solved... in 0.017s
1: solved... in 0.541s
2: solved... in 0.017s
1: solved... in 0.571s
2: solved... in 0.017s
1: solved... in 0.542s
2: solved... in 0.02s
1: solved... in 0.583s
2: solved... in 0.018s
1: solved... in 0.571s
2: solved... in 0.018s
1: solved... in 0.57s
2: solved... in 0.017s
1: solved... in 0.569s
2: solved... in 0.018s
1: solved... in 0.65s
2: solved... in 0.018s
1: solved... in 0.572s
2: solved... in 0.017s
1: solved... in 0.564s
2: solved... in 0.017s
1: solved... in 0.564s
2: solved... in 0.018s
1: solved... in 0.572s
2: solved... in 0.018s
1: solved... in 0.593s
2: solved... in 0.018s
1: solved... in 0.57s
2: solved... in 0.018s
1: solved... in 0.562s
2: solved... in 0.018s
1: solved... in 0.568s
2: solved... in 0.018s
1: solved... in 0.572s
2: solved... in 0.018s
1: solved... in 0.569s
2: solved... in 0.019s
1: solved... in 0.542s
2: solved... in 0.018s
1: solved... in 0.57s
2: solved... in 0.026s
1: solved... in 0.536s
2: solved... in 0.018s
1: solved... in 0.568s
2: solved... in 0.019s
1: solved... in 0.565s
2: solved... in 0.018s
1: solved... in 0.627s
2: solved... in 0.019s
1: solved... in 0.57s
2: solved... in 0.019s
1: solved... in 0.568s
2: solved... in 0.018s
1: solved... in 0.571s
2: solved... in 0.019s
1: solved... in 0.568s
2: solved... in 0.019s
1: solved... in 0.577s
2: solved... in 0.021s
1: solved... in 0.577s
2: solved... in 0.018s
1: solved... in 0.565s
2: solved... in 0.02s
1: solved... in 0.578s
2: solved... in 0.019s
1: solved... in 0.572s
2: solved... in 0.018s
1: solved... in 0.57s
2: solved... in 0.019s
1: solved... in 0.567s
2: solved... in 0.019s
1: solved... in 0.569s
2: solved... in 0.02s
1: solved... in 0.569s
2: solved... in 0.019s
1: solved... in 0.567s
2: solved... in 0.02s
1: solved... in 0.573s
2: solved... in 0.02s
1: solved... in 0.576s
2: solved... in 0.019s
1: solved... in 0.565s
2: solved... in 0.019s
1: solved... in 0.564s
2: solved... in 0.02s
1: solved... in 0.568s
2: solved... in 0.02s
1: solved... in 0.566s
2: solved... in 0.02s
1: solved... in 0.57s
2: solved... in 0.02s
1: solved... in 0.568s
2: solved... in 0.02s
1: solved... in 0.586s
2: solved... in 0.02s
1: solved... in 0.58s
2: solved... in 0.02s
1: solved... in 0.571s
2: solved... in 0.021s
1: solved... in 0.576s
2: solved... in 0.02s
1: solved... in 0.577s
2: solved... in 0.02s
1: solved... in 0.566s
2: solved... in 0.021s
1: solved... in 0.564s
2: solved... in 0.02s
1: solved... in 0.565s
2: solved... in 0.02s
1: solved... in 0.568s
2: solved... in 0.02s
1: solved... in 0.58s
2: solved... in 0.021s
1: solved... in 0.57s
2: solved... in 0.02s
1: solved... in 0.593s
2: solved... in 0.02s
1: solved... in 0.567s
2: solved... in 0.022s
1: solved... in 0.57s
2: solved... in 0.021s
1: solved... in 0.563s
2: solved... in 0.022s
1: solved... in 0.695s
2: solved... in 0.022s
1: solved... in 0.652s
