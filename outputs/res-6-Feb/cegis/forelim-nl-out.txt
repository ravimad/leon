[[33mWarning[0m] warning: there were 9 deprecation warning(s); re-run with -deprecation for details
After Depth Instrumentation: 
object ForElimination {
  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Nil() extends List

  case class Block(body: List) extends Statement

  sealed abstract class Statement

  case class While(expr: Expression, body: Statement) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Skip() extends Statement

  sealed abstract class List

  case class And(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class Var(varID: Int) extends Expression

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Cons(head: Statement, tail: List) extends List

  def eliminateForLoops(stat : Statement) : Statement = {(stat match {
    case Block(body) =>
      Block(eliminateForLoopsList(body))
    case IfThenElse(expr, then, elze) =>
      IfThenElse(expr, eliminateForLoops(then), eliminateForLoops(elze))
    case While(expr, body) =>
      While(expr, eliminateForLoops(body))
    case For(init, expr, step, body) =>
      Block(Cons(eliminateForLoops(init), Cons(While(expr, Block(Cons(eliminateForLoops(body), Cons(eliminateForLoops(step), Nil())))), Nil())))
    case other =>
      other
  })} ensuring(res => true)

  def isForFree(stat : Statement) : Boolean = {(stat match {
    case Block(body) =>
      isForFreeList(body)
    case IfThenElse(_, then, elze) =>
      (isForFree(then) && isForFree(elze))
    case While(_, body) =>
      isForFree(body)
    case For(_, _, _, _) =>
      false
    case _ =>
      true
  })} ensuring(res => true)

  def forLoopsWellFormedList(l : List) : Boolean = {(l match {
    case Nil() =>
      true
    case Cons(x, xs) =>
      (forLoopsWellFormed(x) && forLoopsWellFormedList(xs))
  })} ensuring(res => true)

  def isForFreeList(l : List) : Boolean = {(l match {
    case Nil() =>
      true
    case Cons(x, xs) =>
      (isForFree(x) && isForFreeList(xs))
  })} ensuring(res => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : Boolean = {(stat match {
    case Block(body) =>
      forLoopsWellFormedList(body)
    case IfThenElse(_, then, elze) =>
      (forLoopsWellFormed(then) && forLoopsWellFormed(elze))
    case While(_, body) =>
      forLoopsWellFormed(body)
    case For(init, _, step, body) =>
      (isForFree(init) && isForFree(step) && forLoopsWellFormed(body))
    case _ =>
      true
  })} ensuring(res => true)

  def eliminateWhileLoops(stat : Statement) : Statement = {(stat match {
    case Block(body) =>
      Block(eliminateWhileLoopsList(body))
    case IfThenElse(expr, then, elze) =>
      IfThenElse(expr, eliminateWhileLoops(then), eliminateWhileLoops(elze))
    case While(expr, body) =>
      For(Skip(), expr, Skip(), eliminateWhileLoops(body))
    case For(init, expr, step, body) =>
      For(eliminateWhileLoops(init), expr, eliminateWhileLoops(step), eliminateWhileLoops(body))
    case other =>
      other
  })} ensuring(res => true)

  def eliminateForLoopsList(l : List) : List = {(l match {
    case Nil() =>
      Nil()
    case Cons(x, xs) =>
      Cons(eliminateForLoops(x), eliminateForLoopsList(xs))
  })} ensuring(res => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoopsList(l : List) : List = {(l match {
    case Nil() =>
      Nil()
    case Cons(x, xs) =>
      Cons(eliminateWhileLoops(x), eliminateWhileLoopsList(xs))
  })} ensuring(res => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: eliminateForLoops
Defined fun: isForFree
Defined fun: forLoopsWellFormedList
Defined fun: isForFreeList
Defined fun: sizeList
Defined fun: forLoopsWellFormed
Defined fun: eliminateWhileLoops
Defined fun: eliminateForLoopsList
Defined fun: sizeStat
Defined fun: eliminateWhileLoopsList
Defined fun: max
FunMap: Map(isForFreeList -> isForFreeList, sizeStat -> sizeStat, forLoopsWellFormedList -> forLoopsWellFormedList, max -> max, eliminateWhileLoopsList -> eliminateWhileLoopsList, forLoopsWellFormed -> forLoopsWellFormed, isForFree -> isForFree, eliminateWhileLoops -> eliminateWhileLoops, sizeList -> sizeList, eliminateForLoops -> eliminateForLoops, eliminateForLoopsList -> eliminateForLoopsList)
After Time Instrumentation: 
object ForElimination {
  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Nil() extends List

  case class Block(body: List) extends Statement

  sealed abstract class Statement

  case class While(expr: Expression, body: Statement) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Skip() extends Statement

  sealed abstract class List

  case class And(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class Var(varID: Int) extends Expression

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Cons(head: Statement, tail: List) extends List

  def eliminateForLoops(stat : Statement) : (Statement, Int) = {locally {
    val t161 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (e161: Block, t162: Int) = locally {
          val (e162: List, t163: Int) = locally {
            val (e164: List, t165: Int) = eliminateForLoopsList(stat.body)
            (e164, (1 + (1 + t165)))
          }
          
          (Block(e162), (t163 + 1))
        }
        
        (e161, (t161 + t162))
      }
      
    } else {
      locally {
        val (e166: Statement, t167: Int) = locally {
          val t168 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (e168: IfThenElse, t169: Int) = locally {
                val (e170: Statement, t171: Int) = locally {
                  val (e176: Statement, t177: Int) = eliminateForLoops(stat.then)
                  (e176, (1 + (1 + t177)))
                }
                
                locally {
                  val (e171: Statement, t172: Int) = locally {
                    val (e173: Statement, t174: Int) = eliminateForLoops(stat.elze)
                    (e173, (1 + (1 + t174)))
                  }
                  
                  (IfThenElse(stat.expr, e170, e171), (t172 + (t171 + 2)))
                }
                
              }
              
              (e168, (t168 + t169))
            }
            
          } else {
            locally {
              val (e179: Statement, t180: Int) = locally {
                val t181 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (e181: While, t182: Int) = locally {
                      val (e183: Statement, t184: Int) = locally {
                        val (e185: Statement, t186: Int) = eliminateForLoops(stat.body)
                        (e185, (1 + (1 + t186)))
                      }
                      
                      (While(stat.expr, e183), (t184 + 2))
                    }
                    
                    (e181, (t181 + t182))
                  }
                  
                } else {
                  locally {
                    val (e188: Statement, t189: Int) = locally {
                      val t190 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (e190: Block, t191: Int) = locally {
                            val (e191: Cons, t192: Int) = locally {
                              val (e192: Statement, t193: Int) = locally {
                                val (e211: Statement, t212: Int) = eliminateForLoops(stat.init)
                                (e211, (1 + (1 + t212)))
                              }
                              
                              locally {
                                val (e193: Cons, t194: Int) = locally {
                                  val (e194: While, t195: Int) = locally {
                                    val (e197: Block, t198: Int) = locally {
                                      val (e198: Cons, t199: Int) = locally {
                                        val (e199: Statement, t200: Int) = locally {
                                          val (e207: Statement, t208: Int) = eliminateForLoops(stat.body)
                                          (e207, (1 + (1 + t208)))
                                        }
                                        
                                        locally {
                                          val (e200: Cons, t201: Int) = locally {
                                            val (e201: Statement, t202: Int) = locally {
                                              val (e204: Statement, t205: Int) = eliminateForLoops(stat.step)
                                              (e204, (1 + (1 + t205)))
                                            }
                                            
                                            (Cons(e201, Nil()), (1 + (t202 + 1)))
                                          }
                                          
                                          (Cons(e199, e200), (t201 + (t200 + 1)))
                                        }
                                        
                                      }
                                      
                                      (Block(e198), (t199 + 1))
                                    }
                                    
                                    (While(stat.expr, e197), (t198 + 2))
                                  }
                                  
                                  (Cons(e194, Nil()), (1 + (t195 + 1)))
                                }
                                
                                (Cons(e192, e193), (t194 + (t193 + 1)))
                              }
                              
                            }
                            
                            (Block(e191), (t192 + 1))
                          }
                          
                          (e190, (t190 + t191))
                        }
                        
                      } else {
                        (stat, t190)
                      }
                    }
                    
                    (e188, (t181 + t189))
                  }
                  
                }
              }
              
              (e179, (t168 + t180))
            }
            
          }
        }
        
        (e166, (t161 + t167))
      }
      
    }
  }
  } ensuring(res23 => true)

  def isForFree(stat : Statement) : (Boolean, Int) = {locally {
    val t79 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (e79: Boolean, t80: Int) = locally {
          val (e81: Boolean, t82: Int) = isForFreeList(stat.body)
          (e81, (1 + (1 + t82)))
        }
        
        (e79, (t79 + t80))
      }
      
    } else {
      locally {
        val (e83: Boolean, t84: Int) = locally {
          val t85 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (e85: Boolean, t86: Int) = locally {
                val (e86: Boolean, t87: Int) = locally {
                  val (e92: Boolean, t93: Int) = isForFree(stat.then)
                  (e92, (1 + (1 + t93)))
                }
                
                locally {
                  val (e87: Boolean, t88: Int) = locally {
                    val (e89: Boolean, t90: Int) = isForFree(stat.elze)
                    (e89, (1 + (1 + t90)))
                  }
                  
                  ((e86 && e87), (t88 + (t87 + 1)))
                }
                
              }
              
              (e85, (t85 + t86))
            }
            
          } else {
            locally {
              val (e94: Boolean, t95: Int) = locally {
                val t96 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (e96: Boolean, t97: Int) = locally {
                      val (e98: Boolean, t99: Int) = isForFree(stat.body)
                      (e98, (1 + (1 + t99)))
                    }
                    
                    (e96, (t96 + t97))
                  }
                  
                } else {
                  locally {
                    val (e100: Boolean, t101: Int) = locally {
                      val t102 = 1
                      if (stat.isInstanceOf[For]) {
                        (false, t102)
                      } else {
                        (true, t102)
                      }
                    }
                    
                    (e100, (t96 + t101))
                  }
                  
                }
              }
              
              (e94, (t85 + t95))
            }
            
          }
        }
        
        (e83, (t79 + t84))
      }
      
    }
  }
  } ensuring(res21 => true)

  def forLoopsWellFormedList(l : List) : (Boolean, Int) = {locally {
    val t13 = 1
    if (l.isInstanceOf[Nil]) {
      (true, t13)
    } else {
      locally {
        val (e14: Boolean, t15: Int) = locally {
          val (e15: Boolean, t16: Int) = locally {
            val (e21: Boolean, t22: Int) = forLoopsWellFormed(l.head)
            (e21, (1 + (1 + t22)))
          }
          
          locally {
            val (e16: Boolean, t17: Int) = locally {
              val (e18: Boolean, t19: Int) = forLoopsWellFormedList(l.tail)
              (e18, (1 + (1 + t19)))
            }
            
            ((e15 && e16), (t17 + (t16 + 1)))
          }
          
        }
        
        (e14, (t13 + t15))
      }
      
    }
  }
  } ensuring(res18 => true)

  def isForFreeList(l : List) : (Boolean, Int) = {locally {
    val t1 = 1
    if (l.isInstanceOf[Nil]) {
      (true, t1)
    } else {
      locally {
        val (e2: Boolean, t3: Int) = locally {
          val (e3: Boolean, t4: Int) = locally {
            val (e9: Boolean, t10: Int) = isForFree(l.head)
            (e9, (1 + (1 + t10)))
          }
          
          locally {
            val (e4: Boolean, t5: Int) = locally {
              val (e6: Boolean, t7: Int) = isForFreeList(l.tail)
              (e6, (1 + (1 + t7)))
            }
            
            ((e3 && e4), (t5 + (t4 + 1)))
          }
          
        }
        
        (e2, (t1 + t3))
      }
      
    }
  }
  } ensuring(res17 => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : (Boolean, Int) = {locally {
    val t37 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (e37: Boolean, t38: Int) = locally {
          val (e39: Boolean, t40: Int) = forLoopsWellFormedList(stat.body)
          (e39, (1 + (1 + t40)))
        }
        
        (e37, (t37 + t38))
      }
      
    } else {
      locally {
        val (e41: Boolean, t42: Int) = locally {
          val t43 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (e43: Boolean, t44: Int) = locally {
                val (e44: Boolean, t45: Int) = locally {
                  val (e50: Boolean, t51: Int) = forLoopsWellFormed(stat.then)
                  (e50, (1 + (1 + t51)))
                }
                
                locally {
                  val (e45: Boolean, t46: Int) = locally {
                    val (e47: Boolean, t48: Int) = forLoopsWellFormed(stat.elze)
                    (e47, (1 + (1 + t48)))
                  }
                  
                  ((e44 && e45), (t46 + (t45 + 1)))
                }
                
              }
              
              (e43, (t43 + t44))
            }
            
          } else {
            locally {
              val (e52: Boolean, t53: Int) = locally {
                val t54 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (e54: Boolean, t55: Int) = locally {
                      val (e56: Boolean, t57: Int) = forLoopsWellFormed(stat.body)
                      (e56, (1 + (1 + t57)))
                    }
                    
                    (e54, (t54 + t55))
                  }
                  
                } else {
                  locally {
                    val (e58: Boolean, t59: Int) = locally {
                      val t60 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (e60: Boolean, t61: Int) = locally {
                            val (e61: Boolean, t62: Int) = locally {
                              val (e71: Boolean, t72: Int) = isForFree(stat.init)
                              (e71, (1 + (1 + t72)))
                            }
                            
                            locally {
                              val (e62: Boolean, t63: Int) = locally {
                                val (e68: Boolean, t69: Int) = isForFree(stat.step)
                                (e68, (1 + (1 + t69)))
                              }
                              
                              locally {
                                val (e63: Boolean, t64: Int) = locally {
                                  val (e65: Boolean, t66: Int) = forLoopsWellFormed(stat.body)
                                  (e65, (1 + (1 + t66)))
                                }
                                
                                ((e61 && e62 && e63), (t64 + (t63 + (t62 + 1))))
                              }
                              
                            }
                            
                          }
                          
                          (e60, (t60 + t61))
                        }
                        
                      } else {
                        (true, t60)
                      }
                    }
                    
                    (e58, (t54 + t59))
                  }
                  
                }
              }
              
              (e52, (t43 + t53))
            }
            
          }
        }
        
        (e41, (t37 + t42))
      }
      
    }
  }
  } ensuring(res20 => true)

  def eliminateWhileLoops(stat : Statement) : (Statement, Int) = {locally {
    val t109 = 1
    if (stat.isInstanceOf[Block]) {
      locally {
        val (e109: Block, t110: Int) = locally {
          val (e110: List, t111: Int) = locally {
            val (e112: List, t113: Int) = eliminateWhileLoopsList(stat.body)
            (e112, (1 + (1 + t113)))
          }
          
          (Block(e110), (t111 + 1))
        }
        
        (e109, (t109 + t110))
      }
      
    } else {
      locally {
        val (e114: Statement, t115: Int) = locally {
          val t116 = 1
          if (stat.isInstanceOf[IfThenElse]) {
            locally {
              val (e116: IfThenElse, t117: Int) = locally {
                val (e118: Statement, t119: Int) = locally {
                  val (e124: Statement, t125: Int) = eliminateWhileLoops(stat.then)
                  (e124, (1 + (1 + t125)))
                }
                
                locally {
                  val (e119: Statement, t120: Int) = locally {
                    val (e121: Statement, t122: Int) = eliminateWhileLoops(stat.elze)
                    (e121, (1 + (1 + t122)))
                  }
                  
                  (IfThenElse(stat.expr, e118, e119), (t120 + (t119 + 2)))
                }
                
              }
              
              (e116, (t116 + t117))
            }
            
          } else {
            locally {
              val (e127: Statement, t128: Int) = locally {
                val t129 = 1
                if (stat.isInstanceOf[While]) {
                  locally {
                    val (e129: For, t130: Int) = locally {
                      val (e133: Statement, t134: Int) = locally {
                        val (e135: Statement, t136: Int) = eliminateWhileLoops(stat.body)
                        (e135, (1 + (1 + t136)))
                      }
                      
                      (For(Skip(), stat.expr, Skip(), e133), (t134 + 4))
                    }
                    
                    (e129, (t129 + t130))
                  }
                  
                } else {
                  locally {
                    val (e138: Statement, t139: Int) = locally {
                      val t140 = 1
                      if (stat.isInstanceOf[For]) {
                        locally {
                          val (e140: For, t141: Int) = locally {
                            val (e141: Statement, t142: Int) = locally {
                              val (e153: Statement, t154: Int) = eliminateWhileLoops(stat.init)
                              (e153, (1 + (1 + t154)))
                            }
                            
                            locally {
                              val (e143: Statement, t144: Int) = locally {
                                val (e149: Statement, t150: Int) = eliminateWhileLoops(stat.step)
                                (e149, (1 + (1 + t150)))
                              }
                              
                              locally {
                                val (e144: Statement, t145: Int) = locally {
                                  val (e146: Statement, t147: Int) = eliminateWhileLoops(stat.body)
                                  (e146, (1 + (1 + t147)))
                                }
                                
                                (For(e141, stat.expr, e143, e144), (t145 + (t144 + (1 + (t142 + 1)))))
                              }
                              
                            }
                            
                          }
                          
                          (e140, (t140 + t141))
                        }
                        
                      } else {
                        (stat, t140)
                      }
                    }
                    
                    (e138, (t129 + t139))
                  }
                  
                }
              }
              
              (e127, (t116 + t128))
            }
            
          }
        }
        
        (e114, (t109 + t115))
      }
      
    }
  }
  } ensuring(res22 => true)

  def eliminateForLoopsList(l : List) : (List, Int) = {locally {
    val t219 = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), (t219 + 1))
    } else {
      locally {
        val (e220: Cons, t221: Int) = locally {
          val (e221: Statement, t222: Int) = locally {
            val (e227: Statement, t228: Int) = eliminateForLoops(l.head)
            (e227, (1 + (1 + t228)))
          }
          
          locally {
            val (e222: List, t223: Int) = locally {
              val (e224: List, t225: Int) = eliminateForLoopsList(l.tail)
              (e224, (1 + (1 + t225)))
            }
            
            (Cons(e221, e222), (t223 + (t222 + 1)))
          }
          
        }
        
        (e220, (t219 + t221))
      }
      
    }
  }
  } ensuring(res24 => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoopsList(l : List) : (List, Int) = {locally {
    val t25 = 1
    if (l.isInstanceOf[Nil]) {
      (Nil(), (t25 + 1))
    } else {
      locally {
        val (e26: Cons, t27: Int) = locally {
          val (e27: Statement, t28: Int) = locally {
            val (e33: Statement, t34: Int) = eliminateWhileLoops(l.head)
            (e33, (1 + (1 + t34)))
          }
          
          locally {
            val (e28: List, t29: Int) = locally {
              val (e30: List, t31: Int) = eliminateWhileLoopsList(l.tail)
              (e30, (1 + (1 + t31)))
            }
            
            (Cons(e27, e28), (t29 + (t28 + 1)))
          }
          
        }
        
        (e26, (t25 + t27))
      }
      
    }
  }
  } ensuring(res19 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object ForElimination {
  case class LessThan(lhs: Expression, rhs: Expression) extends Expression

  sealed abstract class Expression

  case class Equals(lhs: Expression, rhs: Expression) extends Expression

  case class Division(lhs: Expression, rhs: Expression) extends Expression

  case class Assign(varID: Int, expr: Expression) extends Statement

  case class Nil() extends List

  case class Block(body: List) extends Statement

  sealed abstract class Statement

  case class While(expr: Expression, body: Statement) extends Statement

  case class IntLiteral(value: Int) extends Expression

  case class For(init: Statement, expr: Expression, step: Statement, body: Statement) extends Statement

  case class Skip() extends Statement

  sealed abstract class List

  case class And(lhs: Expression, rhs: Expression) extends Expression

  case class Not(expr: Expression) extends Expression

  case class IfThenElse(expr: Expression, then: Statement, elze: Statement) extends Statement

  case class Print(msg: Int, varID: Int) extends Statement

  case class Plus(lhs: Expression, rhs: Expression) extends Expression

  case class Minus(lhs: Expression, rhs: Expression) extends Expression

  case class Var(varID: Int) extends Expression

  case class Times(lhs: Expression, rhs: Expression) extends Expression

  case class Or(lhs: Expression, rhs: Expression) extends Expression

  case class Cons(head: Statement, tail: List) extends List

  def eliminateForLoops(stat : Statement) : (Statement, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (e161: Block, t162: Int) = locally {
        val (e162: List, t163: Int) = locally {
          val (e164: List, t165: Int) = eliminateForLoopsList(stat.body)
          (e164, (1 + (1 + t165)))
        }
        
        (Block(e162), (t163 + 1))
      }
      
      (e161, (1 + t162))
    }
    
  } else {
    locally {
      val (e166: Statement, t167: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (e168: IfThenElse, t169: Int) = locally {
            val (e170: Statement, t171: Int) = locally {
              val (e176: Statement, t177: Int) = eliminateForLoops(stat.then)
              (e176, (1 + (1 + t177)))
            }
            
            locally {
              val (e171: Statement, t172: Int) = locally {
                val (e173: Statement, t174: Int) = eliminateForLoops(stat.elze)
                (e173, (1 + (1 + t174)))
              }
              
              (IfThenElse(stat.expr, e170, e171), (t172 + (t171 + 2)))
            }
            
          }
          
          (e168, (1 + t169))
        }
        
      } else {
        locally {
          val (e179: Statement, t180: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (e181: While, t182: Int) = locally {
                val (e183: Statement, t184: Int) = locally {
                  val (e185: Statement, t186: Int) = eliminateForLoops(stat.body)
                  (e185, (1 + (1 + t186)))
                }
                
                (While(stat.expr, e183), (t184 + 2))
              }
              
              (e181, (1 + t182))
            }
            
          } else {
            locally {
              val (e188: Statement, t189: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (e190: Block, t191: Int) = locally {
                    val (e191: Cons, t192: Int) = locally {
                      val (e192: Statement, t193: Int) = locally {
                        val (e211: Statement, t212: Int) = eliminateForLoops(stat.init)
                        (e211, (1 + (1 + t212)))
                      }
                      
                      locally {
                        val (e193: Cons, t194: Int) = locally {
                          val (e194: While, t195: Int) = locally {
                            val (e197: Block, t198: Int) = locally {
                              val (e198: Cons, t199: Int) = locally {
                                val (e199: Statement, t200: Int) = locally {
                                  val (e207: Statement, t208: Int) = eliminateForLoops(stat.body)
                                  (e207, (1 + (1 + t208)))
                                }
                                
                                locally {
                                  val (e200: Cons, t201: Int) = locally {
                                    val (e201: Statement, t202: Int) = locally {
                                      val (e204: Statement, t205: Int) = eliminateForLoops(stat.step)
                                      (e204, (1 + (1 + t205)))
                                    }
                                    
                                    (Cons(e201, Nil()), (1 + (t202 + 1)))
                                  }
                                  
                                  (Cons(e199, e200), (t201 + (t200 + 1)))
                                }
                                
                              }
                              
                              (Block(e198), (t199 + 1))
                            }
                            
                            (While(stat.expr, e197), (t198 + 2))
                          }
                          
                          (Cons(e194, Nil()), (1 + (t195 + 1)))
                        }
                        
                        (Cons(e192, e193), (t194 + (t193 + 1)))
                      }
                      
                    }
                    
                    (Block(e191), (t192 + 1))
                  }
                  
                  (e190, (1 + t191))
                }
                
              } else {
                (stat, 1)
              }
              (e188, (1 + t189))
            }
            
          }
          (e179, (1 + t180))
        }
        
      }
      (e166, (1 + t167))
    }
    
  }} ensuring(res23 => true)

  def isForFree(stat : Statement) : (Boolean, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (e79: Boolean, t80: Int) = locally {
        val (e81: Boolean, t82: Int) = isForFreeList(stat.body)
        (e81, (1 + (1 + t82)))
      }
      
      (e79, (1 + t80))
    }
    
  } else {
    locally {
      val (e83: Boolean, t84: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (e85: Boolean, t86: Int) = locally {
            val (e86: Boolean, t87: Int) = locally {
              val (e92: Boolean, t93: Int) = isForFree(stat.then)
              (e92, (1 + (1 + t93)))
            }
            
            locally {
              val (e87: Boolean, t88: Int) = locally {
                val (e89: Boolean, t90: Int) = isForFree(stat.elze)
                (e89, (1 + (1 + t90)))
              }
              
              ((e86 && e87), (t88 + (t87 + 1)))
            }
            
          }
          
          (e85, (1 + t86))
        }
        
      } else {
        locally {
          val (e94: Boolean, t95: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (e96: Boolean, t97: Int) = locally {
                val (e98: Boolean, t99: Int) = isForFree(stat.body)
                (e98, (1 + (1 + t99)))
              }
              
              (e96, (1 + t97))
            }
            
          } else {
            locally {
              val (e100: Boolean, t101: Int) = if (stat.isInstanceOf[For]) {
                (false, 1)
              } else {
                (true, 1)
              }
              (e100, (1 + t101))
            }
            
          }
          (e94, (1 + t95))
        }
        
      }
      (e83, (1 + t84))
    }
    
  }} ensuring(res21 => true)

  def forLoopsWellFormedList(l : List) : (Boolean, Int) = {if (l.isInstanceOf[Nil]) {
    (true, 1)
  } else {
    locally {
      val (e14: Boolean, t15: Int) = locally {
        val (e15: Boolean, t16: Int) = locally {
          val (e21: Boolean, t22: Int) = forLoopsWellFormed(l.head)
          (e21, (1 + (1 + t22)))
        }
        
        locally {
          val (e16: Boolean, t17: Int) = locally {
            val (e18: Boolean, t19: Int) = forLoopsWellFormedList(l.tail)
            (e18, (1 + (1 + t19)))
          }
          
          ((e15 && e16), (t17 + (t16 + 1)))
        }
        
      }
      
      (e14, (1 + t15))
    }
    
  }} ensuring(res18 => true)

  def isForFreeList(l : List) : (Boolean, Int) = {if (l.isInstanceOf[Nil]) {
    (true, 1)
  } else {
    locally {
      val (e2: Boolean, t3: Int) = locally {
        val (e3: Boolean, t4: Int) = locally {
          val (e9: Boolean, t10: Int) = isForFree(l.head)
          (e9, (1 + (1 + t10)))
        }
        
        locally {
          val (e4: Boolean, t5: Int) = locally {
            val (e6: Boolean, t7: Int) = isForFreeList(l.tail)
            (e6, (1 + (1 + t7)))
          }
          
          ((e3 && e4), (t5 + (t4 + 1)))
        }
        
      }
      
      (e2, (1 + t3))
    }
    
  }} ensuring(res17 => true)

  def sizeList(l : List) : Int = {(l match {
    case Cons(h, t) =>
      (sizeStat(h) + sizeList(t))
    case Nil() =>
      0
  })}

  def forLoopsWellFormed(stat : Statement) : (Boolean, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (e37: Boolean, t38: Int) = locally {
        val (e39: Boolean, t40: Int) = forLoopsWellFormedList(stat.body)
        (e39, (1 + (1 + t40)))
      }
      
      (e37, (1 + t38))
    }
    
  } else {
    locally {
      val (e41: Boolean, t42: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (e43: Boolean, t44: Int) = locally {
            val (e44: Boolean, t45: Int) = locally {
              val (e50: Boolean, t51: Int) = forLoopsWellFormed(stat.then)
              (e50, (1 + (1 + t51)))
            }
            
            locally {
              val (e45: Boolean, t46: Int) = locally {
                val (e47: Boolean, t48: Int) = forLoopsWellFormed(stat.elze)
                (e47, (1 + (1 + t48)))
              }
              
              ((e44 && e45), (t46 + (t45 + 1)))
            }
            
          }
          
          (e43, (1 + t44))
        }
        
      } else {
        locally {
          val (e52: Boolean, t53: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (e54: Boolean, t55: Int) = locally {
                val (e56: Boolean, t57: Int) = forLoopsWellFormed(stat.body)
                (e56, (1 + (1 + t57)))
              }
              
              (e54, (1 + t55))
            }
            
          } else {
            locally {
              val (e58: Boolean, t59: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (e60: Boolean, t61: Int) = locally {
                    val (e61: Boolean, t62: Int) = locally {
                      val (e71: Boolean, t72: Int) = isForFree(stat.init)
                      (e71, (1 + (1 + t72)))
                    }
                    
                    locally {
                      val (e62: Boolean, t63: Int) = locally {
                        val (e68: Boolean, t69: Int) = isForFree(stat.step)
                        (e68, (1 + (1 + t69)))
                      }
                      
                      locally {
                        val (e63: Boolean, t64: Int) = locally {
                          val (e65: Boolean, t66: Int) = forLoopsWellFormed(stat.body)
                          (e65, (1 + (1 + t66)))
                        }
                        
                        ((e61 && e62 && e63), (t64 + (t63 + (t62 + 1))))
                      }
                      
                    }
                    
                  }
                  
                  (e60, (1 + t61))
                }
                
              } else {
                (true, 1)
              }
              (e58, (1 + t59))
            }
            
          }
          (e52, (1 + t53))
        }
        
      }
      (e41, (1 + t42))
    }
    
  }} ensuring(res20 => true)

  def eliminateWhileLoops(stat : Statement) : (Statement, Int) = {if (stat.isInstanceOf[Block]) {
    locally {
      val (e109: Block, t110: Int) = locally {
        val (e110: List, t111: Int) = locally {
          val (e112: List, t113: Int) = eliminateWhileLoopsList(stat.body)
          (e112, (1 + (1 + t113)))
        }
        
        (Block(e110), (t111 + 1))
      }
      
      (e109, (1 + t110))
    }
    
  } else {
    locally {
      val (e114: Statement, t115: Int) = if (stat.isInstanceOf[IfThenElse]) {
        locally {
          val (e116: IfThenElse, t117: Int) = locally {
            val (e118: Statement, t119: Int) = locally {
              val (e124: Statement, t125: Int) = eliminateWhileLoops(stat.then)
              (e124, (1 + (1 + t125)))
            }
            
            locally {
              val (e119: Statement, t120: Int) = locally {
                val (e121: Statement, t122: Int) = eliminateWhileLoops(stat.elze)
                (e121, (1 + (1 + t122)))
              }
              
              (IfThenElse(stat.expr, e118, e119), (t120 + (t119 + 2)))
            }
            
          }
          
          (e116, (1 + t117))
        }
        
      } else {
        locally {
          val (e127: Statement, t128: Int) = if (stat.isInstanceOf[While]) {
            locally {
              val (e129: For, t130: Int) = locally {
                val (e133: Statement, t134: Int) = locally {
                  val (e135: Statement, t136: Int) = eliminateWhileLoops(stat.body)
                  (e135, (1 + (1 + t136)))
                }
                
                (For(Skip(), stat.expr, Skip(), e133), (t134 + 4))
              }
              
              (e129, (1 + t130))
            }
            
          } else {
            locally {
              val (e138: Statement, t139: Int) = if (stat.isInstanceOf[For]) {
                locally {
                  val (e140: For, t141: Int) = locally {
                    val (e141: Statement, t142: Int) = locally {
                      val (e153: Statement, t154: Int) = eliminateWhileLoops(stat.init)
                      (e153, (1 + (1 + t154)))
                    }
                    
                    locally {
                      val (e143: Statement, t144: Int) = locally {
                        val (e149: Statement, t150: Int) = eliminateWhileLoops(stat.step)
                        (e149, (1 + (1 + t150)))
                      }
                      
                      locally {
                        val (e144: Statement, t145: Int) = locally {
                          val (e146: Statement, t147: Int) = eliminateWhileLoops(stat.body)
                          (e146, (1 + (1 + t147)))
                        }
                        
                        (For(e141, stat.expr, e143, e144), (t145 + (t144 + (1 + (t142 + 1)))))
                      }
                      
                    }
                    
                  }
                  
                  (e140, (1 + t141))
                }
                
              } else {
                (stat, 1)
              }
              (e138, (1 + t139))
            }
            
          }
          (e127, (1 + t128))
        }
        
      }
      (e114, (1 + t115))
    }
    
  }} ensuring(res22 => true)

  def eliminateForLoopsList(l : List) : (List, Int) = {if (l.isInstanceOf[Nil]) {
    (Nil(), (1 + 1))
  } else {
    locally {
      val (e220: Cons, t221: Int) = locally {
        val (e221: Statement, t222: Int) = locally {
          val (e227: Statement, t228: Int) = eliminateForLoops(l.head)
          (e227, (1 + (1 + t228)))
        }
        
        locally {
          val (e222: List, t223: Int) = locally {
            val (e224: List, t225: Int) = eliminateForLoopsList(l.tail)
            (e224, (1 + (1 + t225)))
          }
          
          (Cons(e221, e222), (t223 + (t222 + 1)))
        }
        
      }
      
      (e220, (1 + t221))
    }
    
  }} ensuring(res24 => true)

  def sizeStat(st : Statement) : Int = {(st match {
    case Block(l) =>
      (sizeList(l) + 1)
    case IfThenElse(c, th, el) =>
      ((sizeStat(th) + sizeStat(el)) + 1)
    case While(c, b) =>
      (sizeStat(b) + 1)
    case For(init, cond, step, body) =>
      ((sizeStat(init) + sizeStat(step)) + sizeStat(body))
    case other =>
      1
  })}

  def eliminateWhileLoopsList(l : List) : (List, Int) = {if (l.isInstanceOf[Nil]) {
    (Nil(), (1 + 1))
  } else {
    locally {
      val (e26: Cons, t27: Int) = locally {
        val (e27: Statement, t28: Int) = locally {
          val (e33: Statement, t34: Int) = eliminateWhileLoops(l.head)
          (e33, (1 + (1 + t34)))
        }
        
        locally {
          val (e28: List, t29: Int) = locally {
            val (e30: List, t31: Int) = eliminateWhileLoopsList(l.tail)
            (e30, (1 + (1 + t31)))
          }
          
          (Cons(e27, e28), (t29 + (t28 + 1)))
        }
        
      }
      
      (e26, (1 + t27))
    }
    
  }} ensuring(res19 => true)

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: eliminateForLoops template --> (res23._2 ≤ ((a?7 * sizeStat(stat)) + b?7))
Function: isForFree template --> (res21._2 ≤ ((a? * sizeStat(stat)) + b?))
Function: forLoopsWellFormedList template --> (res18._2 ≤ ((a?2 * sizeList(l)) + b?2))
Function: isForFreeList template --> (res17._2 ≤ ((a?1 * sizeList(l)) + b?1))
Function: forLoopsWellFormed template --> (res20._2 ≤ ((a?3 * sizeStat(stat)) + b?3))
Function: eliminateWhileLoops template --> (res22._2 ≤ ((a?5 * sizeStat(stat)) + b?5))
Function: eliminateForLoopsList template --> (res24._2 ≤ ((a?6 * sizeList(l)) + b?6))
Function: eliminateWhileLoopsList template --> (res19._2 ≤ ((a?4 * sizeList(l)) + b?4))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(sizeStat, sizeList, eliminateForLoops, eliminateForLoopsList, isForFreeList, isForFree, forLoopsWellFormed, forLoopsWellFormedList, eliminateWhileLoopsList, eliminateWhileLoops)
[[34m Info  [0m] - considering function eliminateForLoops...
[[34m Info  [0m] Body: if (stat.isInstanceOf[Block])
            (let (e161,t162 := (let (e162,t163 := (let (e164,t165 := eliminateForLoopsList(stat.body)) in
              (e164, (1 + (1 + t165))))) in
              (Block(e162), (t163 + 1)))) in
              (e161, (1 + t162)))
          else
            (let (e166,t167 := if (stat.isInstanceOf[IfThenElse])
              (let (e168,t169 := (let (e170,t171 := (let (e176,t177 := eliminateForLoops(stat.then)) in
                (e176, (1 + (1 + t177))))) in
                (let (e171,t172 := (let (e173,t174 := eliminateForLoops(stat.elze)) in
                  (e173, (1 + (1 + t174))))) in
                  (IfThenElse(stat.expr, e170, e171), (t172 + (t171 + 2)))))) in
                (e168, (1 + t169)))
            else
              (let (e179,t180 := if (stat.isInstanceOf[While])
                (let (e181,t182 := (let (e183,t184 := (let (e185,t186 := eliminateForLoops(stat.body)) in
                  (e185, (1 + (1 + t186))))) in
                  (While(stat.expr, e183), (t184 + 2)))) in
                  (e181, (1 + t182)))
              else
                (let (e188,t189 := if (stat.isInstanceOf[For])
                  (let (e190,t191 := (let (e191,t192 := (let (e192,t193 := (let (e211,t212 := eliminateForLoops(stat.init)) in
                    (e211, (1 + (1 + t212))))) in
                    (let (e193,t194 := (let (e194,t195 := (let (e197,t198 := (let (e198,t199 := (let (e199,t200 := (let (e207,t208 := eliminateForLoops(stat.body)) in
                      (e207, (1 + (1 + t208))))) in
                      (let (e200,t201 := (let (e201,t202 := (let (e204,t205 := eliminateForLoops(stat.step)) in
                        (e204, (1 + (1 + t205))))) in
                        (Cons(e201, Nil()), (1 + (t202 + 1))))) in
                        (Cons(e199, e200), (t201 + (t200 + 1)))))) in
                      (Block(e198), (t199 + 1)))) in
                      (While(stat.expr, e197), (t198 + 2)))) in
                      (Cons(e194, Nil()), (1 + (t195 + 1))))) in
                      (Cons(e192, e193), (t194 + (t193 + 1)))))) in
                    (Block(e191), (t192 + 1)))) in
                    (e190, (1 + t191)))
                else
                  (stat, 1)) in
                  (e188, (1 + t189)))) in
                (e179, (1 + t180)))) in
              (e166, (1 + t167)))
[[34m Info  [0m] Post: true
falttened Body: ((res23 == ifres) && ((ci && (ci == stat.isInstanceOf[Block]) && (ifres == tp) && (arg == (1 + t162)) && (tp == (e161, arg)) && (e161 == cc) && (cc == Block(e162)) && (t162 == (t163 + 1)) && (t163 == (1 + (1 + t165))) && (e164 == ts) && (ts == tres._1) && (t165 == ts1) && (ts1 == tres._2) && (e162 == e164) && (tres == r1) && (cs == stat.body) && (r1 == eliminateForLoopsList(cs))) || (!(ci1) && (ci1 == stat.isInstanceOf[Block]) && (ifres == tp1) && (arg1 == (1 + t167)) && (tp1 == (e166, arg1)) && ((ci2 && (ci2 == stat.isInstanceOf[IfThenElse]) && (ifres1 == tp2) && (arg2 == (1 + t169)) && (tp2 == (e168, arg2)) && (e171 == e173) && (t177 == ts2) && (ts2 == tres2._2) && (e176 == ts3) && (ts3 == tres2._1) && (e170 == e176) && (tres1 == r2) && (cs1 == stat.elze) && (r2 == eliminateForLoops(cs1)) && (t172 == (1 + (1 + t174))) && (e173 == ts4) && (ts4 == tres1._1) && (tres2 == r3) && (cs2 == stat.then) && (r3 == eliminateForLoops(cs2)) && (t171 == (1 + (1 + t177))) && (t169 == (t172 + (t171 + 2))) && (t174 == ts5) && (ts5 == tres1._2) && (e168 == cc1) && (cs3 == stat.expr) && (cc1 == IfThenElse(cs3, e170, e171))) || (!(ci3) && (ci3 == stat.isInstanceOf[IfThenElse]) && (ifres1 == tp3) && (arg3 == (1 + t180)) && (tp3 == (e179, arg3)) && ((ci4 && (ci4 == stat.isInstanceOf[While]) && (ifres2 == tp4) && (arg4 == (1 + t182)) && (tp4 == (e181, arg4)) && (t184 == (1 + (1 + t186))) && (tres3 == r4) && (cs4 == stat.body) && (r4 == eliminateForLoops(cs4)) && (e185 == ts6) && (ts6 == tres3._1) && (e181 == cc2) && (cs5 == stat.expr) && (cc2 == While(cs5, e183)) && (t182 == (t184 + 2)) && (e183 == e185) && (t186 == ts7) && (ts7 == tres3._2)) || (!(ci5) && (ci5 == stat.isInstanceOf[While]) && (ifres2 == tp5) && (arg5 == (1 + t189)) && (tp5 == (e188, arg5)) && ((ci6 && (ci6 == stat.isInstanceOf[For]) && (ifres3 == tp6) && (arg6 == (1 + t191)) && (tp6 == (e190, arg6)) && (t194 == (1 + (t195 + 1))) && (t199 == (t201 + (t200 + 1))) && (e200 == cc4) && (cc3 == Nil()) && (cc4 == Cons(e201, cc3)) && (t212 == ts8) && (ts8 == tres6._2) && (t191 == (t192 + 1)) && (e194 == cc5) && (cs6 == stat.expr) && (cc5 == While(cs6, e197)) && (tres4 == r5) && (cs7 == stat.step) && (r5 == eliminateForLoops(cs7)) && (t200 == (1 + (1 + t208))) && (e198 == cc6) && (cc6 == Cons(e199, e200)) && (e204 == ts9) && (ts9 == tres4._1) && (t208 == ts10) && (ts10 == tres5._2) && (t192 == (t194 + (t193 + 1))) && (e207 == ts11) && (ts11 == tres5._1) && (e190 == cc7) && (cc7 == Block(e191)) && (t193 == (1 + (1 + t212))) && (t195 == (t198 + 2)) && (t201 == (1 + (t202 + 1))) && (tres6 == r6) && (cs8 == stat.init) && (r6 == eliminateForLoops(cs8)) && (t205 == ts12) && (ts12 == tres4._2) && (e201 == e204) && (e193 == cc9) && (cc8 == Nil()) && (cc9 == Cons(e194, cc8)) && (e197 == cc10) && (cc10 == Block(e198)) && (t202 == (1 + (1 + t205))) && (e211 == ts13) && (ts13 == tres6._1) && (e192 == e211) && (e191 == cc11) && (cc11 == Cons(e192, e193)) && (e199 == e207) && (tres5 == r7) && (cs9 == stat.body) && (r7 == eliminateForLoops(cs9)) && (t198 == (t199 + 1))) || (!(ci7) && (ci7 == stat.isInstanceOf[For]) && (ifres3 == tp7) && (arg7 == 1) && (tp7 == (stat, arg7)))) && (e188 == ts14) && (ts14 == ifres3._1) && (t189 == ts15) && (ts15 == ifres3._2))) && (e179 == ts16) && (ts16 == ifres2._1) && (t180 == ts17) && (ts17 == ifres2._2))) && (e166 == ts18) && (ts18 == ifres1._1) && (t167 == ts19) && (ts19 == ifres1._2))))
Flattened Post: ((ts20 > ((a?7 * r8) + b?7)) && (ts20 == res23._2) && (r8 == sizeStat(stat)))
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.138s
2: solved... in 0.158s
1: solved... in 0.033s
2: solved... in 0.015s
1: solved... in 0.03s
2: solved... in 0.012s
1: solved... in 0.019s
2: solved... in 0.009s
1: solved... in 0.019s
2: solved... in 0.009s
1: solved... in 0.017s
2: solved... in 0.01s
1: solved... in 0.018s
2: solved... in 0.009s
1: solved... in 0.018s
2: solved... in 0.009s
1: solved... in 0.028s
2: solved... in 0.008s
1: solved... in 0.016s
2: solved... in 0.008s
1: solved... in 0.015s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.016s
2: solved... in 0.008s
1: solved... in 0.015s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.008s
1: solved... in 0.021s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.019s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.015s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.02s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.015s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.009s
1: solved... in 0.011s
2: solved... in 0.009s
1: solved... in 0.011s
2: solved... in 0.009s
1: solved... in 0.011s
2: solved... in 0.009s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.015s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.009s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.01s
1: solved... in 0.012s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.015s
2: solved... in 0.014s
1: solved... in 0.015s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.016s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.011s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.012s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.019s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.012s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.012s
2: solved... in 0.013s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.01s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.01s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.016s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.016s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.014s
1: solved... in 0.015s
2: solved... in 0.016s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.016s
2: solved... in 0.015s
1: solved... in 0.011s
2: solved... in 0.015s
1: solved... in 0.012s
2: solved... in 0.016s
1: solved... in 0.012s
2: solved... in 0.016s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 8/8
Unrolled calls: Set((r8 == sizeStat(stat)), (r6 == eliminateForLoops(cs8)), (r4 == eliminateForLoops(cs4)), (r3 == eliminateForLoops(cs2)), (r5 == eliminateForLoops(cs7)), (r2 == eliminateForLoops(cs1)), (r1 == eliminateForLoopsList(cs)), (r7 == eliminateForLoops(cs9)))
Unrolling (r4 == eliminateForLoops(cs4))
Unrolling (r2 == eliminateForLoops(cs1))
Unrolling (r7 == eliminateForLoops(cs9))
Creating VC for sizeStat
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function sizeStat : (((a?228 * #res) + a?227) ≤ 0)
Unrolling (r8 == sizeStat(stat))
Unrolling (r3 == eliminateForLoops(cs2))
Unrolling (r5 == eliminateForLoops(cs7))
Creating VC for eliminateForLoopsList
Unrolling (r1 == eliminateForLoopsList(cs))
Unrolling (r6 == eliminateForLoops(cs8))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.084s
2: solved... in 0.007s
1: solved... in 0.074s
2: solved... in 0.011s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 68/68
Unrolled calls: Set((r70 == sizeStat(cs4)), (r43 == sizeStat(cs53)), (r68 == eliminateForLoops(cs86)), (r13 == eliminateForLoops(cs17)), (r32 == sizeStat(cs42)), (r22 == eliminateForLoops(cs29)), (r73 == sizeStat(cs2)), (r33 == sizeStat(cs43)), (r18 == eliminateForLoops(cs22)), (r15 == eliminateForLoops(cs19)), (r39 == sizeStat(cs49)), (r46 == eliminateForLoops(cs56)), (r26 == eliminateForLoops(cs35)), (r57 == eliminateForLoops(cs73)), (r17 == eliminateForLoops(cs21)), (r42 == sizeStat(cs52)), (r48 == eliminateForLoops(cs60)), (r34 == sizeStat(cs44)), (r76 == sizeStat(cs8)), (r61 == eliminateForLoops(cs76)), (r69 == eliminateForLoops(cs87)), (r55 == eliminateForLoops(cs70)), (r21 == eliminateForLoops(cs27)), (r12 == eliminateForLoops(cs15)), (r66 == eliminateForLoops(cs82)), (r67 == eliminateForLoops(cs85)), (r65 == eliminateForLoops(cs81)), (r25 == eliminateForLoops(cs33)), (r60 == sizeList(l)), (r36 == sizeStat(cs46)), (r20 == eliminateForLoops(cs26)), (r72 == sizeStat(cs9)), (r59 == eliminateForLoops(cs75)), (r27 == eliminateForLoops(cs37)), (r41 == sizeStat(cs51)), (r53 == eliminateForLoops(cs67)), (r10 == eliminateForLoops(cs11)), (r30 == sizeList(cs40)), (r75 == sizeList(cs)), (r52 == eliminateForLoops(cs66)), (r74 == sizeStat(cs7)), (r56 == eliminateForLoops(cs72)), (r62 == eliminateForLoopsList(cs77)), (r38 == sizeStat(cs48)), (r58 == eliminateForLoopsList(cs74)), (r9 == eliminateForLoopsList(cs10)), (r49 == eliminateForLoops(cs62)), (r45 == eliminateForLoops(cs55)), (r35 == sizeStat(cs45)), (r14 == eliminateForLoops(cs18)), (r19 == eliminateForLoops(cs25)), (r28 == eliminateForLoops(cs38)), (r16 == eliminateForLoopsList(cs20)), (r11 == eliminateForLoops(cs13)), (r24 == eliminateForLoops(cs32)), (r71 == sizeStat(cs1)), (r64 == eliminateForLoops(cs80)), (r47 == eliminateForLoops(cs59)), (r50 == eliminateForLoops(cs63)), (r44 == eliminateForLoopsList(cs54)), (r63 == eliminateForLoopsList(cs78)), (r37 == sizeList(cs47)), (r54 == eliminateForLoops(cs69)), (r40 == sizeStat(cs50)), (r51 == eliminateForLoopsList(cs64)), (r29 == eliminateForLoops(cs39)), (r31 == sizeStat(cs41)), (r23 == eliminateForLoopsList(cs30)))
Unrolling (r33 == sizeStat(cs43))
Unrolling (r43 == sizeStat(cs53))
Unrolling (r16 == eliminateForLoopsList(cs20))
Unrolling (r59 == eliminateForLoops(cs75))
Unrolling (r36 == sizeStat(cs46))
Unrolling (r9 == eliminateForLoopsList(cs10))
Unrolling (r32 == sizeStat(cs42))
Unrolling (r41 == sizeStat(cs51))
Unrolling (r76 == sizeStat(cs8))
Unrolling (r63 == eliminateForLoopsList(cs78))
Unrolling (r51 == eliminateForLoopsList(cs64))
Unrolling (r42 == sizeStat(cs52))
Unrolling (r38 == sizeStat(cs48))
Unrolling (r31 == sizeStat(cs41))
Creating VC for sizeList
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function sizeList : (((a?238 * #res) + a?237) ≤ 0)
Unrolling (r30 == sizeList(cs40))
Unrolling (r35 == sizeStat(cs45))
Unrolling (r58 == eliminateForLoopsList(cs74))
Unrolling (r74 == sizeStat(cs7))
Unrolling (r37 == sizeList(cs47))
Unrolling (r44 == eliminateForLoopsList(cs54))
Unrolling (r62 == eliminateForLoopsList(cs77))
Unrolling (r72 == sizeStat(cs9))
Unrolling (r75 == sizeList(cs))
Unrolling (r71 == sizeStat(cs1))
Unrolling (r70 == sizeStat(cs4))
Unrolling (r39 == sizeStat(cs49))
Unrolling (r40 == sizeStat(cs50))
Unrolling (r73 == sizeStat(cs2))
Unrolling (r34 == sizeStat(cs44))
Unrolling (r60 == sizeList(l))
Unrolling (r23 == eliminateForLoopsList(cs30))
Unrolling (r61 == eliminateForLoops(cs76))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.184s
2: solved... in 0.007s
1: solved... in 0.211s
2: solved... in 0.008s
1: solved... in 0.148s
2: solved... in 0.007s
1: solved... in 0.173s
2: solved... in 0.007s
1: solved... in 0.149s
2: solved... in 0.007s
1: solved... in 0.168s
2: solved... in 0.007s
1: solved... in 0.168s
2: solved... in 0.008s
1: solved... in 0.159s
2: solved... in 0.007s
1: solved... in 0.148s
2: solved... in 0.007s
1: solved... in 0.165s
2: solved... in 0.008s
1: solved... in 0.169s
2: solved... in 0.008s
1: solved... in 0.153s
2: solved... in 0.008s
1: solved... in 0.164s
2: solved... in 0.008s
1: solved... in 0.172s
2: solved... in 0.008s
1: solved... in 0.157s
2: solved... in 0.008s
1: solved... in 0.157s
2: solved... in 0.009s
1: solved... in 0.165s
2: solved... in 0.009s
1: solved... in 0.161s
2: solved... in 0.009s
1: solved... in 0.163s
2: solved... in 0.009s
1: solved... in 0.151s
2: solved... in 0.008s
1: solved... in 0.158s
2: solved... in 0.009s
1: solved... in 0.16s
2: solved... in 0.01s
1: solved... in 0.155s
2: solved... in 0.009s
1: solved... in 0.146s
2: solved... in 0.01s
1: solved... in 0.155s
2: solved... in 0.009s
1: solved... in 0.153s
2: solved... in 0.01s
1: solved... in 0.171s
2: solved... in 0.01s
1: solved... in 0.166s
2: solved... in 0.01s
1: solved... in 0.169s
2: solved... in 0.009s
1: solved... in 0.159s
2: solved... in 0.009s
1: solved... in 0.156s
2: solved... in 0.011s
1: solved... in 0.163s
2: solved... in 0.013s
1: solved... in 0.161s
2: solved... in 0.011s
1: solved... in 0.168s
2: solved... in 0.01s
1: solved... in 0.158s
2: solved... in 0.01s
1: solved... in 0.16s
2: solved... in 0.011s
1: solved... in 0.163s
2: solved... in 0.011s
1: solved... in 0.158s
2: solved... in 0.011s
1: solved... in 0.165s
2: solved... in 0.011s
1: solved... in 0.173s
2: solved... in 0.011s
1: solved... in 0.156s
2: solved... in 0.011s
1: solved... in 0.161s
2: solved... in 0.011s
1: solved... in 0.199s
2: solved... in 0.012s
1: solved... in 0.17s
2: solved... in 0.012s
1: solved... in 0.164s
2: solved... in 0.012s
1: solved... in 0.166s
2: solved... in 0.012s
1: solved... in 0.163s
2: solved... in 0.011s
1: solved... in 0.167s
2: solved... in 0.012s
1: solved... in 0.17s
2: solved... in 0.012s
1: solved... in 0.172s
2: solved... in 0.012s
1: solved... in 0.172s
2: solved... in 0.013s
1: solved... in 0.157s
2: solved... in 0.012s
1: solved... in 0.17s
2: solved... in 0.012s
1: solved... in 0.155s
2: solved... in 0.012s
1: solved... in 0.162s
2: solved... in 0.013s
1: solved... in 0.157s
2: solved... in 0.013s
1: solved... in 0.17s
2: solved... in 0.013s
1: solved... in 0.17s
2: solved... in 0.013s
1: solved... in 0.17s
2: solved... in 0.013s
1: solved... in 0.172s
2: solved... in 0.013s
1: solved... in 0.151s
2: solved... in 0.014s
1: solved... in 0.148s
2: solved... in 0.013s
1: solved... in 0.175s
2: solved... in 0.013s
1: solved... in 0.17s
2: solved... in 0.014s
1: solved... in 0.167s
2: solved... in 0.013s
1: solved... in 0.176s
2: solved... in 0.014s
1: solved... in 0.174s
2: solved... in 0.014s
1: solved... in 0.155s
2: solved... in 0.014s
1: solved... in 0.169s
2: solved... in 0.015s
1: solved... in 0.161s
2: solved... in 0.015s
1: solved... in 0.159s
2: solved... in 0.014s
1: solved... in 0.165s
2: solved... in 0.014s
1: solved... in 0.167s
2: solved... in 0.015s
1: solved... in 0.153s
2: solved... in 0.015s
1: solved... in 0.161s
2: solved... in 0.016s
1: solved... in 0.155s
2: solved... in 0.015s
1: solved... in 0.172s
2: solved... in 0.016s
1: solved... in 0.163s
2: solved... in 0.017s
1: solved... in 0.172s
2: solved... in 0.015s
1: solved... in 0.174s
2: solved... in 0.016s
1: solved... in 0.165s
2: solved... in 0.016s
1: solved... in 0.179s
2: solved... in 0.016s
1: solved... in 0.161s
2: solved... in 0.017s
1: solved... in 0.18s
2: solved... in 0.017s
1: solved... in 0.172s
2: solved... in 0.017s
1: solved... in 0.188s
2: solved... in 0.017s
1: solved... in 0.157s
2: solved... in 0.019s
1: solved... in 0.162s
2: solved... in 0.016s
1: solved... in 0.17s
2: solved... in 0.017s
1: solved... in 0.164s
2: solved... in 0.017s
1: solved... in 0.158s
2: solved... in 0.019s
1: solved... in 0.163s
2: solved... in 0.017s
1: solved... in 0.157s
2: solved... in 0.018s
1: solved... in 0.168s
2: solved... in 0.018s
1: solved... in 0.169s
2: solved... in 0.018s
1: solved... in 0.157s
2: solved... in 0.017s
1: solved... in 0.159s
2: solved... in 0.018s
1: solved... in 0.172s
2: solved... in 0.02s
1: solved... in 0.15s
2: solved... in 0.019s
1: solved... in 0.144s
2: solved... in 0.02s
1: solved... in 0.159s
2: solved... in 0.02s
1: solved... in 0.163s
2: solved... in 0.02s
1: solved... in 0.157s
2: solved... in 0.019s
1: solved... in 0.17s
2: solved... in 0.018s
1: solved... in 0.174s
2: solved... in 0.019s
1: solved... in 0.167s
2: solved... in 0.019s
1: solved... in 0.164s
2: solved... in 0.018s
1: solved... in 0.165s
2: solved... in 0.019s
1: solved... in 0.171s
2: solved... in 0.02s
1: solved... in 0.156s
2: solved... in 0.021s
1: solved... in 0.176s
2: solved... in 0.019s
1: solved... in 0.157s
2: solved... in 0.019s
1: solved... in 0.157s
2: solved... in 0.02s
1: solved... in 0.166s
2: solved... in 0.02s
1: solved... in 0.203s
2: solved... in 0.019s
1: solved... in 0.158s
2: solved... in 0.02s
1: solved... in 0.171s
2: solved... in 0.02s
1: solved... in 0.177s
2: solved... in 0.021s
1: solved... in 0.172s
2: solved... in 0.021s
1: solved... in 0.155s
2: solved... in 0.021s
1: solved... in 0.176s
2: solved... in 0.02s
1: solved... in 0.143s
2: solved... in 0.031s
1: solved... in 0.149s
2: solved... in 0.023s
1: solved... in 0.162s
2: solved... in 0.021s
1: solved... in 0.156s
2: solved... in 0.021s
1: solved... in 0.158s
2: solved... in 0.021s
1: solved... in 0.16s
2: solved... in 0.023s
1: solved... in 0.143s
2: solved... in 0.025s
1: solved... in 0.159s
2: solved... in 0.022s
1: solved... in 0.154s
2: solved... in 0.022s
1: solved... in 0.17s
2: solved... in 0.023s
1: solved... in 0.164s
2: solved... in 0.024s
1: solved... in 0.168s
2: solved... in 0.022s
1: solved... in 0.163s
2: solved... in 0.021s
1: solved... in 0.174s
2: solved... in 0.022s
1: solved... in 0.167s
2: solved... in 0.023s
1: solved... in 0.155s
2: solved... in 0.023s
1: solved... in 0.161s
2: solved... in 0.024s
1: solved... in 0.163s
2: solved... in 0.024s
1: solved... in 0.158s
2: solved... in 0.024s
1: solved... in 0.17s
2: solved... in 0.024s
1: solved... in 0.17s
2: solved... in 0.026s
1: solved... in 0.169s
2: solved... in 0.026s
1: solved... in 0.162s
2: solved... in 0.038s
1: solved... in 0.162s
2: solved... in 0.026s
1: solved... in 0.173s
2: solved... in 0.024s
1: solved... in 0.157s
2: solved... in 0.025s
1: solved... in 0.166s
2: solved... in 0.028s
1: solved... in 0.178s
2: solved... in 0.027s
1: solved... in 0.176s
2: solved... in 0.027s
1: solved... in 0.159s
2: solved... in 0.029s
1: solved... in 0.173s
2: solved... in 0.025s
1: solved... in 0.156s
2: solved... in 0.028s
1: solved... in 0.173s
2: solved... in 0.027s
1: solved... in 0.171s
2: solved... in 0.027s
1: solved... in 0.177s
2: solved... in 0.031s
1: solved... in 0.167s
2: solved... in 0.025s
1: solved... in 0.16s
2: solved... in 0.025s
1: solved... in 0.159s
2: solved... in 0.026s
1: solved... in 0.157s
2: solved... in 0.029s
1: solved... in 0.176s
2: solved... in 0.025s
1: solved... in 0.163s
2: solved... in 0.026s
1: solved... in 0.168s
2: solved... in 0.027s
1: solved... in 0.176s
2: solved... in 0.031s
1: solved... in 0.153s
2: solved... in 0.028s
1: solved... in 0.158s
2: solved... in 0.032s
1: solved... in 0.179s
2: solved... in 0.026s
1: solved... in 0.158s
2: solved... in 0.035s
1: solved... in 0.176s
2: solved... in 0.04s
1: solved... in 0.169s
2: solved... in 0.044s
1: solved... in 0.158s
2: solved... in 0.027s
1: solved... in 0.157s
2: solved... in 0.029s
1: solved... in 0.205s
2: solved... in 0.029s
1: solved... in 0.179s
2: solved... in 0.027s
1: solved... in 0.16s
2: solved... in 0.028s
1: solved... in 0.158s
2: solved... in 0.029s
1: solved... in 0.16s
2: solved... in 0.028s
1: solved... in 0.153s
2: solved... in 0.03s
1: solved... in 0.162s
2: solved... in 0.027s
1: solved... in 0.161s
2: solved... in 0.031s
1: solved... in 0.155s
2: solved... in 0.038s
1: solved... in 0.172s
2: solved... in 0.033s
1: solved... in 0.16s
2: solved... in 0.029s
1: solved... in 0.178s
2: solved... in 0.032s
1: solved... in 0.173s
2: solved... in 0.031s
1: solved... in 0.171s
2: solved... in 0.028s
1: solved... in 0.176s
2: solved... in 0.03s
1: solved... in 0.16s
2: solved... in 0.031s
1: solved... in 0.172s
2: solved... in 0.03s
1: solved... in 0.166s
2: solved... in 0.03s
1: solved... in 0.159s
2: solved... in 0.03s
1: solved... in 0.153s
2: solved... in 0.032s
1: solved... in 0.166s
2: solved... in 0.03s
1: solved... in 0.163s
2: solved... in 0.034s
1: solved... in 0.169s
2: solved... in 0.035s
1: solved... in 0.15s
2: solved... in 0.03s
1: solved... in 0.156s
2: solved... in 0.03s
1: solved... in 0.158s
2: solved... in 0.034s
1: solved... in 0.158s
2: solved... in 0.029s
1: solved... in 0.162s
2: solved... in 0.029s
1: solved... in 0.162s
2: solved... in 0.042s
1: solved... in 0.157s
2: solved... in 0.031s
1: solved... in 0.174s
2: solved... in 0.031s
1: solved... in 0.16s
2: solved... in 0.034s
1: solved... in 0.157s
2: solved... in 0.035s
1: solved... in 0.181s
2: solved... in 0.031s
1: solved... in 0.16s
2: solved... in 0.034s
1: solved... in 0.172s
2: solved... in 0.033s
1: solved... in 0.164s
2: solved... in 0.033s
1: solved... in 0.162s
2: solved... in 0.032s
1: solved... in 0.165s
2: solved... in 0.051s
1: solved... in 0.169s
2: solved... in 0.033s
1: solved... in 0.177s
2: solved... in 0.03s
1: solved... in 0.16s
2: solved... in 0.032s
1: solved... in 0.162s
2: solved... in 0.033s
1: solved... in 0.17s
2: solved... in 0.035s
1: solved... in 0.163s
2: solved... in 0.035s
1: solved... in 0.173s
2: solved... in 0.032s
1: solved... in 0.172s
2: solved... in 0.036s
1: solved... in 0.174s
2: solved... in 0.032s
1: solved... in 0.158s
2: solved... in 0.033s
1: solved... in 0.178s
2: solved... in 0.036s
1: solved... in 0.176s
2: solved... in 0.039s
1: solved... in 0.158s
2: solved... in 0.037s
1: solved... in 0.164s
2: solved... in 0.032s
1: solved... in 0.157s
2: solved... in 0.032s
1: solved... in 0.156s
2: solved... in 0.036s
1: solved... in 0.158s
2: solved... in 0.04s
1: solved... in 0.18s
2: solved... in 0.038s
1: solved... in 0.157s
2: solved... in 0.038s
1: solved... in 0.153s
2: solved... in 0.038s
1: solved... in 0.171s
2: solved... in 0.037s
1: solved... in 0.172s
2: solved... in 0.045s
1: solved... in 0.169s
2: solved... in 0.048s
1: solved... in 0.153s
2: solved... in 0.041s
1: solved... in 0.171s
2: solved... in 0.039s
1: solved... in 0.172s
2: solved... in 0.047s
1: solved... in 0.159s
2: solved... in 0.038s
1: solved... in 0.146s
2: solved... in 0.041s
1: solved... in 0.177s
2: solved... in 0.036s
1: solved... in 0.161s
2: solved... in 0.038s
1: solved... in 0.161s
2: solved... in 0.042s
1: solved... in 0.173s
2: solved... in 0.043s
1: solved... in 0.171s
2: solved... in 0.04s
1: solved... in 0.164s
2: solved... in 0.039s
1: solved... in 0.164s
2: solved... in 0.037s
1: solved... in 0.167s
2: solved... in 0.041s
1: solved... in 0.163s
2: solved... in 0.037s
1: solved... in 0.164s
2: solved... in 0.041s
1: solved... in 0.152s
2: solved... in 0.037s
1: solved... in 0.158s
2: solved... in 0.036s
1: solved... in 0.158s
2: solved... in 0.038s
1: solved... in 0.163s
2: solved... in 0.039s
1: solved... in 0.172s
2: solved... in 0.038s
1: solved... in 0.165s
2: solved... in 0.042s
1: solved... in 0.157s
2: solved... in 0.037s
1: solved... in 0.168s
2: solved... in 0.042s
1: solved... in 0.161s
2: solved... in 0.043s
1: solved... in 0.162s
2: solved... in 0.043s
1: solved... in 0.153s
2: solved... in 0.054s
1: solved... in 0.067s
[[34m Info  [0m] - Found inductive invariant: eliminateForLoops --> ((((-16 * sizeStat(stat)) + (1 * res23._2)) + 10) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeStat --> (((0 * #res) + 0) <= 0)
[[34m Info  [0m] - Found inductive invariant: eliminateForLoopsList --> ((((1 * res24._2) + (-16 * sizeList(l))) + -2) <= 0)
[[34m Info  [0m] - Found inductive invariant: sizeList --> (((0 * #res) + -1) <= 0)
[[34m Info  [0m] - Verifying Invariants... 
[[34m Info  [0m] - Invariant verified
[[34m Info  [0m] - considering function isForFreeList...
[[34m Info  [0m] Body: if (l.isInstanceOf[Nil])
            (true, 1)
          else
            (let (e2,t3 := (let (e3,t4 := (let (e9,t10 := isForFree(l.head)) in
              (e9, (1 + (1 + t10))))) in
              (let (e4,t5 := (let (e6,t7 := isForFreeList(l.tail)) in
                (e6, (1 + (1 + t7))))) in
                ((e3 ∧ e4), (t5 + (t4 + 1)))))) in
              (e2, (1 + t3)))
[[34m Info  [0m] Post: true
falttened Body: ((res17 == ifres131) && ((ci262 && (ci262 == l.isInstanceOf[Nil]) && (ifres131 == tp92) && arg92 && (arg93 == 1) && (tp92 == (arg92, arg93))) || (!(ci263) && (ci263 == l.isInstanceOf[Nil]) && (ifres131 == tp93) && (arg94 == (1 + t3)) && (tp93 == (e2, arg94)) && (!(e4) || e6) && (!(e6) || e4) && (!(e2) || (e3 && e4)) && (!(e3) || !(e4) || e2) && (t7 == ts277) && (ts277 == tres83._2) && (t5 == (1 + (1 + t7))) && (!(e3) || e9) && (!(e9) || e3) && (t4 == (1 + (1 + t10))) && (tres84 == r291) && (cs260 == l.head) && (r291 == isForFree(cs260)) && (!(e6) || (ts278 && (ts278 == tres83._1))) && ((!(ts279) && (ts279 == tres83._1)) || e6) && (tres83 == r292) && (cs261 == l.tail) && (r292 == isForFreeList(cs261)) && (t3 == (t5 + (t4 + 1))) && (t10 == ts280) && (ts280 == tres84._2) && (!(e9) || (ts281 && (ts281 == tres84._1))) && ((!(ts282) && (ts282 == tres84._1)) || e9))))
Flattened Post: ((ts283 > ((a?1 * r293) + b?1)) && (ts283 == res17._2) && (r293 == sizeList(l)))
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.008s
2: solved... in 0.007s
1: solved... in 0.006s
2: solved... in 0.006s
1: solved... in 0.006s
2: solved... in 0.006s
1: solved... in 0.007s
2: solved... in 0.006s
1: solved... in 0.007s
2: solved... in 0.006s
1: solved... in 0.007s
2: solved... in 0.006s
1: solved... in 0.007s
2: solved... in 0.006s
1: solved... in 0.007s
2: solved... in 0.007s
1: solved... in 0.007s
2: solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/3
Unrolled calls: Set((r291 == isForFree(cs260)), (r292 == isForFreeList(cs261)), (r293 == sizeList(l)))
Creating VC for isForFree
Unrolling (r291 == isForFree(cs260))
Unrolling (r292 == isForFreeList(cs261))
Creating VC for sizeList
Unrolling (r293 == sizeList(l))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.018s
2: solved... in 0.008s
1: solved... in 0.017s
2: solved... in 0.008s
1: solved... in 0.017s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.006s
1: solved... in 0.013s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.013s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.013s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.014s
2: solved... in 0.007s
1: solved... in 0.013s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.015s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.008s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.008s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.009s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.014s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.01s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.015s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.011s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.012s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.013s
1: solved... in 0.015s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.013s
1: solved... in 0.013s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.015s
2: solved... in 0.019s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.014s
2: solved... in 0.014s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.015s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.014s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.015s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.013s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.016s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.015s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.017s
1: solved... in 0.013s
2: solved... in 0.017s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.019s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.018s
1: solved... in 0.014s
2: solved... in 0.02s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.019s
1: solved... in 0.014s
2: solved... in 0.018s
1: solved... in 0.013s
2: solved... in 0.019s
1: solved... in 0.013s
2: solved... in 0.018s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 17/17
Unrolled calls: Set((r300 == isForFree(cs267)), (r309 == sizeStat(cs260)), (r305 == sizeStat(cs272)), (r307 == sizeStat(cs274)), (r296 == isForFree(cs264)), (r295 == isForFree(cs263)), (r298 == sizeStat(stat)), (r306 == sizeList(cs273)), (r308 == sizeList(cs275)), (r294 == isForFreeList(cs262)), (r301 == isForFree(cs268)), (r310 == sizeList(cs261)), (r303 == isForFree(cs270)), (r297 == isForFree(cs265)), (r299 == isForFreeList(cs266)), (r304 == isForFreeList(cs271)), (r302 == isForFree(cs269)))
Creating VC for sizeStat
Unrolling (r298 == sizeStat(stat))
Unrolling (r301 == isForFree(cs268))
Unrolling (r308 == sizeList(cs275))
Unrolling (r296 == isForFree(cs264))
Unrolling (r305 == sizeStat(cs272))
Unrolling (r306 == sizeList(cs273))
Unrolling (r294 == isForFreeList(cs262))
Unrolling (r297 == isForFree(cs265))
Unrolling (r300 == isForFree(cs267))
Unrolling (r303 == isForFree(cs270))
Unrolling (r299 == isForFreeList(cs266))
Unrolling (r310 == sizeList(cs261))
Unrolling (r307 == sizeStat(cs274))
Unrolling (r302 == isForFree(cs269))
Unrolling (r295 == isForFree(cs263))
Unrolling (r309 == sizeStat(cs260))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.041s
2: solved... in 0.007s
1: solved... in 0.042s
2: solved... in 0.007s
1: solved... in 0.042s
2: solved... in 0.007s
1: solved... in 0.041s
2: solved... in 0.007s
1: solved... in 0.042s
2: solved... in 0.007s
1: solved... in 0.042s
2: solved... in 0.007s
1: solved... in 0.042s
2: solved... in 0.007s
1: solved... in 0.041s
2: solved... in 0.007s
1: solved... in 0.051s
2: solved... in 0.008s
1: solved... in 0.044s
2: solved... in 0.008s
1: solved... in 0.044s
2: solved... in 0.007s
1: solved... in 0.043s
2: solved... in 0.008s
1: solved... in 0.04s
2: solved... in 0.007s
1: solved... in 0.041s
2: solved... in 0.007s
1: solved... in 0.041s
2: solved... in 0.008s
1: solved... in 0.041s
2: solved... in 0.009s
1: solved... in 0.041s
2: solved... in 0.008s
1: solved... in 0.043s
2: solved... in 0.01s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.044s
2: solved... in 0.008s
1: solved... in 0.04s
2: solved... in 0.008s
1: solved... in 0.047s
2: solved... in 0.008s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.008s
1: solved... in 0.041s
2: solved... in 0.009s
1: solved... in 0.043s
2: solved... in 0.008s
1: solved... in 0.042s
2: solved... in 0.008s
1: solved... in 0.043s
2: solved... in 0.009s
1: solved... in 0.043s
2: solved... in 0.009s
1: solved... in 0.045s
2: solved... in 0.008s
1: solved... in 0.044s
2: solved... in 0.008s
1: solved... in 0.044s
2: solved... in 0.009s
1: solved... in 0.044s
2: solved... in 0.009s
1: solved... in 0.046s
2: solved... in 0.008s
1: solved... in 0.049s
2: solved... in 0.009s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.009s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.009s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.009s
1: solved... in 0.05s
2: solved... in 0.01s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.046s
2: solved... in 0.009s
1: solved... in 0.044s
2: solved... in 0.01s
1: solved... in 0.044s
2: solved... in 0.01s
1: solved... in 0.044s
2: solved... in 0.01s
1: solved... in 0.044s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.044s
2: solved... in 0.01s
1: solved... in 0.041s
2: solved... in 0.01s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.011s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.047s
2: solved... in 0.014s
1: solved... in 0.042s
2: solved... in 0.011s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.042s
2: solved... in 0.011s
1: solved... in 0.048s
2: solved... in 0.011s
1: solved... in 0.044s
2: solved... in 0.011s
1: solved... in 0.045s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.011s
1: solved... in 0.043s
2: solved... in 0.013s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.04s
2: solved... in 0.01s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.01s
1: solved... in 0.046s
2: solved... in 0.01s
1: solved... in 0.043s
2: solved... in 0.015s
1: solved... in 0.045s
2: solved... in 0.011s
1: solved... in 0.043s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.01s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.04s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.048s
2: solved... in 0.012s
1: solved... in 0.045s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.011s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.044s
2: solved... in 0.012s
1: solved... in 0.04s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.042s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.042s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.048s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.012s
1: solved... in 0.043s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.042s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.042s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.042s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.043s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.043s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.042s
2: solved... in 0.014s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.045s
2: solved... in 0.015s
1: solved... in 0.045s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.043s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.014s
1: solved... in 0.042s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.043s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.043s
2: solved... in 0.015s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.015s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.043s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.04s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.043s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.024s
1: solved... in 0.042s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.016s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.042s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.042s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.041s
2: solved... in 0.017s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.042s
2: solved... in 0.018s
1: solved... in 0.043s
2: solved... in 0.018s
1: solved... in 0.042s
2: solved... in 0.019s
1: solved... in 0.042s
2: solved... in 0.018s
1: solved... in 0.041s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.018s
1: solved... in 0.045s
2: solved... in 0.018s
1: solved... in 0.04s
2: solved... in 0.018s
1: solved... in 0.04s
2: solved... in 0.018s
1: solved... in 0.04s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.019s
1: solved... in 0.042s
2: solved... in 0.018s
1: solved... in 0.042s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.044s
2: solved... in 0.023s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.045s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.019s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.04s
2: solved... in 0.02s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.042s
2: solved... in 0.02s
1: solved... in 0.042s
2: solved... in 0.021s
1: solved... in 0.042s
2: solved... in 0.02s
1: solved... in 0.042s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.02s
1: solved... in 0.042s
2: solved... in 0.02s
1: solved... in 0.042s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.043s
2: solved... in 0.02s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.02s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.021s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.021s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.043s
2: solved... in 0.022s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.042s
2: solved... in 0.023s
1: solved... in 0.042s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.043s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.041s
2: solved... in 0.022s
1: solved... in 0.041s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.041s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.023s
1: solved... in 0.041s
2: solved... in 0.023s
1: solved... in 0.045s
2: solved... in 0.024s
1: solved... in 0.04s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.024s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.024s
1: solved... in 0.041s
2: solved... in 0.024s
1: solved... in 0.05s
2: solved... in 0.024s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.024s
1: solved... in 0.04s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.023s
1: solved... in 0.04s
2: solved... in 0.024s
1: solved... in 0.04s
2: solved... in 0.024s
1: solved... in 0.041s
2: solved... in 0.024s
1: solved... in 0.041s
2: solved... in 0.024s
1: solved... in 0.042s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.042s
2: solved... in 0.025s
1: solved... in 0.042s
2: solved... in 0.025s
1: solved... in 0.042s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.043s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.04s
2: solved... in 0.025s
1: solved... in 0.04s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.04s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.043s
2: solved... in 0.026s
1: solved... in 0.04s
2: solved... in 0.027s
1: solved... in 0.042s
2: solved... in 0.025s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.025s
1: solved... in 0.042s
2: solved... in 0.031s
1: solved... in 0.042s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.026s
1: solved... in 0.043s
2: solved... in 0.025s
1: solved... in 0.057s
2: solved... in 0.027s
1: solved... in 0.042s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.027s
1: solved... in 0.042s
2: solved... in 0.028s
1: solved... in 0.049s
2: solved... in 0.026s
1: solved... in 0.042s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.026s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.042s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.043s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.04s
2: solved... in 0.027s
1: solved... in 0.04s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.027s
1: solved... in 0.04s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.028s
1: solved... in 0.041s
2: solved... in 0.028s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.043s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.028s
1: solved... in 0.043s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.032s
1: solved... in 0.043s
2: solved... in 0.028s
1: solved... in 0.044s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.048s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.045s
2: solved... in 0.029s
1: solved... in 0.046s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.044s
2: solved... in 0.031s
1: solved... in 0.044s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.044s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.043s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.042s
2: solved... in 0.029s
1: solved... in 0.04s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.042s
2: solved... in 0.031s
1: solved... in 0.043s
2: solved... in 0.03s
1: solved... in 0.04s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.029s
1: solved... in 0.04s
2: solved... in 0.031s
1: solved... in 0.04s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.043s
2: solved... in 0.032s
1: solved... in 0.042s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.044s
2: solved... in 0.03s
1: solved... in 0.05s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.042s
2: solved... in 0.031s
1: solved... in 0.043s
2: solved... in 0.031s
1: solved... in 0.042s
2: solved... in 0.033s
1: solved... in 0.053s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.03s
1: solved... in 0.041s
2: solved... in 0.055s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.04s
2: solved... in 0.03s
1: solved... in 0.042s
2: solved... in 0.031s
1: solved... in 0.04s
2: solved... in 0.032s
1: solved... in 0.04s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.042s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.031s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.04s
2: solved... in 0.033s
1: solved... in 0.048s
2: solved... in 0.032s
1: solved... in 0.04s
2: solved... in 0.034s
1: solved... in 0.049s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.032s
1: solved... in 0.045s
2: solved... in 0.032s
1: solved... in 0.043s
2: solved... in 0.036s
1: solved... in 0.042s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.043s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.04s
2: solved... in 0.032s
1: solved... in 0.04s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.043s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.04s
2: solved... in 0.032s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.04s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.033s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.043s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.057s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.04s
2: solved... in 0.034s
1: solved... in 0.042s
2: solved... in 0.035s
1: solved... in 0.04s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.04s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.034s
1: solved... in 0.04s
2: solved... in 0.037s
1: solved... in 0.042s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.042s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.042s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.04s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.042s
2: solved... in 0.036s
1: solved... in 0.042s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.042s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.042s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.038s
1: solved... in 0.042s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.036s
1: solved... in 0.041s
2: solved... in 0.035s
1: solved... in 0.042s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.038s
1: solved... in 0.042s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.04s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.04s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.04s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.042s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.04s
2: solved... in 0.037s
1: solved... in 0.041s
2: solved... in 0.037s
1: solved... in 0.04s
2: solved... in 0.037s
1: solved... in 0.04s
2: solved... in 0.042s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.04s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.043s
2: solved... in 0.039s
1: solved... in 0.042s
2: solved... in 0.044s
1: solved... in 0.046s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.042s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.038s
1: solved... in 0.042s
2: solved... in 0.038s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.042s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.043s
2: solved... in 0.039s
1: solved... in 0.04s
2: solved... in 0.04s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.04s
2: solved... in 0.04s
1: solved... in 0.04s
2: solved... in 0.04s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.04s
1: solved... in 0.04s
2: solved... in 0.04s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.04s
1: solved... in 0.041s
2: solved... in 0.039s
1: solved... in 0.041s
2: solved... in 0.04s
1: solved... in 0.042s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.042s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.043s
2: solved... in 0.044s
1: solved... in 0.042s
2: solved... in 0.041s
1: solved... in 0.042s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.042s
1: solved... in 0.042s
2: solved... in 0.041s
1: solved... in 0.042s
2: solved... in 0.043s
1: solved... in 0.042s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.042s
1: solved... in 0.042s
2: solved... in 0.042s
1: solved... in 0.041s
2: solved... in 0.042s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.044s
2: solved... in 0.042s
1: solved... in 0.042s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.042s
1: solved... in 0.046s
2: solved... in 0.042s
1: solved... in 0.041s
2: solved... in 0.043s
1: solved... in 0.042s
2: solved... in 0.042s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.041s
2: solved... in 0.041s
1: solved... in 0.043s
2: solved... in 0.041s
1: solved... in 0.042s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.042s
1: solved... in 0.041s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.053s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.042s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.042s
2: solved... in 0.043s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.046s
1: solved... in 0.043s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.042s
2: solved... in 0.044s
1: solved... in 0.042s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.043s
2: solved... in 0.044s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.043s
1: solved... in 0.042s
2: solved... in 0.044s
1: solved... in 0.043s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.046s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.045s
1: solved... in 0.043s
2: solved... in 0.046s
1: solved... in 0.042s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.046s
1: solved... in 0.041s
2: solved... in 0.046s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.042s
2: solved... in 0.045s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.042s
2: solved... in 0.046s
1: solved... in 0.04s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.042s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.042s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.042s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.042s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.04s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.04s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.047s
1: solved... in 0.04s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.043s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.043s
2: solved... in 0.05s
1: solved... in 0.042s
2: solved... in 0.053s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.053s
1: solved... in 0.041s
2: solved... in 0.054s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.04s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.048s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.055s
1: solved... in 0.042s
2: solved... in 0.049s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.04s
2: solved... in 0.049s
1: solved... in 0.041s
2: solved... in 0.049s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.042s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.049s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.043s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.042s
2: solved... in 0.053s
1: solved... in 0.043s
2: solved... in 0.05s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.04s
2: solved... in 0.052s
1: solved... in 0.042s
2: solved... in 0.051s
1: solved... in 0.044s
2: solved... in 0.056s
1: solved... in 0.044s
2: solved... in 0.052s
1: solved... in 0.041s
2: solved... in 0.051s
1: solved... in 0.041s
2: solved... in 0.052s
1: solved... in 0.043s
2: solved... in 0.054s
1: solved... in 0.042s
2: solved... in 0.059s
1: solved... in 0.042s
2: solved... in 0.054s
1: solved... in 0.041s
2: solved... in 0.057s
1: solved... in 0.042s
2: solved... in 0.056s
1: solved... in 0.042s
2: solved... in 0.054s
1: solved... in 0.042s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.055s
1: solved... in 0.043s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.054s
1: solved... in 0.041s
2: solved... in 0.055s
1: solved... in 0.041s
2: solved... in 0.061s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.043s
2: solved... in 0.057s
1: solved... in 0.041s
2: solved... in 0.056s
1: solved... in 0.041s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.057s
1: solved... in 0.042s
2: solved... in 0.057s
1: solved... in 0.042s
2: solved... in 0.059s
1: solved... in 0.041s
2: solved... in 0.057s
1: solved... in 0.041s
2: solved... in 0.062s
1: solved... in 0.043s
2: solved... in 0.059s
1: solved... in 0.042s
2: solved... in 0.059s
1: solved... in 0.042s
2: solved... in 0.062s
1: solved... in 0.042s
2: solved... in 0.06s
1: solved... in 0.041s
2: solved... in 0.063s
1: solved... in 0.041s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.058s
1: solved... in 0.042s
2: solved... in 0.057s
1: solved... in 0.042s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.056s
1: solved... in 0.041s
2: solved... in 0.057s
1: solved... in 0.041s
2: solved... in 0.06s
1: solved... in 0.042s
2: solved... in 0.063s
1: solved... in 0.042s
2: solved... in 0.058s
1: solved... in 0.041s
2: solved... in 0.06s
1: solved... in 0.043s
2: solved... in 0.067s
1: solved... in 0.042s
2: solved... in 0.061s
1: solved... in 0.043s
2: solved... in 0.061s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.043s
2: solved... in 0.064s
1: solved... in 0.044s
2: solved... in 0.067s
1: solved... in 0.041s
2: solved... in 0.058s
1: solved... in 0.043s
2: solved... in 0.061s
1: solved... in 0.041s
2: solved... in 0.063s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.044s
2: solved... in 0.06s
1: solved... in 0.041s
2: solved... in 0.063s
1: solved... in 0.045s
2: solved... in 0.062s
1: solved... in 0.041s
2: solved... in 0.058s
1: solved... in 0.044s
2: solved... in 0.062s
1: solved... in 0.043s
2: solved... in 0.059s
1: solved... in 0.041s
2: solved... in 0.065s
1: solved... in 0.044s
2: solved... in 0.063s
1: solved... in 0.042s
2: solved... in 0.064s
1: solved... in 0.043s
2: solved... in 0.069s
1: solved... in 0.042s
2: solved... in 0.063s
1: solved... in 0.042s
2: solved... in 0.066s
1: solved... in 0.044s
2: solved... in 0.068s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.044s
2: solved... in 0.067s
1: solved... in 0.04s
2: solved... in 0.066s
1: solved... in 0.042s
2: solved... in 0.066s
1: solved... in 0.044s
2: solved... in 0.069s
1: solved... in 0.042s
2: solved... in 0.066s
1: solved... in 0.044s
2: solved... in 0.065s
1: solved... in 0.041s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.066s
1: solved... in 0.041s
2: solved... in 0.067s
1: solved... in 0.04s
2: solved... in 0.07s
1: solved... in 0.042s
2: solved... in 0.069s
1: solved... in 0.042s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.071s
1: solved... in 0.043s
2: solved... in 0.07s
1: solved... in 0.042s
2: solved... in 0.071s
1: solved... in 0.042s
2: solved... in 0.071s
1: solved... in 0.044s
2: solved... in 0.072s
1: solved... in 0.041s
2: solved... in 0.07s
1: solved... in 0.041s
2: solved... in 0.071s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.041s
2: solved... in 0.073s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.04s
2: solved... in 0.073s
1: solved... in 0.041s
2: solved... in 0.076s
1: solved... in 0.042s
2: solved... in 0.061s
1: solved... in 0.041s
2: solved... in 0.075s
1: solved... in 0.041s
2: solved... in 0.076s
1: solved... in 0.043s
2: solved... in 0.075s
1: solved... in 0.042s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.078s
1: solved... in 0.043s
2: solved... in 0.075s
1: solved... in 0.041s
2: solved... in 0.076s
1: solved... in 0.042s
2: solved... in 0.078s
1: solved... in 0.044s
2: solved... in 0.078s
1: solved... in 0.042s
2: solved... in 0.077s
1: solved... in 0.04s
2: solved... in 0.079s
1: solved... in 0.045s
2: solved... in 0.078s
1: solved... in 0.042s
2: solved... in 0.082s
1: solved... in 0.042s
2: solved... in 0.066s
1: solved... in 0.042s
2: solved... in 0.063s
1: solved... in 0.046s
2: solved... in 0.067s
1: solved... in 0.042s
2: solved... in 0.066s
1: solved... in 0.041s
2: solved... in 0.065s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.042s
2: solved... in 0.063s
1: solved... in 0.04s
2: solved... in 0.064s
1: solved... in 0.042s
2: solved... in 0.065s
1: solved... in 0.043s
2: solved... in 0.067s
1: solved... in 0.041s
2: solved... in 0.066s
1: solved... in 0.041s
2: solved... in 0.065s
1: solved... in 0.041s
2: solved... in 0.067s
1: solved... in 0.041s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.066s
1: solved... in 0.041s
2: solved... in 0.069s
1: solved... in 0.042s
2: solved... in 0.067s
1: solved... in 0.044s
2: solved... in 0.07s
1: solved... in 0.04s
2: solved... in 0.067s
1: solved... in 0.041s
2: solved... in 0.067s
1: solved... in 0.043s
2: solved... in 0.07s
1: solved... in 0.042s
2: solved... in 0.071s
1: solved... in 0.042s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.041s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.07s
1: solved... in 0.041s
2: solved... in 0.071s
1: solved... in 0.042s
2: solved... in 0.075s
1: solved... in 0.041s
2: solved... in 0.073s
1: solved... in 0.041s
2: solved... in 0.071s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.042s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.077s
1: solved... in 0.042s
2: solved... in 0.073s
1: solved... in 0.043s
2: solved... in 0.076s
1: solved... in 0.041s
2: solved... in 0.078s
1: solved... in 0.042s
2: solved... in 0.075s
1: solved... in 0.041s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.081s
1: solved... in 0.042s
2: solved... in 0.076s
1: solved... in 0.04s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.08s
1: solved... in 0.042s
2: solved... in 0.081s
1: solved... in 0.042s
2: solved... in 0.076s
1: solved... in 0.041s
2: solved... in 0.078s
1: solved... in 0.042s
2: solved... in 0.083s
1: solved... in 0.043s
2: solved... in 0.081s
1: solved... in 0.041s
2: solved... in 0.082s
1: solved... in 0.041s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.065s
1: solved... in 0.042s
2: solved... in 0.068s
1: solved... in 0.041s
2: solved... in 0.064s
1: solved... in 0.043s
2: solved... in 0.065s
1: solved... in 0.041s
2: solved... in 0.069s
1: solved... in 0.041s
2: solved... in 0.066s
1: solved... in 0.042s
2: solved... in 0.067s
1: solved... in 0.042s
2: solved... in 0.073s
1: solved... in 0.042s
2: solved... in 0.064s
1: solved... in 0.041s
2: solved... in 0.065s
1: solved... in 0.042s
2: solved... in 0.078s
1: solved... in 0.048s
2: solved... in 0.064s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.042s
2: solved... in 0.068s
1: solved... in 0.043s
2: solved... in 0.073s
1: solved... in 0.047s
2: solved... in 0.093s
1: solved... in 0.045s
2: solved... in 0.077s
1: solved... in 0.042s
2: solved... in 0.077s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.041s
2: solved... in 0.072s
1: solved... in 0.043s
2: solved... in 0.069s
1: solved... in 0.042s
2: solved... in 0.075s
1: solved... in 0.041s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.079s
1: solved... in 0.041s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.074s
1: solved... in 0.041s
2: solved... in 0.07s
1: solved... in 0.043s
2: solved... in 0.079s
1: solved... in 0.041s
2: solved... in 0.077s
1: solved... in 0.041s
2: solved... in 0.085s
1: solved... in 0.041s
2: solved... in 0.082s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 83/83
Unrolled calls: Set((r321 == sizeStat(cs286)), (r347 == isForFree(cs312)), (r376 == isForFree(cs341)), (r391 == sizeList(cs266)), (r330 == sizeList(cs295)), (r359 == isForFreeList(cs324)), (r342 == sizeStat(cs307)), (r335 == sizeList(cs300)), (r317 == sizeStat(cs282)), (r324 == sizeStat(cs289)), (r354 == isForFreeList(cs319)), (r345 == isForFree(cs310)), (r372 == isForFree(cs337)), (r311 == sizeList(cs276)), (r326 == isForFree(cs291)), (r383 == sizeStat(cs348)), (r379 == sizeStat(cs344)), (r350 == isForFreeList(cs315)), (r385 == sizeList(cs271)), (r329 == sizeStat(cs294)), (r338 == sizeStat(cs303)), (r351 == isForFree(cs316)), (r353 == isForFree(cs318)), (r392 == sizeStat(cs269)), (r314 == sizeStat(cs279)), (r344 == isForFreeList(cs309)), (r389 == sizeStat(cs267)), (r316 == sizeStat(cs281)), (r349 == isForFree(cs314)), (r323 == sizeStat(cs288)), (r377 == sizeList(cs342)), (r333 == isForFree(cs298)), (r390 == sizeStat(cs270)), (r327 == isForFree(cs292)), (r387 == sizeList(cs262)), (r384 == sizeStat(cs268)), (r334 == isForFree(cs299)), (r325 == isForFreeList(cs290)), (r320 == sizeStat(cs285)), (r378 == sizeStat(cs343)), (r373 == isForFreeList(cs338)), (r360 == sizeStat(cs325)), (r362 == sizeList(cs327)), (r322 == sizeStat(cs287)), (r341 == sizeStat(cs306)), (r337 == sizeStat(cs302)), (r369 == isForFreeList(cs334)), (r352 == isForFree(cs317)), (r371 == isForFree(cs336)), (r363 == sizeStat(cs328)), (r366 == sizeStat(cs331)), (r393 == sizeStat(cs263)), (r318 == sizeList(cs283)), (r380 == sizeStat(cs345)), (r315 == sizeStat(cs280)), (r328 == isForFree(cs293)), (r340 == sizeStat(cs305)), (r381 == sizeStat(cs346)), (r358 == isForFree(cs323)), (r339 == sizeStat(cs304)), (r332 == isForFree(cs297)), (r336 == sizeStat(cs301)), (r368 == sizeStat(cs333)), (r361 == sizeList(cs326)), (r348 == isForFree(cs313)), (r382 == sizeStat(cs347)), (r331 == isForFreeList(cs296)), (r370 == isForFree(cs335)), (r312 == sizeStat(cs277)), (r386 == sizeStat(cs264)), (r374 == isForFree(cs339)), (r367 == sizeStat(cs332)), (r313 == sizeStat(cs278)), (r388 == sizeStat(cs265)), (r319 == sizeStat(cs284)), (r346 == isForFreeList(cs311)), (r355 == isForFree(cs320)), (r364 == sizeStat(cs329)), (r356 == isForFree(cs321)), (r375 == isForFree(cs340)), (r343 == sizeList(cs308)), (r365 == sizeStat(cs330)), (r357 == isForFree(cs322)))
Unrolling (r346 == isForFreeList(cs311))
Unrolling (r380 == sizeStat(cs345))
Unrolling (r368 == sizeStat(cs333))
Unrolling (r361 == sizeList(cs326))
Unrolling (r311 == sizeList(cs276))
Unrolling (r317 == sizeStat(cs282))
Unrolling (r322 == sizeStat(cs287))
Unrolling (r345 == isForFree(cs310))
Unrolling (r336 == sizeStat(cs301))
Unrolling (r386 == sizeStat(cs264))
Unrolling (r381 == sizeStat(cs346))
Unrolling (r382 == sizeStat(cs347))
Unrolling (r365 == sizeStat(cs330))
Unrolling (r364 == sizeStat(cs329))
Unrolling (r312 == sizeStat(cs277))
Unrolling (r324 == sizeStat(cs289))
Unrolling (r320 == sizeStat(cs285))
Unrolling (r388 == sizeStat(cs265))
Unrolling (r384 == sizeStat(cs268))
Unrolling (r366 == sizeStat(cs331))
Unrolling (r377 == sizeList(cs342))
Unrolling (r355 == isForFree(cs320))
Unrolling (r393 == sizeStat(cs263))
Unrolling (r315 == sizeStat(cs280))
Unrolling (r383 == sizeStat(cs348))
Unrolling (r342 == sizeStat(cs307))
Unrolling (r373 == isForFreeList(cs338))
Unrolling (r341 == sizeStat(cs306))
Unrolling (r318 == sizeList(cs283))
Unrolling (r385 == sizeList(cs271))
Unrolling (r339 == sizeStat(cs304))
Unrolling (r362 == sizeList(cs327))
Unrolling (r350 == isForFreeList(cs315))
Unrolling (r367 == sizeStat(cs332))
Unrolling (r387 == sizeList(cs262))
Unrolling (r369 == isForFreeList(cs334))
Unrolling (r331 == isForFreeList(cs296))
Unrolling (r316 == sizeStat(cs281))
Unrolling (r337 == sizeStat(cs302))
Unrolling (r314 == sizeStat(cs279))
Unrolling (r378 == sizeStat(cs343))
Unrolling (r319 == sizeStat(cs284))
Unrolling (r338 == sizeStat(cs303))
Unrolling (r379 == sizeStat(cs344))
Unrolling (r358 == isForFree(cs323))
Unrolling (r390 == sizeStat(cs270))
Unrolling (r389 == sizeStat(cs267))
Unrolling (r360 == sizeStat(cs325))
Unrolling (r340 == sizeStat(cs305))
Unrolling (r391 == sizeList(cs266))
Unrolling (r335 == sizeList(cs300))
Unrolling (r325 == isForFreeList(cs290))
Unrolling (r313 == sizeStat(cs278))
Unrolling (r392 == sizeStat(cs269))
Unrolling (r321 == sizeStat(cs286))
Unrolling (r356 == isForFree(cs321))
Unrolling (r357 == isForFree(cs322))
Unrolling (r344 == isForFreeList(cs309))
Unrolling (r323 == sizeStat(cs288))
Unrolling (r363 == sizeStat(cs328))
Unrolling (r329 == sizeStat(cs294))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.12s
2: solved... in 0.006s
1: solved... in 0.135s
2: solved... in 0.007s
1: solved... in 0.135s
2: solved... in 0.007s
1: solved... in 0.122s
2: solved... in 0.006s
1: solved... in 0.127s
2: solved... in 0.007s
1: solved... in 0.142s
2: solved... in 0.007s
1: solved... in 0.132s
2: solved... in 0.007s
1: solved... in 0.124s
2: solved... in 0.008s
1: solved... in 0.127s
2: solved... in 0.008s
1: solved... in 0.147s
2: solved... in 0.007s
1: solved... in 0.125s
2: solved... in 0.008s
1: solved... in 0.131s
2: solved... in 0.008s
1: solved... in 0.145s
2: solved... in 0.008s
1: solved... in 0.129s
2: solved... in 0.009s
1: solved... in 0.134s
2: solved... in 0.008s
1: solved... in 0.148s
2: solved... in 0.009s
1: solved... in 0.155s
2: solved... in 0.008s
1: solved... in 0.146s
2: solved... in 0.009s
1: solved... in 0.143s
2: solved... in 0.008s
1: solved... in 0.146s
2: solved... in 0.01s
1: solved... in 0.144s
2: solved... in 0.009s
1: solved... in 0.134s
2: solved... in 0.009s
1: solved... in 0.15s
2: solved... in 0.009s
1: solved... in 0.124s
2: solved... in 0.009s
1: solved... in 0.135s
2: solved... in 0.01s
1: solved... in 0.147s
2: solved... in 0.01s
1: solved... in 0.145s
2: solved... in 0.01s
1: solved... in 0.149s
2: solved... in 0.01s
1: solved... in 0.158s
2: solved... in 0.01s
1: solved... in 0.125s
2: solved... in 0.01s
1: solved... in 0.135s
2: solved... in 0.01s
1: solved... in 0.145s
2: solved... in 0.01s
1: solved... in 0.136s
2: solved... in 0.011s
1: solved... in 0.137s
2: solved... in 0.01s
1: solved... in 0.139s
2: solved... in 0.01s
1: solved... in 0.144s
2: solved... in 0.011s
1: solved... in 0.145s
2: solved... in 0.01s
1: solved... in 0.145s
2: solved... in 0.01s
1: solved... in 0.145s
2: solved... in 0.011s
1: solved... in 0.139s
2: solved... in 0.01s
1: solved... in 0.13s
2: solved... in 0.011s
1: solved... in 0.135s
2: solved... in 0.012s
1: solved... in 0.128s
2: solved... in 0.012s
1: solved... in 0.127s
2: solved... in 0.011s
1: solved... in 0.127s
2: solved... in 0.012s
1: solved... in 0.127s
2: solved... in 0.012s
1: solved... in 0.135s
2: solved... in 0.011s
1: solved... in 0.126s
2: solved... in 0.012s
1: solved... in 0.125s
2: solved... in 0.012s
1: solved... in 0.124s
2: solved... in 0.012s
1: solved... in 0.125s
2: solved... in 0.013s
1: solved... in 0.148s
2: solved... in 0.012s
1: solved... in 0.149s
2: solved... in 0.012s
1: solved... in 0.134s
2: solved... in 0.012s
1: solved... in 0.123s
2: solved... in 0.013s
1: solved... in 0.138s
2: solved... in 0.016s
1: solved... in 0.15s
2: solved... in 0.012s
1: solved... in 0.151s
2: solved... in 0.013s
1: solved... in 0.149s
2: solved... in 0.012s
1: solved... in 0.146s
2: solved... in 0.013s
1: solved... in 0.144s
2: solved... in 0.013s
1: solved... in 0.136s
2: solved... in 0.013s
1: solved... in 0.136s
2: solved... in 0.013s
1: solved... in 0.148s
2: solved... in 0.015s
1: solved... in 0.174s
2: solved... in 0.013s
1: solved... in 0.155s
2: solved... in 0.014s
1: solved... in 0.162s
2: solved... in 0.014s
1: solved... in 0.132s
2: solved... in 0.013s
1: solved... in 0.145s
2: solved... in 0.014s
1: solved... in 0.146s
2: solved... in 0.015s
1: solved... in 0.178s
2: solved... in 0.014s
1: solved... in 0.202s
2: solved... in 0.014s
1: solved... in 0.152s
2: solved... in 0.015s
1: solved... in 0.141s
2: solved... in 0.014s
1: solved... in 0.145s
2: solved... in 0.017s
1: solved... in 0.145s
2: solved... in 0.015s
1: solved... in 0.146s
2: solved... in 0.016s
1: solved... in 0.136s
2: solved... in 0.015s
1: solved... in 0.152s
2: solved... in 0.016s
1: solved... in 0.141s
2: solved... in 0.015s
1: solved... in 0.128s
2: solved... in 0.016s
1: solved... in 0.146s
2: solved... in 0.016s
1: solved... in 0.146s
2: solved... in 0.016s
1: solved... in 0.145s
2: solved... in 0.016s
1: solved... in 0.146s
2: solved... in 0.015s
1: solved... in 0.141s
2: solved... in 0.017s
1: solved... in 0.148s
2: solved... in 0.017s
1: solved... in 0.154s
2: solved... in 0.017s
1: solved... in 0.138s
2: solved... in 0.016s
1: solved... in 0.149s
2: solved... in 0.017s
1: solved... in 0.136s
2: solved... in 0.017s
1: solved... in 0.145s
2: solved... in 0.018s
1: solved... in 0.146s
2: solved... in 0.017s
1: solved... in 0.152s
2: solved... in 0.017s
1: solved... in 0.155s
2: solved... in 0.018s
1: solved... in 0.147s
2: solved... in 0.017s
1: solved... in 0.137s
2: solved... in 0.018s
1: solved... in 0.136s
2: solved... in 0.018s
1: solved... in 0.145s
2: solved... in 0.018s
1: solved... in 0.137s
2: solved... in 0.019s
1: solved... in 0.16s
2: solved... in 0.02s
1: solved... in 0.16s
2: solved... in 0.018s
1: solved... in 0.163s
2: solved... in 0.019s
1: solved... in 0.136s
2: solved... in 0.018s
1: solved... in 0.145s
2: solved... in 0.018s
1: solved... in 0.133s
2: solved... in 0.019s
1: solved... in 0.136s
2: solved... in 0.018s
1: solved... in 0.194s
2: solved... in 0.019s
1: solved... in 0.137s
2: solved... in 0.019s
1: solved... in 0.134s
2: solved... in 0.018s
1: solved... in 0.144s
2: solved... in 0.019s
1: solved... in 0.145s
2: solved... in 0.019s
1: solved... in 0.147s
2: solved... in 0.02s
1: solved... in 0.144s
2: solved... in 0.02s
1: solved... in 0.143s
2: solved... in 0.02s
1: solved... in 0.144s
2: solved... in 0.019s
1: solved... in 0.151s
2: solved... in 0.019s
1: solved... in 0.148s
2: solved... in 0.021s
1: solved... in 0.143s
2: solved... in 0.02s
1: solved... in 0.13s
2: solved... in 0.02s
1: solved... in 0.121s
2: solved... in 0.02s
1: solved... in 0.126s
2: solved... in 0.019s
1: solved... in 0.128s
2: solved... in 0.021s
1: solved... in 0.127s
2: solved... in 0.02s
1: solved... in 0.126s
2: solved... in 0.02s
1: solved... in 0.126s
2: solved... in 0.02s
1: solved... in 0.127s
2: solved... in 0.021s
1: solved... in 0.129s
2: solved... in 0.02s
1: solved... in 0.128s
2: solved... in 0.02s
1: solved... in 0.127s
2: solved... in 0.02s
1: solved... in 0.124s
2: solved... in 0.021s
1: solved... in 0.126s
2: solved... in 0.021s
1: solved... in 0.126s
2: solved... in 0.021s
1: solved... in 0.129s
2: solved... in 0.02s
1: solved... in 0.153s
2: solved... in 0.021s
1: solved... in 0.13s
2: solved... in 0.021s
1: solved... in 0.13s
2: solved... in 0.022s
1: solved... in 0.127s
2: solved... in 0.021s
1: solved... in 0.126s
2: solved... in 0.02s
1: solved... in 0.124s
2: solved... in 0.023s
1: solved... in 0.126s
2: solved... in 0.023s
1: solved... in 0.158s
2: solved... in 0.021s
1: solved... in 0.124s
2: solved... in 0.021s
1: solved... in 0.124s
2: solved... in 0.021s
1: solved... in 0.143s
2: solved... in 0.022s
1: solved... in 0.124s
2: solved... in 0.024s
1: solved... in 0.128s
2: solved... in 0.022s
1: solved... in 0.13s
2: solved... in 0.023s
1: solved... in 0.124s
2: solved... in 0.022s
1: solved... in 0.125s
2: solved... in 0.023s
1: solved... in 0.133s
2: solved... in 0.023s
1: solved... in 0.127s
2: solved... in 0.023s
1: solved... in 0.129s
2: solved... in 0.024s
1: solved... in 0.13s
2: solved... in 0.024s
1: solved... in 0.127s
2: solved... in 0.024s
1: solved... in 0.126s
2: solved... in 0.024s
1: solved... in 0.128s
2: solved... in 0.024s
1: solved... in 0.127s
2: solved... in 0.024s
1: solved... in 0.126s
2: solved... in 0.026s
1: solved... in 0.127s
2: solved... in 0.024s
1: solved... in 0.141s
2: solved... in 0.025s
1: solved... in 0.127s
2: solved... in 0.025s
1: solved... in 0.127s
2: solved... in 0.023s
1: solved... in 0.125s
2: solved... in 0.024s
1: solved... in 0.126s
2: solved... in 0.029s
1: solved... in 0.126s
2: solved... in 0.024s
1: solved... in 0.14s
2: solved... in 0.023s
1: solved... in 0.161s
2: solved... in 0.024s
1: solved... in 0.125s
2: solved... in 0.025s
1: solved... in 0.123s
2: solved... in 0.024s
1: solved... in 0.123s
2: solved... in 0.023s
1: solved... in 0.128s
2: solved... in 0.023s
1: solved... in 0.127s
2: solved... in 0.024s
1: solved... in 0.125s
2: solved... in 0.023s
1: solved... in 0.152s
2: solved... in 0.024s
1: solved... in 0.144s
2: solved... in 0.024s
1: solved... in 0.145s
2: solved... in 0.027s
1: solved... in 0.144s
2: solved... in 0.024s
1: solved... in 0.126s
2: solved... in 0.025s
1: solved... in 0.126s
2: solved... in 0.024s
1: solved... in 0.131s
2: solved... in 0.024s
1: solved... in 0.123s
2: solved... in 0.025s
1: solved... in 0.124s
2: solved... in 0.025s
1: solved... in 0.121s
2: solved... in 0.027s
1: solved... in 0.126s
2: solved... in 0.024s
1: solved... in 0.127s
2: solved... in 0.025s
1: solved... in 0.131s
2: solved... in 0.026s
1: solved... in 0.125s
2: solved... in 0.027s
1: solved... in 0.128s
2: solved... in 0.026s
1: solved... in 0.126s
2: solved... in 0.027s
1: solved... in 0.135s
2: solved... in 0.03s
1: solved... in 0.128s
2: solved... in 0.026s
1: solved... in 0.15s
2: solved... in 0.026s
1: solved... in 0.139s
2: solved... in 0.025s
1: solved... in 0.153s
2: solved... in 0.027s
1: solved... in 0.138s
2: solved... in 0.025s
1: solved... in 0.124s
2: solved... in 0.026s
1: solved... in 0.123s
2: solved... in 0.027s
1: solved... in 0.127s
2: solved... in 0.027s
1: solved... in 0.13s
2: solved... in 0.026s
1: solved... in 0.125s
2: solved... in 0.026s
1: solved... in 0.162s
2: solved... in 0.026s
1: solved... in 0.124s
2: solved... in 0.026s
1: solved... in 0.125s
2: solved... in 0.03s
1: solved... in 0.127s
2: solved... in 0.027s
1: solved... in 0.144s
2: solved... in 0.027s
1: solved... in 0.151s
2: solved... in 0.027s
1: solved... in 0.147s
2: solved... in 0.027s
1: solved... in 0.153s
2: solved... in 0.029s
1: solved... in 0.145s
2: solved... in 0.029s
1: solved... in 0.128s
2: solved... in 0.027s
1: solved... in 0.123s
2: solved... in 0.029s
1: solved... in 0.126s
2: solved... in 0.035s
1: solved... in 0.124s
2: solved... in 0.028s
1: solved... in 0.142s
2: solved... in 0.029s
1: solved... in 0.14s
2: solved... in 0.028s
1: solved... in 0.124s
2: solved... in 0.028s
1: solved... in 0.125s
2: solved... in 0.03s
1: solved... in 0.126s
2: solved... in 0.028s
1: solved... in 0.124s
2: solved... in 0.037s
1: solved... in 0.127s
2: solved... in 0.029s
1: solved... in 0.141s
2: solved... in 0.028s
1: solved... in 0.126s
2: solved... in 0.03s
1: solved... in 0.15s
2: solved... in 0.03s
1: solved... in 0.126s
2: solved... in 0.029s
1: solved... in 0.124s
2: solved... in 0.036s
1: solved... in 0.129s
2: solved... in 0.029s
1: solved... in 0.15s
2: solved... in 0.03s
1: solved... in 0.128s
2: solved... in 0.028s
1: solved... in 0.123s
2: solved... in 0.03s
1: solved... in 0.143s
2: solved... in 0.031s
1: solved... in 0.142s
2: solved... in 0.03s
1: solved... in 0.129s
2: solved... in 0.029s
1: solved... in 0.125s
2: solved... in 0.031s
1: solved... in 0.126s
2: solved... in 0.033s
1: solved... in 0.126s
2: solved... in 0.029s
1: solved... in 0.126s
2: solved... in 0.029s
1: solved... in 0.132s
2: solved... in 0.03s
1: solved... in 0.122s
2: solved... in 0.034s
1: solved... in 0.167s
2: solved... in 0.03s
1: solved... in 0.123s
2: solved... in 0.031s
1: solved... in 0.127s
2: solved... in 0.031s
1: solved... in 0.124s
2: solved... in 0.032s
1: solved... in 0.127s
2: solved... in 0.03s
1: solved... in 0.127s
2: solved... in 0.031s
1: solved... in 0.127s
2: solved... in 0.031s
1: solved... in 0.159s
2: solved... in 0.034s
1: solved... in 0.126s
2: solved... in 0.034s
1: solved... in 0.145s
2: solved... in 0.032s
1: solved... in 0.129s
2: solved... in 0.034s
1: solved... in 0.126s
2: solved... in 0.032s
1: solved... in 0.128s
2: solved... in 0.034s
1: solved... in 0.128s
2: solved... in 0.031s
1: solved... in 0.124s
2: solved... in 0.031s
1: solved... in 0.124s
2: solved... in 0.032s
1: solved... in 0.128s
2: solved... in 0.037s
1: solved... in 0.131s
2: solved... in 0.033s
1: solved... in 0.134s
2: solved... in 0.032s
1: solved... in 0.124s
2: solved... in 0.037s
1: solved... in 0.144s
2: solved... in 0.035s
1: solved... in 0.147s
2: solved... in 0.032s
1: solved... in 0.129s
2: solved... in 0.034s
1: solved... in 0.13s
2: solved... in 0.032s
1: solved... in 0.122s
2: solved... in 0.032s
1: solved... in 0.123s
2: solved... in 0.032s
1: solved... in 0.124s
2: solved... in 0.032s
1: solved... in 0.124s
2: solved... in 0.033s
1: solved... in 0.146s
2: solved... in 0.033s
1: solved... in 0.132s
2: solved... in 0.032s
1: solved... in 0.14s
2: solved... in 0.034s
1: solved... in 0.126s
2: solved... in 0.04s
1: solved... in 0.133s
2: solved... in 0.036s
1: solved... in 0.127s
2: solved... in 0.033s
1: solved... in 0.123s
2: solved... in 0.036s
1: solved... in 0.125s
2: solved... in 0.036s
1: solved... in 0.128s
2: solved... in 0.036s
1: solved... in 0.129s
2: solved... in 0.033s
1: solved... in 0.123s
2: solved... in 0.036s
1: solved... in 0.126s
2: solved... in 0.034s
1: solved... in 0.12s
2: solved... in 0.038s
1: solved... in 0.125s
2: solved... in 0.037s
1: solved... in 0.148s
2: solved... in 0.037s
1: solved... in 0.145s
2: solved... in 0.033s
1: solved... in 0.149s
2: solved... in 0.039s
1: solved... in 0.126s
2: solved... in 0.034s
1: solved... in 0.127s
2: solved... in 0.037s
1: solved... in 0.153s
2: solved... in 0.037s
1: solved... in 0.143s
2: solved... in 0.038s
1: solved... in 0.144s
2: solved... in 0.035s
1: solved... in 0.123s
2: solved... in 0.038s
1: solved... in 0.146s
2: solved... in 0.043s
1: solved... in 0.144s
2: solved... in 0.038s
1: solved... in 0.131s
2: solved... in 0.039s
1: solved... in 0.15s
2: solved... in 0.034s
1: solved... in 0.149s
2: solved... in 0.04s
1: solved... in 0.15s
2: solved... in 0.04s
1: solved... in 0.152s
2: solved... in 0.036s
1: solved... in 0.131s
2: solved... in 0.036s
1: solved... in 0.124s
2: solved... in 0.037s
1: solved... in 0.126s
2: solved... in 0.039s
1: solved... in 0.144s
2: solved... in 0.035s
1: solved... in 0.125s
2: solved... in 0.037s
1: solved... in 0.124s
2: solved... in 0.041s
1: solved... in 0.144s
2: solved... in 0.04s
1: solved... in 0.145s
2: solved... in 0.038s
1: solved... in 0.127s
2: solved... in 0.037s
1: solved... in 0.125s
2: solved... in 0.041s
1: solved... in 0.129s
2: solved... in 0.042s
1: solved... in 0.129s
2: solved... in 0.039s
1: solved... in 0.124s
2: solved... in 0.036s
1: solved... in 0.143s
2: solved... in 0.038s
1: solved... in 0.125s
2: solved... in 0.037s
1: solved... in 0.123s
2: solved... in 0.039s
1: solved... in 0.126s
2: solved... in 0.037s
1: solved... in 0.15s
2: solved... in 0.038s
1: solved... in 0.152s
2: solved... in 0.038s
1: solved... in 0.122s
2: solved... in 0.042s
1: solved... in 0.128s
2: solved... in 0.038s
1: solved... in 0.123s
2: solved... in 0.038s
1: solved... in 0.124s
2: solved... in 0.045s
1: solved... in 0.127s
2: solved... in 0.038s
1: solved... in 0.125s
2: solved... in 0.038s
1: solved... in 0.123s
2: solved... in 0.041s
1: solved... in 0.153s
2: solved... in 0.043s
1: solved... in 0.141s
2: solved... in 0.04s
1: solved... in 0.137s
2: solved... in 0.042s
1: solved... in 0.142s
