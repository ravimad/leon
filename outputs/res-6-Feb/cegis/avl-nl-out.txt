After Depth Instrumentation: 
object AVLTree {
  case class Leaf() extends Tree

  sealed abstract class OptionInt

  case class None() extends OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Some(i: Int) extends OptionInt

  sealed abstract class Tree

  def balance(t : Tree) : Tree = {(t match {
    case Leaf() =>
      Leaf()
    case Node(l, v, r, h) =>
      locally {
        val bfactor = balanceFactor(t)
        if ((bfactor > 1)) {
          locally {
            val newL = if ((balanceFactor(l) < 0)) {
              rotateLeft(l)
            } else {
              l
            }
            rotateRight(Node(newL, v, r, (max(rank(newL), rank(r)) + 1)))
          }
          
        } else {
          if ((bfactor < -1)) {
            locally {
              val newR = if ((balanceFactor(r) > 0)) {
                rotateRight(r)
              } else {
                r
              }
              rotateLeft(Node(l, v, newR, (max(rank(newR), rank(l)) + 1)))
            }
            
          } else {
            t
          }
        }
      }
      
  })}

  def unbalancedInsert(t : Tree, e : Int) : Tree = {(t match {
    case Leaf() =>
      Node(Leaf(), e, Leaf(), 1)
    case Node(l, v, r, h) =>
      if ((e == v)) {
        t
      } else {
        if ((e < v)) {
          locally {
            val newl = avlInsert(l, e)
            Node(newl, v, r, (max(rank(newl), rank(r)) + 1))
          }
          
        } else {
          locally {
            val newr = avlInsert(r, e)
            Node(l, v, newr, (max(rank(l), rank(newr)) + 1))
          }
          
        }
      }
  })}

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr) + 1)
        }
        
      }
      
  })}

  def rank(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(_, _, _, rk) =>
      rk
  })}

  def max(i1 : Int, i2 : Int) : Int = {if ((i1 >= i2)) {
    i1
  } else {
    i2
  }}

  def deleteMax(t : Tree) : (Tree, OptionInt) = {(t match {
    case Node(Leaf(), v, Leaf(), _) =>
      (Leaf(), Some(v))
    case Node(l, v, Leaf(), _) =>
      locally {
        val x$1 = (deleteMax(l) match {
          case (newl, opt) =>
            (newl, opt)
        })
        locally {
          val newl = x$1._1
          locally {
            val opt = x$1._2
            (opt match {
              case None() =>
                (t, None())
              case Some(lmax) =>
                locally {
                  val newt = balance(Node(newl, lmax, Leaf(), (rank(newl) + 1)))
                  (newt, Some(v))
                }
                
            })
          }
          
        }
        
      }
      
    case Node(_, _, r, _) =>
      deleteMax(r)
    case _ =>
      (t, None())
  })} ensuring(res => true)

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : Tree = {balance(unbalancedDelete(t, e))} ensuring(res => true)

  def balanceFactor(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      (rank(l) - rank(r))
  })}

  def rotateRight(t : Tree) : Tree = {(t match {
    case Node(Node(ll, vl, rl, _), v, r, _) =>
      locally {
        val hr = (max(rank(rl), rank(r)) + 1)
        Node(ll, vl, Node(rl, v, r, hr), (max(rank(ll), hr) + 1))
      }
      
    case _ =>
      t
  })}

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res => true)

  def avlInsert(t : Tree, e : Int) : Tree = {balance(unbalancedInsert(t, e))} ensuring(res => true)

  def unbalancedDelete(t : Tree, e : Int) : Tree = {(t match {
    case Leaf() =>
      Leaf()
    case Node(l, v, r, h) =>
      if ((e == v)) {
        if ((l == Leaf())) {
          r
        } else {
          if ((r == Leaf())) {
            l
          } else {
            locally {
              val x$2 = (deleteMax(l) match {
                case (newl, opt) =>
                  (newl, opt)
              })
              locally {
                val newl = x$2._1
                locally {
                  val opt = x$2._2
                  (opt match {
                    case None() =>
                      t
                    case Some(newe) =>
                      Node(newl, newe, r, (max(rank(newl), rank(r)) + 1))
                  })
                }
                
              }
              
            }
            
          }
        }
      } else {
        if ((e < v)) {
          locally {
            val newl = avlDelete(l, e)
            Node(newl, v, r, (max(rank(newl), rank(r)) + 1))
          }
          
        } else {
          locally {
            val newr = avlDelete(r, e)
            Node(l, v, newr, (max(rank(l), rank(newr)) + 1))
          }
          
        }
      }
  })}

  def rotateLeft(t : Tree) : Tree = {(t match {
    case Node(l, v, Node(lr, vr, rr, _), _) =>
      locally {
        val hl = (max(rank(l), rank(lr)) + 1)
        Node(Node(l, v, lr, hl), vr, rr, (max(hl, rank(rr)) + 1))
      }
      
    case _ =>
      t
  })}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Defined fun: balance
Defined fun: unbalancedInsert
Defined fun: rankHeight
Defined fun: height
Defined fun: rank
Defined fun: max
Defined fun: deleteMax
Defined fun: min
Defined fun: avlDelete
Defined fun: balanceFactor
Defined fun: rotateRight
Defined fun: size
Defined fun: avlInsert
Defined fun: unbalancedDelete
Defined fun: rotateLeft
Defined fun: max
FunMap: Map(height -> height, min -> min, avlInsert -> avlInsert, rankHeight -> rankHeight, deleteMax -> deleteMax, max -> max, unbalancedDelete -> unbalancedDelete, rotateLeft -> rotateLeft, balanceFactor -> balanceFactor, max -> max, balance -> balance, rotateRight -> rotateRight, avlDelete -> avlDelete, rank -> rank, size -> size, unbalancedInsert -> unbalancedInsert)
After Time Instrumentation: 
object AVLTree {
  case class Leaf() extends Tree

  sealed abstract class OptionInt

  case class None() extends OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Some(i: Int) extends OptionInt

  sealed abstract class Tree

  def balance(t : Tree) : (Tree, Int) = {locally {
    val t253 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), (t253 + 1))
    } else {
      locally {
        val (e234: Tree, t255: Int) = locally {
          val (ir12: Int, it12: Int) = locally {
            val (e236: Int, t258: Int) = balanceFactor(t)
            (e236, (1 + t258))
          }
          
          locally {
            val (r22: Tree, t256: Int) = locally {
              val t259 = 1
              if ((ir12 > 1)) {
                locally {
                  val (e238: Tree, t260: Int) = locally {
                    val (ir13: Tree, it13: Int) = locally {
                      val (e239: Boolean, t262: Int) = locally {
                        val (e246: Int, t269: Int) = locally {
                          val (e249: Int, t272: Int) = balanceFactor(t.left)
                          (e249, (1 + (1 + t272)))
                        }
                        
                        ((e246 < 0), (t269 + 1))
                      }
                      
                      if (e239) {
                        locally {
                          val (e240: Tree, t263: Int) = locally {
                            val (e242: Tree, t265: Int) = rotateLeft(t.left)
                            (e242, (1 + (1 + t265)))
                          }
                          
                          (e240, (t262 + t263))
                        }
                        
                      } else {
                        (t.left, (t262 + 1))
                      }
                    }
                    
                    locally {
                      val (r23: Tree, t261: Int) = locally {
                        val (e251: Node, t274: Int) = locally {
                          val (e256: Int, t279: Int) = locally {
                            val (e257: Int, t280: Int) = locally {
                              val (e259: Int, t282: Int) = locally {
                                val (e266: Int, t289: Int) = rank(ir13)
                                (e266, (1 + t289))
                              }
                              
                              locally {
                                val (e260: Int, t283: Int) = locally {
                                  val (e263: Int, t286: Int) = rank(t.right)
                                  (e263, (1 + (1 + t286)))
                                }
                                
                                locally {
                                  val (e261: Int, t284: Int) = max(e259, e260)
                                  (e261, (t283 + (t282 + (1 + t284))))
                                }
                                
                              }
                              
                            }
                            
                            ((e257 + 1), (t280 + 1))
                          }
                          
                          (Node(ir13, t.value, t.right, e256), (t279 + 3))
                        }
                        
                        locally {
                          val (e252: Tree, t275: Int) = rotateRight(e251)
                          (e252, (t274 + (1 + t275)))
                        }
                        
                      }
                      
                      (r23, (t261 + (it13 + 1)))
                    }
                    
                  }
                  
                  (e238, (t259 + t260))
                }
                
              } else {
                locally {
                  val (e269: Tree, t292: Int) = locally {
                    val t293 = 1
                    if ((ir12 < -1)) {
                      locally {
                        val (e271: Tree, t294: Int) = locally {
                          val (ir14: Tree, it14: Int) = locally {
                            val (e272: Boolean, t296: Int) = locally {
                              val (e279: Int, t303: Int) = locally {
                                val (e282: Int, t306: Int) = balanceFactor(t.right)
                                (e282, (1 + (1 + t306)))
                              }
                              
                              ((e279 > 0), (t303 + 1))
                            }
                            
                            if (e272) {
                              locally {
                                val (e273: Tree, t297: Int) = locally {
                                  val (e275: Tree, t299: Int) = rotateRight(t.right)
                                  (e275, (1 + (1 + t299)))
                                }
                                
                                (e273, (t296 + t297))
                              }
                              
                            } else {
                              (t.right, (t296 + 1))
                            }
                          }
                          
                          locally {
                            val (r24: Tree, t295: Int) = locally {
                              val (e284: Node, t308: Int) = locally {
                                val (e289: Int, t313: Int) = locally {
                                  val (e290: Int, t314: Int) = locally {
                                    val (e292: Int, t316: Int) = locally {
                                      val (e299: Int, t323: Int) = rank(ir14)
                                      (e299, (1 + t323))
                                    }
                                    
                                    locally {
                                      val (e293: Int, t317: Int) = locally {
                                        val (e296: Int, t320: Int) = rank(t.left)
                                        (e296, (1 + (1 + t320)))
                                      }
                                      
                                      locally {
                                        val (e294: Int, t318: Int) = max(e292, e293)
                                        (e294, (t317 + (t316 + (1 + t318))))
                                      }
                                      
                                    }
                                    
                                  }
                                  
                                  ((e290 + 1), (t314 + 1))
                                }
                                
                                (Node(t.left, t.value, ir14, e289), (t313 + 3))
                              }
                              
                              locally {
                                val (e285: Tree, t309: Int) = rotateLeft(e284)
                                (e285, (t308 + (1 + t309)))
                              }
                              
                            }
                            
                            (r24, (t295 + (it14 + 1)))
                          }
                          
                        }
                        
                        (e271, (t293 + t294))
                      }
                      
                    } else {
                      (t, t293)
                    }
                  }
                  
                  (e269, (t259 + t292))
                }
                
              }
            }
            
            (r22, (t256 + (it12 + 1)))
          }
          
        }
        
        (e234, (t253 + t255))
      }
      
    }
  }
  }

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val t388 = 1
    if (t.isInstanceOf[Leaf]) {
      (Node(Leaf(), e, Leaf(), 1), (t388 + 3))
    } else {
      locally {
        val (e369: Tree, t394: Int) = locally {
          val t395 = 2
          if ((e == t.value)) {
            (t, t395)
          } else {
            locally {
              val (e372: Node, t397: Int) = locally {
                val t398 = 2
                if ((e < t.value)) {
                  locally {
                    val (e374: Node, t399: Int) = locally {
                      val (ir16: Tree, it16: Int) = locally {
                        val (e377: Tree, t403: Int) = avlInsert(t.left, e)
                        (e377, (1 + (1 + t403)))
                      }
                      
                      locally {
                        val (r26: Node, t400: Int) = locally {
                          val (e382: Int, t408: Int) = locally {
                            val (e383: Int, t409: Int) = locally {
                              val (e385: Int, t411: Int) = locally {
                                val (e392: Int, t418: Int) = rank(ir16)
                                (e392, (1 + t418))
                              }
                              
                              locally {
                                val (e386: Int, t412: Int) = locally {
                                  val (e389: Int, t415: Int) = rank(t.right)
                                  (e389, (1 + (1 + t415)))
                                }
                                
                                locally {
                                  val (e387: Int, t413: Int) = max(e385, e386)
                                  (e387, (t412 + (t411 + (1 + t413))))
                                }
                                
                              }
                              
                            }
                            
                            ((e383 + 1), (t409 + 1))
                          }
                          
                          (Node(ir16, t.value, t.right, e382), (t408 + 3))
                        }
                        
                        (r26, (t400 + (it16 + 1)))
                      }
                      
                    }
                    
                    (e374, (t398 + t399))
                  }
                  
                } else {
                  locally {
                    val (e395: Node, t421: Int) = locally {
                      val (ir17: Tree, it17: Int) = locally {
                        val (e398: Tree, t425: Int) = avlInsert(t.right, e)
                        (e398, (1 + (1 + t425)))
                      }
                      
                      locally {
                        val (r27: Node, t422: Int) = locally {
                          val (e403: Int, t430: Int) = locally {
                            val (e404: Int, t431: Int) = locally {
                              val (e406: Int, t433: Int) = locally {
                                val (e412: Int, t439: Int) = rank(t.left)
                                (e412, (1 + (1 + t439)))
                              }
                              
                              locally {
                                val (e407: Int, t434: Int) = locally {
                                  val (e410: Int, t437: Int) = rank(ir17)
                                  (e410, (1 + t437))
                                }
                                
                                locally {
                                  val (e408: Int, t435: Int) = max(e406, e407)
                                  (e408, (t434 + (t433 + (1 + t435))))
                                }
                                
                              }
                              
                            }
                            
                            ((e404 + 1), (t431 + 1))
                          }
                          
                          (Node(t.left, t.value, ir17, e403), (t430 + 3))
                        }
                        
                        (r27, (t422 + (it17 + 1)))
                      }
                      
                    }
                    
                    (e395, (t398 + t421))
                  }
                  
                }
              }
              
              (e372, (t395 + t397))
            }
            
          }
        }
        
        (e369, (t388 + t394))
      }
      
    }
  }
  }

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      locally {
        val hl = height(l)
        locally {
          val hr = height(r)
          (max(hl, hr)._1 + 1)
        }
        
      }
      
  })}

  def rank(t : Tree) : (Int, Int) = {locally {
    val t383 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, t383)
    } else {
      (t.rank, (t383 + 1))
    }
  }
  }

  def max(i1 : Int, i2 : Int) : (Int, Int) = {locally {
    val t248 = 1
    if ((i1 >= i2)) {
      (i1, t248)
    } else {
      (i2, t248)
    }
  }
  }

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {locally {
    val t18 = 6
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
      ((Leaf(), Some(t.value)), (t18 + 4))
    } else {
      locally {
        val (e15: (Tree, OptionInt), t24: Int) = locally {
          val t25 = 4
          if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
            locally {
              val (e17: (Tree, OptionInt), t26: Int) = locally {
                val (ir: (Tree, OptionInt), it: Int) = locally {
                  val (ir1: (Tree, OptionInt), it1: Int) = locally {
                    val (e19: (Tree, OptionInt), t30: Int) = deleteMax(t.left)
                    (e19, (1 + (1 + t30)))
                  }
                  
                  ((ir1._1, ir1._2), (3 + (it1 + 1)))
                }
                
                locally {
                  val (r10: (Tree, OptionInt), t27: Int) = locally {
                    val ir2 = ir._1
                    locally {
                      val (r12: (Tree, OptionInt), t36: Int) = locally {
                        val ir3 = ir._2
                        locally {
                          val (r13: (Tree, OptionInt), t38: Int) = locally {
                            val t40 = 1
                            if (ir3.isInstanceOf[None]) {
                              ((t, None()), (t40 + 2))
                            } else {
                              locally {
                                val (e31: (Tree, OptionInt), t44: Int) = locally {
                                  val (ir4: Tree, it4: Int) = locally {
                                    val (e32: Node, t46: Int) = locally {
                                      val (e37: Int, t51: Int) = locally {
                                        val (e38: Int, t52: Int) = locally {
                                          val (e41: Int, t55: Int) = rank(ir2)
                                          (e41, (1 + t55))
                                        }
                                        
                                        ((e38 + 1), (t52 + 1))
                                      }
                                      
                                      (Node(ir2, ir3.i, Leaf(), e37), (t51 + 3))
                                    }
                                    
                                    locally {
                                      val (e33: Tree, t47: Int) = balance(e32)
                                      (e33, (t46 + (1 + t47)))
                                    }
                                    
                                  }
                                  
                                  ((ir4, Some(t.value)), (3 + (it4 + 1)))
                                }
                                
                                (e31, (t40 + t44))
                              }
                              
                            }
                          }
                          
                          (r13, (t38 + 2))
                        }
                        
                      }
                      
                      (r12, (t36 + 2))
                    }
                    
                  }
                  
                  (r10, (t27 + (it + 1)))
                }
                
              }
              
              (e17, (t25 + t26))
            }
            
          } else {
            locally {
              val (e48: (Tree, OptionInt), t62: Int) = locally {
                val t63 = 1
                if (t.isInstanceOf[Node]) {
                  locally {
                    val (e50: (Tree, OptionInt), t64: Int) = locally {
                      val (e52: (Tree, OptionInt), t66: Int) = deleteMax(t.right)
                      (e52, (1 + (1 + t66)))
                    }
                    
                    (e50, (t63 + t64))
                  }
                  
                } else {
                  ((t, None()), (t63 + 2))
                }
              }
              
              (e48, (t25 + t62))
            }
            
          }
        }
        
        (e15, (t18 + t24))
      }
      
    }
  }
  } ensuring(res10 => true)

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (e353: Tree, t378: Int) = locally {
      val (e357: Tree, t382: Int) = unbalancedDelete(t, e)
      (e357, (1 + t382))
    }
    
    locally {
      val (e354: Tree, t379: Int) = balance(e353)
      (e354, (t378 + (1 + t379)))
    }
    
  }
  } ensuring(res11 => true)

  def balanceFactor(t : Tree) : (Int, Int) = {locally {
    val t236 = 1
    if (t.isInstanceOf[Leaf]) {
      (0, t236)
    } else {
      locally {
        val (e217: Int, t238: Int) = locally {
          val (e218: Int, t239: Int) = locally {
            val (e224: Int, t245: Int) = rank(t.left)
            (e224, (1 + (1 + t245)))
          }
          
          locally {
            val (e219: Int, t240: Int) = locally {
              val (e221: Int, t242: Int) = rank(t.right)
              (e221, (1 + (1 + t242)))
            }
            
            ((e218 - e219), (t240 + (t239 + 1)))
          }
          
        }
        
        (e217, (t236 + t238))
      }
      
    }
  }
  }

  def rotateRight(t : Tree) : (Tree, Int) = {locally {
    val t332 = 4
    if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
      locally {
        val (e309: Node, t333: Int) = locally {
          val (ir15: Int, it15: Int) = locally {
            val (e310: Int, t335: Int) = locally {
              val (e312: Int, t337: Int) = locally {
                val (e319: Int, t344: Int) = rank(t.left.right)
                (e319, (2 + (1 + t344)))
              }
              
              locally {
                val (e313: Int, t338: Int) = locally {
                  val (e316: Int, t341: Int) = rank(t.right)
                  (e316, (1 + (1 + t341)))
                }
                
                locally {
                  val (e314: Int, t339: Int) = max(e312, e313)
                  (e314, (t338 + (t337 + (1 + t339))))
                }
                
              }
              
            }
            
            ((e310 + 1), (t335 + 1))
          }
          
          locally {
            val (r25: Node, t334: Int) = locally {
              val (e325: Int, t350: Int) = locally {
                val (e326: Int, t351: Int) = locally {
                  val (e328: Int, t353: Int) = locally {
                    val (e332: Int, t357: Int) = rank(t.left.left)
                    (e332, (2 + (1 + t357)))
                  }
                  
                  locally {
                    val (e330: Int, t355: Int) = max(e328, ir15)
                    (e330, (t353 + (1 + t355)))
                  }
                  
                }
                
                ((e326 + 1), (t351 + 1))
              }
              
              (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, ir15), e325), (t350 + 10))
            }
            
            (r25, (t334 + (it15 + 1)))
          }
          
        }
        
        (e309, (t332 + t333))
      }
      
    } else {
      (t, t332)
    }
  }
  }

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res12 => true)

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (e4: Tree, t13: Int) = locally {
      val (e8: Tree, t17: Int) = unbalancedInsert(t, e)
      (e8, (1 + t17))
    }
    
    locally {
      val (e5: Tree, t14: Int) = balance(e4)
      (e5, (t13 + (1 + t14)))
    }
    
  }
  } ensuring(res9 => true)

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val t85 = 1
    if (t.isInstanceOf[Leaf]) {
      (Leaf(), (t85 + 1))
    } else {
      locally {
        val (e73: Tree, t87: Int) = locally {
          val t88 = 2
          if ((e == t.value)) {
            locally {
              val (e75: Tree, t89: Int) = locally {
                val t90 = 3
                if ((t.left == Leaf())) {
                  (t.right, (t90 + 1))
                } else {
                  locally {
                    val (e79: Tree, t93: Int) = locally {
                      val t94 = 3
                      if ((t.right == Leaf())) {
                        (t.left, (t94 + 1))
                      } else {
                        locally {
                          val (e83: Tree, t97: Int) = locally {
                            val (ir5: (Tree, OptionInt), it5: Int) = locally {
                              val (ir6: (Tree, OptionInt), it6: Int) = locally {
                                val (e85: (Tree, OptionInt), t101: Int) = deleteMax(t.left)
                                (e85, (1 + (1 + t101)))
                              }
                              
                              ((ir6._1, ir6._2), (3 + (it6 + 1)))
                            }
                            
                            locally {
                              val (r15: Tree, t98: Int) = locally {
                                val ir7 = ir5._1
                                locally {
                                  val (r17: Tree, t107: Int) = locally {
                                    val ir8 = ir5._2
                                    locally {
                                      val (r18: Tree, t109: Int) = locally {
                                        val t111 = 1
                                        if (ir8.isInstanceOf[None]) {
                                          (t, t111)
                                        } else {
                                          locally {
                                            val (e95: Node, t113: Int) = locally {
                                              val (e99: Int, t117: Int) = locally {
                                                val (e100: Int, t118: Int) = locally {
                                                  val (e102: Int, t120: Int) = locally {
                                                    val (e109: Int, t127: Int) = rank(ir7)
                                                    (e109, (1 + t127))
                                                  }
                                                  
                                                  locally {
                                                    val (e103: Int, t121: Int) = locally {
                                                      val (e106: Int, t124: Int) = rank(t.right)
                                                      (e106, (1 + (1 + t124)))
                                                    }
                                                    
                                                    locally {
                                                      val (e104: Int, t122: Int) = max(e102, e103)
                                                      (e104, (t121 + (t120 + (1 + t122))))
                                                    }
                                                    
                                                  }
                                                  
                                                }
                                                
                                                ((e100 + 1), (t118 + 1))
                                              }
                                              
                                              (Node(ir7, ir8.i, t.right, e99), (t117 + 3))
                                            }
                                            
                                            (e95, (t111 + t113))
                                          }
                                          
                                        }
                                      }
                                      
                                      (r18, (t109 + 2))
                                    }
                                    
                                  }
                                  
                                  (r17, (t107 + 2))
                                }
                                
                              }
                              
                              (r15, (t98 + (it5 + 1)))
                            }
                            
                          }
                          
                          (e83, (t94 + t97))
                        }
                        
                      }
                    }
                    
                    (e79, (t90 + t93))
                  }
                  
                }
              }
              
              (e75, (t88 + t89))
            }
            
          } else {
            locally {
              val (e119: Node, t137: Int) = locally {
                val t138 = 2
                if ((e < t.value)) {
                  locally {
                    val (e121: Node, t139: Int) = locally {
                      val (ir9: Tree, it9: Int) = locally {
                        val (e124: Tree, t143: Int) = avlDelete(t.left, e)
                        (e124, (1 + (1 + t143)))
                      }
                      
                      locally {
                        val (r19: Node, t140: Int) = locally {
                          val (e129: Int, t148: Int) = locally {
                            val (e130: Int, t149: Int) = locally {
                              val (e132: Int, t151: Int) = locally {
                                val (e139: Int, t158: Int) = rank(ir9)
                                (e139, (1 + t158))
                              }
                              
                              locally {
                                val (e133: Int, t152: Int) = locally {
                                  val (e136: Int, t155: Int) = rank(t.right)
                                  (e136, (1 + (1 + t155)))
                                }
                                
                                locally {
                                  val (e134: Int, t153: Int) = max(e132, e133)
                                  (e134, (t152 + (t151 + (1 + t153))))
                                }
                                
                              }
                              
                            }
                            
                            ((e130 + 1), (t149 + 1))
                          }
                          
                          (Node(ir9, t.value, t.right, e129), (t148 + 3))
                        }
                        
                        (r19, (t140 + (it9 + 1)))
                      }
                      
                    }
                    
                    (e121, (t138 + t139))
                  }
                  
                } else {
                  locally {
                    val (e142: Node, t161: Int) = locally {
                      val (ir10: Tree, it10: Int) = locally {
                        val (e145: Tree, t165: Int) = avlDelete(t.right, e)
                        (e145, (1 + (1 + t165)))
                      }
                      
                      locally {
                        val (r20: Node, t162: Int) = locally {
                          val (e150: Int, t170: Int) = locally {
                            val (e151: Int, t171: Int) = locally {
                              val (e153: Int, t173: Int) = locally {
                                val (e159: Int, t179: Int) = rank(t.left)
                                (e159, (1 + (1 + t179)))
                              }
                              
                              locally {
                                val (e154: Int, t174: Int) = locally {
                                  val (e157: Int, t177: Int) = rank(ir10)
                                  (e157, (1 + t177))
                                }
                                
                                locally {
                                  val (e155: Int, t175: Int) = max(e153, e154)
                                  (e155, (t174 + (t173 + (1 + t175))))
                                }
                                
                              }
                              
                            }
                            
                            ((e151 + 1), (t171 + 1))
                          }
                          
                          (Node(t.left, t.value, ir10, e150), (t170 + 3))
                        }
                        
                        (r20, (t162 + (it10 + 1)))
                      }
                      
                    }
                    
                    (e142, (t138 + t161))
                  }
                  
                }
              }
              
              (e119, (t88 + t137))
            }
            
          }
        }
        
        (e73, (t85 + t87))
      }
      
    }
  }
  }

  def rotateLeft(t : Tree) : (Tree, Int) = {locally {
    val t190 = 4
    if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
      locally {
        val (e171: Node, t191: Int) = locally {
          val (ir11: Int, it11: Int) = locally {
            val (e172: Int, t193: Int) = locally {
              val (e174: Int, t195: Int) = locally {
                val (e182: Int, t203: Int) = rank(t.left)
                (e182, (1 + (1 + t203)))
              }
              
              locally {
                val (e175: Int, t196: Int) = locally {
                  val (e178: Int, t199: Int) = rank(t.right.left)
                  (e178, (2 + (1 + t199)))
                }
                
                locally {
                  val (e176: Int, t197: Int) = max(e174, e175)
                  (e176, (t196 + (t195 + (1 + t197))))
                }
                
              }
              
            }
            
            ((e172 + 1), (t193 + 1))
          }
          
          locally {
            val (r21: Node, t192: Int) = locally {
              val (e187: Int, t208: Int) = locally {
                val (e188: Int, t209: Int) = locally {
                  val (e191: Int, t212: Int) = locally {
                    val (e194: Int, t215: Int) = rank(t.right.right)
                    (e194, (2 + (1 + t215)))
                  }
                  
                  locally {
                    val (e192: Int, t213: Int) = max(ir11, e191)
                    (e192, (t212 + (1 + t213)))
                  }
                  
                }
                
                ((e188 + 1), (t209 + 1))
              }
              
              (Node(Node(t.left, t.value, t.right.left, ir11), t.right.value, t.right.right, e187), (t208 + 10))
            }
            
            (r21, (t192 + (it11 + 1)))
          }
          
        }
        
        (e171, (t190 + t191))
      }
      
    } else {
      (t, t190)
    }
  }
  }

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

New Prog: 
object AVLTree {
  case class Leaf() extends Tree

  sealed abstract class OptionInt

  case class None() extends OptionInt

  case class Node(left: Tree, value: Int, right: Tree, rank: Int) extends Tree

  case class Some(i: Int) extends OptionInt

  sealed abstract class Tree

  def balance(t : Tree) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), (1 + 1))
  } else {
    locally {
      val (e234: Tree, t255: Int) = locally {
        val (ir12: Int, it12: Int) = locally {
          val (e236: Int, t258: Int) = balanceFactor(t)
          (e236, (1 + t258))
        }
        
        locally {
          val (r22: Tree, t256: Int) = if ((ir12 > 1)) {
            locally {
              val (e238: Tree, t260: Int) = locally {
                val (ir13: Tree, it13: Int) = locally {
                  val (e239: Boolean, t262: Int) = locally {
                    val (e246: Int, t269: Int) = locally {
                      val (e249: Int, t272: Int) = balanceFactor(t.left)
                      (e249, (1 + (1 + t272)))
                    }
                    
                    ((e246 < 0), (t269 + 1))
                  }
                  
                  if (e239) {
                    locally {
                      val (e240: Tree, t263: Int) = locally {
                        val (e242: Tree, t265: Int) = rotateLeft(t.left)
                        (e242, (1 + (1 + t265)))
                      }
                      
                      (e240, (t262 + t263))
                    }
                    
                  } else {
                    (t.left, (t262 + 1))
                  }
                }
                
                locally {
                  val (r23: Tree, t261: Int) = locally {
                    val (e251: Node, t274: Int) = locally {
                      val (e256: Int, t279: Int) = locally {
                        val (e257: Int, t280: Int) = locally {
                          val (e259: Int, t282: Int) = locally {
                            val (e266: Int, t289: Int) = rank(ir13)
                            (e266, (1 + t289))
                          }
                          
                          locally {
                            val (e260: Int, t283: Int) = locally {
                              val (e263: Int, t286: Int) = rank(t.right)
                              (e263, (1 + (1 + t286)))
                            }
                            
                            locally {
                              val (e261: Int, t284: Int) = max(e259, e260)
                              (e261, (t283 + (t282 + (1 + t284))))
                            }
                            
                          }
                          
                        }
                        
                        ((e257 + 1), (t280 + 1))
                      }
                      
                      (Node(ir13, t.value, t.right, e256), (t279 + 3))
                    }
                    
                    locally {
                      val (e252: Tree, t275: Int) = rotateRight(e251)
                      (e252, (t274 + (1 + t275)))
                    }
                    
                  }
                  
                  (r23, (t261 + (it13 + 1)))
                }
                
              }
              
              (e238, (1 + t260))
            }
            
          } else {
            locally {
              val (e269: Tree, t292: Int) = if ((ir12 < -1)) {
                locally {
                  val (e271: Tree, t294: Int) = locally {
                    val (ir14: Tree, it14: Int) = locally {
                      val (e272: Boolean, t296: Int) = locally {
                        val (e279: Int, t303: Int) = locally {
                          val (e282: Int, t306: Int) = balanceFactor(t.right)
                          (e282, (1 + (1 + t306)))
                        }
                        
                        ((e279 > 0), (t303 + 1))
                      }
                      
                      if (e272) {
                        locally {
                          val (e273: Tree, t297: Int) = locally {
                            val (e275: Tree, t299: Int) = rotateRight(t.right)
                            (e275, (1 + (1 + t299)))
                          }
                          
                          (e273, (t296 + t297))
                        }
                        
                      } else {
                        (t.right, (t296 + 1))
                      }
                    }
                    
                    locally {
                      val (r24: Tree, t295: Int) = locally {
                        val (e284: Node, t308: Int) = locally {
                          val (e289: Int, t313: Int) = locally {
                            val (e290: Int, t314: Int) = locally {
                              val (e292: Int, t316: Int) = locally {
                                val (e299: Int, t323: Int) = rank(ir14)
                                (e299, (1 + t323))
                              }
                              
                              locally {
                                val (e293: Int, t317: Int) = locally {
                                  val (e296: Int, t320: Int) = rank(t.left)
                                  (e296, (1 + (1 + t320)))
                                }
                                
                                locally {
                                  val (e294: Int, t318: Int) = max(e292, e293)
                                  (e294, (t317 + (t316 + (1 + t318))))
                                }
                                
                              }
                              
                            }
                            
                            ((e290 + 1), (t314 + 1))
                          }
                          
                          (Node(t.left, t.value, ir14, e289), (t313 + 3))
                        }
                        
                        locally {
                          val (e285: Tree, t309: Int) = rotateLeft(e284)
                          (e285, (t308 + (1 + t309)))
                        }
                        
                      }
                      
                      (r24, (t295 + (it14 + 1)))
                    }
                    
                  }
                  
                  (e271, (1 + t294))
                }
                
              } else {
                (t, 1)
              }
              (e269, (1 + t292))
            }
            
          }
          (r22, (t256 + (it12 + 1)))
        }
        
      }
      
      (e234, (1 + t255))
    }
    
  }}

  def unbalancedInsert(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Node(Leaf(), e, Leaf(), 1), (1 + 3))
  } else {
    locally {
      val (e369: Tree, t394: Int) = if ((e == t.value)) {
        (t, 2)
      } else {
        locally {
          val (e372: Node, t397: Int) = if ((e < t.value)) {
            locally {
              val (e374: Node, t399: Int) = locally {
                val (ir16: Tree, it16: Int) = locally {
                  val (e377: Tree, t403: Int) = avlInsert(t.left, e)
                  (e377, (1 + (1 + t403)))
                }
                
                locally {
                  val (r26: Node, t400: Int) = locally {
                    val (e382: Int, t408: Int) = locally {
                      val (e383: Int, t409: Int) = locally {
                        val (e385: Int, t411: Int) = locally {
                          val (e392: Int, t418: Int) = rank(ir16)
                          (e392, (1 + t418))
                        }
                        
                        locally {
                          val (e386: Int, t412: Int) = locally {
                            val (e389: Int, t415: Int) = rank(t.right)
                            (e389, (1 + (1 + t415)))
                          }
                          
                          locally {
                            val (e387: Int, t413: Int) = max(e385, e386)
                            (e387, (t412 + (t411 + (1 + t413))))
                          }
                          
                        }
                        
                      }
                      
                      ((e383 + 1), (t409 + 1))
                    }
                    
                    (Node(ir16, t.value, t.right, e382), (t408 + 3))
                  }
                  
                  (r26, (t400 + (it16 + 1)))
                }
                
              }
              
              (e374, (2 + t399))
            }
            
          } else {
            locally {
              val (e395: Node, t421: Int) = locally {
                val (ir17: Tree, it17: Int) = locally {
                  val (e398: Tree, t425: Int) = avlInsert(t.right, e)
                  (e398, (1 + (1 + t425)))
                }
                
                locally {
                  val (r27: Node, t422: Int) = locally {
                    val (e403: Int, t430: Int) = locally {
                      val (e404: Int, t431: Int) = locally {
                        val (e406: Int, t433: Int) = locally {
                          val (e412: Int, t439: Int) = rank(t.left)
                          (e412, (1 + (1 + t439)))
                        }
                        
                        locally {
                          val (e407: Int, t434: Int) = locally {
                            val (e410: Int, t437: Int) = rank(ir17)
                            (e410, (1 + t437))
                          }
                          
                          locally {
                            val (e408: Int, t435: Int) = max(e406, e407)
                            (e408, (t434 + (t433 + (1 + t435))))
                          }
                          
                        }
                        
                      }
                      
                      ((e404 + 1), (t431 + 1))
                    }
                    
                    (Node(t.left, t.value, ir17, e403), (t430 + 3))
                  }
                  
                  (r27, (t422 + (it17 + 1)))
                }
                
              }
              
              (e395, (2 + t421))
            }
            
          }
          (e372, (2 + t397))
        }
        
      }
      (e369, (1 + t394))
    }
    
  }}

  def rankHeight(t : Tree) : Boolean = {(t match {
    case Leaf() =>
      true
    case Node(l, _, r, rk) =>
      (rankHeight(l) && rankHeight(r) && (rk == height(t)))
  })}

  def height(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, x, r, _) =>
      (max(height(l), height(r))._1 + 1)
  })}

  def rank(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, 1)
  } else {
    (t.rank, (1 + 1))
  }}

  def max(i1 : Int, i2 : Int) : (Int, Int) = {if ((i1 >= i2)) {
    (i1, 1)
  } else {
    (i2, 1)
  }}

  def deleteMax(t : Tree) : ((Tree, OptionInt), Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Leaf] && t.right.isInstanceOf[Leaf])) {
    ((Leaf(), Some(t.value)), (6 + 4))
  } else {
    locally {
      val (e15: (Tree, OptionInt), t24: Int) = if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Leaf])) {
        locally {
          val (e17: (Tree, OptionInt), t26: Int) = locally {
            val (ir: (Tree, OptionInt), it: Int) = locally {
              val (ir1: (Tree, OptionInt), it1: Int) = locally {
                val (e19: (Tree, OptionInt), t30: Int) = deleteMax(t.left)
                (e19, (1 + (1 + t30)))
              }
              
              ((ir1._1, ir1._2), (3 + (it1 + 1)))
            }
            
            locally {
              val (r10: (Tree, OptionInt), t27: Int) = locally {
                val ir2 = ir._1
                locally {
                  val (r12: (Tree, OptionInt), t36: Int) = locally {
                    val ir3 = ir._2
                    locally {
                      val (r13: (Tree, OptionInt), t38: Int) = if (ir3.isInstanceOf[None]) {
                        ((t, None()), (1 + 2))
                      } else {
                        locally {
                          val (e31: (Tree, OptionInt), t44: Int) = locally {
                            val (ir4: Tree, it4: Int) = locally {
                              val (e32: Node, t46: Int) = locally {
                                val (e37: Int, t51: Int) = locally {
                                  val (e38: Int, t52: Int) = locally {
                                    val (e41: Int, t55: Int) = rank(ir2)
                                    (e41, (1 + t55))
                                  }
                                  
                                  ((e38 + 1), (t52 + 1))
                                }
                                
                                (Node(ir2, ir3.i, Leaf(), e37), (t51 + 3))
                              }
                              
                              locally {
                                val (e33: Tree, t47: Int) = balance(e32)
                                (e33, (t46 + (1 + t47)))
                              }
                              
                            }
                            
                            ((ir4, Some(t.value)), (3 + (it4 + 1)))
                          }
                          
                          (e31, (1 + t44))
                        }
                        
                      }
                      (r13, (t38 + 2))
                    }
                    
                  }
                  
                  (r12, (t36 + 2))
                }
                
              }
              
              (r10, (t27 + (it + 1)))
            }
            
          }
          
          (e17, (4 + t26))
        }
        
      } else {
        locally {
          val (e48: (Tree, OptionInt), t62: Int) = if (t.isInstanceOf[Node]) {
            locally {
              val (e50: (Tree, OptionInt), t64: Int) = locally {
                val (e52: (Tree, OptionInt), t66: Int) = deleteMax(t.right)
                (e52, (1 + (1 + t66)))
              }
              
              (e50, (1 + t64))
            }
            
          } else {
            ((t, None()), (1 + 2))
          }
          (e48, (4 + t62))
        }
        
      }
      (e15, (6 + t24))
    }
    
  }} ensuring(res10 => true)

  def min(i1 : Int, i2 : Int) : Int = {if ((i1 <= i2)) {
    i1
  } else {
    i2
  }}

  def avlDelete(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (e353: Tree, t378: Int) = locally {
      val (e357: Tree, t382: Int) = unbalancedDelete(t, e)
      (e357, (1 + t382))
    }
    
    locally {
      val (e354: Tree, t379: Int) = balance(e353)
      (e354, (t378 + (1 + t379)))
    }
    
  }
  } ensuring(res11 => true)

  def balanceFactor(t : Tree) : (Int, Int) = {if (t.isInstanceOf[Leaf]) {
    (0, 1)
  } else {
    locally {
      val (e217: Int, t238: Int) = locally {
        val (e218: Int, t239: Int) = locally {
          val (e224: Int, t245: Int) = rank(t.left)
          (e224, (1 + (1 + t245)))
        }
        
        locally {
          val (e219: Int, t240: Int) = locally {
            val (e221: Int, t242: Int) = rank(t.right)
            (e221, (1 + (1 + t242)))
          }
          
          ((e218 - e219), (t240 + (t239 + 1)))
        }
        
      }
      
      (e217, (1 + t238))
    }
    
  }}

  def rotateRight(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.left.isInstanceOf[Node])) {
    locally {
      val (e309: Node, t333: Int) = locally {
        val (ir15: Int, it15: Int) = locally {
          val (e310: Int, t335: Int) = locally {
            val (e312: Int, t337: Int) = locally {
              val (e319: Int, t344: Int) = rank(t.left.right)
              (e319, (2 + (1 + t344)))
            }
            
            locally {
              val (e313: Int, t338: Int) = locally {
                val (e316: Int, t341: Int) = rank(t.right)
                (e316, (1 + (1 + t341)))
              }
              
              locally {
                val (e314: Int, t339: Int) = max(e312, e313)
                (e314, (t338 + (t337 + (1 + t339))))
              }
              
            }
            
          }
          
          ((e310 + 1), (t335 + 1))
        }
        
        locally {
          val (r25: Node, t334: Int) = locally {
            val (e325: Int, t350: Int) = locally {
              val (e326: Int, t351: Int) = locally {
                val (e328: Int, t353: Int) = locally {
                  val (e332: Int, t357: Int) = rank(t.left.left)
                  (e332, (2 + (1 + t357)))
                }
                
                locally {
                  val (e330: Int, t355: Int) = max(e328, ir15)
                  (e330, (t353 + (1 + t355)))
                }
                
              }
              
              ((e326 + 1), (t351 + 1))
            }
            
            (Node(t.left.left, t.left.value, Node(t.left.right, t.value, t.right, ir15), e325), (t350 + 10))
          }
          
          (r25, (t334 + (it15 + 1)))
        }
        
      }
      
      (e309, (4 + t333))
    }
    
  } else {
    (t, 4)
  }}

  def size(t : Tree) : Int = {(t match {
    case Leaf() =>
      0
    case Node(l, _, r, _) =>
      ((size(l) + 1) + size(r))
  })} ensuring(res12 => true)

  def avlInsert(t : Tree, e : Int) : (Tree, Int) = {locally {
    val (e4: Tree, t13: Int) = locally {
      val (e8: Tree, t17: Int) = unbalancedInsert(t, e)
      (e8, (1 + t17))
    }
    
    locally {
      val (e5: Tree, t14: Int) = balance(e4)
      (e5, (t13 + (1 + t14)))
    }
    
  }
  } ensuring(res9 => true)

  def unbalancedDelete(t : Tree, e : Int) : (Tree, Int) = {if (t.isInstanceOf[Leaf]) {
    (Leaf(), (1 + 1))
  } else {
    locally {
      val (e73: Tree, t87: Int) = if ((e == t.value)) {
        locally {
          val (e75: Tree, t89: Int) = if ((t.left == Leaf())) {
            (t.right, (3 + 1))
          } else {
            locally {
              val (e79: Tree, t93: Int) = if ((t.right == Leaf())) {
                (t.left, (3 + 1))
              } else {
                locally {
                  val (e83: Tree, t97: Int) = locally {
                    val (ir5: (Tree, OptionInt), it5: Int) = locally {
                      val (ir6: (Tree, OptionInt), it6: Int) = locally {
                        val (e85: (Tree, OptionInt), t101: Int) = deleteMax(t.left)
                        (e85, (1 + (1 + t101)))
                      }
                      
                      ((ir6._1, ir6._2), (3 + (it6 + 1)))
                    }
                    
                    locally {
                      val (r15: Tree, t98: Int) = locally {
                        val ir7 = ir5._1
                        locally {
                          val (r17: Tree, t107: Int) = locally {
                            val ir8 = ir5._2
                            locally {
                              val (r18: Tree, t109: Int) = if (ir8.isInstanceOf[None]) {
                                (t, 1)
                              } else {
                                locally {
                                  val (e95: Node, t113: Int) = locally {
                                    val (e99: Int, t117: Int) = locally {
                                      val (e100: Int, t118: Int) = locally {
                                        val (e102: Int, t120: Int) = locally {
                                          val (e109: Int, t127: Int) = rank(ir7)
                                          (e109, (1 + t127))
                                        }
                                        
                                        locally {
                                          val (e103: Int, t121: Int) = locally {
                                            val (e106: Int, t124: Int) = rank(t.right)
                                            (e106, (1 + (1 + t124)))
                                          }
                                          
                                          locally {
                                            val (e104: Int, t122: Int) = max(e102, e103)
                                            (e104, (t121 + (t120 + (1 + t122))))
                                          }
                                          
                                        }
                                        
                                      }
                                      
                                      ((e100 + 1), (t118 + 1))
                                    }
                                    
                                    (Node(ir7, ir8.i, t.right, e99), (t117 + 3))
                                  }
                                  
                                  (e95, (1 + t113))
                                }
                                
                              }
                              (r18, (t109 + 2))
                            }
                            
                          }
                          
                          (r17, (t107 + 2))
                        }
                        
                      }
                      
                      (r15, (t98 + (it5 + 1)))
                    }
                    
                  }
                  
                  (e83, (3 + t97))
                }
                
              }
              (e79, (3 + t93))
            }
            
          }
          (e75, (2 + t89))
        }
        
      } else {
        locally {
          val (e119: Node, t137: Int) = if ((e < t.value)) {
            locally {
              val (e121: Node, t139: Int) = locally {
                val (ir9: Tree, it9: Int) = locally {
                  val (e124: Tree, t143: Int) = avlDelete(t.left, e)
                  (e124, (1 + (1 + t143)))
                }
                
                locally {
                  val (r19: Node, t140: Int) = locally {
                    val (e129: Int, t148: Int) = locally {
                      val (e130: Int, t149: Int) = locally {
                        val (e132: Int, t151: Int) = locally {
                          val (e139: Int, t158: Int) = rank(ir9)
                          (e139, (1 + t158))
                        }
                        
                        locally {
                          val (e133: Int, t152: Int) = locally {
                            val (e136: Int, t155: Int) = rank(t.right)
                            (e136, (1 + (1 + t155)))
                          }
                          
                          locally {
                            val (e134: Int, t153: Int) = max(e132, e133)
                            (e134, (t152 + (t151 + (1 + t153))))
                          }
                          
                        }
                        
                      }
                      
                      ((e130 + 1), (t149 + 1))
                    }
                    
                    (Node(ir9, t.value, t.right, e129), (t148 + 3))
                  }
                  
                  (r19, (t140 + (it9 + 1)))
                }
                
              }
              
              (e121, (2 + t139))
            }
            
          } else {
            locally {
              val (e142: Node, t161: Int) = locally {
                val (ir10: Tree, it10: Int) = locally {
                  val (e145: Tree, t165: Int) = avlDelete(t.right, e)
                  (e145, (1 + (1 + t165)))
                }
                
                locally {
                  val (r20: Node, t162: Int) = locally {
                    val (e150: Int, t170: Int) = locally {
                      val (e151: Int, t171: Int) = locally {
                        val (e153: Int, t173: Int) = locally {
                          val (e159: Int, t179: Int) = rank(t.left)
                          (e159, (1 + (1 + t179)))
                        }
                        
                        locally {
                          val (e154: Int, t174: Int) = locally {
                            val (e157: Int, t177: Int) = rank(ir10)
                            (e157, (1 + t177))
                          }
                          
                          locally {
                            val (e155: Int, t175: Int) = max(e153, e154)
                            (e155, (t174 + (t173 + (1 + t175))))
                          }
                          
                        }
                        
                      }
                      
                      ((e151 + 1), (t171 + 1))
                    }
                    
                    (Node(t.left, t.value, ir10, e150), (t170 + 3))
                  }
                  
                  (r20, (t162 + (it10 + 1)))
                }
                
              }
              
              (e142, (2 + t161))
            }
            
          }
          (e119, (2 + t137))
        }
        
      }
      (e73, (1 + t87))
    }
    
  }}

  def rotateLeft(t : Tree) : (Tree, Int) = {if ((t.isInstanceOf[Node] && t.right.isInstanceOf[Node])) {
    locally {
      val (e171: Node, t191: Int) = locally {
        val (ir11: Int, it11: Int) = locally {
          val (e172: Int, t193: Int) = locally {
            val (e174: Int, t195: Int) = locally {
              val (e182: Int, t203: Int) = rank(t.left)
              (e182, (1 + (1 + t203)))
            }
            
            locally {
              val (e175: Int, t196: Int) = locally {
                val (e178: Int, t199: Int) = rank(t.right.left)
                (e178, (2 + (1 + t199)))
              }
              
              locally {
                val (e176: Int, t197: Int) = max(e174, e175)
                (e176, (t196 + (t195 + (1 + t197))))
              }
              
            }
            
          }
          
          ((e172 + 1), (t193 + 1))
        }
        
        locally {
          val (r21: Node, t192: Int) = locally {
            val (e187: Int, t208: Int) = locally {
              val (e188: Int, t209: Int) = locally {
                val (e191: Int, t212: Int) = locally {
                  val (e194: Int, t215: Int) = rank(t.right.right)
                  (e194, (2 + (1 + t215)))
                }
                
                locally {
                  val (e192: Int, t213: Int) = max(ir11, e191)
                  (e192, (t212 + (1 + t213)))
                }
                
              }
              
              ((e188 + 1), (t209 + 1))
            }
            
            (Node(Node(t.left, t.value, t.right.left, ir11), t.right.value, t.right.right, e187), (t208 + 10))
          }
          
          (r21, (t192 + (it11 + 1)))
        }
        
      }
      
      (e171, (4 + t191))
    }
    
  } else {
    (t, 4)
  }}

  def max(x : Int, y : Int) : Int = {if ((x >= y)) {
    x
  } else {
    y
  }}
}

Function: deleteMax template --> (res10._2 ≤ ((a?2 * height(t)) + b?2))
Function: avlDelete template --> (res11._2 ≤ ((a?3 * height(t)) + b?3))
Function: size template --> (height(t) ≤ ((a? * res12) + b?))
Function: avlInsert template --> (res9._2 ≤ ((a?1 * height(t)) + b?1))
[[34m Info  [0m] Running Invariant Inference Phase...
[[34m Info  [0m] Analysis Order: List(rotateRight, rotateLeft, balanceFactor, balance, height, avlInsert, unbalancedInsert, deleteMax, avlDelete, unbalancedDelete, rankHeight, size)
[[34m Info  [0m] - considering function avlInsert...
[[34m Info  [0m] Body: (let (e4,t13 := (let (e8,t17 := unbalancedInsert(t, e)) in
            (e8, (1 + t17)))) in
            (let (e5,t14 := balance(e4)) in
              (e5, (t13 + (1 + t14)))))
[[34m Info  [0m] Post: true
falttened Body: ((res9 == tp) && (arg == (t13 + (1 + t14))) && (tp == (e5, arg)) && (t14 == ts) && (ts == tres._2) && (tres1 == r28) && (r28 == unbalancedInsert(t, e)) && (t17 == ts1) && (ts1 == tres1._2) && (e4 == e8) && (tres == r29) && (r29 == balance(e4)) && (e5 == ts2) && (ts2 == tres._1) && (e8 == ts3) && (ts3 == tres1._1) && (t13 == (1 + t17)))
Flattened Post: ((ts4 > ((a?1 * r30) + b?1)) && (ts4 == res9._2) && (r30 == height(t)))
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.108s
2: solved... in 0.143s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 3/3
Unrolled calls: Set((r28 == unbalancedInsert(t, e)), (r29 == balance(e4)), (r30 == height(t)))
Creating VC for unbalancedInsert
[[34m Info  [0m] - Number of new terms enumerated: 3
[[34m Info  [0m] - Template generated for function unbalancedInsert : (((a?6 * e) + a?5) ≤ 0)
Unrolling (r28 == unbalancedInsert(t, e))
Inlining (r29 == balance(e4))
Creating VC for height
[[34m Info  [0m] - Number of new terms enumerated: 2
[[34m Info  [0m] - Template generated for function height : (((a?8 * #res) + a?7) ≤ 0)
Unrolling (r30 == height(t))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.053s
2: solved... in 0.013s
1: solved... in 0.041s
2: solved... in 0.008s
1: solved... in 0.04s
2: solved... in 0.008s
1: solved... in 0.023s
2: solved... in 0.007s
1: solved... in 0.021s
2: solved... in 0.007s
1: solved... in 0.028s
2: solved... in 0.007s
1: solved... in 0.028s
2: solved... in 0.009s
1: solved... in 0.029s
2: solved... in 0.007s
1: solved... in 0.028s
2: solved... in 0.007s
1: solved... in 0.03s
2: solved... in 0.008s
1: solved... in 0.025s
2: solved... in 0.007s
1: solved... in 0.029s
2: solved... in 0.009s
1: solved... in 0.028s
2: solved... in 0.008s
1: solved... in 0.023s
2: solved... in 0.007s
1: solved... in 0.023s
2: solved... in 0.009s
1: solved... in 0.027s
2: solved... in 0.007s
1: solved... in 0.022s
2: solved... in 0.007s
1: solved... in 0.016s
2: solved... in 0.007s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 35/35
Unrolled calls: Set((r46 == rank(cs18)), (r67 == height(cs38)), (r72 == max(r70, r71)), (r63 == max(e488, e487)), (r55 == rotateLeft(cs26)), (r56 == balanceFactor(cs30)), (r69 == max(r67, r68)), (r57 == rotateRight(e477)), (r37 == rank(ir19)), (r62 == rank(ir23)), (r59 == rank(cs31)), (r50 == avlInsert(cs23, e)), (r54 == max(e473, e472)), (r43 == rank(ir20)), (r58 == rank(ir22)), (r66 == balanceFactor(e4)), (r38 == avlInsert(cs11, e)), (r49 == max(e457, e456)), (r44 == avlInsert(cs17, e)), (r35 == avlInsert(cs5, e)), (r33 == rank(ir18)), (r65 == balanceFactor(cs37)), (r45 == max(e448, e447)), (r64 == rotateRight(cs35)), (r47 == rank(ir21)), (r60 == rotateLeft(e492)), (r36 == max(e428, e427)), (r61 == rank(cs34)), (r48 == rank(cs22)), (r70 == height(cs40)), (r40 == max(e437, e436)), (r68 == height(cs39)), (r71 == height(cs41)), (r34 == rank(cs4)), (r39 == rank(cs12)))
Unrolling (r35 == avlInsert(cs5, e))
Inlining (r60 == rotateLeft(e492))
Unrolling (r68 == height(cs39))
Inlining (r58 == rank(ir22))
Inlining (r45 == max(e448, e447))
Inlining (r66 == balanceFactor(e4))
Inlining (r61 == rank(cs34))
Inlining (r54 == max(e473, e472))
Inlining (r36 == max(e428, e427))
Inlining (r40 == max(e437, e436))
Unrolling (r38 == avlInsert(cs11, e))
Inlining (r57 == rotateRight(e477))
Inlining (r48 == rank(cs22))
Inlining (r47 == rank(ir21))
Inlining (r39 == rank(cs12))
Inlining (r65 == balanceFactor(cs37))
Inlining (r34 == rank(cs4))
Inlining (r43 == rank(ir20))
Inlining (r33 == rank(ir18))
Unrolling (r70 == height(cs40))
Unrolling (r50 == avlInsert(cs23, e))
Unrolling (r71 == height(cs41))
Unrolling (r44 == avlInsert(cs17, e))
Inlining (r49 == max(e457, e456))
Inlining (r69 == max(r67, r68))
Inlining (r46 == rank(cs18))
Inlining (r72 == max(r70, r71))
Unrolling (r67 == height(cs38))
Inlining (r59 == rank(cs31))
Inlining (r62 == rank(ir23))
Inlining (r56 == balanceFactor(cs30))
Inlining (r37 == rank(ir19))
Inlining (r63 == max(e488, e487))
Inlining (r55 == rotateLeft(cs26))
Inlining (r64 == rotateRight(cs35))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.06s
2: solved... in 0.007s
1: solved... in 0.061s
2: solved... in 0.008s
1: solved... in 0.055s
2: solved... in 0.007s
1: solved... in 0.061s
2: solved... in 0.007s
1: solved... in 0.056s
2: solved... in 0.008s
1: solved... in 0.054s
2: solved... in 0.008s
1: solved... in 0.056s
2: solved... in 0.008s
1: solved... in 0.057s
2: solved... in 0.008s
1: solved... in 0.05s
2: solved... in 0.008s
1: solved... in 0.055s
2: solved... in 0.007s
1: solved... in 0.057s
2: solved... in 0.008s
1: solved... in 0.056s
2: solved... in 0.009s
1: solved... in 0.05s
2: solved... in 0.01s
1: solved... in 0.053s
2: solved... in 0.009s
1: solved... in 0.052s
2: solved... in 0.01s
1: solved... in 0.053s
2: solved... in 0.01s
1: solved... in 0.058s
2: solved... in 0.009s
1: solved... in 0.052s
2: solved... in 0.01s
1: solved... in 0.05s
2: solved... in 0.009s
1: solved... in 0.058s
2: solved... in 0.009s
1: solved... in 0.051s
2: solved... in 0.009s
1: solved... in 0.047s
2: solved... in 0.01s
1: solved... in 0.054s
2: solved... in 0.012s
1: solved... in 0.047s
2: solved... in 0.01s
1: solved... in 0.052s
2: solved... in 0.011s
1: solved... in 0.049s
2: solved... in 0.012s
1: solved... in 0.047s
2: solved... in 0.01s
1: solved... in 0.052s
2: solved... in 0.01s
1: solved... in 0.055s
2: solved... in 0.01s
1: solved... in 0.052s
2: solved... in 0.01s
1: solved... in 0.052s
2: solved... in 0.01s
1: solved... in 0.05s
2: solved... in 0.011s
1: solved... in 0.047s
2: solved... in 0.017s
1: solved... in 0.058s
2: solved... in 0.011s
1: solved... in 0.049s
2: solved... in 0.013s
1: solved... in 0.051s
2: solved... in 0.012s
1: solved... in 0.062s
2: solved... in 0.013s
1: solved... in 0.053s
2: solved... in 0.012s
1: solved... in 0.052s
2: solved... in 0.017s
1: solved... in 0.051s
2: solved... in 0.012s
1: solved... in 0.053s
2: solved... in 0.014s
1: solved... in 0.052s
2: solved... in 0.011s
1: solved... in 0.051s
2: solved... in 0.012s
1: solved... in 0.052s
2: solved... in 0.017s
1: solved... in 0.055s
2: solved... in 0.014s
1: solved... in 0.055s
2: solved... in 0.014s
1: solved... in 0.051s
2: solved... in 0.016s
1: solved... in 0.065s
2: solved... in 0.013s
1: solved... in 0.054s
2: solved... in 0.013s
1: solved... in 0.052s
2: solved... in 0.014s
1: solved... in 0.055s
2: solved... in 0.015s
1: solved... in 0.053s
2: solved... in 0.013s
1: solved... in 0.052s
2: solved... in 0.015s
1: solved... in 0.046s
2: solved... in 0.014s
1: solved... in 0.047s
2: solved... in 0.018s
1: solved... in 0.047s
2: solved... in 0.017s
1: solved... in 0.054s
2: solved... in 0.016s
1: solved... in 0.046s
2: solved... in 0.026s
1: solved... in 0.054s
2: solved... in 0.015s
1: solved... in 0.055s
2: solved... in 0.018s
1: solved... in 0.046s
2: solved... in 0.017s
1: solved... in 0.057s
2: solved... in 0.015s
1: solved... in 0.052s
2: solved... in 0.015s
1: solved... in 0.052s
2: solved... in 0.016s
1: solved... in 0.055s
2: solved... in 0.016s
1: solved... in 0.051s
2: solved... in 0.023s
1: solved... in 0.047s
2: solved... in 0.016s
1: solved... in 0.052s
2: solved... in 0.018s
1: solved... in 0.051s
2: solved... in 0.019s
1: solved... in 0.055s
2: solved... in 0.017s
1: solved... in 0.053s
2: solved... in 0.02s
1: solved... in 0.047s
2: solved... in 0.021s
1: solved... in 0.047s
2: solved... in 0.019s
1: solved... in 0.046s
2: solved... in 0.016s
1: solved... in 0.054s
2: solved... in 0.024s
1: solved... in 0.057s
2: solved... in 0.016s
1: solved... in 0.05s
2: solved... in 0.021s
1: solved... in 0.046s
2: solved... in 0.016s
1: solved... in 0.066s
2: solved... in 0.019s
1: solved... in 0.05s
2: solved... in 0.017s
1: solved... in 0.052s
2: solved... in 0.018s
1: solved... in 0.053s
2: solved... in 0.021s
1: solved... in 0.053s
2: solved... in 0.018s
1: solved... in 0.052s
2: solved... in 0.019s
1: solved... in 0.051s
2: solved... in 0.025s
1: solved... in 0.052s
2: solved... in 0.024s
1: solved... in 0.049s
2: solved... in 0.022s
1: solved... in 0.046s
2: solved... in 0.027s
1: solved... in 0.049s
2: solved... in 0.022s
1: solved... in 0.052s
2: solved... in 0.02s
1: solved... in 0.052s
2: solved... in 0.02s
1: solved... in 0.051s
2: solved... in 0.03s
1: solved... in 0.052s
2: solved... in 0.018s
1: solved... in 0.055s
2: solved... in 0.019s
1: solved... in 0.052s
2: solved... in 0.024s
1: solved... in 0.065s
2: solved... in 0.019s
1: solved... in 0.051s
2: solved... in 0.031s
1: solved... in 0.052s
2: solved... in 0.026s
1: solved... in 0.056s
2: solved... in 0.019s
1: solved... in 0.055s
2: solved... in 0.021s
1: solved... in 0.047s
2: solved... in 0.02s
1: solved... in 0.055s
2: solved... in 0.026s
1: solved... in 0.046s
2: solved... in 0.024s
1: solved... in 0.053s
2: solved... in 0.025s
1: solved... in 0.051s
2: solved... in 0.021s
1: solved... in 0.054s
2: solved... in 0.022s
1: solved... in 0.053s
2: solved... in 0.024s
1: solved... in 0.052s
2: solved... in 0.024s
1: solved... in 0.054s
2: solved... in 0.021s
1: solved... in 0.055s
2: solved... in 0.022s
1: solved... in 0.053s
2: solved... in 0.023s
1: solved... in 0.051s
2: solved... in 0.022s
1: solved... in 0.051s
2: solved... in 0.022s
1: solved... in 0.055s
2: solved... in 0.024s
1: solved... in 0.055s
2: solved... in 0.03s
1: solved... in 0.047s
2: solved... in 0.021s
1: solved... in 0.054s
2: solved... in 0.024s
1: solved... in 0.051s
2: solved... in 0.026s
1: solved... in 0.051s
2: solved... in 0.023s
1: solved... in 0.053s
2: solved... in 0.03s
1: solved... in 0.051s
2: solved... in 0.032s
1: solved... in 0.047s
2: solved... in 0.024s
1: solved... in 0.051s
2: solved... in 0.029s
1: solved... in 0.053s
2: solved... in 0.027s
1: solved... in 0.058s
2: solved... in 0.035s
1: solved... in 0.053s
2: solved... in 0.03s
1: solved... in 0.047s
2: solved... in 0.027s
1: solved... in 0.055s
2: solved... in 0.031s
1: solved... in 0.052s
2: solved... in 0.024s
1: solved... in 0.055s
2: solved... in 0.029s
1: solved... in 0.054s
2: solved... in 0.056s
1: solved... in 0.053s
2: solved... in 0.038s
1: solved... in 0.051s
2: solved... in 0.024s
1: solved... in 0.054s
2: solved... in 0.028s
1: solved... in 0.06s
2: solved... in 0.025s
1: solved... in 0.05s
2: solved... in 0.025s
1: solved... in 0.046s
2: solved... in 0.029s
1: solved... in 0.049s
2: solved... in 0.03s
1: solved... in 0.047s
2: solved... in 0.028s
1: solved... in 0.049s
2: solved... in 0.026s
1: solved... in 0.06s
2: solved... in 0.036s
1: solved... in 0.049s
2: solved... in 0.031s
1: solved... in 0.048s
2: solved... in 0.034s
1: solved... in 0.048s
2: solved... in 0.032s
1: solved... in 0.052s
2: solved... in 0.026s
1: solved... in 0.053s
2: solved... in 0.031s
1: solved... in 0.057s
2: solved... in 0.03s
1: solved... in 0.052s
2: solved... in 0.027s
1: solved... in 0.055s
2: solved... in 0.031s
1: solved... in 0.052s
2: solved... in 0.033s
1: solved... in 0.052s
2: solved... in 0.026s
1: solved... in 0.057s
2: solved... in 0.027s
1: solved... in 0.055s
2: solved... in 0.026s
1: solved... in 0.054s
2: solved... in 0.034s
1: solved... in 0.053s
2: solved... in 0.03s
1: solved... in 0.055s
2: solved... in 0.032s
1: solved... in 0.051s
2: solved... in 0.032s
1: solved... in 0.052s
2: solved... in 0.03s
1: solved... in 0.055s
2: solved... in 0.032s
1: solved... in 0.066s
2: solved... in 0.024s
1: solved... in 0.066s
2: solved... in 0.049s
1: solved... in 0.052s
2: solved... in 0.029s
1: solved... in 0.069s
2: solved... in 0.042s
1: solved... in 0.067s
2: solved... in 0.036s
1: solved... in 0.052s
2: solved... in 0.046s
1: solved... in 0.048s
2: solved... in 0.036s
1: solved... in 0.056s
2: solved... in 0.032s
1: solved... in 0.054s
2: solved... in 0.031s
1: solved... in 0.069s
2: solved... in 0.05s
1: solved... in 0.06s
2: solved... in 0.027s
1: solved... in 0.049s
2: solved... in 0.036s
1: solved... in 0.047s
2: solved... in 0.032s
1: solved... in 0.069s
2: solved... in 0.034s
1: solved... in 0.051s
2: solved... in 0.037s
1: solved... in 0.052s
2: solved... in 0.044s
1: solved... in 0.058s
2: solved... in 0.034s
1: solved... in 0.056s
2: solved... in 0.041s
1: solved... in 0.047s
2: solved... in 0.048s
1: solved... in 0.048s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.037s
1: solved... in 0.047s
2: solved... in 0.029s
1: solved... in 0.069s
2: solved... in 0.036s
1: solved... in 0.049s
2: solved... in 0.038s
1: solved... in 0.05s
2: solved... in 0.035s
1: solved... in 0.049s
2: solved... in 0.038s
1: solved... in 0.049s
2: solved... in 0.035s
1: solved... in 0.06s
2: solved... in 0.033s
1: solved... in 0.056s
2: solved... in 0.038s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.035s
1: solved... in 0.047s
2: solved... in 0.036s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.051s
2: solved... in 0.038s
1: solved... in 0.047s
2: solved... in 0.039s
1: solved... in 0.047s
2: solved... in 0.051s
1: solved... in 0.067s
2: solved... in 0.034s
1: solved... in 0.056s
2: solved... in 0.037s
1: solved... in 0.046s
2: solved... in 0.039s
1: solved... in 0.057s
2: solved... in 0.043s
1: solved... in 0.046s
2: solved... in 0.04s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.035s
1: solved... in 0.056s
2: solved... in 0.041s
1: solved... in 0.047s
2: solved... in 0.039s
1: solved... in 0.047s
2: solved... in 0.037s
1: solved... in 0.047s
2: solved... in 0.037s
1: solved... in 0.047s
2: solved... in 0.034s
1: solved... in 0.067s
2: solved... in 0.033s
1: solved... in 0.07s
2: solved... in 0.039s
1: solved... in 0.046s
2: solved... in 0.031s
1: solved... in 0.067s
2: solved... in 0.033s
1: solved... in 0.072s
2: solved... in 0.034s
1: solved... in 0.067s
2: solved... in 0.033s
1: solved... in 0.057s
2: solved... in 0.041s
1: solved... in 0.067s
2: solved... in 0.031s
1: solved... in 0.066s
2: solved... in 0.038s
1: solved... in 0.056s
2: solved... in 0.039s
1: solved... in 0.069s
2: solved... in 0.041s
1: solved... in 0.069s
2: solved... in 0.048s
1: solved... in 0.047s
2: solved... in 0.037s
1: solved... in 0.046s
2: solved... in 0.062s
1: solved... in 0.048s
2: solved... in 0.036s
1: solved... in 0.056s
2: solved... in 0.034s
1: solved... in 0.069s
2: solved... in 0.05s
1: solved... in 0.047s
2: solved... in 0.055s
1: solved... in 0.047s
2: solved... in 0.049s
1: solved... in 0.047s
2: solved... in 0.05s
1: solved... in 0.049s
2: solved... in 0.04s
1: solved... in 0.071s
2: solved... in 0.04s
1: solved... in 0.059s
2: solved... in 0.081s
1: solved... in 0.052s
2: solved... in 0.04s
1: solved... in 0.07s
2: solved... in 0.052s
1: solved... in 0.047s
2: solved... in 0.052s
1: solved... in 0.047s
2: solved... in 0.042s
1: solved... in 0.07s
2: solved... in 0.04s
1: solved... in 0.058s
2: solved... in 0.047s
1: solved... in 0.057s
2: solved... in 0.047s
1: solved... in 0.047s
2: solved... in 0.039s
1: solved... in 0.058s
2: solved... in 0.039s
1: solved... in 0.058s
2: solved... in 0.05s
1: solved... in 0.047s
2: solved... in 0.058s
1: solved... in 0.046s
2: solved... in 0.06s
1: solved... in 0.047s
2: solved... in 0.038s
1: solved... in 0.046s
2: solved... in 0.064s
1: solved... in 0.047s
2: solved... in 0.055s
1: solved... in 0.049s
2: solved... in 0.057s
1: solved... in 0.047s
2: solved... in 0.046s
1: solved... in 0.047s
2: solved... in 0.059s
1: solved... in 0.047s
2: solved... in 0.056s
1: solved... in 0.047s
2: solved... in 0.064s
1: solved... in 0.047s
2: solved... in 0.053s
1: solved... in 0.047s
2: solved... in 0.054s
1: solved... in 0.047s
2: solved... in 0.044s
1: solved... in 0.047s
2: solved... in 0.044s
1: solved... in 0.047s
2: solved... in 0.07s
1: solved... in 0.05s
2: solved... in 0.054s
1: solved... in 0.047s
2: solved... in 0.064s
1: solved... in 0.047s
2: solved... in 0.049s
1: solved... in 0.047s
2: solved... in 0.055s
1: solved... in 0.047s
2: solved... in 0.066s
1: solved... in 0.046s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.067s
1: solved... in 0.05s
2: solved... in 0.052s
1: solved... in 0.047s
2: solved... in 0.056s
1: solved... in 0.047s
2: solved... in 0.06s
1: solved... in 0.047s
2: solved... in 0.071s
1: solved... in 0.049s
2: solved... in 0.051s
1: solved... in 0.047s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.051s
1: solved... in 0.048s
2: solved... in 0.055s
1: solved... in 0.047s
2: solved... in 0.071s
1: solved... in 0.048s
2: solved... in 0.073s
1: solved... in 0.047s
2: solved... in 0.062s
1: solved... in 0.047s
2: solved... in 0.062s
1: solved... in 0.047s
2: solved... in 0.052s
1: solved... in 0.047s
2: solved... in 0.063s
1: solved... in 0.053s
2: solved... in 0.041s
1: solved... in 0.048s
2: solved... in 0.059s
1: solved... in 0.047s
2: solved... in 0.051s
1: solved... in 0.048s
2: solved... in 0.041s
1: solved... in 0.047s
2: solved... in 0.077s
1: solved... in 0.048s
2: solved... in 0.057s
1: solved... in 0.048s
2: solved... in 0.046s
1: solved... in 0.05s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.066s
1: solved... in 0.047s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.062s
1: solved... in 0.047s
2: solved... in 0.05s
1: solved... in 0.047s
2: solved... in 0.054s
1: solved... in 0.048s
2: solved... in 0.053s
1: solved... in 0.047s
2: solved... in 0.048s
1: solved... in 0.047s
2: solved... in 0.049s
1: solved... in 0.048s
2: solved... in 0.049s
1: solved... in 0.047s
2: solved... in 0.064s
1: solved... in 0.057s
2: solved... in 0.068s
1: solved... in 0.047s
2: solved... in 0.057s
1: solved... in 0.048s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.055s
1: solved... in 0.047s
2: solved... in 0.05s
1: solved... in 0.048s
2: solved... in 0.136s
1: solved... in 0.047s
2: solved... in 0.069s
1: solved... in 0.047s
2: solved... in 0.056s
1: solved... in 0.047s
2: solved... in 0.058s
1: solved... in 0.048s
2: solved... in 0.056s
1: solved... in 0.046s
2: solved... in 0.071s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.047s
2: solved... in 0.063s
1: solved... in 0.047s
2: solved... in 0.064s
1: solved... in 0.047s
2: solved... in 0.075s
1: solved... in 0.047s
2: solved... in 0.059s
1: solved... in 0.049s
2: solved... in 0.059s
1: solved... in 0.047s
2: solved... in 0.043s
1: solved... in 0.048s
2: solved... in 0.057s
1: solved... in 0.048s
2: solved... in 0.057s
1: solved... in 0.047s
2: solved... in 0.057s
1: solved... in 0.047s
2: solved... in 0.042s
1: solved... in 0.051s
2: solved... in 0.053s
1: solved... in 0.053s
2: solved... in 0.109s
1: solved... in 0.047s
2: solved... in 0.046s
1: solved... in 0.047s
2: solved... in 0.054s
1: solved... in 0.047s
2: solved... in 0.053s
1: solved... in 0.048s
2: solved... in 0.055s
1: solved... in 0.047s
2: solved... in 0.056s
1: solved... in 0.047s
2: solved... in 0.059s
1: solved... in 0.048s
2: solved... in 0.057s
1: solved... in 0.047s
2: solved... in 0.07s
1: solved... in 0.047s
2: solved... in 0.072s
1: solved... in 0.048s
2: solved... in 0.063s
1: solved... in 0.049s
2: solved... in 0.064s
1: solved... in 0.047s
2: solved... in 0.094s
1: solved... in 0.047s
2: solved... in 0.087s
1: solved... in 0.047s
2: solved... in 0.068s
1: solved... in 0.047s
2: solved... in 0.067s
1: solved... in 0.047s
2: solved... in 0.067s
1: solved... in 0.047s
2: solved... in 0.072s
1: solved... in 0.05s
2: solved... in 0.07s
1: solved... in 0.047s
2: solved... in 0.065s
1: solved... in 0.047s
2: solved... in 0.056s
1: solved... in 0.048s
2: solved... in 0.077s
1: solved... in 0.049s
2: solved... in 0.077s
1: solved... in 0.047s
2: solved... in 0.084s
1: solved... in 0.047s
2: solved... in 0.118s
1: solved... in 0.047s
2: solved... in 0.119s
1: solved... in 0.048s
2: solved... in 0.116s
1: solved... in 0.048s
2: solved... in 0.117s
1: solved... in 0.047s
2: solved... in 0.089s
1: solved... in 0.047s
2: solved... in 0.05s
1: solved... in 0.054s
2: solved... in 0.077s
1: solved... in 0.048s
2: solved... in 0.062s
1: solved... in 0.047s
2: solved... in 0.057s
1: solved... in 0.047s
2: solved... in 0.069s
1: solved... in 0.047s
2: solved... in 0.07s
1: solved... in 0.047s
2: solved... in 0.096s
1: solved... in 0.049s
2: solved... in 0.067s
1: solved... in 0.047s
2: solved... in 0.068s
1: solved... in 0.047s
2: solved... in 0.062s
1: solved... in 0.047s
2: solved... in 0.092s
[[34m Info  [0m] - More unrollings for invariant inference
Unrolling: 50/50
Unrolled calls: Set((r86 == balance(e518)), (r96 == height(cs86)), (r109 == rank(cs95)), (r73 == balance(e498)), (r93 == max(e523, e522)), (r121 == rank(cs126)), (r105 == unbalancedInsert(cs17, e)), (r118 == rank(cs114)), (r116 == max(e551, e550)), (r98 == max(r96, r97)), (r97 == height(cs87)), (r103 == max(r101, r102)), (r76 == rank(cs44)), (r108 == max(r106, r107)), (r81 == height(cs57)), (r91 == rank(cs66)), (r99 == balance(e538)), (r78 == rank(cs46)), (r77 == max(e503, e502)), (r113 == rank(cs101)), (r84 == rank(cs60)), (r95 == rank(cs82)), (r83 == max(r81, r82)), (r104 == balance(e541)), (r74 == unbalancedInsert(cs5, e)), (r85 == rank(cs61)), (r92 == rank(cs68)), (r87 == unbalancedInsert(cs11, e)), (r125 == height(cs23)), (r126 == height(cs17)), (r123 == height(cs5)), (r124 == height(cs11)), (r100 == unbalancedInsert(cs23, e)), (r79 == max(ir25, e507)), (r107 == height(cs92)), (r102 == height(cs89)), (r94 == rank(cs81)), (r115 == rank(cs111)), (r80 == rank(cs47)), (r119 == max(e563, e562)), (r90 == max(e527, ir26)), (r120 == rank(cs124)), (r101 == height(cs88)), (r106 == height(cs91)), (r112 == rank(cs100)), (r122 == max(e567, ir28)), (r110 == rank(cs96)), (r89 == rank(cs64)), (r82 == height(cs58)), (r114 == max(ir27, e555)))
Inlining (r108 == max(r106, r107))
Inlining (r122 == max(e567, ir28))
Inlining (r116 == max(e551, e550))
Inlining (r93 == max(e523, e522))
Inlining (r90 == max(e527, ir26))
Inlining (r79 == max(ir25, e507))
Inlining (r115 == rank(cs111))
Inlining (r78 == rank(cs46))
Inlining (r112 == rank(cs100))
Unrolling (r100 == unbalancedInsert(cs23, e))
Inlining (r120 == rank(cs124))
Inlining (r110 == rank(cs96))
Inlining (r73 == balance(e498))
Inlining (r95 == rank(cs82))
Unrolling (r126 == height(cs17))
Inlining (r114 == max(ir27, e555))
Inlining (r84 == rank(cs60))
Unrolling (r105 == unbalancedInsert(cs17, e))
Inlining (r83 == max(r81, r82))
Inlining (r103 == max(r101, r102))
Inlining (r98 == max(r96, r97))
Unrolling (r74 == unbalancedInsert(cs5, e))
Unrolling (r87 == unbalancedInsert(cs11, e))
Unrolling (r123 == height(cs5))
Unrolling (r125 == height(cs23))
Inlining (r91 == rank(cs66))
Inlining (r118 == rank(cs114))
Unrolling (r124 == height(cs11))
Inlining (r85 == rank(cs61))
Inlining (r119 == max(e563, e562))
Inlining (r109 == rank(cs95))
Inlining (r80 == rank(cs47))
Inlining (r104 == balance(e541))
Inlining (r121 == rank(cs126))
Inlining (r99 == balance(e538))
Inlining (r89 == rank(cs64))
Inlining (r113 == rank(cs101))
Inlining (r94 == rank(cs81))
Inlining (r77 == max(e503, e502))
Inlining (r92 == rank(cs68))
Inlining (r86 == balance(e518))
Inlining (r76 == rank(cs44))
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
[[34m Info  [0m] Number of axiom instances: 0
1: solved... in 0.133s
2: solved... in 0.007s
1: solved... in 0.185s
2: solved... in 0.006s
1: solved... in 0.157s
2: solved... in 0.007s
1: solved... in 0.167s
2: solved... in 0.007s
1: solved... in 0.176s
2: solved... in 0.006s
1: solved... in 0.152s
2: solved... in 0.007s
1: solved... in 0.152s
2: solved... in 0.007s
1: solved... in 0.152s
2: solved... in 0.007s
1: solved... in 0.152s
2: solved... in 0.008s
1: solved... in 0.135s
2: solved... in 0.007s
1: solved... in 0.158s
2: solved... in 0.007s
1: solved... in 0.152s
2: solved... in 0.008s
1: solved... in 0.151s
2: solved... in 0.008s
1: solved... in 0.154s
2: solved... in 0.008s
1: solved... in 0.153s
2: solved... in 0.008s
1: solved... in 0.156s
2: solved... in 0.008s
1: solved... in 0.16s
2: solved... in 0.008s
1: solved... in 0.109s
2: solved... in 0.008s
1: solved... in 0.157s
2: solved... in 0.008s
1: solved... in 0.158s
2: solved... in 0.009s
1: solved... in 0.159s
2: solved... in 0.008s
1: solved... in 0.156s
2: solved... in 0.008s
1: solved... in 0.179s
2: solved... in 0.008s
1: solved... in 0.152s
2: solved... in 0.008s
1: solved... in 0.153s
2: solved... in 0.008s
1: solved... in 0.152s
2: solved... in 0.009s
1: solved... in 0.148s
2: solved... in 0.01s
1: solved... in 0.154s
2: solved... in 0.01s
1: solved... in 0.156s
2: solved... in 0.009s
1: solved... in 0.158s
2: solved... in 0.01s
1: solved... in 0.152s
2: solved... in 0.009s
1: solved... in 0.157s
2: solved... in 0.01s
1: solved... in 0.16s
2: solved... in 0.013s
1: solved... in 0.154s
2: solved... in 0.009s
1: solved... in 0.175s
2: solved... in 0.009s
1: solved... in 0.17s
2: solved... in 0.01s
1: solved... in 0.165s
2: solved... in 0.01s
1: solved... in 0.173s
2: solved... in 0.01s
1: solved... in 0.176s
2: solved... in 0.01s
1: solved... in 0.133s
2: solved... in 0.01s
1: solved... in 0.177s
2: solved... in 0.012s
1: solved... in 0.164s
2: solved... in 0.014s
1: solved... in 0.133s
2: solved... in 0.012s
1: solved... in 0.148s
2: solved... in 0.013s
1: solved... in 0.152s
2: solved... in 0.011s
1: solved... in 0.159s
2: solved... in 0.013s
1: solved... in 0.154s
2: solved... in 0.012s
1: solved... in 0.132s
2: solved... in 0.013s
1: solved... in 0.134s
2: solved... in 0.014s
1: solved... in 0.156s
2: solved... in 0.013s
1: solved... in 0.146s
2: solved... in 0.018s
1: solved... in 0.108s
2: solved... in 0.016s
1: solved... in 0.154s
2: solved... in 0.015s
1: solved... in 0.132s
2: solved... in 0.015s
1: solved... in 0.133s
2: solved... in 0.015s
1: solved... in 0.161s
2: solved... in 0.02s
1: solved... in 0.183s
2: solved... in 0.016s
1: solved... in 0.131s
2: solved... in 0.016s
1: solved... in 0.133s
2: solved... in 0.014s
1: solved... in 0.154s
2: solved... in 0.015s
1: solved... in 0.154s
2: solved... in 0.021s
1: solved... in 0.14s
2: solved... in 0.015s
1: solved... in 0.11s
2: solved... in 0.017s
1: solved... in 0.154s
2: solved... in 0.015s
1: solved... in 0.178s
2: solved... in 0.02s
1: solved... in 0.141s
2: solved... in 0.02s
1: solved... in 0.153s
2: solved... in 0.017s
1: solved... in 0.157s
2: solved... in 0.021s
1: solved... in 0.157s
2: solved... in 0.017s
1: solved... in 0.153s
2: solved... in 0.024s
1: solved... in 0.11s
2: solved... in 0.017s
1: solved... in 0.153s
2: solved... in 0.024s
1: solved... in 0.176s
2: solved... in 0.026s
1: solved... in 0.175s
2: solved... in 0.021s
1: solved... in 0.158s
2: solved... in 0.018s
1: solved... in 0.143s
2: solved... in 0.018s
1: solved... in 0.176s
2: solved... in 0.019s
1: solved... in 0.14s
2: solved... in 0.019s
1: solved... in 0.152s
2: solved... in 0.028s
1: solved... in 0.132s
2: solved... in 0.031s
1: solved... in 0.18s
2: solved... in 0.029s
1: solved... in 0.177s
2: solved... in 0.025s
1: solved... in 0.179s
2: solved... in 0.021s
1: solved... in 0.153s
2: solved... in 0.022s
1: solved... in 0.172s
2: solved... in 0.023s
1: solved... in 0.14s
2: solved... in 0.027s
1: solved... in 0.152s
2: solved... in 0.025s
1: solved... in 0.152s
2: solved... in 0.027s
1: solved... in 0.147s
2: solved... in 0.026s
1: solved... in 0.158s
2: solved... in 0.023s
1: solved... in 0.143s
2: solved... in 0.032s
1: solved... in 0.175s
2: solved... in 0.022s
1: solved... in 0.153s
2: solved... in 0.025s
1: solved... in 0.153s
2: solved... in 0.025s
1: solved... in 0.175s
2: solved... in 0.029s
1: solved... in 0.142s
2: solved... in 0.034s
1: solved... in 0.178s
2: solved... in 0.029s
1: solved... in 0.179s
2: solved... in 0.026s
1: solved... in 0.144s
2: solved... in 0.031s
1: solved... in 0.157s
2: solved... in 0.03s
1: solved... in 0.144s
2: solved... in 0.028s
1: solved... in 0.141s
2: solved... in 0.03s
1: solved... in 0.144s
2: solved... in 0.03s
1: solved... in 0.142s
2: solved... in 0.021s
1: solved... in 0.173s
2: solved... in 0.031s
1: solved... in 0.141s
2: solved... in 0.027s
1: solved... in 0.133s
2: solved... in 0.028s
1: solved... in 0.162s
2: solved... in 0.027s
1: solved... in 0.154s
2: solved... in 0.03s
1: solved... in 0.158s
2: solved... in 0.046s
1: solved... in 0.109s
2: solved... in 0.034s
1: solved... in 0.14s
2: solved... in 0.045s
1: solved... in 0.133s
2: solved... in 0.028s
1: solved... in 0.152s
2: solved... in 0.029s
1: solved... in 0.154s
2: solved... in 0.032s
1: solved... in 0.156s
2: solved... in 0.032s
1: solved... in 0.142s
2: solved... in 0.024s
1: solved... in 0.176s
2: solved... in 0.037s
1: solved... in 0.157s
2: solved... in 0.03s
1: solved... in 0.156s
2: solved... in 0.025s
1: solved... in 0.174s
2: solved... in 0.037s
1: solved... in 0.184s
2: solved... in 0.034s
1: solved... in 0.132s
2: solved... in 0.036s
1: solved... in 0.135s
2: solved... in 0.042s
1: solved... in 0.145s
2: solved... in 0.029s
1: solved... in 0.134s
2: solved... in 0.045s
1: solved... in 0.14s
2: solved... in 0.032s
1: solved... in 0.134s
2: solved... in 0.036s
1: solved... in 0.14s
2: solved... in 0.033s
1: solved... in 0.154s
2: solved... in 0.041s
1: solved... in 0.177s
2: solved... in 0.04s
1: solved... in 0.115s
2: solved... in 0.042s
1: solved... in 0.143s
2: solved... in 0.038s
1: solved... in 0.151s
2: solved... in 0.033s
1: solved... in 0.153s
2: solved... in 0.042s
1: solved... in 0.14s
2: solved... in 0.036s
1: solved... in 0.175s
2: solved... in 0.031s
1: solved... in 0.176s
2: solved... in 0.045s
1: solved... in 0.11s
2: solved... in 0.036s
1: solved... in 0.136s
2: solved... in 0.038s
1: solved... in 0.135s
2: solved... in 0.04s
1: solved... in 0.108s
2: solved... in 0.042s
1: solved... in 0.152s
2: solved... in 0.046s
1: solved... in 0.178s
2: solved... in 0.036s
1: solved... in 0.174s
2: solved... in 0.039s
1: solved... in 0.152s
2: solved... in 0.042s
1: solved... in 0.134s
2: solved... in 0.042s
1: solved... in 0.16s
2: solved... in 0.046s
1: solved... in 0.141s
2: solved... in 0.04s
1: solved... in 0.142s
2: solved... in 0.039s
1: solved... in 0.14s
2: solved... in 0.048s
1: solved... in 0.141s
2: solved... in 0.041s
1: solved... in 0.141s
2: solved... in 0.048s
1: solved... in 0.175s
2: solved... in 0.05s
1: solved... in 0.178s
2: solved... in 0.041s
1: solved... in 0.151s
2: solved... in 0.04s
1: solved... in 0.151s
2: solved... in 0.041s
1: solved... in 0.111s
2: solved... in 0.031s
1: solved... in 0.183s
2: solved... in 0.047s
1: solved... in 0.132s
2: solved... in 0.054s
1: solved... in 0.109s
2: solved... in 0.047s
1: solved... in 0.141s
2: solved... in 0.045s
1: solved... in 0.174s
2: solved... in 0.064s
1: solved... in 0.109s
2: solved... in 0.065s
1: solved... in 0.109s
2: solved... in 0.066s
1: solved... in 0.112s
2: solved... in 0.043s
1: solved... in 0.156s
2: solved... in 0.068s
1: solved... in 0.108s
2: solved... in 0.065s
1: solved... in 0.109s
2: solved... in 0.068s
1: solved... in 0.109s
2: solved... in 0.046s
1: solved... in 0.175s
2: solved... in 0.041s
1: solved... in 0.14s
2: solved... in 0.049s
1: solved... in 0.14s
2: solved... in 0.042s
1: solved... in 0.109s
2: solved... in 0.044s
1: solved... in 0.113s
2: solved... in 0.044s
1: solved... in 0.11s
2: solved... in 0.047s
1: solved... in 0.138s
2: solved... in 0.052s
1: solved... in 0.14s
2: solved... in 0.056s
1: solved... in 0.142s
2: solved... in 0.054s
1: solved... in 0.175s
2: solved... in 0.053s
1: solved... in 0.139s
2: solved... in 0.053s
1: solved... in 0.176s
2: solved... in 0.052s
1: solved... in 0.178s
2: solved... in 0.041s
1: solved... in 0.111s
2: solved... in 0.04s
1: solved... in 0.178s
2: solved... in 0.035s
1: solved... in 0.174s
2: solved... in 0.055s
1: solved... in 0.141s
2: solved... in 0.043s
1: solved... in 0.174s
2: solved... in 0.046s
1: solved... in 0.152s
2: solved... in 0.046s
1: solved... in 0.175s
2: solved... in 0.068s
1: solved... in 0.109s
2: solved... in 0.046s
1: solved... in 0.155s
2: solved... in 0.055s
1: solved... in 0.136s
2: solved... in 0.043s
1: solved... in 0.155s
2: solved... in 0.043s
1: solved... in 0.152s
2: solved... in 0.075s
1: solved... in 0.141s
2: solved... in 0.039s
1: solved... in 0.174s
2: solved... in 0.046s
1: solved... in 0.141s
2: solved... in 0.057s
1: solved... in 0.111s
2: solved... in 0.07s
1: solved... in 0.109s
2: solved... in 0.044s
1: solved... in 0.112s
2: solved... in 0.045s
1: solved... in 0.109s
2: solved... in 0.039s
1: solved... in 0.174s
2: solved... in 0.041s
1: solved... in 0.173s
2: solved... in 0.051s
1: solved... in 0.176s
2: solved... in 0.043s
1: solved... in 0.109s
2: solved... in 0.046s
1: solved... in 0.11s
2: solved... in 0.046s
1: solved... in 0.111s
2: solved... in 0.041s
1: solved... in 0.11s
2: solved... in 0.043s
1: solved... in 0.108s
2: solved... in 0.054s
1: solved... in 0.141s
2: solved... in 0.045s
1: solved... in 0.133s
2: solved... in 0.068s
1: solved... in 0.147s
2: solved... in 0.04s
1: solved... in 0.157s
2: solved... in 0.067s
1: solved... in 0.129s
2: solved... in 0.067s
1: solved... in 0.12s
2: solved... in 0.05s
1: solved... in 0.109s
2: solved... in 0.086s
1: solved... in 0.135s
2: solved... in 0.047s
1: solved... in 0.133s
2: solved... in 0.051s
1: solved... in 0.132s
2: solved... in 0.048s
1: solved... in 0.141s
2: solved... in 0.058s
1: solved... in 0.131s
2: solved... in 0.04s
1: solved... in 0.144s
2: solved... in 0.056s
1: solved... in 0.158s
2: solved... in 0.065s
1: solved... in 0.152s
2: solved... in 0.06s
1: solved... in 0.109s
2: solved... in 0.047s
1: solved... in 0.175s
2: solved... in 0.049s
1: solved... in 0.153s
2: solved... in 0.053s
1: solved... in 0.141s
2: solved... in 0.053s
1: solved... in 0.132s
2: solved... in 0.049s
1: solved... in 0.136s
2: solved... in 0.044s
1: solved... in 0.16s
2: solved... in 0.058s
1: solved... in 0.144s
2: solved... in 0.051s
1: solved... in 0.174s
2: solved... in 0.063s
1: solved... in 0.154s
2: solved... in 0.056s
1: solved... in 0.116s
2: solved... in 0.066s
1: solved... in 0.109s
2: solved... in 0.055s
1: solved... in 0.163s
2: solved... in 0.057s
1: solved... in 0.14s
2: solved... in 0.065s
1: solved... in 0.152s
2: solved... in 0.046s
1: solved... in 0.157s
2: solved... in 0.059s
1: solved... in 0.152s
2: solved... in 0.059s
1: solved... in 0.154s
2: solved... in 0.055s
1: solved... in 0.143s
2: solved... in 0.063s
1: solved... in 0.155s
2: solved... in 0.05s
1: solved... in 0.126s
2: solved... in 0.066s
1: solved... in 0.198s
2: solved... in 0.067s
1: solved... in 0.133s
2: solved... in 0.045s
1: solved... in 0.152s
2: solved... in 0.044s
1: solved... in 0.151s
2: solved... in 0.045s
1: solved... in 0.153s
2: solved... in 0.05s
1: solved... in 0.152s
2: solved... in 0.064s
1: solved... in 0.133s
2: solved... in 0.059s
1: solved... in 0.144s
2: solved... in 0.083s
1: solved... in 0.112s
2: solved... in 0.075s
1: solved... in 0.131s
2: solved... in 0.062s
1: solved... in 0.152s
2: solved... in 0.05s
1: solved... in 0.154s
2: solved... in 0.062s
1: solved... in 0.153s
2: solved... in 0.052s
1: solved... in 0.134s
2: solved... in 0.052s
1: solved... in 0.133s
2: solved... in 0.052s
1: solved... in 0.156s
2: solved... in 0.07s
1: solved... in 0.153s
2: solved... in 0.068s
1: solved... in 0.141s
2: solved... in 0.064s
1: solved... in 0.139s
2: solved... in 0.06s
1: solved... in 0.129s
2: solved... in 0.116s
1: solved... in 0.144s
2: solved... in 0.062s
1: solved... in 0.155s
2: solved... in 0.076s
1: solved... in 0.153s
2: solved... in 0.094s
1: solved... in 0.14s
2: solved... in 0.061s
1: solved... in 0.153s
2: solved... in 0.061s
1: solved... in 0.152s
2: solved... in 0.117s
1: solved... in 0.132s
2: solved... in 0.074s
1: solved... in 0.14s
2: solved... in 0.071s
1: solved... in 0.165s
2: solved... in 0.067s
1: solved... in 0.12s
2: solved... in 0.065s
1: solved... in 0.148s
2: solved... in 0.084s
1: solved... in 0.14s
2: solved... in 0.064s
1: solved... in 0.138s
2: solved... in 0.086s
1: solved... in 0.113s
2: solved... in 0.082s
1: solved... in 0.144s
2: solved... in 0.077s
1: solved... in 0.134s
2: solved... in 0.085s
1: solved... in 0.141s
2: solved... in 0.083s
1: solved... in 0.141s
2: solved... in 0.082s
1: solved... in 0.109s
2: solved... in 0.069s
1: solved... in 0.141s
2: solved... in 0.127s
1: solved... in 0.13s
2: solved... in 0.083s
1: solved... in 0.124s
2: solved... in 0.072s
1: solved... in 0.137s
2: solved... in 0.074s
1: solved... in 0.132s
2: solved... in 0.093s
1: solved... in 0.11s
2: solved... in 0.072s
1: solved... in 0.156s
2: solved... in 0.094s
1: solved... in 0.112s
2: solved... in 0.081s
1: solved... in 0.111s
2: solved... in 0.055s
1: solved... in 0.151s
2: solved... in 0.124s
1: solved... in 0.108s
2: solved... in 0.088s
1: solved... in 0.141s
2: solved... in 0.136s
1: solved... in 0.109s
2: solved... in 0.14s
1: solved... in 0.108s
2: solved... in 0.139s
1: solved... in 0.109s
2: solved... in 0.14s
1: solved... in 0.111s
2: solved... in 0.141s
1: solved... in 0.108s
2: solved... in 0.089s
1: solved... in 0.198s
2: solved... in 0.073s
1: solved... in 0.141s
2: solved... in 0.124s
1: solved... in 0.108s
2: solved... in 0.107s
1: solved... in 0.126s
2: solved... in 0.052s
1: solved... in 0.153s
2: solved... in 0.071s
1: solved... in 0.158s
2: solved... in 0.15s
1: solved... in 0.111s
2: solved... in 0.078s
1: solved... in 0.109s
2: solved... in 0.08s
1: solved... in 0.109s
2: solved... in 0.114s
1: solved... in 0.109s
2: solved... in 0.104s
1: solved... in 0.109s
2: solved... in 0.121s
1: solved... in 0.108s
2: solved... in 0.099s
1: solved... in 0.109s
2: solved... in 0.073s
1: solved... in 0.136s
2: solved... in 0.075s
1: solved... in 0.14s
2: solved... in 0.071s
1: solved... in 0.114s
2: solved... in 0.142s
1: solved... in 0.121s
2: solved... in 0.076s
1: solved... in 0.15s
2: solved... in 0.072s
1: solved... in 0.15s
2: solved... in 0.076s
1: solved... in 0.144s
2: solved... in 0.1s
1: solved... in 0.143s
2: solved... in 0.099s
1: solved... in 0.148s
2: solved... in 0.068s
1: solved... in 0.151s
2: solved... in 0.056s
1: solved... in 0.152s
2: solved... in 0.093s
1: solved... in 0.134s
2: solved... in 0.121s
1: solved... in 0.108s
2: solved... in 0.091s
1: solved... in 0.143s
2: solved... in 0.062s
1: solved... in 0.125s
2: solved... in 0.091s
1: solved... in 0.136s
2: solved... in 0.064s
1: solved... in 0.131s
2: solved... in 0.067s
1: solved... in 0.135s
2: solved... in 0.101s
1: solved... in 0.133s
2: solved... in 0.12s
1: solved... in 0.134s
2: solved... in 0.086s
1: solved... in 0.144s
2: solved... in 0.119s
1: solved... in 0.112s
2: solved... in 0.058s
1: solved... in 0.151s
2: solved... in 0.074s
1: solved... in 0.155s
2: solved... in 0.064s
1: solved... in 0.152s
2: solved... in 0.086s
1: solved... in 0.2s
2: solved... in 0.073s
1: solved... in 0.152s
2: solved... in 0.075s
1: solved... in 0.109s
2: solved... in 0.078s
1: solved... in 0.108s
2: solved... in 0.139s
1: solved... in 0.109s
2: solved... in 0.094s
1: solved... in 0.136s
2: solved... in 0.119s
1: solved... in 0.131s
2: solved... in 0.091s
1: solved... in 0.107s
2: solved... in 0.079s
1: solved... in 0.13s
2: solved... in 0.064s
1: solved... in 0.152s
2: solved... in 0.093s
1: solved... in 0.143s
2: solved... in 0.073s
1: solved... in 0.134s
2: solved... in 0.081s
1: solved... in 0.124s
2: solved... in 0.093s
1: solved... in 0.124s
2: solved... in 0.085s
1: solved... in 0.107s
2: solved... in 0.08s
1: solved... in 0.123s
2: solved... in 0.084s
1: solved... in 0.108s
2: solved... in 0.086s
1: solved... in 0.141s
2: solved... in 0.109s
1: solved... in 0.131s
2: solved... in 0.087s
1: solved... in 0.131s
2: solved... in 0.119s
1: solved... in 0.141s
2: solved... in 0.106s
1: solved... in 0.108s
2: solved... in 0.148s
1: solved... in 0.107s
2: solved... in 0.113s
1: solved... in 0.135s
2: solved... in 0.115s
1: solved... in 0.111s
2: solved... in 0.1s
1: solved... in 0.113s
2: solved... in 0.118s
1: solved... in 0.14s
2: solved... in 0.094s
1: solved... in 0.126s
2: solved... in 0.083s
1: solved... in 0.111s
2: solved... in 0.1s
1: solved... in 0.116s
2: solved... in 0.066s
1: solved... in 0.137s
2: solved... in 0.172s
1: solved... in 0.115s
2: solved... in 0.108s
1: solved... in 0.143s
2: solved... in 0.098s
1: solved... in 0.148s
2: solved... in 0.089s
1: solved... in 0.143s
2: solved... in 0.097s
1: solved... in 0.153s
2: solved... in 0.073s
1: solved... in 0.157s
2: solved... in 0.09s
1: solved... in 0.2s
2: solved... in 0.065s
1: solved... in 0.133s
2: solved... in 0.097s
1: solved... in 0.131s
2: solved... in 0.073s
1: solved... in 0.142s
2: solved... in 0.074s
1: solved... in 0.154s
2: solved... in 0.127s
1: solved... in 0.133s
2: solved... in 0.085s
1: solved... in 0.109s
2: solved... in 0.164s
1: solved... in 0.109s
2: solved... in 0.08s
1: solved... in 0.174s
2: solved... in 0.077s
1: solved... in 0.152s
2: solved... in 0.092s
1: solved... in 0.133s
2: solved... in 0.089s
1: solved... in 0.108s
2: solved... in 0.072s
1: solved... in 0.143s
2: solved... in 0.073s
1: solved... in 0.132s
2: solved... in 0.077s
1: solved... in 0.133s
2: solved... in 0.096s
1: solved... in 0.152s
2: solved... in 0.07s
1: solved... in 0.143s
2: solved... in 0.097s
1: solved... in 0.174s
2: solved... in 0.14s
1: solved... in 0.109s
2: solved... in 0.144s
1: solved... in 0.136s
2: solved... in 0.093s
1: solved... in 0.142s
2: solved... in 0.115s
1: solved... in 0.108s
2: solved... in 0.117s
1: solved... in 0.108s
2: solved... in 0.119s
1: solved... in 0.108s
2: solved... in 0.131s
1: solved... in 0.108s
2: solved... in 0.116s
1: solved... in 0.108s
2: solved... in 0.12s
1: solved... in 0.108s
2: solved... in 0.105s
1: solved... in 0.108s
2: solved... in 0.114s
1: solved... in 0.131s
2: solved... in 0.111s
1: solved... in 0.131s
2: solved... in 0.094s
1: solved... in 0.171s
2: solved... in 0.082s
1: solved... in 0.142s
2: solved... in 0.081s
1: solved... in 0.141s
2: solved... in 0.096s
1: solved... in 0.143s
2: solved... in 0.115s
1: solved... in 0.143s
2: solved... in 0.103s
1: solved... in 0.151s
2: solved... in 0.091s
1: solved... in 0.142s
2: solved... in 0.073s
1: solved... in 0.15s
2: solved... in 0.073s
1: solved... in 0.151s
2: solved... in 0.068s
1: solved... in 0.157s
2: solved... in 0.107s
1: solved... in 0.151s
2: solved... in 0.111s
1: solved... in 0.131s
2: solved... in 0.09s
1: solved... in 0.137s
2: solved... in 0.142s
1: solved... in 0.135s
2: solved... in 0.11s
1: solved... in 0.134s
2: solved... in 0.105s
1: solved... in 0.109s
2: solved... in 0.104s
1: solved... in 0.117s
2: solved... in 0.095s
1: solved... in 0.111s
2: solved... in 0.094s
1: solved... in 0.111s
2: solved... in 0.133s
1: solved... in 0.182s
2: solved... in 0.102s
1: solved... in 0.14s
2: solved... in 0.095s
1: solved... in 0.132s
2: solved... in 0.097s
1: solved... in 0.199s
2: solved... in 0.072s
1: solved... in 0.158s
2: solved... in 0.086s
1: solved... in 0.138s
2: solved... in 0.129s
1: solved... in 0.11s
2: solved... in 0.135s
1: solved... in 0.109s
2: solved... in 0.081s
1: solved... in 0.152s
2: solved... in 0.095s
1: solved... in 0.156s
2: solved... in 0.117s
1: solved... in 0.108s
2: solved... in 0.121s
1: solved... in 0.108s
2: solved... in 0.106s
1: solved... in 0.164s
2: solved... in 0.113s
1: solved... in 0.132s
2: solved... in 0.138s
1: solved... in 0.144s
2: solved... in 0.093s
1: solved... in 0.132s
2: solved... in 0.098s
1: solved... in 0.133s
2: solved... in 0.093s
1: solved... in 0.134s
2: solved... in 0.104s
1: solved... in 0.132s
2: solved... in 0.099s
1: solved... in 0.138s
2: solved... in 0.12s
1: solved... in 0.108s
2: solved... in 0.138s
1: solved... in 0.125s
2: solved... in 0.088s
1: solved... in 0.176s
2: solved... in 0.099s
1: solved... in 0.132s
2: solved... in 0.154s
1: solved... in 0.132s
2: solved... in 0.073s
1: solved... in 0.157s
2: solved... in 0.104s
1: solved... in 0.142s
2: solved... in 0.114s
1: solved... in 0.143s
2: solved... in 0.112s
1: solved... in 0.151s
2: solved... in 0.125s
1: solved... in 0.175s
2: solved... in 0.119s
1: solved... in 0.175s
2: solved... in 0.093s
1: solved... in 0.14s
2: solved... in 0.165s
1: solved... in 0.127s
2: solved... in 0.111s
1: solved... in 0.147s
2: solved... in 0.108s
1: solved... in 0.145s
2: solved... in 0.082s
1: solved... in 0.165s
2: solved... in 0.108s
1: solved... in 0.165s
2: solved... in 0.143s
1: solved... in 0.162s
2: solved... in 0.15s
1: solved... in 0.164s
2: solved... in 0.153s
1: solved... in 0.156s
2: solved... in 0.19s
1: solved... in 0.175s
2: solved... in 0.168s
1: solved... in 0.125s
2: solved... in 0.163s
1: solved... in 0.125s
2: solved... in 0.177s
1: solved... in 0.175s
2: solved... in 0.137s
1: solved... in 0.125s
2: solved... in 0.159s
1: solved... in 0.125s
2: solved... in 0.139s
1: solved... in 0.154s
2: solved... in 0.14s
1: solved... in 0.155s
2: solved... in 0.113s
1: solved... in 0.111s
2: solved... in 0.179s
1: solved... in 0.128s
2: solved... in 0.129s
1: solved... in 0.112s
2: solved... in 0.15s
1: solved... in 0.16s
2: solved... in 0.131s
1: solved... in 0.155s
2: solved... in 0.13s
1: solved... in 0.159s
2: solved... in 0.161s
1: solved... in 0.155s
2: solved... in 0.161s
1: solved... in 0.157s
2: solved... in 0.168s
1: solved... in 0.109s
2: solved... in 0.13s
1: solved... in 0.129s
2: solved... in 0.114s
1: solved... in 0.115s
2: solved... in 0.12s
1: solved... in 0.108s
2: solved... in 0.121s
1: solved... in 0.113s
2: solved... in 0.192s
1: solved... in 0.13s
2: solved... in 0.117s
1: solved... in 0.11s
2: solved... in 0.179s
1: solved... in 0.135s
2: solved... in 0.152s
1: solved... in 0.148s
2: solved... in 0.176s
1: solved... in 0.134s
2: solved... in 0.255s
1: solved... in 0.132s
2: solved... in 0.187s
1: solved... in 0.124s
2: solved... in 0.161s
1: solved... in 0.174s
2: solved... in 0.156s
1: solved... in 0.108s
2: solved... in 0.143s
1: solved... in 0.157s
2: solved... in 0.117s
1: solved... in 0.133s
2: solved... in 0.175s
1: solved... in 0.109s
2: solved... in 0.168s
1: solved... in 0.109s
2: solved... in 0.172s
1: solved... in 0.109s
2: solved... in 0.172s
1: solved... in 0.109s
2: solved... in 0.179s
1: solved... in 0.121s
2: solved... in 0.199s
1: solved... in 0.147s
2: solved... in 0.203s
1: solved... in 0.109s
2: solved... in 0.22s
1: solved... in 0.109s
2: solved... in 0.242s
1: solved... in 0.108s
2: solved... in 0.207s
1: solved... in 0.132s
2: solved... in 0.135s
1: solved... in 0.125s
2: solved... in 0.177s
1: solved... in 0.126s
2: solved... in 0.167s
1: solved... in 0.125s
2: solved... in 0.105s
1: solved... in 0.109s
2: solved... in 0.182s
1: solved... in 0.127s
2: solved... in 0.132s
1: solved... in 0.143s
2: solved... in 0.144s
1: solved... in 0.139s
2: solved... in 0.148s
1: solved... in 0.172s
2: solved... in 0.136s
1: solved... in 0.134s
2: solved... in 0.177s
1: solved... in 0.124s
2: solved... in 0.166s
1: solved... in 0.125s
2: solved... in 0.177s
1: solved... in 0.125s
2: solved... in 0.163s
1: solved... in 0.155s
2: solved... in 0.218s
1: solved... in 0.124s
2: solved... in 0.179s
1: solved... in 0.125s
2: solved... in 0.192s
1: solved... in 0.119s
2: solved... in 0.218s
1: solved... in 0.141s
2: solved... in 0.284s
1: solved... in 0.151s
2: solved... in 0.23s
1: solved... in 0.126s
2: solved... in 0.172s
1: solved... in 0.155s
2: solved... in 0.194s
1: solved... in 0.125s
2: solved... in 0.131s
1: solved... in 0.125s
2: solved... in 0.182s
1: solved... in 0.158s
2: solved... in 0.15s
1: solved... in 0.139s
2: solved... in 0.205s
1: solved... in 0.139s
2: solved... in 0.129s
1: solved... in 0.138s
2: solved... in 0.142s
1: solved... in 0.133s
2: solved... in 0.146s
1: solved... in 0.133s
2: solved... in 0.178s
1: solved... in 0.152s
2: solved... in 0.193s
1: solved... in 0.125s
2: solved... in 0.194s
1: solved... in 0.132s
2: solved... in 0.226s
1: solved... in 0.171s
2: solved... in 0.127s
1: solved... in 0.127s
2: solved... in 0.197s
1: solved... in 0.158s
2: solved... in 0.151s
1: solved... in 0.196s
2: solved... in 0.149s
1: solved... in 0.108s
2: solved... in 0.149s
1: solved... in 0.108s
2: solved... in 0.229s
1: solved... in 0.125s
2: solved... in 0.141s
1: solved... in 0.107s
2: solved... in 0.135s
1: solved... in 0.108s
2: solved... in 0.19s
1: solved... in 0.151s
2: solved... in 0.189s
1: solved... in 0.125s
2: solved... in 0.251s
1: solved... in 0.134s
2: solved... in 0.215s
1: solved... in 0.129s
2: solved... in 0.181s
1: solved... in 0.126s
2: solved... in 0.195s
1: solved... in 0.125s
2: solved... in 0.154s
1: solved... in 0.125s
2: solved... in 0.216s
1: solved... in 0.125s
2: solved... in 0.252s
1: solved... in 0.154s
2: solved... in 0.363s
1: solved... in 0.11s
2: solved... in 0.129s
1: solved... in 0.139s
2: solved... in 0.336s
1: solved... in 0.109s
2: solved... in 0.148s
1: solved... in 0.133s
2: solved... in 0.17s
1: solved... in 0.151s
2: solved... in 0.136s
1: solved... in 0.132s
2: solved... in 0.173s
1: solved... in 0.126s
2: solved... in 0.178s
1: solved... in 0.132s
2: solved... in 0.27s
1: solved... in 0.179s
2: solved... in 0.211s
1: solved... in 0.126s
2: solved... in 0.187s
1: solved... in 0.132s
2: solved... in 0.173s
1: solved... in 0.125s
2: solved... in 0.268s
1: solved... in 0.155s
2: solved... in 0.176s
1: solved... in 0.126s
2: solved... in 0.15s
1: solved... in 0.124s
2: solved... in 0.161s
1: solved... in 0.133s
2: solved... in 0.205s
1: solved... in 0.128s
2: solved... in 0.14s
1: solved... in 0.134s
2: solved... in 0.229s
1: solved... in 0.125s
2: solved... in 0.166s
1: solved... in 0.132s
2: solved... in 0.199s
1: solved... in 0.125s
2: solved... in 0.185s
1: solved... in 0.156s
2: solved... in 0.184s
1: solved... in 0.124s
2: solved... in 0.205s
1: solved... in 0.156s
2: solved... in 0.173s
1: solved... in 0.134s
2: solved... in 0.268s
1: solved... in 0.125s
2: solved... in 0.18s
1: solved... in 0.132s
2: solved... in 0.22s
1: solved... in 0.126s
2: solved... in 0.238s
1: solved... in 0.156s
2: solved... in 0.193s
1: solved... in 0.151s
2: solved... in 0.343s
1: solved... in 0.108s
2: solved... in 0.268s
1: solved... in 0.203s
2: solved... in 0.272s
1: solved... in 0.108s
2: solved... in 0.31s
1: solved... in 0.124s
2: solved... in 0.175s
1: solved... in 0.152s
2: solved... in 0.205s
1: solved... in 0.134s
2: solved... in 0.22s
1: solved... in 0.159s
2: solved... in 0.272s
1: solved... in 0.108s
2: solved... in 0.226s
1: solved... in 0.151s
2: solved... in 0.209s
1: solved... in 0.128s
2: solved... in 0.178s
1: solved... in 0.132s
2: solved... in 0.149s
1: solved... in 0.125s
2: solved... in 0.244s
1: solved... in 0.125s
2: solved... in 0.246s
1: solved... in 0.179s
2: solved... in 0.218s
1: solved... in 0.173s
2: solved... in 0.189s
1: solved... in 0.152s
2: solved... in 0.161s
1: solved... in 0.133s
2: solved... in 0.175s
1: solved... in 0.11s
2: solved... in 0.209s
1: solved... in 0.108s
2: solved... in 0.308s
1: solved... in 0.135s
2: solved... in 0.185s
1: solved... in 0.109s
2: solved... in 0.186s
1: solved... in 0.108s
2: solved... in 0.185s
1: solved... in 0.109s
2: solved... in 0.19s
1: solved... in 0.109s
2: solved... in 0.18s
1: solved... in 0.151s
2: solved... in 0.159s
1: solved... in 0.109s
2: solved... in 0.181s
1: solved... in 0.108s
2: solved... in 0.168s
1: solved... in 0.109s
2: solved... in 0.167s
1: solved... in 0.153s
2: solved... in 0.177s
1: solved... in 0.126s
2: solved... in 0.214s
1: solved... in 0.136s
2: solved... in 0.259s
1: solved... in 0.127s
2: solved... in 0.27s
1: solved... in 0.126s
2: solved... in 0.285s
1: solved... in 0.125s
2: solved... in 0.333s
1: solved... in 0.134s
2: solved... in 0.25s
1: solved... in 0.125s
2: solved... in 0.286s
1: solved... in 0.125s
2: solved... in 0.32s
1: solved... in 0.13s
2: solved... in 0.307s
1: solved... in 0.129s
2: solved... in 0.237s
1: solved... in 0.125s
2: solved... in 0.295s
1: solved... in 0.125s
2: solved... in 0.155s
1: solved... in 0.133s
2: solved... in 0.167s
1: solved... in 0.181s
2: solved... in 0.362s
1: solved... in 0.155s
2: solved... in 0.208s
1: solved... in 0.133s
2: solved... in 0.18s
1: solved... in 0.124s
2: solved... in 0.159s
1: solved... in 0.111s
2: solved... in 0.16s
1: solved... in 0.11s
2: solved... in 0.151s
1: solved... in 0.109s
2: solved... in 0.277s
1: solved... in 0.163s
2: solved... in 0.206s
1: solved... in 0.156s
2: solved... in 0.193s
1: solved... in 0.18s
2: solved... in 0.302s
1: solved... in 0.137s
2: solved... in 0.287s
1: solved... in 0.161s
2: solved... in 0.19s
1: solved... in 0.113s
2: solved... in 0.234s
1: solved... in 0.155s
2: solved... in 0.115s
1: solved... in 0.133s
2: solved... in 0.288s
1: solved... in 0.163s
2: solved... in 0.283s
1: solved... in 0.126s
2: solved... in 0.332s
1: solved... in 0.125s
2: solved... in 0.353s
1: solved... in 0.128s
2: solved... in 0.162s
1: solved... in 0.135s
2: solved... in 0.269s
1: solved... in 0.109s
2: solved... in 0.268s
1: solved... in 0.11s
2: solved... in 0.354s
1: solved... in 0.128s
2: solved... in 0.302s
1: solved... in 0.126s
2: solved... in 0.359s
1: solved... in 0.125s
2: solved... in 0.28s
1: solved... in 0.125s
2: solved... in 0.322s
1: solved... in 0.126s
2: solved... in 0.31s
1: solved... in 0.156s
2: solved... in 0.293s
1: solved... in 0.161s
2: solved... in 0.23s
1: solved... in 0.163s
2: solved... in 0.259s
1: solved... in 0.125s
2: solved... in 0.204s
1: solved... in 0.109s
2: solved... in 0.226s
1: solved... in 0.109s
2: solved... in 0.169s
1: solved... in 0.131s
2: solved... in 0.218s
1: solved... in 0.111s
2: solved... in 0.216s
1: solved... in 0.113s
2: solved... in 0.218s
1: solved... in 0.11s
2: solved... in 0.22s
1: solved... in 0.109s
2: solved... in 0.39s
1: solved... in 0.133s
2: solved... in 0.274s
1: solved... in 0.129s
2: solved... in 0.303s
1: solved... in 0.156s
2: solved... in 0.302s
1: solved... in 0.157s
2: solved... in 0.32s
1: solved... in 0.133s
2: solved... in 0.371s
1: solved... in 0.129s
2: solved... in 0.244s
1: solved... in 0.133s
2: solved... in 0.348s
1: solved... in 0.125s
2: solved... in 0.533s
1: solved... in 0.137s
2: solved... in 0.576s
1: solved... in 0.136s
2: solved... in 0.264s
1: solved... in 0.155s
2: solved... in 0.351s
1: solved... in 0.128s
2: solved... in 0.353s
1: solved... in 0.131s
2: solved... in 0.354s
1: solved... in 0.124s
2: solved... in 0.606s
1: solved... in 0.131s
2: solved... in 0.259s
1: solved... in 0.125s
2: solved... in 0.337s
1: solved... in 0.123s
2: solved... in 0.225s
1: solved... in 0.154s
2: solved... in 0.307s
1: solved... in 0.156s
2: solved... in 0.256s
1: solved... in 0.136s
2: solved... in 0.246s
1: solved... in 0.132s
2: solved... in 0.235s
1: solved... in 0.131s
2: solved... in 0.457s
1: solved... in 0.136s
2: solved... in 0.464s
1: solved... in 0.134s
2: solved... in 0.532s
1: solved... in 0.137s
2: solved... in 0.43s
1: solved... in 0.134s
2: solved... in 0.396s
1: solved... in 0.127s
2: solved... in 0.323s
1: solved... in 0.167s
2: solved... in 0.468s
1: solved... in 0.144s
2: solved... in 0.332s
1: solved... in 0.141s
2: solved... in 0.211s
1: solved... in 0.127s
2: solved... in 0.404s
1: solved... in 0.123s
2: solved... in 0.26s
1: solved... in 0.135s
2: solved... in 0.512s
1: solved... in 0.131s
2: solved... in 0.238s
1: solved... in 0.124s
2: solved... in 0.264s
1: solved... in 0.134s
2: solved... in 0.318s
1: solved... in 0.157s
2: solved... in 0.214s
1: solved... in 0.198s
2: solved... in 0.285s
1: solved... in 0.136s
2: solved... in 0.324s
1: solved... in 0.131s
2: solved... in 0.316s
1: solved... in 0.124s
2: solved... in 0.444s
1: solved... in 0.124s
2: solved... in 0.347s
1: solved... in 0.123s
2: solved... in 0.376s
1: solved... in 0.127s
2: solved... in 0.442s
1: solved... in 0.131s
2: solved... in 0.323s
1: solved... in 0.155s
2: solved... in 0.441s
1: solved... in 0.123s
2: solved... in 0.379s
1: solved... in 0.141s
2: solved... in 0.423s
1: solved... in 0.124s
2: solved... in 0.379s
1: solved... in 0.134s
2: solved... in 0.487s
1: solved... in 0.154s
2: solved... in 0.329s
1: solved... in 0.158s
2: solved... in 0.452s
1: solved... in 0.123s
2: solved... in 0.508s
1: solved... in 0.198s
2: solved... in 0.316s
1: solved... in 0.127s
2: solved... in 0.343s
1: solved... in 0.22s
2: solved... in 0.415s
1: solved... in 0.171s
2: solved... in 0.419s
1: solved... in 0.154s
2: solved... in 0.538s
1: solved... in 0.124s
2: solved... in 0.412s
1: solved... in 0.123s
2: solved... in 0.516s
1: solved... in 0.123s
2: solved... in 0.5s
1: solved... in 0.132s
2: solved... in 0.589s
1: solved... in 0.132s
2: solved... in 0.487s
1: solved... in 0.124s
2: solved... in 0.266s
1: solved... in 0.124s
2: solved... in 0.285s
1: solved... in 0.141s
2: solved... in 0.198s
1: solved... in 0.126s
2: solved... in 0.459s
1: solved... in 0.124s
2: solved... in 0.273s
1: solved... in 0.141s
2: solved... in 0.335s
1: solved... in 0.155s
2: solved... in 0.464s
1: solved... in 0.139s
2: solved... in 0.225s
1: solved... in 0.198s
2: solved... in 0.213s
1: solved... in 0.156s
2: solved... in 0.313s
1: solved... in 0.173s
2: solved... in 0.572s
1: solved... in 0.124s
2: solved... in 0.291s
1: solved... in 0.14s
2: solved... in 0.216s
1: solved... in 0.156s
2: solved... in 0.47s
1: solved... in 0.124s
2: solved... in 0.309s
1: solved... in 0.126s
2: solved... in 0.289s
1: solved... in 0.155s
2: solved... in 0.319s
1: solved... in 0.124s
2: solved... in 0.211s
1: solved... in 0.174s
2: solved... in 0.226s
1: solved... in 0.155s
2: solved... in 0.534s
1: solved... in 0.202s
2: solved... in 0.321s
1: solved... in 0.128s
2: solved... in 0.342s
1: solved... in 0.124s
2: solved... in 0.277s
1: solved... in 0.169s
2: solved... in 0.218s
1: solved... in 0.154s
2: solved... in 0.549s
1: solved... in 0.154s
2: solved... in 0.219s
1: solved... in 0.153s
2: solved... in 0.29s
1: solved... in 0.141s
2: solved... in 0.461s
1: solved... in 0.128s
2: solved... in 0.457s
1: solved... in 0.123s
2: solved... in 0.538s
1: solved... in 0.127s
2: solved... in 0.34s
1: solved... in 0.125s
2: solved... in 0.219s
1: solved... in 0.156s
2: solved... in 0.279s
1: solved... in 0.16s
2: solved... in 0.567s
1: solved... in 0.124s
2: solved... in 0.356s
1: solved... in 0.141s
2: solved... in 0.366s
1: solved... in 0.174s
2: solved... in 0.452s
1: solved... in 0.125s
2: solved... in 0.386s
1: solved... in 0.197s
2: solved... in 0.651s
1: solved... in 0.127s
2: solved... in 0.294s
1: solved... in 0.124s
2: solved... in 0.238s
1: solved... in 0.156s
2: solved... in 0.437s
1: solved... in 0.126s
2: solved... in 0.329s
1: solved... in 0.124s
2: solved... in 0.532s
1: solved... in 0.128s
2: solved... in 0.617s
1: solved... in 0.123s
2: solved... in 0.467s
1: solved... in 0.124s
2: solved... in 0.567s
1: solved... in 0.124s
2: solved... in 0.295s
1: solved... in 0.157s
2: solved... in 0.459s
1: solved... in 0.198s
2: solved... in 0.619s
1: solved... in 0.125s
2: solved... in 0.325s
1: solved... in 0.123s
2: solved... in 0.571s
1: solved... in 0.124s
2: solved... in 0.662s
1: solved... in 0.125s
2: solved... in 0.586s
1: solved... in 0.13s
2: solved... in 0.415s
1: solved... in 0.124s
2: solved... in 0.397s
1: solved... in 0.174s
2: solved... in 0.585s
1: solved... in 0.133s
2: solved... in 0.647s
1: solved... in 0.125s
2: solved... in 0.496s
1: solved... in 0.124s
2: solved... in 0.436s
1: solved... in 0.211s
2: solved... in 0.24s
1: solved... in 0.157s
2: solved... in 0.245s
1: solved... in 0.155s
2: solved... in 0.38s
1: solved... in 0.125s
2: solved... in 0.369s
1: solved... in 0.125s
2: solved... in 0.29s
1: solved... in 0.174s
2: solved... in 0.743s
1: solved... in 0.133s
2: solved... in 0.652s
1: solved... in 0.132s
2: solved... in 0.646s
1: solved... in 0.14s
2: solved... in 0.511s
1: solved... in 0.157s
2: solved... in 0.523s
1: solved... in 0.124s
2: solved... in 0.691s
1: solved... in 0.123s
2: solved... in 0.455s
1: solved... in 0.212s
2: solved... in 0.465s
1: solved... in 0.124s
2: solved... in 0.74s
1: solved... in 0.124s
2: solved... in 0.406s
1: solved... in 0.141s
2: solved... in 0.325s
1: solved... in 0.154s
2: solved... in 0.595s
1: solved... in 0.124s
2: solved... in 0.702s
1: solved... in 0.124s
2: solved... in 0.415s
1: solved... in 0.127s
2: solved... in 0.451s
1: solved... in 0.124s
2: solved... in 0.244s
1: solved... in 0.157s
2: solved... in 0.334s
1: solved... in 0.161s
2: solved... in 0.483s
1: solved... in 0.166s
2: solved... in 0.562s
1: solved... in 0.125s
2: solved... in 0.562s
1: solved... in 0.124s
2: solved... in 0.345s
1: solved... in 0.157s
2: solved... in 0.356s
1: solved... in 0.124s
2: solved... in 0.544s
1: solved... in 0.128s
2: solved... in 0.687s
1: solved... in 0.128s
2: solved... in 0.745s
1: solved... in 0.127s
2: solved... in 0.781s
1: solved... in 0.129s
2: solved... in 0.474s
1: solved... in 0.126s
2: solved... in 0.562s
1: solved... in 0.124s
2: solved... in 0.354s
1: solved... in 0.158s
2: solved... in 0.751s
1: solved... in 0.125s
2: solved... in 0.853s
1: solved... in 0.124s
2: solved... in 0.304s
1: solved... in 0.199s
2: solved... in 0.369s
1: solved... in 0.157s
2: solved... in 0.63s
1: solved... in 0.123s
2: solved... in 0.363s
1: solved... in 0.161s
2: solved... in 0.352s
1: solved... in 0.157s
2: solved... in 0.7s
1: solved... in 0.125s
2: solved... in 0.45s
1: solved... in 0.127s
2: solved... in 0.681s
1: solved... in 0.127s
2: solved... in 0.687s
1: solved... in 0.158s
2: solved... in 0.566s
1: solved... in 0.127s
2: solved... in 0.604s
1: solved... in 0.123s
2: solved... in 0.594s
1: solved... in 0.124s
2: solved... in 0.617s
1: solved... in 0.124s
2: solved... in 0.388s
1: solved... in 0.166s
2: solved... in 0.35s
1: solved... in 0.155s
2: solved... in 0.563s
1: solved... in 0.125s
2: solved... in 0.792s
1: solved... in 0.125s
2: solved... in 0.431s
1: solved... in 0.2s
2: solved... in 0.563s
1: solved... in 0.123s
2: solved... in 0.622s
1: solved... in 0.125s
2: solved... in 0.929s
1: solved... in 0.128s
2: solved... in 0.625s
1: solved... in 0.127s
2: solved... in 0.365s
1: solved... in 0.157s
2: solved... in 0.488s
1: solved... in 0.127s
2: solved... in 0.563s
1: solved... in 0.124s
2: solved... in 0.497s
1: solved... in 0.124s
2: solved... in 0.593s
1: solved... in 0.124s
2: solved... in 0.341s
1: solved... in 0.136s
2: solved... in 0.405s
1: solved... in 0.127s
2: solved... in 0.822s
1: solved... in 0.124s
2: solved... in 0.438s
1: solved... in 0.214s
2: solved... in 0.378s
1: solved... in 0.208s
2: solved... in 0.43s
1: solved... in 0.216s
2: solved... in 0.613s
1: solved... in 0.131s
2: solved... in 0.577s
1: solved... in 0.123s
2: solved... in 0.603s
1: solved... in 0.125s
2: solved... in 0.532s
1: solved... in 0.2s
2: solved... in 0.463s
1: solved... in 0.127s
2: solved... in 0.422s
1: solved... in 0.198s
2: solved... in 0.477s
1: solved... in 0.123s
2: solved... in 0.342s
1: solved... in 0.159s
2: solved... in 0.452s
1: solved... in 0.157s
2: solved... in 0.639s
1: solved... in 0.123s
2: solved... in 0.422s
1: solved... in 0.14s
2: solved... in 0.423s
1: solved... in 0.202s
2: solved... in 0.527s
1: solved... in 0.124s
2: solved... in 0.504s
1: solved... in 0.14s
2: solved... in 0.624s
1: solved... in 0.133s
2: solved... in 0.391s
1: solved... in 0.124s
2: solved... in 0.65s
1: solved... in 0.124s
2: solved... in 0.461s
1: solved... in 0.128s
2: solved... in 0.626s
1: solved... in 0.123s
2: solved... in 0.316s
1: solved... in 0.196s
2: solved... in 0.446s
1: solved... in 0.127s
2: solved... in 0.314s
1: solved... in 0.212s
2: solved... in 0.425s
1: solved... in 0.21s
2: solved... in 0.467s
1: solved... in 0.124s
2: solved... in 0.405s
1: solved... in 0.205s
2: solved... in 0.39s
1: solved... in 0.209s
2: solved... in 0.453s
1: solved... in 0.209s
2: solved... in 0.635s
1: solved... in 0.124s
2: solved... in 0.587s
1: solved... in 0.123s
2: solved... in 0.444s
1: solved... in 0.124s
2: solved... in 0.536s
1: solved... in 0.124s
2: solved... in 0.434s
1: solved... in 0.125s
2: solved... in 0.475s
1: solved... in 0.124s
2: solved... in 0.556s
1: solved... in 0.124s
2: solved... in 0.765s
1: solved... in 0.123s
2: solved... in 0.829s
1: solved... in 0.126s
2: solved... in 0.363s
1: solved... in 0.125s
2: solved... in 0.542s
1: solved... in 0.124s
2: solved... in 0.507s
1: solved... in 0.209s
2: solved... in 0.378s
1: solved... in 0.124s
2: solved... in 0.505s
1: solved... in 0.124s
2: solved... in 0.58s
1: solved... in 0.126s
2: solved... in 0.843s
1: solved... in 0.124s
2: solved... in 0.539s
1: solved... in 0.212s
2: solved... in 0.621s
1: solved... in 0.127s
2: solved... in 0.707s
1: solved... in 0.126s
2: solved... in 0.72s
1: solved... in 0.124s
2: solved... in 0.586s
1: solved... in 0.127s
2: solved... in 0.495s
1: solved... in 0.125s
2: solved... in 0.597s
1: solved... in 0.124s
2: solved... in 0.619s
1: solved... in 0.124s
2: solved... in 0.45s
1: solved... in 0.126s
2: solved... in 0.478s
1: solved... in 0.123s
2: solved... in 0.428s
1: solved... in 0.124s
2: solved... in 0.626s
1: solved... in 0.125s
2: solved... in 0.43s
1: solved... in 0.124s
2: solved... in 0.476s
1: solved... in 0.128s
2: solved... in 0.586s
1: solved... in 0.125s
2: solved... in 0.608s
1: solved... in 0.126s
2: solved... in 0.612s
1: solved... in 0.128s
2: solved... in 0.755s
1: solved... in 0.125s
2: solved... in 0.66s
1: solved... in 0.139s
2: solved... in 0.538s
1: solved... in 0.128s
2: solved... in 0.479s
1: solved... in 0.21s
2: solved... in 0.66s
1: solved... in 0.124s
2: solved... in 0.616s
1: solved... in 0.156s
2: solved... in 0.585s
1: solved... in 0.125s
2: solved... in 0.41s
1: solved... in 0.158s
2: solved... in 0.838s
1: solved... in 0.125s
2: solved... in 0.728s
1: solved... in 0.123s
2: solved... in 0.686s
1: solved... in 0.124s
2: solved... in 0.346s
1: solved... in 0.125s
2: solved... in 0.341s
1: solved... in 0.134s
2: solved... in 0.842s
1: solved... in 0.124s
2: solved... in 0.659s
1: solved... in 0.124s
2: solved... in 0.594s
1: solved... in 0.211s
2: solved... in 0.438s
1: solved... in 0.124s
2: solved... in 0.552s
1: solved... in 0.124s
2: solved... in 0.508s
1: solved... in 0.124s
2: solved... in 0.747s
1: solved... in 0.124s
2: solved... in 0.812s
1: solved... in 0.126s
2: solved... in 0.606s
1: solved... in 0.124s
2: solved... in 0.767s
1: solved... in 0.125s
2: solved... in 0.648s
1: solved... in 0.124s
2: solved... in 0.541s
1: solved... in 0.137s
2: solved... in 0.713s
1: solved... in 0.135s
2: solved... in 0.721s
1: solved... in 0.126s
2: solved... in 0.58s
1: solved... in 0.142s
2: solved... in 0.581s
1: solved... in 0.125s
2: solved... in 0.605s
1: solved... in 0.125s
2: solved... in 0.412s
1: solved... in 0.126s
2: solved... in 0.607s
1: solved... in 0.139s
2: solved... in 0.544s
1: solved... in 0.124s
2: solved... in 0.532s
1: solved... in 0.124s
2: solved... in 0.539s
1: solved... in 0.127s
2: solved... in 0.819s
1: solved... in 0.124s
2: solved... in 0.65s
1: solved... in 0.125s
2: solved... in 0.583s
1: solved... in 0.139s
2: solved... in 0.514s
1: solved... in 0.125s
2: solved... in 1.129s
1: solved... in 0.215s
2: solved... in 0.777s
1: solved... in 0.124s
2: solved... in 0.534s
1: solved... in 0.125s
2: solved... in 0.515s
1: solved... in 0.171s
2: solved... in 0.784s
1: solved... in 0.123s
2: solved... in 0.64s
1: solved... in 0.132s
2: solved... in 0.715s
1: solved... in 0.124s
2: solved... in 0.54s
1: solved... in 0.125s
2: solved... in 0.43s
1: solved... in 0.221s
2: solved... in 0.667s
1: solved... in 0.13s
2: solved... in 0.575s
1: solved... in 0.21s
2: solved... in 0.493s
1: solved... in 0.21s
2: solved... in 0.748s
1: solved... in 0.125s
2: solved... in 0.628s
1: solved... in 0.124s
2: solved... in 0.627s
1: solved... in 0.124s
2: solved... in 0.631s
1: solved... in 0.126s
2: solved... in 0.893s
1: solved... in 0.123s
2: solved... in 0.617s
1: solved... in 0.127s
2: solved... in 0.492s
1: solved... in 0.123s
2: solved... in 0.581s
1: solved... in 0.124s
2: solved... in 0.693s
1: solved... in 0.124s
2: solved... in 0.499s
1: solved... in 0.208s
2: solved... in 0.701s
1: solved... in 0.124s
2: solved... in 0.56s
1: solved... in 0.128s
2: solved... in 0.602s
1: solved... in 0.126s
2: solved... in 0.543s
1: solved... in 0.209s
2: solved... in 0.398s
1: solved... in 0.166s
2: solved... in 0.832s
1: solved... in 0.12s
2: solved... in 0.821s
1: solved... in 0.162s
2: solved... in 0.62s
1: solved... in 0.161s
2: solved... in 0.688s
1: solved... in 0.125s
2: solved... in 0.578s
1: solved... in 0.124s
2: solved... in 0.891s
1: solved... in 0.12s
2: solved... in 0.406s
1: solved... in 0.124s
2: solved... in 0.936s
1: solved... in 0.127s
2: solved... in 0.336s
1: solved... in 0.131s
2: solved... in 0.336s
1: solved... in 0.134s
2: solved... in 0.629s
1: solved... in 0.124s
2: solved... in 1.048s
1: solved... in 0.124s
2: solved... in 0.636s
1: solved... in 0.126s
2: solved... in 0.669s
1: solved... in 0.131s
2: solved... in 0.88s
1: solved... in 0.13s
2: solved... in 0.337s
1: solved... in 0.157s
2: solved... in 0.64s
1: solved... in 0.124s
2: solved... in 0.941s
1: solved... in 0.125s
2: solved... in 0.639s
1: solved... in 0.215s
2: solved... in 0.51s
1: solved... in 0.218s
2: solved... in 0.79s
1: solved... in 0.158s
2: solved... in 0.595s
1: solved... in 0.128s
2: solved... in 0.791s
1: solved... in 0.125s
2: solved... in 0.305s
1: solved... in 0.122s
2: solved... in 0.59s
1: solved... in 0.126s
2: solved... in 0.527s
1: solved... in 0.127s
2: solved... in 0.824s
1: solved... in 0.124s
2: solved... in 0.508s
1: solved... in 0.208s
2: solved... in 0.535s
1: solved... in 0.212s
2: solved... in 0.74s
1: solved... in 0.121s
2: solved... in 0.769s
1: solved... in 0.129s
2: solved... in 0.768s
1: solved... in 0.126s
2: solved... in 0.783s
1: solved... in 0.209s
2: solved... in 0.825s
1: solved... in 0.162s
2: solved... in 0.813s
1: solved... in 0.171s
2: solved... in 0.726s
1: solved... in 0.13s
2: solved... in 0.467s
1: solved... in 0.132s
2: solved... in 0.962s
1: solved... in 0.21s
2: solved... in 0.537s
1: solved... in 0.124s
2: solved... in 0.496s
1: solved... in 0.128s
2: solved... in 0.607s
1: solved... in 0.125s
2: solved... in 0.855s
1: solved... in 0.21s
2: solved... in 0.375s
1: solved... in 0.181s
2: solved... in 0.439s
1: solved... in 0.121s
2: solved... in 0.607s
1: solved... in 0.147s
2: solved... in 0.831s
1: solved... in 0.21s
2: solved... in 0.445s
1: solved... in 0.135s
2: solved... in 0.655s
1: solved... in 0.214s
2: solved... in 0.431s
1: solved... in 0.175s
2: solved... in 0.526s
1: solved... in 0.131s
2: solved... in 0.739s
1: solved... in 0.177s
2: solved... in 0.759s
1: solved... in 0.174s
2: solved... in 0.76s
1: solved... in 0.131s
2: solved... in 0.354s
1: solved... in 0.124s
2: solved... in 0.35s
1: solved... in 0.126s
2: solved... in 0.734s
1: solved... in 0.122s
2: solved... in 0.909s
1: solved... in 0.13s
2: solved... in 0.998s
1: solved... in 0.211s
2: solved... in 0.429s
1: solved... in 0.178s
2: solved... in 0.478s
1: solved... in 0.164s
2: solved... in 0.368s
1: solved... in 0.164s
2: solved... in 0.587s
1: solved... in 0.219s
2: solved... in 0.916s
1: solved... in 0.21s
2: solved... in 0.65s
1: solved... in 0.318s
2: solved... in 0.734s
1: solved... in 0.122s
2: solved... in 0.691s
1: solved... in 0.126s
2: solved... in 0.7s
1: solved... in 0.125s
2: solved... in 0.622s
1: solved... in 0.213s
2: solved... in 0.68s
1: solved... in 0.215s
2: solved... in 0.608s
1: solved... in 0.167s
2: solved... in 0.33s
1: solved... in 0.163s
2: solved... in 0.452s
1: solved... in 0.125s
2: solved... in 0.629s
1: solved... in 0.165s
2: solved... in 0.349s
1: solved... in 0.157s
2: solved... in 0.61s
1: solved... in 0.183s
2: solved... in 0.596s
1: solved... in 0.181s
2: solved... in 0.404s
1: solved... in 0.129s
2: solved... in 0.463s
1: solved... in 0.122s
2: solved... in 0.435s
1: solved... in 0.131s
2: solved... in 0.425s
1: solved... in 0.13s
2: solved... in 0.548s
1: solved... in 0.178s
2: solved... in 0.621s
1: solved... in 0.126s
2: solved... in 0.695s
1: solved... in 0.171s
2: solved... in 0.3s
1: solved... in 0.162s
2: solved... in 0.93s
1: solved... in 0.21s
2: solved... in 0.571s
1: solved... in 0.205s
2: solved... in 0.52s
1: solved... in 0.204s
2: solved... in 0.513s
1: solved... in 0.164s
2: solved... in 1.031s
1: solved... in 0.166s
2: solved... in 0.558s
1: solved... in 0.205s
2: solved... in 0.804s
1: solved... in 0.213s
2: solved... in 0.804s
1: solved... in 0.163s
2: solved... in 0.526s
1: solved... in 0.165s
2: solved... in 0.354s
1: solved... in 0.198s
2: solved... in 0.814s
1: solved... in 0.184s
2: solved... in 0.876s
1: solved... in 0.164s
2: solved... in 0.392s
1: solved... in 0.162s
2: solved... in 0.611s
1: solved... in 0.173s
2: solved... in 0.432s
1: solved... in 0.162s
2: solved... in 0.328s
1: solved... in 0.165s
2: solved... in 0.326s
1: solved... in 0.16s
2: solved... in 0.515s
1: solved... in 0.242s
2: solved... in 0.762s
1: solved... in 0.148s
2: solved... in 0.307s
1: solved... in 0.224s
2: solved... in 0.297s
1: solved... in 0.171s
2: solved... in 0.546s
1: solved... in 0.175s
2: solved... in 0.587s
1: solved... in 0.213s
2: solved... in 0.64s
1: solved... in 0.204s
2: solved... in 0.637s
1: solved... in 0.206s
2: solved... in 0.385s
1: solved... in 0.161s
2: solved... in 0.403s
1: solved... in 0.2s
2: solved... in 0.334s
1: solved... in 0.166s
2: solved... in 0.766s
1: solved... in 0.183s
2: solved... in 0.414s
1: solved... in 0.16s
2: solved... in 0.707s
1: solved... in 0.217s
2: solved... in 0.62s
1: solved... in 0.213s
2: solved... in 0.631s
1: solved... in 0.223s
2: solved... in 0.342s
1: solved... in 0.227s
2: solved... in 0.631s
1: solved... in 0.206s
2: solved... in 0.648s
1: solved... in 0.177s
2: solved... in 0.47s
1: solved... in 0.159s
2: solved... in 0.625s
1: solved... in 0.173s
2: solved... in 0.355s
1: solved... in 0.169s
2: solved... in 0.457s
1: solved... in 0.182s
2: solved... in 0.554s
1: solved... in 0.174s
2: solved... in 0.523s
1: solved... in 0.164s
2: solved... in 0.367s
1: solved... in 0.125s
2: solved... in 0.472s
1: solved... in 0.171s
2: solved... in 0.779s
1: solved... in 0.161s
2: solved... in 0.506s
1: solved... in 0.175s
2: solved... in 0.384s
1: solved... in 0.128s
2: solved... in 0.326s
1: solved... in 0.166s
2: solved... in 0.31s
1: solved... in 0.2s
2: solved... in 0.343s
1: solved... in 0.125s
2: solved... in 0.327s
1: solved... in 0.157s
2: solved... in 0.34s
1: solved... in 0.169s
2: solved... in 0.333s
1: solved... in 0.2s
2: solved... in 0.704s
1: solved... in 0.212s
2: solved... in 0.377s
1: solved... in 0.218s
2: solved... in 0.621s
1: solved... in 0.178s
2: solved... in 0.456s
1: solved... in 0.173s
2: solved... in 0.345s
1: solved... in 0.153s
2: solved... in 0.412s
1: solved... in 0.16s
2: solved... in 0.332s
1: solved... in 0.125s
2: solved... in 0.581s
1: solved... in 0.205s
2: solved... in 0.467s
1: solved... in 0.207s
2: solved... in 0.338s
1: solved... in 0.242s
2: solved... in 0.394s
1: solved... in 0.131s
2: solved... in 0.365s
1: solved... in 0.159s
2: solved... in 0.32s
1: solved... in 0.162s
2: solved... in 0.221s
1: solved... in 0.164s
2: solved... in 0.636s
1: solved... in 0.167s
2: solved... in 0.412s
1: solved... in 0.158s
2: solved... in 0.326s
1: solved... in 0.158s
2: solved... in 0.272s
1: solved... in 0.166s
2: solved... in 0.441s
1: solved... in 0.144s
2: solved... in 0.841s
1: solved... in 0.217s
2: solved... in 0.337s
1: solved... in 0.162s
2: solved... in 0.419s
1: solved... in 0.163s
2: solved... in 0.736s
1: solved... in 0.178s
2: solved... in 0.425s
1: solved... in 0.183s
2: solved... in 0.329s
1: solved... in 0.21s
2: solved... in 0.571s
1: solved... in 0.206s
2: solved... in 0.478s
1: solved... in 0.13s
2: solved... in 0.584s
1: solved... in 0.207s
2: solved... in 0.967s
1: solved... in 0.187s
2: solved... in 0.604s
1: solved... in 0.131s
2: solved... in 0.258s
1: solved... in 0.179s
2: solved... in 0.334s
1: solved... in 0.163s
2: solved... in 1.204s
1: solved... in 0.164s
2: solved... in 0.817s
1: solved... in 0.207s
2: solved... in 0.615s
1: solved... in 0.207s
2: solved... in 0.395s
1: solved... in 0.13s
2: solved... in 0.342s
1: solved... in 0.215s
2: solved... in 0.304s
1: solved... in 0.189s
2: solved... in 0.585s
1: solved... in 0.206s
2: solved... in 0.341s
1: solved... in 0.121s
2: solved... in 0.576s
1: solved... in 0.206s
2: solved... in 0.41s
1: solved... in 0.246s
2: solved... in 0.51s
1: solved... in 0.219s
2: solved... in 1.099s
1: solved... in 0.181s
2: solved... in 0.612s
1: solved... in 0.218s
2: solved... in 0.355s
1: solved... in 0.154s
2: solved... in 0.538s
1: solved... in 0.165s
2: solved... in 0.337s
1: solved... in 0.203s
2: solved... in 0.557s
1: solved... in 0.206s
2: solved... in 0.473s
1: solved... in 0.134s
2: solved... in 0.351s
1: solved... in 0.171s
2: solved... in 0.841s
1: solved... in 0.179s
2: solved... in 0.463s
1: solved... in 0.214s
2: solved... in 0.442s
1: solved... in 0.131s
2: solved... in 0.631s
1: solved... in 0.217s
2: solved... in 0.369s
1: solved... in 0.137s
2: solved... in 0.542s
1: solved... in 0.227s
2: solved... in 0.357s
1: solved... in 0.126s
2: solved... in 0.411s
1: solved... in 0.244s
2: solved... in 0.358s
1: solved... in 0.164s
2: solved... in 0.348s
1: solved... in 0.212s
2: solved... in 0.65s
1: solved... in 0.211s
2: solved... in 0.377s
1: solved... in 0.138s
2: solved... in 0.428s
1: solved... in 0.179s
2: solved... in 0.689s
1: solved... in 0.167s
2: solved... in 0.991s
1: solved... in 0.166s
2: solved... in 0.345s
1: solved... in 0.165s
2: solved... in 0.4s
1: solved... in 0.198s
2: solved... in 0.858s
1: solved... in 0.218s
2: solved... in 0.777s
1: solved... in 0.203s
2: solved... in 0.345s
1: solved... in 0.207s
2: solved... in 0.372s
1: solved... in 0.253s
2: solved... in 0.777s
1: solved... in 0.158s
2: solved... in 0.669s
1: solved... in 0.221s
2: solved... in 0.412s
1: solved... in 0.198s
2: solved... in 0.831s
1: solved... in 0.225s
2: solved... in 0.412s
1: solved... in 0.218s
2: solved... in 0.676s
1: solved... in 0.217s
2: solved... in 0.565s
1: solved... in 0.165s
2: solved... in 0.685s
1: solved... in 0.209s
2: solved... in 0.651s
1: solved... in 0.214s
2: solved... in 0.392s
1: solved... in 0.156s
2: solved... in 0.556s
1: solved... in 0.174s
2: solved... in 0.37s
1: solved... in 0.17s
2: solved... in 0.614s
1: solved... in 0.18s
2: solved... in 1.189s
1: solved... in 0.178s
2: solved... in 0.397s
1: solved... in 0.128s
2: solved... in 0.416s
1: solved... in 0.171s
2: solved... in 0.352s
1: solved... in 0.131s
2: solved... in 0.438s
1: solved... in 0.181s
2: solved... in 0.434s
1: solved... in 0.267s
2: solved... in 1.039s
1: solved... in 0.201s
2: solved... in 0.445s
1: solved... in 0.247s
2: solved... in 0.494s
1: solved... in 0.145s
2: solved... in 0.395s
1: solved... in 0.187s
2: solved... in 0.381s
1: solved... in 0.195s
2: solved... in 0.746s
1: solved... in 0.182s
2: solved... in 0.547s
1: solved... in 0.195s
2: solved... in 0.409s
1: solved... in 0.141s
