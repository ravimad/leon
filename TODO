* Make all the intermediate template auotmatically synthesized and solved as postconditions
* Incorporate CEGAR using template based interpolant into the tool
* Perform modular analysis

Solve callees in isolation using templates. If the callee templates are not strong enough (i.e, if the caller verification did not succeed)
Try to find a stonger invariant belonging to the template for the callee, i.e, VC condition && (I_{new} ^ ~I_{old}) is unsat. But this may 
have a trivial solution which is I_{old}. Hence, we want (I_{old} ^ ~I_{new}) satisfiable. This can be added directly to the Farkas constraints.
Note that this has program variables which are integers. To solve this we can actually treat integers as reals. However, we may not be 
guaranteed to find stronger one. But will we eventually find one ? (unless the invariant polygon is bounded, finding a real is equivalent to finding an integer.)
If its a bounded polygon all that we need to do is check if its diameter is atleast one (this enforces an integer to be present in the polygon).

* Infer templates using quantifier elimination and abduction
* Extend the approach to graph algorithms

############Short term goals###############
* Save the lower bounds found in the previous iterations and resuse them
* Profile and check if we can improve performace
* Should we need a better way to instantiate axioms? Try adding dist. + monotonicity for mergesort. Provide a way to enable/disable axioms/
  May be make multiplication, as something that is commutative, associative, distributive and monotonic.
  What if we use multiplication as it is in the VC ?? Something to try
* Fix warnings
* How to redesign NLTemplateSolver ? It is getting ugly
* rebase to newer version of leon
	- Take note of nondet, assume, AbsZ3Solver, FairZ3Solver, Phases, Bugfixes in match-to-if-then-else, fresenLocals, etc. 
* Some programs still to try: HeapSort, MergeSort, QuickSort (needs more axioms of multiplication), Union-find, Binary-search
* Try the space bound examples

#########Experimental comparisons###########
* Try cegis over the entire program (not the intermediate one) 
* Try HSF by coding up the numerical versions of the programs as horn-clauses
* 




