(set-logic LIA)

(declare-var r!23 Int)
(declare-var arg!32 Int)
(declare-var arg!20 Int)
(declare-var arg!29 Int)
(declare-var arg!30 Int)
(declare-var arg!23 Int)
(declare-var r!22 Int)
(declare-var rear!2 Int)
(declare-var ifres!14 Int)
(declare-var res!36 Int)
(declare-var ifres!20 Int)
(declare-var arg!28 Int)
(declare-var l1!4 Int)
(declare-var arg!31 Int)
(declare-var arg!25 Int)
(declare-var arg!33 Int)
(declare-var r!21 Int)
(declare-var arg!27 Int)
(declare-var l2!4 Int)
(declare-var r!26 Int)
(declare-var arg!24 Int)
(declare-var r!20 Int)
(declare-var r!25 Int)
(declare-var r!19 Int)
(declare-var ifres!18 Int)
(declare-var arg!22 Int)
(declare-var arg!26 Int)
(declare-var l1!3 Int)
(declare-var ifres!16 Int)
(declare-var ifres!13 Int)
(declare-var r!17 Int)
(declare-var arg!21 Int)
(declare-var ifres!19 Int)
(declare-var q!1 Int)
(declare-var ifres!15 Int)
(declare-var ifres!17 Int)
(declare-var res!37 Int)
(declare-var l2!3 Int)
(declare-var r!18 Int)
(declare-var res!30 Int)
(declare-var front!2 Int)
(declare-var r!24 Int)
(declare-fun concat!3 (Int Int) Int)
(declare-fun reverseRec!3 (Int Int) Int)
(declare-fun reverse!4 (Int) Int)
(declare-fun create!3 (Int Int) Int)
(synth-fun a?!4 () Int ((Start Int ((Constant Int)))))
(synth-fun b?!4 () Int ((Start Int ((Constant Int)))))

(constraint (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (+ (- (- front!2) rear!2) q!1) (- 0)) (<= (+ (- q!1) 1) (- 0))) (<= (+ (- front!2) rear!2) (- 0))) (<= (- rear!2) (- 0))) (= (+ (- ifres!13) res!30) (- 0))) (or (and (and (and (and (and (= (- r!17 ifres!14) (- 0)) (or (and (<= (+ (- arg!20) rear!2) (- 0)) (= (+ ifres!14 (- 4)) (- 0))) (and (and (and (and (and (and (and (and (and (and (and (and (or (or (<= (+ arg!20 1) (- 0)) (<= (+ rear!2 1) (- 0))) (<= (+ (+ (* (- 7) arg!20) r!19) (- 5)) (- 0))) (= (+ (- ifres!16) r!19) (- 0))) (or (and (= arg!20 (- 0)) (= (+ ifres!16 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!24 1) (- 0)) (<= (+ arg!25 1) (- 0))) (<= (+ (+ (* (- 7) arg!24) r!22) (- 5)) (- 0))) (or (<= (+ arg!20 1) (- 0)) (<= (+ (- arg!20) 1) (- 0)))) (= (+ (- ifres!16 r!22) (- 5)) (- 0))) (= (+ (+ (- arg!20) arg!24) 1) (- 0))) (= (+ (+ (- rear!2) arg!25) (- 1)) (- 0))) (= r!22 (concat!3 arg!24 arg!25))))) (or (or (<= (+ rear!2 1) (- 0)) (<= (+ arg!21 1) (- 0))) (<= (+ (+ r!20 (* (- 9) rear!2)) (- 4)) (- 0)))) (= (- r!20 ifres!19) (- 0))) (or (and (= rear!2 (- 0)) (= (+ ifres!19 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!30 1) (- 0)) (<= (+ arg!31 1) (- 0))) (<= (+ (+ r!25 (* (- 9) arg!30)) (- 4)) (- 0))) (or (<= (+ rear!2 1) (- 0)) (<= (+ (- rear!2) 1) (- 0)))) (= (+ (+ (- r!25) ifres!19) (- 6)) (- 0))) (= (+ (- arg!30 rear!2) 1) (- 0))) (= (+ (- arg!31 arg!21) (- 1)) (- 0))) (= r!25 (reverseRec!3 arg!30 arg!31))))) (= (+ (+ (- r!20) r!18) (- 1)) (- 0))) (= arg!21 (- 0))) (= r!20 (reverseRec!3 rear!2 arg!21))) (<= (+ (- arg!20 rear!2) 1) (- 0))) (= (+ (+ (- (- r!19) r!18) ifres!14) (- 7)) (- 0))) (= r!18 (reverse!4 rear!2))) (= r!19 (concat!3 arg!20 rear!2))))) (<= (+ (- front!2) 1) (- 0))) (= (+ (- ifres!13 r!17) (- 4)) (- 0))) (= (+ (+ (- front!2) arg!20) 1) (- 0))) (= r!17 (create!3 arg!20 rear!2))) (and (<= front!2 (- 0)) (= (+ ifres!13 (- 5)) (- 0))))) (< (+ (+ (- res!30) (* (a?!4) q!1)) (b?!4)) (- 0))) (<= (- l1!3) (- 0))) (<= (- l2!3) (- 0))) (= (- res!36 ifres!15) (- 0))) (or (and (= l1!3 (- 0)) (= (+ ifres!15 (- 3)) (- 0))) (and (and (and (and (and (and (and (or (or (<= (+ arg!22 1) (- 0)) (<= (+ arg!23 1) (- 0))) (<= (+ (+ r!21 (* (- 7) arg!22)) (- 5)) (- 0))) (= (- r!21 ifres!17) (- 0))) (or (and (= arg!22 (- 0)) (= (+ ifres!17 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!26 1) (- 0)) (<= (+ arg!27 1) (- 0))) (<= (+ (+ (* (- 7) arg!26) r!23) (- 5)) (- 0))) (or (<= (+ arg!22 1) (- 0)) (<= (+ (- arg!22) 1) (- 0)))) (= (+ (+ (- r!23) ifres!17) (- 5)) (- 0))) (= (+ (- arg!26 arg!22) 1) (- 0))) (= (+ (+ (- arg!23) arg!27) (- 1)) (- 0))) (= r!23 (concat!3 arg!26 arg!27))))) (or (<= (+ l1!3 1) (- 0)) (<= (+ (- l1!3) 1) (- 0)))) (= (+ (+ (- r!21) ifres!15) (- 5)) (- 0))) (= (+ (- arg!22 l1!3) 1) (- 0))) (= (+ (- arg!23 l2!3) (- 1)) (- 0))) (= r!21 (concat!3 arg!22 arg!23))))) (<= (+ (+ (- res!36) (* 7 l1!3)) 6) (- 0))) (<= (- l1!4) (- 0))) (<= (- l2!4) (- 0))) (= (+ (- ifres!18) res!37) (- 0))) (or (and (= l1!4 (- 0)) (= (+ ifres!18 (- 3)) (- 0))) (and (and (and (and (and (and (and (or (or (<= (+ arg!28 1) (- 0)) (<= (+ arg!29 1) (- 0))) (<= (+ (+ (* (- 9) arg!28) r!24) (- 4)) (- 0))) (= (+ (- ifres!20) r!24) (- 0))) (or (and (= arg!28 (- 0)) (= (+ ifres!20 (- 3)) (- 0))) (and (and (and (and (or (<= (+ arg!28 1) (- 0)) (<= (+ (- arg!28) 1) (- 0))) (= (+ (- ifres!20 r!26) (- 6)) (- 0))) (= (+ (- arg!32 arg!28) 1) (- 0))) (= (+ (- arg!33 arg!29) (- 1)) (- 0))) (= r!26 (reverseRec!3 arg!32 arg!33))))) (or (<= (+ l1!4 1) (- 0)) (<= (+ (- l1!4) 1) (- 0)))) (= (+ (- ifres!18 r!24) (- 6)) (- 0))) (= (+ (+ (- l1!4) arg!28) 1) (- 0))) (= (+ (+ (- l2!4) arg!29) (- 1)) (- 0))) (= r!24 (reverseRec!3 arg!28 arg!29))))) (<= (+ (- (* 9 l1!4) res!37) 5) (- 0)))))

(check-synth)

