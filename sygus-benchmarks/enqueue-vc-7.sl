(set-logic LIA)

(declare-var ifres!24 Int)
(declare-var ifres!27 Int)
(declare-var r!29 Int)
(declare-var res!38 Int)
(declare-var arg!41 Int)
(declare-var arg!43 Int)
(declare-var r!36 Int)
(declare-var r!31 Int)
(declare-var q!0 Int)
(declare-var r!27 Int)
(declare-var res!39 Int)
(declare-var ifres!23 Int)
(declare-var res!27 Int)
(declare-var l1!4 Int)
(declare-var arg!45 Int)
(declare-var arg!46 Int)
(declare-var ifres!26 Int)
(declare-var arg!36 Int)
(declare-var r!30 Int)
(declare-var ifres!25 Int)
(declare-var r!33 Int)
(declare-var arg!37 Int)
(declare-var l2!4 Int)
(declare-var r!32 Int)
(declare-var arg!35 Int)
(declare-var rear!1 Int)
(declare-var arg!40 Int)
(declare-var l1!3 Int)
(declare-var r!35 Int)
(declare-var ifres!21 Int)
(declare-var arg!38 Int)
(declare-var r!28 Int)
(declare-var arg!34 Int)
(declare-var r!34 Int)
(declare-var arg!39 Int)
(declare-var ifres!22 Int)
(declare-var front!1 Int)
(declare-var arg!42 Int)
(declare-var l2!3 Int)
(declare-var arg!44 Int)
(declare-fun concat!3 (Int Int) Int)
(declare-fun reverseRec!3 (Int Int) Int)
(declare-fun reverse!4 (Int) Int)
(declare-fun create!3 (Int Int) Int)
(synth-fun a?!3 () Int ((Start Int ((Constant Int)))))
(synth-fun b?!3 () Int ((Start Int ((Constant Int)))))

(constraint (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (- (+ (- front!1) q!0) rear!1) (- 0)) (<= (- q!0) (- 0))) (<= (- front!1) (- 0))) (<= (- rear!1) (- 0))) (= (+ (- res!27 r!27) (- 5)) (- 0))) (= (- r!27 ifres!21) (- 0))) (or (and (<= (+ (- front!1) rear!1) (- 0)) (= (+ ifres!21 (- 4)) (- 0))) (and (and (and (and (and (and (and (and (and (and (and (and (or (or (<= (+ front!1 1) (- 0)) (<= (+ rear!1 1) (- 0))) (<= (+ (+ (* (- 7) front!1) r!29) (- 5)) (- 0))) (= (- r!29 ifres!23) (- 0))) (or (and (= front!1 (- 0)) (= (+ ifres!23 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!37 1) (- 0)) (<= (+ arg!38 1) (- 0))) (<= (+ (+ (* (- 7) arg!37) r!32) (- 5)) (- 0))) (or (<= (+ front!1 1) (- 0)) (<= (+ (- front!1) 1) (- 0)))) (= (+ (+ (- r!32) ifres!23) (- 5)) (- 0))) (= (+ (- arg!37 front!1) 1) (- 0))) (= (+ (+ (- rear!1) arg!38) (- 1)) (- 0))) (= r!32 (concat!3 arg!37 arg!38))))) (or (or (<= (+ rear!1 1) (- 0)) (<= (+ arg!34 1) (- 0))) (<= (+ (+ (* (- 9) rear!1) r!30) (- 4)) (- 0)))) (= (+ (- ifres!25) r!30) (- 0))) (or (and (= rear!1 (- 0)) (= (+ ifres!25 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!41 1) (- 0)) (<= (+ arg!42 1) (- 0))) (<= (+ (+ (* (- 9) arg!41) r!34) (- 4)) (- 0))) (or (<= (+ rear!1 1) (- 0)) (<= (+ (- rear!1) 1) (- 0)))) (= (+ (- ifres!25 r!34) (- 6)) (- 0))) (= (+ (+ (- rear!1) arg!41) 1) (- 0))) (= (+ (- arg!42 arg!34) (- 1)) (- 0))) (= r!34 (reverseRec!3 arg!41 arg!42))))) (= (+ (- r!28 r!30) (- 1)) (- 0))) (= arg!34 (- 0))) (= r!30 (reverseRec!3 rear!1 arg!34))) (<= (+ (- front!1 rear!1) 1) (- 0))) (= (+ (+ (- (- r!29) r!28) ifres!21) (- 7)) (- 0))) (= r!28 (reverse!4 rear!1))) (= r!29 (concat!3 front!1 rear!1))))) (= r!27 (create!3 front!1 rear!1))) (< (+ (+ (- res!27) (* (a?!3) q!0)) (b?!3)) (- 0))) (<= (- l1!3) (- 0))) (<= (- l2!3) (- 0))) (= (+ (- ifres!22) res!38) (- 0))) (or (and (= l1!3 (- 0)) (= (+ ifres!22 (- 3)) (- 0))) (and (and (and (and (and (and (and (or (or (<= (+ arg!35 1) (- 0)) (<= (+ arg!36 1) (- 0))) (<= (+ (+ (* (- 7) arg!35) r!31) (- 5)) (- 0))) (= (+ (- ifres!26) r!31) (- 0))) (or (and (= arg!35 (- 0)) (= (+ ifres!26 (- 3)) (- 0))) (and (and (and (and (and (or (or (<= (+ arg!43 1) (- 0)) (<= (+ arg!44 1) (- 0))) (<= (+ (+ (* (- 7) arg!43) r!35) (- 5)) (- 0))) (or (<= (+ arg!35 1) (- 0)) (<= (+ (- arg!35) 1) (- 0)))) (= (+ (- ifres!26 r!35) (- 5)) (- 0))) (= (+ (+ (- arg!35) arg!43) 1) (- 0))) (= (+ (+ (- arg!36) arg!44) (- 1)) (- 0))) (= r!35 (concat!3 arg!43 arg!44))))) (or (<= (+ l1!3 1) (- 0)) (<= (+ (- l1!3) 1) (- 0)))) (= (+ (- ifres!22 r!31) (- 5)) (- 0))) (= (+ (- arg!35 l1!3) 1) (- 0))) (= (+ (- arg!36 l2!3) (- 1)) (- 0))) (= r!31 (concat!3 arg!35 arg!36))))) (<= (+ (+ (- res!38) (* 7 l1!3)) 6) (- 0))) (<= (- l1!4) (- 0))) (<= (- l2!4) (- 0))) (= (- res!39 ifres!24) (- 0))) (or (and (= l1!4 (- 0)) (= (+ ifres!24 (- 3)) (- 0))) (and (and (and (and (and (and (and (or (or (<= (+ arg!39 1) (- 0)) (<= (+ arg!40 1) (- 0))) (<= (+ (+ (* (- 9) arg!39) r!33) (- 4)) (- 0))) (= (+ (- ifres!27) r!33) (- 0))) (or (and (= arg!39 (- 0)) (= (+ ifres!27 (- 3)) (- 0))) (and (and (and (and (or (<= (+ arg!39 1) (- 0)) (<= (+ (- arg!39) 1) (- 0))) (= (+ (- ifres!27 r!36) (- 6)) (- 0))) (= (+ (+ (- arg!39) arg!45) 1) (- 0))) (= (+ (- arg!46 arg!40) (- 1)) (- 0))) (= r!36 (reverseRec!3 arg!45 arg!46))))) (or (<= (+ l1!4 1) (- 0)) (<= (+ (- l1!4) 1) (- 0)))) (= (+ (- ifres!24 r!33) (- 6)) (- 0))) (= (+ (+ (- l1!4) arg!39) 1) (- 0))) (= (+ (+ (- l2!4) arg!40) (- 1)) (- 0))) (= r!33 (reverseRec!3 arg!39 arg!40))))) (<= (+ (+ (- res!39) (* 9 l1!4)) 5) (- 0)))))

(check-synth)

